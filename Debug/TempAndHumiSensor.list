
TempAndHumiSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  0800ca68  0800ca68  0001ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d388  0800d388  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d390  0800d390  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d390  0800d390  0001d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800d398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000025c  0800d5f4  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800d5f4  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018020  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425d  00000000  00000000  000382a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a200  00000000  00000000  0003ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e547  00000000  00000000  00058f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef9b  00000000  00000000  00077457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001063f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  00106444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000025c 	.word	0x2000025c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ca4c 	.word	0x0800ca4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000260 	.word	0x20000260
 8000104:	0800ca4c 	.word	0x0800ca4c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcdb 	bl	8001df8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc2b 	bl	8001ca8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fccd 	bl	8001df8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcc3 	bl	8001df8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc53 	bl	8001d2c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc49 	bl	8001d2c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 fb90 	bl	8002c70 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 fcc5 	bl	8000ee4 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fb11 	bl	8000b88 <__aeabi_fsub>
 8000566:	f000 fcbd 	bl	8000ee4 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f002 fb94 	bl	8002cc0 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f002 fb8f 	bl	8002cc0 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_fdiv>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	4646      	mov	r6, r8
 8000712:	46d6      	mov	lr, sl
 8000714:	0245      	lsls	r5, r0, #9
 8000716:	b5c0      	push	{r6, r7, lr}
 8000718:	0047      	lsls	r7, r0, #1
 800071a:	1c0c      	adds	r4, r1, #0
 800071c:	0a6d      	lsrs	r5, r5, #9
 800071e:	0e3f      	lsrs	r7, r7, #24
 8000720:	0fc6      	lsrs	r6, r0, #31
 8000722:	2f00      	cmp	r7, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_fdiv+0x1c>
 8000726:	e070      	b.n	800080a <__aeabi_fdiv+0xfe>
 8000728:	2fff      	cmp	r7, #255	; 0xff
 800072a:	d100      	bne.n	800072e <__aeabi_fdiv+0x22>
 800072c:	e075      	b.n	800081a <__aeabi_fdiv+0x10e>
 800072e:	00eb      	lsls	r3, r5, #3
 8000730:	2580      	movs	r5, #128	; 0x80
 8000732:	04ed      	lsls	r5, r5, #19
 8000734:	431d      	orrs	r5, r3
 8000736:	2300      	movs	r3, #0
 8000738:	4699      	mov	r9, r3
 800073a:	469a      	mov	sl, r3
 800073c:	3f7f      	subs	r7, #127	; 0x7f
 800073e:	0260      	lsls	r0, r4, #9
 8000740:	0a43      	lsrs	r3, r0, #9
 8000742:	4698      	mov	r8, r3
 8000744:	0063      	lsls	r3, r4, #1
 8000746:	0e1b      	lsrs	r3, r3, #24
 8000748:	0fe4      	lsrs	r4, r4, #31
 800074a:	2b00      	cmp	r3, #0
 800074c:	d04e      	beq.n	80007ec <__aeabi_fdiv+0xe0>
 800074e:	2bff      	cmp	r3, #255	; 0xff
 8000750:	d046      	beq.n	80007e0 <__aeabi_fdiv+0xd4>
 8000752:	4642      	mov	r2, r8
 8000754:	00d0      	lsls	r0, r2, #3
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	04d2      	lsls	r2, r2, #19
 800075a:	4302      	orrs	r2, r0
 800075c:	4690      	mov	r8, r2
 800075e:	2200      	movs	r2, #0
 8000760:	3b7f      	subs	r3, #127	; 0x7f
 8000762:	0031      	movs	r1, r6
 8000764:	1aff      	subs	r7, r7, r3
 8000766:	464b      	mov	r3, r9
 8000768:	4061      	eors	r1, r4
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4313      	orrs	r3, r2
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d900      	bls.n	8000774 <__aeabi_fdiv+0x68>
 8000772:	e0b5      	b.n	80008e0 <__aeabi_fdiv+0x1d4>
 8000774:	486e      	ldr	r0, [pc, #440]	; (8000930 <__aeabi_fdiv+0x224>)
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	58c3      	ldr	r3, [r0, r3]
 800077a:	469f      	mov	pc, r3
 800077c:	2300      	movs	r3, #0
 800077e:	4698      	mov	r8, r3
 8000780:	0026      	movs	r6, r4
 8000782:	4645      	mov	r5, r8
 8000784:	4692      	mov	sl, r2
 8000786:	4653      	mov	r3, sl
 8000788:	2b02      	cmp	r3, #2
 800078a:	d100      	bne.n	800078e <__aeabi_fdiv+0x82>
 800078c:	e089      	b.n	80008a2 <__aeabi_fdiv+0x196>
 800078e:	2b03      	cmp	r3, #3
 8000790:	d100      	bne.n	8000794 <__aeabi_fdiv+0x88>
 8000792:	e09e      	b.n	80008d2 <__aeabi_fdiv+0x1c6>
 8000794:	2b01      	cmp	r3, #1
 8000796:	d018      	beq.n	80007ca <__aeabi_fdiv+0xbe>
 8000798:	003b      	movs	r3, r7
 800079a:	337f      	adds	r3, #127	; 0x7f
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd69      	ble.n	8000874 <__aeabi_fdiv+0x168>
 80007a0:	076a      	lsls	r2, r5, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fdiv+0xa2>
 80007a4:	220f      	movs	r2, #15
 80007a6:	402a      	ands	r2, r5
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fdiv+0xa2>
 80007ac:	3504      	adds	r5, #4
 80007ae:	012a      	lsls	r2, r5, #4
 80007b0:	d503      	bpl.n	80007ba <__aeabi_fdiv+0xae>
 80007b2:	4b60      	ldr	r3, [pc, #384]	; (8000934 <__aeabi_fdiv+0x228>)
 80007b4:	401d      	ands	r5, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	3380      	adds	r3, #128	; 0x80
 80007ba:	2bfe      	cmp	r3, #254	; 0xfe
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_fdiv+0xb4>
 80007be:	e070      	b.n	80008a2 <__aeabi_fdiv+0x196>
 80007c0:	01ad      	lsls	r5, r5, #6
 80007c2:	0a6d      	lsrs	r5, r5, #9
 80007c4:	b2d8      	uxtb	r0, r3
 80007c6:	e002      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80007c8:	000e      	movs	r6, r1
 80007ca:	2000      	movs	r0, #0
 80007cc:	2500      	movs	r5, #0
 80007ce:	05c0      	lsls	r0, r0, #23
 80007d0:	4328      	orrs	r0, r5
 80007d2:	07f6      	lsls	r6, r6, #31
 80007d4:	4330      	orrs	r0, r6
 80007d6:	bce0      	pop	{r5, r6, r7}
 80007d8:	46ba      	mov	sl, r7
 80007da:	46b1      	mov	r9, r6
 80007dc:	46a8      	mov	r8, r5
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e0:	4643      	mov	r3, r8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13f      	bne.n	8000866 <__aeabi_fdiv+0x15a>
 80007e6:	2202      	movs	r2, #2
 80007e8:	3fff      	subs	r7, #255	; 0xff
 80007ea:	e003      	b.n	80007f4 <__aeabi_fdiv+0xe8>
 80007ec:	4643      	mov	r3, r8
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d12d      	bne.n	800084e <__aeabi_fdiv+0x142>
 80007f2:	2201      	movs	r2, #1
 80007f4:	0031      	movs	r1, r6
 80007f6:	464b      	mov	r3, r9
 80007f8:	4061      	eors	r1, r4
 80007fa:	b2c9      	uxtb	r1, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d834      	bhi.n	800086c <__aeabi_fdiv+0x160>
 8000802:	484d      	ldr	r0, [pc, #308]	; (8000938 <__aeabi_fdiv+0x22c>)
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	58c3      	ldr	r3, [r0, r3]
 8000808:	469f      	mov	pc, r3
 800080a:	2d00      	cmp	r5, #0
 800080c:	d113      	bne.n	8000836 <__aeabi_fdiv+0x12a>
 800080e:	2304      	movs	r3, #4
 8000810:	4699      	mov	r9, r3
 8000812:	3b03      	subs	r3, #3
 8000814:	2700      	movs	r7, #0
 8000816:	469a      	mov	sl, r3
 8000818:	e791      	b.n	800073e <__aeabi_fdiv+0x32>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d105      	bne.n	800082a <__aeabi_fdiv+0x11e>
 800081e:	2308      	movs	r3, #8
 8000820:	4699      	mov	r9, r3
 8000822:	3b06      	subs	r3, #6
 8000824:	27ff      	movs	r7, #255	; 0xff
 8000826:	469a      	mov	sl, r3
 8000828:	e789      	b.n	800073e <__aeabi_fdiv+0x32>
 800082a:	230c      	movs	r3, #12
 800082c:	4699      	mov	r9, r3
 800082e:	3b09      	subs	r3, #9
 8000830:	27ff      	movs	r7, #255	; 0xff
 8000832:	469a      	mov	sl, r3
 8000834:	e783      	b.n	800073e <__aeabi_fdiv+0x32>
 8000836:	0028      	movs	r0, r5
 8000838:	f002 fa24 	bl	8002c84 <__clzsi2>
 800083c:	2776      	movs	r7, #118	; 0x76
 800083e:	1f43      	subs	r3, r0, #5
 8000840:	409d      	lsls	r5, r3
 8000842:	2300      	movs	r3, #0
 8000844:	427f      	negs	r7, r7
 8000846:	4699      	mov	r9, r3
 8000848:	469a      	mov	sl, r3
 800084a:	1a3f      	subs	r7, r7, r0
 800084c:	e777      	b.n	800073e <__aeabi_fdiv+0x32>
 800084e:	4640      	mov	r0, r8
 8000850:	f002 fa18 	bl	8002c84 <__clzsi2>
 8000854:	4642      	mov	r2, r8
 8000856:	1f43      	subs	r3, r0, #5
 8000858:	409a      	lsls	r2, r3
 800085a:	2376      	movs	r3, #118	; 0x76
 800085c:	425b      	negs	r3, r3
 800085e:	4690      	mov	r8, r2
 8000860:	1a1b      	subs	r3, r3, r0
 8000862:	2200      	movs	r2, #0
 8000864:	e77d      	b.n	8000762 <__aeabi_fdiv+0x56>
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	2203      	movs	r2, #3
 800086a:	e77a      	b.n	8000762 <__aeabi_fdiv+0x56>
 800086c:	000e      	movs	r6, r1
 800086e:	20ff      	movs	r0, #255	; 0xff
 8000870:	2500      	movs	r5, #0
 8000872:	e7ac      	b.n	80007ce <__aeabi_fdiv+0xc2>
 8000874:	2001      	movs	r0, #1
 8000876:	1ac0      	subs	r0, r0, r3
 8000878:	281b      	cmp	r0, #27
 800087a:	dca6      	bgt.n	80007ca <__aeabi_fdiv+0xbe>
 800087c:	379e      	adds	r7, #158	; 0x9e
 800087e:	002a      	movs	r2, r5
 8000880:	40bd      	lsls	r5, r7
 8000882:	40c2      	lsrs	r2, r0
 8000884:	1e6b      	subs	r3, r5, #1
 8000886:	419d      	sbcs	r5, r3
 8000888:	4315      	orrs	r5, r2
 800088a:	076b      	lsls	r3, r5, #29
 800088c:	d004      	beq.n	8000898 <__aeabi_fdiv+0x18c>
 800088e:	230f      	movs	r3, #15
 8000890:	402b      	ands	r3, r5
 8000892:	2b04      	cmp	r3, #4
 8000894:	d000      	beq.n	8000898 <__aeabi_fdiv+0x18c>
 8000896:	3504      	adds	r5, #4
 8000898:	016b      	lsls	r3, r5, #5
 800089a:	d544      	bpl.n	8000926 <__aeabi_fdiv+0x21a>
 800089c:	2001      	movs	r0, #1
 800089e:	2500      	movs	r5, #0
 80008a0:	e795      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	2500      	movs	r5, #0
 80008a6:	e792      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80008a8:	2580      	movs	r5, #128	; 0x80
 80008aa:	2600      	movs	r6, #0
 80008ac:	20ff      	movs	r0, #255	; 0xff
 80008ae:	03ed      	lsls	r5, r5, #15
 80008b0:	e78d      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80008b2:	2300      	movs	r3, #0
 80008b4:	4698      	mov	r8, r3
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	03c0      	lsls	r0, r0, #15
 80008ba:	4205      	tst	r5, r0
 80008bc:	d009      	beq.n	80008d2 <__aeabi_fdiv+0x1c6>
 80008be:	4643      	mov	r3, r8
 80008c0:	4203      	tst	r3, r0
 80008c2:	d106      	bne.n	80008d2 <__aeabi_fdiv+0x1c6>
 80008c4:	4645      	mov	r5, r8
 80008c6:	4305      	orrs	r5, r0
 80008c8:	026d      	lsls	r5, r5, #9
 80008ca:	0026      	movs	r6, r4
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	0a6d      	lsrs	r5, r5, #9
 80008d0:	e77d      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	03c0      	lsls	r0, r0, #15
 80008d6:	4305      	orrs	r5, r0
 80008d8:	026d      	lsls	r5, r5, #9
 80008da:	20ff      	movs	r0, #255	; 0xff
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	e776      	b.n	80007ce <__aeabi_fdiv+0xc2>
 80008e0:	4642      	mov	r2, r8
 80008e2:	016b      	lsls	r3, r5, #5
 80008e4:	0150      	lsls	r0, r2, #5
 80008e6:	4283      	cmp	r3, r0
 80008e8:	d219      	bcs.n	800091e <__aeabi_fdiv+0x212>
 80008ea:	221b      	movs	r2, #27
 80008ec:	2500      	movs	r5, #0
 80008ee:	3f01      	subs	r7, #1
 80008f0:	2601      	movs	r6, #1
 80008f2:	001c      	movs	r4, r3
 80008f4:	006d      	lsls	r5, r5, #1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	db01      	blt.n	8000900 <__aeabi_fdiv+0x1f4>
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d801      	bhi.n	8000904 <__aeabi_fdiv+0x1f8>
 8000900:	1a1b      	subs	r3, r3, r0
 8000902:	4335      	orrs	r5, r6
 8000904:	3a01      	subs	r2, #1
 8000906:	2a00      	cmp	r2, #0
 8000908:	d1f3      	bne.n	80008f2 <__aeabi_fdiv+0x1e6>
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4193      	sbcs	r3, r2
 800090e:	431d      	orrs	r5, r3
 8000910:	003b      	movs	r3, r7
 8000912:	337f      	adds	r3, #127	; 0x7f
 8000914:	000e      	movs	r6, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	dd00      	ble.n	800091c <__aeabi_fdiv+0x210>
 800091a:	e741      	b.n	80007a0 <__aeabi_fdiv+0x94>
 800091c:	e7aa      	b.n	8000874 <__aeabi_fdiv+0x168>
 800091e:	221a      	movs	r2, #26
 8000920:	2501      	movs	r5, #1
 8000922:	1a1b      	subs	r3, r3, r0
 8000924:	e7e4      	b.n	80008f0 <__aeabi_fdiv+0x1e4>
 8000926:	01ad      	lsls	r5, r5, #6
 8000928:	2000      	movs	r0, #0
 800092a:	0a6d      	lsrs	r5, r5, #9
 800092c:	e74f      	b.n	80007ce <__aeabi_fdiv+0xc2>
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	0800cb9c 	.word	0x0800cb9c
 8000934:	f7ffffff 	.word	0xf7ffffff
 8000938:	0800cbdc 	.word	0x0800cbdc

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0244      	lsls	r4, r0, #9
 8000946:	0045      	lsls	r5, r0, #1
 8000948:	b5c0      	push	{r6, r7, lr}
 800094a:	0a64      	lsrs	r4, r4, #9
 800094c:	1c0f      	adds	r7, r1, #0
 800094e:	0e2d      	lsrs	r5, r5, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2d00      	cmp	r5, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fmul+0x1c>
 8000956:	e08d      	b.n	8000a74 <__aeabi_fmul+0x138>
 8000958:	2dff      	cmp	r5, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fmul+0x22>
 800095c:	e092      	b.n	8000a84 <__aeabi_fmul+0x148>
 800095e:	2300      	movs	r3, #0
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00e4      	lsls	r4, r4, #3
 8000968:	04c0      	lsls	r0, r0, #19
 800096a:	4304      	orrs	r4, r0
 800096c:	3d7f      	subs	r5, #127	; 0x7f
 800096e:	0278      	lsls	r0, r7, #9
 8000970:	0a43      	lsrs	r3, r0, #9
 8000972:	4698      	mov	r8, r3
 8000974:	007b      	lsls	r3, r7, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fff      	lsrs	r7, r7, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fmul+0x44>
 800097e:	e070      	b.n	8000a62 <__aeabi_fmul+0x126>
 8000980:	2bff      	cmp	r3, #255	; 0xff
 8000982:	d100      	bne.n	8000986 <__aeabi_fmul+0x4a>
 8000984:	e086      	b.n	8000a94 <__aeabi_fmul+0x158>
 8000986:	4642      	mov	r2, r8
 8000988:	00d0      	lsls	r0, r2, #3
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	3b7f      	subs	r3, #127	; 0x7f
 800098e:	18ed      	adds	r5, r5, r3
 8000990:	2300      	movs	r3, #0
 8000992:	04d2      	lsls	r2, r2, #19
 8000994:	4302      	orrs	r2, r0
 8000996:	4690      	mov	r8, r2
 8000998:	469c      	mov	ip, r3
 800099a:	0031      	movs	r1, r6
 800099c:	464b      	mov	r3, r9
 800099e:	4079      	eors	r1, r7
 80009a0:	1c68      	adds	r0, r5, #1
 80009a2:	2b0f      	cmp	r3, #15
 80009a4:	d81c      	bhi.n	80009e0 <__aeabi_fmul+0xa4>
 80009a6:	4a76      	ldr	r2, [pc, #472]	; (8000b80 <__aeabi_fmul+0x244>)
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	58d3      	ldr	r3, [r2, r3]
 80009ac:	469f      	mov	pc, r3
 80009ae:	0039      	movs	r1, r7
 80009b0:	4644      	mov	r4, r8
 80009b2:	46e2      	mov	sl, ip
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d00f      	beq.n	80009da <__aeabi_fmul+0x9e>
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_fmul+0x84>
 80009be:	e0d7      	b.n	8000b70 <__aeabi_fmul+0x234>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d137      	bne.n	8000a34 <__aeabi_fmul+0xf8>
 80009c4:	2000      	movs	r0, #0
 80009c6:	2400      	movs	r4, #0
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4320      	orrs	r0, r4
 80009cc:	07c9      	lsls	r1, r1, #31
 80009ce:	4308      	orrs	r0, r1
 80009d0:	bce0      	pop	{r5, r6, r7}
 80009d2:	46ba      	mov	sl, r7
 80009d4:	46b1      	mov	r9, r6
 80009d6:	46a8      	mov	r8, r5
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	20ff      	movs	r0, #255	; 0xff
 80009dc:	2400      	movs	r4, #0
 80009de:	e7f3      	b.n	80009c8 <__aeabi_fmul+0x8c>
 80009e0:	0c26      	lsrs	r6, r4, #16
 80009e2:	0424      	lsls	r4, r4, #16
 80009e4:	0c22      	lsrs	r2, r4, #16
 80009e6:	4644      	mov	r4, r8
 80009e8:	0424      	lsls	r4, r4, #16
 80009ea:	0c24      	lsrs	r4, r4, #16
 80009ec:	4643      	mov	r3, r8
 80009ee:	0027      	movs	r7, r4
 80009f0:	0c1b      	lsrs	r3, r3, #16
 80009f2:	4357      	muls	r7, r2
 80009f4:	4374      	muls	r4, r6
 80009f6:	435a      	muls	r2, r3
 80009f8:	435e      	muls	r6, r3
 80009fa:	1912      	adds	r2, r2, r4
 80009fc:	0c3b      	lsrs	r3, r7, #16
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	429c      	cmp	r4, r3
 8000a02:	d903      	bls.n	8000a0c <__aeabi_fmul+0xd0>
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	0252      	lsls	r2, r2, #9
 8000a08:	4694      	mov	ip, r2
 8000a0a:	4466      	add	r6, ip
 8000a0c:	043f      	lsls	r7, r7, #16
 8000a0e:	041a      	lsls	r2, r3, #16
 8000a10:	0c3f      	lsrs	r7, r7, #16
 8000a12:	19d2      	adds	r2, r2, r7
 8000a14:	0194      	lsls	r4, r2, #6
 8000a16:	1e67      	subs	r7, r4, #1
 8000a18:	41bc      	sbcs	r4, r7
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	0e92      	lsrs	r2, r2, #26
 8000a1e:	199b      	adds	r3, r3, r6
 8000a20:	4314      	orrs	r4, r2
 8000a22:	019b      	lsls	r3, r3, #6
 8000a24:	431c      	orrs	r4, r3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	d400      	bmi.n	8000a2c <__aeabi_fmul+0xf0>
 8000a2a:	e09b      	b.n	8000b64 <__aeabi_fmul+0x228>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	0862      	lsrs	r2, r4, #1
 8000a30:	401c      	ands	r4, r3
 8000a32:	4314      	orrs	r4, r2
 8000a34:	0002      	movs	r2, r0
 8000a36:	327f      	adds	r2, #127	; 0x7f
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	dd64      	ble.n	8000b06 <__aeabi_fmul+0x1ca>
 8000a3c:	0763      	lsls	r3, r4, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fmul+0x10e>
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fmul+0x10e>
 8000a48:	3404      	adds	r4, #4
 8000a4a:	0123      	lsls	r3, r4, #4
 8000a4c:	d503      	bpl.n	8000a56 <__aeabi_fmul+0x11a>
 8000a4e:	0002      	movs	r2, r0
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <__aeabi_fmul+0x248>)
 8000a52:	3280      	adds	r2, #128	; 0x80
 8000a54:	401c      	ands	r4, r3
 8000a56:	2afe      	cmp	r2, #254	; 0xfe
 8000a58:	dcbf      	bgt.n	80009da <__aeabi_fmul+0x9e>
 8000a5a:	01a4      	lsls	r4, r4, #6
 8000a5c:	0a64      	lsrs	r4, r4, #9
 8000a5e:	b2d0      	uxtb	r0, r2
 8000a60:	e7b2      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000a62:	4643      	mov	r3, r8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d13d      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a68:	464a      	mov	r2, r9
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	4691      	mov	r9, r2
 8000a70:	469c      	mov	ip, r3
 8000a72:	e792      	b.n	800099a <__aeabi_fmul+0x5e>
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	d129      	bne.n	8000acc <__aeabi_fmul+0x190>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	4699      	mov	r9, r3
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	2500      	movs	r5, #0
 8000a80:	469a      	mov	sl, r3
 8000a82:	e774      	b.n	800096e <__aeabi_fmul+0x32>
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d11b      	bne.n	8000ac0 <__aeabi_fmul+0x184>
 8000a88:	2308      	movs	r3, #8
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	3b06      	subs	r3, #6
 8000a8e:	25ff      	movs	r5, #255	; 0xff
 8000a90:	469a      	mov	sl, r3
 8000a92:	e76c      	b.n	800096e <__aeabi_fmul+0x32>
 8000a94:	4643      	mov	r3, r8
 8000a96:	35ff      	adds	r5, #255	; 0xff
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10b      	bne.n	8000ab4 <__aeabi_fmul+0x178>
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	4691      	mov	r9, r2
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	e778      	b.n	800099a <__aeabi_fmul+0x5e>
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	0031      	movs	r1, r6
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fmul+0x176>
 8000ab0:	e783      	b.n	80009ba <__aeabi_fmul+0x7e>
 8000ab2:	e792      	b.n	80009da <__aeabi_fmul+0x9e>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	464a      	mov	r2, r9
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	e76c      	b.n	800099a <__aeabi_fmul+0x5e>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	3b09      	subs	r3, #9
 8000ac6:	25ff      	movs	r5, #255	; 0xff
 8000ac8:	469a      	mov	sl, r3
 8000aca:	e750      	b.n	800096e <__aeabi_fmul+0x32>
 8000acc:	0020      	movs	r0, r4
 8000ace:	f002 f8d9 	bl	8002c84 <__clzsi2>
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	1f43      	subs	r3, r0, #5
 8000ad6:	409c      	lsls	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	426d      	negs	r5, r5
 8000adc:	4699      	mov	r9, r3
 8000ade:	469a      	mov	sl, r3
 8000ae0:	1a2d      	subs	r5, r5, r0
 8000ae2:	e744      	b.n	800096e <__aeabi_fmul+0x32>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	f002 f8cd 	bl	8002c84 <__clzsi2>
 8000aea:	4642      	mov	r2, r8
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	409a      	lsls	r2, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	1a2d      	subs	r5, r5, r0
 8000af4:	4690      	mov	r8, r2
 8000af6:	469c      	mov	ip, r3
 8000af8:	3d76      	subs	r5, #118	; 0x76
 8000afa:	e74e      	b.n	800099a <__aeabi_fmul+0x5e>
 8000afc:	2480      	movs	r4, #128	; 0x80
 8000afe:	2100      	movs	r1, #0
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	03e4      	lsls	r4, r4, #15
 8000b04:	e760      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b06:	2301      	movs	r3, #1
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	2b1b      	cmp	r3, #27
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_fmul+0x1d4>
 8000b0e:	e759      	b.n	80009c4 <__aeabi_fmul+0x88>
 8000b10:	0022      	movs	r2, r4
 8000b12:	309e      	adds	r0, #158	; 0x9e
 8000b14:	40da      	lsrs	r2, r3
 8000b16:	4084      	lsls	r4, r0
 8000b18:	0013      	movs	r3, r2
 8000b1a:	1e62      	subs	r2, r4, #1
 8000b1c:	4194      	sbcs	r4, r2
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	0763      	lsls	r3, r4, #29
 8000b22:	d004      	beq.n	8000b2e <__aeabi_fmul+0x1f2>
 8000b24:	230f      	movs	r3, #15
 8000b26:	4023      	ands	r3, r4
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_fmul+0x1f2>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	0163      	lsls	r3, r4, #5
 8000b30:	d51a      	bpl.n	8000b68 <__aeabi_fmul+0x22c>
 8000b32:	2001      	movs	r0, #1
 8000b34:	2400      	movs	r4, #0
 8000b36:	e747      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b38:	2080      	movs	r0, #128	; 0x80
 8000b3a:	03c0      	lsls	r0, r0, #15
 8000b3c:	4204      	tst	r4, r0
 8000b3e:	d009      	beq.n	8000b54 <__aeabi_fmul+0x218>
 8000b40:	4643      	mov	r3, r8
 8000b42:	4203      	tst	r3, r0
 8000b44:	d106      	bne.n	8000b54 <__aeabi_fmul+0x218>
 8000b46:	4644      	mov	r4, r8
 8000b48:	4304      	orrs	r4, r0
 8000b4a:	0264      	lsls	r4, r4, #9
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	20ff      	movs	r0, #255	; 0xff
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	e739      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b54:	2080      	movs	r0, #128	; 0x80
 8000b56:	03c0      	lsls	r0, r0, #15
 8000b58:	4304      	orrs	r4, r0
 8000b5a:	0264      	lsls	r4, r4, #9
 8000b5c:	0031      	movs	r1, r6
 8000b5e:	20ff      	movs	r0, #255	; 0xff
 8000b60:	0a64      	lsrs	r4, r4, #9
 8000b62:	e731      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b64:	0028      	movs	r0, r5
 8000b66:	e765      	b.n	8000a34 <__aeabi_fmul+0xf8>
 8000b68:	01a4      	lsls	r4, r4, #6
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	e72b      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	03c0      	lsls	r0, r0, #15
 8000b74:	4304      	orrs	r4, r0
 8000b76:	0264      	lsls	r4, r4, #9
 8000b78:	20ff      	movs	r0, #255	; 0xff
 8000b7a:	0a64      	lsrs	r4, r4, #9
 8000b7c:	e724      	b.n	80009c8 <__aeabi_fmul+0x8c>
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	0800cc1c 	.word	0x0800cc1c
 8000b84:	f7ffffff 	.word	0xf7ffffff

08000b88 <__aeabi_fsub>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	46ce      	mov	lr, r9
 8000b8c:	4647      	mov	r7, r8
 8000b8e:	0243      	lsls	r3, r0, #9
 8000b90:	0a5b      	lsrs	r3, r3, #9
 8000b92:	024e      	lsls	r6, r1, #9
 8000b94:	00da      	lsls	r2, r3, #3
 8000b96:	4694      	mov	ip, r2
 8000b98:	0a72      	lsrs	r2, r6, #9
 8000b9a:	4691      	mov	r9, r2
 8000b9c:	0045      	lsls	r5, r0, #1
 8000b9e:	004a      	lsls	r2, r1, #1
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	0e2d      	lsrs	r5, r5, #24
 8000ba4:	001f      	movs	r7, r3
 8000ba6:	0fc4      	lsrs	r4, r0, #31
 8000ba8:	0e12      	lsrs	r2, r2, #24
 8000baa:	0fc9      	lsrs	r1, r1, #31
 8000bac:	09b6      	lsrs	r6, r6, #6
 8000bae:	2aff      	cmp	r2, #255	; 0xff
 8000bb0:	d05b      	beq.n	8000c6a <__aeabi_fsub+0xe2>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4041      	eors	r1, r0
 8000bb6:	428c      	cmp	r4, r1
 8000bb8:	d039      	beq.n	8000c2e <__aeabi_fsub+0xa6>
 8000bba:	1aa8      	subs	r0, r5, r2
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	dd5a      	ble.n	8000c76 <__aeabi_fsub+0xee>
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d06a      	beq.n	8000c9a <__aeabi_fsub+0x112>
 8000bc4:	2dff      	cmp	r5, #255	; 0xff
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x42>
 8000bc8:	e0d9      	b.n	8000d7e <__aeabi_fsub+0x1f6>
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	04d2      	lsls	r2, r2, #19
 8000bce:	4316      	orrs	r6, r2
 8000bd0:	281b      	cmp	r0, #27
 8000bd2:	dc00      	bgt.n	8000bd6 <__aeabi_fsub+0x4e>
 8000bd4:	e0e9      	b.n	8000daa <__aeabi_fsub+0x222>
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	4663      	mov	r3, ip
 8000bda:	1a18      	subs	r0, r3, r0
 8000bdc:	0143      	lsls	r3, r0, #5
 8000bde:	d400      	bmi.n	8000be2 <__aeabi_fsub+0x5a>
 8000be0:	e0b4      	b.n	8000d4c <__aeabi_fsub+0x1c4>
 8000be2:	0180      	lsls	r0, r0, #6
 8000be4:	0987      	lsrs	r7, r0, #6
 8000be6:	0038      	movs	r0, r7
 8000be8:	f002 f84c 	bl	8002c84 <__clzsi2>
 8000bec:	3805      	subs	r0, #5
 8000bee:	4087      	lsls	r7, r0
 8000bf0:	4285      	cmp	r5, r0
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_fsub+0x6e>
 8000bf4:	e0cc      	b.n	8000d90 <__aeabi_fsub+0x208>
 8000bf6:	1a2d      	subs	r5, r5, r0
 8000bf8:	48b5      	ldr	r0, [pc, #724]	; (8000ed0 <__aeabi_fsub+0x348>)
 8000bfa:	4038      	ands	r0, r7
 8000bfc:	0743      	lsls	r3, r0, #29
 8000bfe:	d004      	beq.n	8000c0a <__aeabi_fsub+0x82>
 8000c00:	230f      	movs	r3, #15
 8000c02:	4003      	ands	r3, r0
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fsub+0x82>
 8000c08:	3004      	adds	r0, #4
 8000c0a:	0143      	lsls	r3, r0, #5
 8000c0c:	d400      	bmi.n	8000c10 <__aeabi_fsub+0x88>
 8000c0e:	e0a0      	b.n	8000d52 <__aeabi_fsub+0x1ca>
 8000c10:	1c6a      	adds	r2, r5, #1
 8000c12:	2dfe      	cmp	r5, #254	; 0xfe
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0x90>
 8000c16:	e08d      	b.n	8000d34 <__aeabi_fsub+0x1ac>
 8000c18:	0180      	lsls	r0, r0, #6
 8000c1a:	0a47      	lsrs	r7, r0, #9
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	05d0      	lsls	r0, r2, #23
 8000c20:	4338      	orrs	r0, r7
 8000c22:	07e4      	lsls	r4, r4, #31
 8000c24:	4320      	orrs	r0, r4
 8000c26:	bcc0      	pop	{r6, r7}
 8000c28:	46b9      	mov	r9, r7
 8000c2a:	46b0      	mov	r8, r6
 8000c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2e:	1aa8      	subs	r0, r5, r2
 8000c30:	4680      	mov	r8, r0
 8000c32:	2800      	cmp	r0, #0
 8000c34:	dd45      	ble.n	8000cc2 <__aeabi_fsub+0x13a>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d070      	beq.n	8000d1c <__aeabi_fsub+0x194>
 8000c3a:	2dff      	cmp	r5, #255	; 0xff
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0xb8>
 8000c3e:	e09e      	b.n	8000d7e <__aeabi_fsub+0x1f6>
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	04db      	lsls	r3, r3, #19
 8000c44:	431e      	orrs	r6, r3
 8000c46:	4643      	mov	r3, r8
 8000c48:	2b1b      	cmp	r3, #27
 8000c4a:	dc00      	bgt.n	8000c4e <__aeabi_fsub+0xc6>
 8000c4c:	e0d2      	b.n	8000df4 <__aeabi_fsub+0x26c>
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4460      	add	r0, ip
 8000c52:	0143      	lsls	r3, r0, #5
 8000c54:	d57a      	bpl.n	8000d4c <__aeabi_fsub+0x1c4>
 8000c56:	3501      	adds	r5, #1
 8000c58:	2dff      	cmp	r5, #255	; 0xff
 8000c5a:	d06b      	beq.n	8000d34 <__aeabi_fsub+0x1ac>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4a9d      	ldr	r2, [pc, #628]	; (8000ed4 <__aeabi_fsub+0x34c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	0840      	lsrs	r0, r0, #1
 8000c64:	4010      	ands	r0, r2
 8000c66:	4318      	orrs	r0, r3
 8000c68:	e7c8      	b.n	8000bfc <__aeabi_fsub+0x74>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d020      	beq.n	8000cb0 <__aeabi_fsub+0x128>
 8000c6e:	428c      	cmp	r4, r1
 8000c70:	d023      	beq.n	8000cba <__aeabi_fsub+0x132>
 8000c72:	0028      	movs	r0, r5
 8000c74:	38ff      	subs	r0, #255	; 0xff
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d039      	beq.n	8000cee <__aeabi_fsub+0x166>
 8000c7a:	1b57      	subs	r7, r2, r5
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fsub+0xfa>
 8000c80:	e09d      	b.n	8000dbe <__aeabi_fsub+0x236>
 8000c82:	4663      	mov	r3, ip
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d100      	bne.n	8000c8a <__aeabi_fsub+0x102>
 8000c88:	e0db      	b.n	8000e42 <__aeabi_fsub+0x2ba>
 8000c8a:	1e7b      	subs	r3, r7, #1
 8000c8c:	2f01      	cmp	r7, #1
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x10a>
 8000c90:	e10d      	b.n	8000eae <__aeabi_fsub+0x326>
 8000c92:	2fff      	cmp	r7, #255	; 0xff
 8000c94:	d071      	beq.n	8000d7a <__aeabi_fsub+0x1f2>
 8000c96:	001f      	movs	r7, r3
 8000c98:	e098      	b.n	8000dcc <__aeabi_fsub+0x244>
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x118>
 8000c9e:	e0a7      	b.n	8000df0 <__aeabi_fsub+0x268>
 8000ca0:	1e42      	subs	r2, r0, #1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_fsub+0x120>
 8000ca6:	e0e6      	b.n	8000e76 <__aeabi_fsub+0x2ee>
 8000ca8:	28ff      	cmp	r0, #255	; 0xff
 8000caa:	d068      	beq.n	8000d7e <__aeabi_fsub+0x1f6>
 8000cac:	0010      	movs	r0, r2
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fsub+0x48>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4041      	eors	r1, r0
 8000cb4:	42a1      	cmp	r1, r4
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0x132>
 8000cb8:	e77f      	b.n	8000bba <__aeabi_fsub+0x32>
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	4680      	mov	r8, r0
 8000cc0:	44a8      	add	r8, r5
 8000cc2:	4640      	mov	r0, r8
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d038      	beq.n	8000d3a <__aeabi_fsub+0x1b2>
 8000cc8:	1b51      	subs	r1, r2, r5
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_fsub+0x148>
 8000cce:	e0ae      	b.n	8000e2e <__aeabi_fsub+0x2a6>
 8000cd0:	2aff      	cmp	r2, #255	; 0xff
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x14e>
 8000cd4:	e0df      	b.n	8000e96 <__aeabi_fsub+0x30e>
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	4660      	mov	r0, ip
 8000cda:	04db      	lsls	r3, r3, #19
 8000cdc:	4318      	orrs	r0, r3
 8000cde:	4684      	mov	ip, r0
 8000ce0:	291b      	cmp	r1, #27
 8000ce2:	dc00      	bgt.n	8000ce6 <__aeabi_fsub+0x15e>
 8000ce4:	e0d9      	b.n	8000e9a <__aeabi_fsub+0x312>
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	0015      	movs	r5, r2
 8000cea:	1980      	adds	r0, r0, r6
 8000cec:	e7b1      	b.n	8000c52 <__aeabi_fsub+0xca>
 8000cee:	20fe      	movs	r0, #254	; 0xfe
 8000cf0:	1c6a      	adds	r2, r5, #1
 8000cf2:	4210      	tst	r0, r2
 8000cf4:	d171      	bne.n	8000dda <__aeabi_fsub+0x252>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_fsub+0x174>
 8000cfa:	e0a6      	b.n	8000e4a <__aeabi_fsub+0x2c2>
 8000cfc:	4663      	mov	r3, ip
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x17c>
 8000d02:	e0d9      	b.n	8000eb8 <__aeabi_fsub+0x330>
 8000d04:	2200      	movs	r2, #0
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_fsub+0x184>
 8000d0a:	e788      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000d0c:	1b98      	subs	r0, r3, r6
 8000d0e:	0143      	lsls	r3, r0, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x18c>
 8000d12:	e0e1      	b.n	8000ed8 <__aeabi_fsub+0x350>
 8000d14:	4663      	mov	r3, ip
 8000d16:	000c      	movs	r4, r1
 8000d18:	1af0      	subs	r0, r6, r3
 8000d1a:	e76f      	b.n	8000bfc <__aeabi_fsub+0x74>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x19a>
 8000d20:	e0b7      	b.n	8000e92 <__aeabi_fsub+0x30a>
 8000d22:	0002      	movs	r2, r0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	2801      	cmp	r0, #1
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0x1a4>
 8000d2a:	e09c      	b.n	8000e66 <__aeabi_fsub+0x2de>
 8000d2c:	28ff      	cmp	r0, #255	; 0xff
 8000d2e:	d026      	beq.n	8000d7e <__aeabi_fsub+0x1f6>
 8000d30:	4690      	mov	r8, r2
 8000d32:	e788      	b.n	8000c46 <__aeabi_fsub+0xbe>
 8000d34:	22ff      	movs	r2, #255	; 0xff
 8000d36:	2700      	movs	r7, #0
 8000d38:	e771      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000d3a:	20fe      	movs	r0, #254	; 0xfe
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d064      	beq.n	8000e0c <__aeabi_fsub+0x284>
 8000d42:	2aff      	cmp	r2, #255	; 0xff
 8000d44:	d0f6      	beq.n	8000d34 <__aeabi_fsub+0x1ac>
 8000d46:	0015      	movs	r5, r2
 8000d48:	4466      	add	r6, ip
 8000d4a:	0870      	lsrs	r0, r6, #1
 8000d4c:	0743      	lsls	r3, r0, #29
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_fsub+0x1ca>
 8000d50:	e756      	b.n	8000c00 <__aeabi_fsub+0x78>
 8000d52:	08c3      	lsrs	r3, r0, #3
 8000d54:	2dff      	cmp	r5, #255	; 0xff
 8000d56:	d012      	beq.n	8000d7e <__aeabi_fsub+0x1f6>
 8000d58:	025b      	lsls	r3, r3, #9
 8000d5a:	0a5f      	lsrs	r7, r3, #9
 8000d5c:	b2ea      	uxtb	r2, r5
 8000d5e:	e75e      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000d60:	4662      	mov	r2, ip
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d100      	bne.n	8000d68 <__aeabi_fsub+0x1e0>
 8000d66:	e096      	b.n	8000e96 <__aeabi_fsub+0x30e>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d008      	beq.n	8000d7e <__aeabi_fsub+0x1f6>
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	03d2      	lsls	r2, r2, #15
 8000d70:	4213      	tst	r3, r2
 8000d72:	d004      	beq.n	8000d7e <__aeabi_fsub+0x1f6>
 8000d74:	4648      	mov	r0, r9
 8000d76:	4210      	tst	r0, r2
 8000d78:	d101      	bne.n	8000d7e <__aeabi_fsub+0x1f6>
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0d8      	beq.n	8000d34 <__aeabi_fsub+0x1ac>
 8000d82:	2780      	movs	r7, #128	; 0x80
 8000d84:	03ff      	lsls	r7, r7, #15
 8000d86:	431f      	orrs	r7, r3
 8000d88:	027f      	lsls	r7, r7, #9
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	0a7f      	lsrs	r7, r7, #9
 8000d8e:	e746      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000d90:	2320      	movs	r3, #32
 8000d92:	003a      	movs	r2, r7
 8000d94:	1b45      	subs	r5, r0, r5
 8000d96:	0038      	movs	r0, r7
 8000d98:	3501      	adds	r5, #1
 8000d9a:	40ea      	lsrs	r2, r5
 8000d9c:	1b5d      	subs	r5, r3, r5
 8000d9e:	40a8      	lsls	r0, r5
 8000da0:	1e43      	subs	r3, r0, #1
 8000da2:	4198      	sbcs	r0, r3
 8000da4:	2500      	movs	r5, #0
 8000da6:	4310      	orrs	r0, r2
 8000da8:	e728      	b.n	8000bfc <__aeabi_fsub+0x74>
 8000daa:	2320      	movs	r3, #32
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	0032      	movs	r2, r6
 8000db0:	409e      	lsls	r6, r3
 8000db2:	40c2      	lsrs	r2, r0
 8000db4:	0030      	movs	r0, r6
 8000db6:	1e43      	subs	r3, r0, #1
 8000db8:	4198      	sbcs	r0, r3
 8000dba:	4310      	orrs	r0, r2
 8000dbc:	e70c      	b.n	8000bd8 <__aeabi_fsub+0x50>
 8000dbe:	2aff      	cmp	r2, #255	; 0xff
 8000dc0:	d0db      	beq.n	8000d7a <__aeabi_fsub+0x1f2>
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	4660      	mov	r0, ip
 8000dc6:	04db      	lsls	r3, r3, #19
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	4684      	mov	ip, r0
 8000dcc:	2f1b      	cmp	r7, #27
 8000dce:	dd56      	ble.n	8000e7e <__aeabi_fsub+0x2f6>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	0015      	movs	r5, r2
 8000dd6:	1a30      	subs	r0, r6, r0
 8000dd8:	e700      	b.n	8000bdc <__aeabi_fsub+0x54>
 8000dda:	4663      	mov	r3, ip
 8000ddc:	1b9f      	subs	r7, r3, r6
 8000dde:	017b      	lsls	r3, r7, #5
 8000de0:	d43d      	bmi.n	8000e5e <__aeabi_fsub+0x2d6>
 8000de2:	2f00      	cmp	r7, #0
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x260>
 8000de6:	e6fe      	b.n	8000be6 <__aeabi_fsub+0x5e>
 8000de8:	2400      	movs	r4, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	2700      	movs	r7, #0
 8000dee:	e716      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000df0:	0005      	movs	r5, r0
 8000df2:	e7af      	b.n	8000d54 <__aeabi_fsub+0x1cc>
 8000df4:	0032      	movs	r2, r6
 8000df6:	4643      	mov	r3, r8
 8000df8:	4641      	mov	r1, r8
 8000dfa:	40da      	lsrs	r2, r3
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	1a5b      	subs	r3, r3, r1
 8000e00:	409e      	lsls	r6, r3
 8000e02:	0030      	movs	r0, r6
 8000e04:	1e43      	subs	r3, r0, #1
 8000e06:	4198      	sbcs	r0, r3
 8000e08:	4310      	orrs	r0, r2
 8000e0a:	e721      	b.n	8000c50 <__aeabi_fsub+0xc8>
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d1a7      	bne.n	8000d60 <__aeabi_fsub+0x1d8>
 8000e10:	4663      	mov	r3, ip
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d059      	beq.n	8000eca <__aeabi_fsub+0x342>
 8000e16:	2200      	movs	r2, #0
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x296>
 8000e1c:	e6ff      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000e1e:	0030      	movs	r0, r6
 8000e20:	4460      	add	r0, ip
 8000e22:	0143      	lsls	r3, r0, #5
 8000e24:	d592      	bpl.n	8000d4c <__aeabi_fsub+0x1c4>
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <__aeabi_fsub+0x348>)
 8000e28:	3501      	adds	r5, #1
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	e78e      	b.n	8000d4c <__aeabi_fsub+0x1c4>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d047      	beq.n	8000ec4 <__aeabi_fsub+0x33c>
 8000e34:	1e4b      	subs	r3, r1, #1
 8000e36:	2901      	cmp	r1, #1
 8000e38:	d015      	beq.n	8000e66 <__aeabi_fsub+0x2de>
 8000e3a:	29ff      	cmp	r1, #255	; 0xff
 8000e3c:	d02b      	beq.n	8000e96 <__aeabi_fsub+0x30e>
 8000e3e:	0019      	movs	r1, r3
 8000e40:	e74e      	b.n	8000ce0 <__aeabi_fsub+0x158>
 8000e42:	000c      	movs	r4, r1
 8000e44:	464b      	mov	r3, r9
 8000e46:	003d      	movs	r5, r7
 8000e48:	e784      	b.n	8000d54 <__aeabi_fsub+0x1cc>
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d18b      	bne.n	8000d68 <__aeabi_fsub+0x1e0>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d192      	bne.n	8000d7a <__aeabi_fsub+0x1f2>
 8000e54:	2780      	movs	r7, #128	; 0x80
 8000e56:	2400      	movs	r4, #0
 8000e58:	22ff      	movs	r2, #255	; 0xff
 8000e5a:	03ff      	lsls	r7, r7, #15
 8000e5c:	e6df      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000e5e:	4663      	mov	r3, ip
 8000e60:	000c      	movs	r4, r1
 8000e62:	1af7      	subs	r7, r6, r3
 8000e64:	e6bf      	b.n	8000be6 <__aeabi_fsub+0x5e>
 8000e66:	0030      	movs	r0, r6
 8000e68:	4460      	add	r0, ip
 8000e6a:	2501      	movs	r5, #1
 8000e6c:	0143      	lsls	r3, r0, #5
 8000e6e:	d400      	bmi.n	8000e72 <__aeabi_fsub+0x2ea>
 8000e70:	e76c      	b.n	8000d4c <__aeabi_fsub+0x1c4>
 8000e72:	2502      	movs	r5, #2
 8000e74:	e6f2      	b.n	8000c5c <__aeabi_fsub+0xd4>
 8000e76:	4663      	mov	r3, ip
 8000e78:	2501      	movs	r5, #1
 8000e7a:	1b98      	subs	r0, r3, r6
 8000e7c:	e6ae      	b.n	8000bdc <__aeabi_fsub+0x54>
 8000e7e:	2320      	movs	r3, #32
 8000e80:	4664      	mov	r4, ip
 8000e82:	4660      	mov	r0, ip
 8000e84:	40fc      	lsrs	r4, r7
 8000e86:	1bdf      	subs	r7, r3, r7
 8000e88:	40b8      	lsls	r0, r7
 8000e8a:	1e43      	subs	r3, r0, #1
 8000e8c:	4198      	sbcs	r0, r3
 8000e8e:	4320      	orrs	r0, r4
 8000e90:	e79f      	b.n	8000dd2 <__aeabi_fsub+0x24a>
 8000e92:	0005      	movs	r5, r0
 8000e94:	e75e      	b.n	8000d54 <__aeabi_fsub+0x1cc>
 8000e96:	464b      	mov	r3, r9
 8000e98:	e771      	b.n	8000d7e <__aeabi_fsub+0x1f6>
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	4665      	mov	r5, ip
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	40cd      	lsrs	r5, r1
 8000ea2:	1a59      	subs	r1, r3, r1
 8000ea4:	4088      	lsls	r0, r1
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4198      	sbcs	r0, r3
 8000eaa:	4328      	orrs	r0, r5
 8000eac:	e71c      	b.n	8000ce8 <__aeabi_fsub+0x160>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	1af0      	subs	r0, r6, r3
 8000eb6:	e691      	b.n	8000bdc <__aeabi_fsub+0x54>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d095      	beq.n	8000de8 <__aeabi_fsub+0x260>
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	464f      	mov	r7, r9
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e6ac      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	000d      	movs	r5, r1
 8000ec8:	e744      	b.n	8000d54 <__aeabi_fsub+0x1cc>
 8000eca:	464f      	mov	r7, r9
 8000ecc:	2200      	movs	r2, #0
 8000ece:	e6a6      	b.n	8000c1e <__aeabi_fsub+0x96>
 8000ed0:	fbffffff 	.word	0xfbffffff
 8000ed4:	7dffffff 	.word	0x7dffffff
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x356>
 8000edc:	e736      	b.n	8000d4c <__aeabi_fsub+0x1c4>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2700      	movs	r7, #0
 8000ee2:	e69c      	b.n	8000c1e <__aeabi_fsub+0x96>

08000ee4 <__aeabi_f2iz>:
 8000ee4:	0241      	lsls	r1, r0, #9
 8000ee6:	0042      	lsls	r2, r0, #1
 8000ee8:	0fc3      	lsrs	r3, r0, #31
 8000eea:	0a49      	lsrs	r1, r1, #9
 8000eec:	2000      	movs	r0, #0
 8000eee:	0e12      	lsrs	r2, r2, #24
 8000ef0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ef2:	dd03      	ble.n	8000efc <__aeabi_f2iz+0x18>
 8000ef4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ef6:	dd02      	ble.n	8000efe <__aeabi_f2iz+0x1a>
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <__aeabi_f2iz+0x3c>)
 8000efa:	1898      	adds	r0, r3, r2
 8000efc:	4770      	bx	lr
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	0400      	lsls	r0, r0, #16
 8000f02:	4301      	orrs	r1, r0
 8000f04:	2a95      	cmp	r2, #149	; 0x95
 8000f06:	dc07      	bgt.n	8000f18 <__aeabi_f2iz+0x34>
 8000f08:	2096      	movs	r0, #150	; 0x96
 8000f0a:	1a82      	subs	r2, r0, r2
 8000f0c:	40d1      	lsrs	r1, r2
 8000f0e:	4248      	negs	r0, r1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f3      	bne.n	8000efc <__aeabi_f2iz+0x18>
 8000f14:	0008      	movs	r0, r1
 8000f16:	e7f1      	b.n	8000efc <__aeabi_f2iz+0x18>
 8000f18:	3a96      	subs	r2, #150	; 0x96
 8000f1a:	4091      	lsls	r1, r2
 8000f1c:	e7f7      	b.n	8000f0e <__aeabi_f2iz+0x2a>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7fffffff 	.word	0x7fffffff

08000f24 <__aeabi_i2f>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d013      	beq.n	8000f52 <__aeabi_i2f+0x2e>
 8000f2a:	17c3      	asrs	r3, r0, #31
 8000f2c:	18c6      	adds	r6, r0, r3
 8000f2e:	405e      	eors	r6, r3
 8000f30:	0fc4      	lsrs	r4, r0, #31
 8000f32:	0030      	movs	r0, r6
 8000f34:	f001 fea6 	bl	8002c84 <__clzsi2>
 8000f38:	239e      	movs	r3, #158	; 0x9e
 8000f3a:	0005      	movs	r5, r0
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	2b96      	cmp	r3, #150	; 0x96
 8000f40:	dc0f      	bgt.n	8000f62 <__aeabi_i2f+0x3e>
 8000f42:	2808      	cmp	r0, #8
 8000f44:	dd01      	ble.n	8000f4a <__aeabi_i2f+0x26>
 8000f46:	3d08      	subs	r5, #8
 8000f48:	40ae      	lsls	r6, r5
 8000f4a:	0276      	lsls	r6, r6, #9
 8000f4c:	0a76      	lsrs	r6, r6, #9
 8000f4e:	b2d8      	uxtb	r0, r3
 8000f50:	e002      	b.n	8000f58 <__aeabi_i2f+0x34>
 8000f52:	2400      	movs	r4, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	2600      	movs	r6, #0
 8000f58:	05c0      	lsls	r0, r0, #23
 8000f5a:	4330      	orrs	r0, r6
 8000f5c:	07e4      	lsls	r4, r4, #31
 8000f5e:	4320      	orrs	r0, r4
 8000f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f62:	2b99      	cmp	r3, #153	; 0x99
 8000f64:	dd0c      	ble.n	8000f80 <__aeabi_i2f+0x5c>
 8000f66:	2205      	movs	r2, #5
 8000f68:	0031      	movs	r1, r6
 8000f6a:	1a12      	subs	r2, r2, r0
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	0001      	movs	r1, r0
 8000f72:	0030      	movs	r0, r6
 8000f74:	311b      	adds	r1, #27
 8000f76:	4088      	lsls	r0, r1
 8000f78:	1e41      	subs	r1, r0, #1
 8000f7a:	4188      	sbcs	r0, r1
 8000f7c:	4302      	orrs	r2, r0
 8000f7e:	0016      	movs	r6, r2
 8000f80:	2d05      	cmp	r5, #5
 8000f82:	dc12      	bgt.n	8000faa <__aeabi_i2f+0x86>
 8000f84:	0031      	movs	r1, r6
 8000f86:	4f0d      	ldr	r7, [pc, #52]	; (8000fbc <__aeabi_i2f+0x98>)
 8000f88:	4039      	ands	r1, r7
 8000f8a:	0772      	lsls	r2, r6, #29
 8000f8c:	d009      	beq.n	8000fa2 <__aeabi_i2f+0x7e>
 8000f8e:	200f      	movs	r0, #15
 8000f90:	4030      	ands	r0, r6
 8000f92:	2804      	cmp	r0, #4
 8000f94:	d005      	beq.n	8000fa2 <__aeabi_i2f+0x7e>
 8000f96:	3104      	adds	r1, #4
 8000f98:	014a      	lsls	r2, r1, #5
 8000f9a:	d502      	bpl.n	8000fa2 <__aeabi_i2f+0x7e>
 8000f9c:	239f      	movs	r3, #159	; 0x9f
 8000f9e:	4039      	ands	r1, r7
 8000fa0:	1b5b      	subs	r3, r3, r5
 8000fa2:	0189      	lsls	r1, r1, #6
 8000fa4:	0a4e      	lsrs	r6, r1, #9
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	e7d6      	b.n	8000f58 <__aeabi_i2f+0x34>
 8000faa:	1f6a      	subs	r2, r5, #5
 8000fac:	4096      	lsls	r6, r2
 8000fae:	0031      	movs	r1, r6
 8000fb0:	4f02      	ldr	r7, [pc, #8]	; (8000fbc <__aeabi_i2f+0x98>)
 8000fb2:	4039      	ands	r1, r7
 8000fb4:	0772      	lsls	r2, r6, #29
 8000fb6:	d0f4      	beq.n	8000fa2 <__aeabi_i2f+0x7e>
 8000fb8:	e7e9      	b.n	8000f8e <__aeabi_i2f+0x6a>
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	fbffffff 	.word	0xfbffffff

08000fc0 <__aeabi_ui2f>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	1e05      	subs	r5, r0, #0
 8000fc4:	d00e      	beq.n	8000fe4 <__aeabi_ui2f+0x24>
 8000fc6:	f001 fe5d 	bl	8002c84 <__clzsi2>
 8000fca:	239e      	movs	r3, #158	; 0x9e
 8000fcc:	0004      	movs	r4, r0
 8000fce:	1a1b      	subs	r3, r3, r0
 8000fd0:	2b96      	cmp	r3, #150	; 0x96
 8000fd2:	dc0c      	bgt.n	8000fee <__aeabi_ui2f+0x2e>
 8000fd4:	2808      	cmp	r0, #8
 8000fd6:	dd01      	ble.n	8000fdc <__aeabi_ui2f+0x1c>
 8000fd8:	3c08      	subs	r4, #8
 8000fda:	40a5      	lsls	r5, r4
 8000fdc:	026d      	lsls	r5, r5, #9
 8000fde:	0a6d      	lsrs	r5, r5, #9
 8000fe0:	b2d8      	uxtb	r0, r3
 8000fe2:	e001      	b.n	8000fe8 <__aeabi_ui2f+0x28>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	05c0      	lsls	r0, r0, #23
 8000fea:	4328      	orrs	r0, r5
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
 8000fee:	2b99      	cmp	r3, #153	; 0x99
 8000ff0:	dd09      	ble.n	8001006 <__aeabi_ui2f+0x46>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	0029      	movs	r1, r5
 8000ff6:	321b      	adds	r2, #27
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	1e4a      	subs	r2, r1, #1
 8000ffc:	4191      	sbcs	r1, r2
 8000ffe:	2205      	movs	r2, #5
 8001000:	1a12      	subs	r2, r2, r0
 8001002:	40d5      	lsrs	r5, r2
 8001004:	430d      	orrs	r5, r1
 8001006:	2c05      	cmp	r4, #5
 8001008:	dc12      	bgt.n	8001030 <__aeabi_ui2f+0x70>
 800100a:	0029      	movs	r1, r5
 800100c:	4e0c      	ldr	r6, [pc, #48]	; (8001040 <__aeabi_ui2f+0x80>)
 800100e:	4031      	ands	r1, r6
 8001010:	076a      	lsls	r2, r5, #29
 8001012:	d009      	beq.n	8001028 <__aeabi_ui2f+0x68>
 8001014:	200f      	movs	r0, #15
 8001016:	4028      	ands	r0, r5
 8001018:	2804      	cmp	r0, #4
 800101a:	d005      	beq.n	8001028 <__aeabi_ui2f+0x68>
 800101c:	3104      	adds	r1, #4
 800101e:	014a      	lsls	r2, r1, #5
 8001020:	d502      	bpl.n	8001028 <__aeabi_ui2f+0x68>
 8001022:	239f      	movs	r3, #159	; 0x9f
 8001024:	4031      	ands	r1, r6
 8001026:	1b1b      	subs	r3, r3, r4
 8001028:	0189      	lsls	r1, r1, #6
 800102a:	0a4d      	lsrs	r5, r1, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e7db      	b.n	8000fe8 <__aeabi_ui2f+0x28>
 8001030:	1f62      	subs	r2, r4, #5
 8001032:	4095      	lsls	r5, r2
 8001034:	0029      	movs	r1, r5
 8001036:	4e02      	ldr	r6, [pc, #8]	; (8001040 <__aeabi_ui2f+0x80>)
 8001038:	4031      	ands	r1, r6
 800103a:	076a      	lsls	r2, r5, #29
 800103c:	d0f4      	beq.n	8001028 <__aeabi_ui2f+0x68>
 800103e:	e7e9      	b.n	8001014 <__aeabi_ui2f+0x54>
 8001040:	fbffffff 	.word	0xfbffffff

08001044 <__aeabi_dadd>:
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	464f      	mov	r7, r9
 8001048:	4646      	mov	r6, r8
 800104a:	46d6      	mov	lr, sl
 800104c:	000d      	movs	r5, r1
 800104e:	0004      	movs	r4, r0
 8001050:	b5c0      	push	{r6, r7, lr}
 8001052:	001f      	movs	r7, r3
 8001054:	0011      	movs	r1, r2
 8001056:	0328      	lsls	r0, r5, #12
 8001058:	0f62      	lsrs	r2, r4, #29
 800105a:	0a40      	lsrs	r0, r0, #9
 800105c:	4310      	orrs	r0, r2
 800105e:	007a      	lsls	r2, r7, #1
 8001060:	0d52      	lsrs	r2, r2, #21
 8001062:	00e3      	lsls	r3, r4, #3
 8001064:	033c      	lsls	r4, r7, #12
 8001066:	4691      	mov	r9, r2
 8001068:	0a64      	lsrs	r4, r4, #9
 800106a:	0ffa      	lsrs	r2, r7, #31
 800106c:	0f4f      	lsrs	r7, r1, #29
 800106e:	006e      	lsls	r6, r5, #1
 8001070:	4327      	orrs	r7, r4
 8001072:	4692      	mov	sl, r2
 8001074:	46b8      	mov	r8, r7
 8001076:	0d76      	lsrs	r6, r6, #21
 8001078:	0fed      	lsrs	r5, r5, #31
 800107a:	00c9      	lsls	r1, r1, #3
 800107c:	4295      	cmp	r5, r2
 800107e:	d100      	bne.n	8001082 <__aeabi_dadd+0x3e>
 8001080:	e099      	b.n	80011b6 <__aeabi_dadd+0x172>
 8001082:	464c      	mov	r4, r9
 8001084:	1b34      	subs	r4, r6, r4
 8001086:	46a4      	mov	ip, r4
 8001088:	2c00      	cmp	r4, #0
 800108a:	dc00      	bgt.n	800108e <__aeabi_dadd+0x4a>
 800108c:	e07c      	b.n	8001188 <__aeabi_dadd+0x144>
 800108e:	464a      	mov	r2, r9
 8001090:	2a00      	cmp	r2, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x52>
 8001094:	e0b8      	b.n	8001208 <__aeabi_dadd+0x1c4>
 8001096:	4ac5      	ldr	r2, [pc, #788]	; (80013ac <__aeabi_dadd+0x368>)
 8001098:	4296      	cmp	r6, r2
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x5a>
 800109c:	e11c      	b.n	80012d8 <__aeabi_dadd+0x294>
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	003c      	movs	r4, r7
 80010a2:	0412      	lsls	r2, r2, #16
 80010a4:	4314      	orrs	r4, r2
 80010a6:	46a0      	mov	r8, r4
 80010a8:	4662      	mov	r2, ip
 80010aa:	2a38      	cmp	r2, #56	; 0x38
 80010ac:	dd00      	ble.n	80010b0 <__aeabi_dadd+0x6c>
 80010ae:	e161      	b.n	8001374 <__aeabi_dadd+0x330>
 80010b0:	2a1f      	cmp	r2, #31
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_dadd+0x72>
 80010b4:	e1cc      	b.n	8001450 <__aeabi_dadd+0x40c>
 80010b6:	4664      	mov	r4, ip
 80010b8:	2220      	movs	r2, #32
 80010ba:	1b12      	subs	r2, r2, r4
 80010bc:	4644      	mov	r4, r8
 80010be:	4094      	lsls	r4, r2
 80010c0:	000f      	movs	r7, r1
 80010c2:	46a1      	mov	r9, r4
 80010c4:	4664      	mov	r4, ip
 80010c6:	4091      	lsls	r1, r2
 80010c8:	40e7      	lsrs	r7, r4
 80010ca:	464c      	mov	r4, r9
 80010cc:	1e4a      	subs	r2, r1, #1
 80010ce:	4191      	sbcs	r1, r2
 80010d0:	433c      	orrs	r4, r7
 80010d2:	4642      	mov	r2, r8
 80010d4:	4321      	orrs	r1, r4
 80010d6:	4664      	mov	r4, ip
 80010d8:	40e2      	lsrs	r2, r4
 80010da:	1a80      	subs	r0, r0, r2
 80010dc:	1a5c      	subs	r4, r3, r1
 80010de:	42a3      	cmp	r3, r4
 80010e0:	419b      	sbcs	r3, r3
 80010e2:	425f      	negs	r7, r3
 80010e4:	1bc7      	subs	r7, r0, r7
 80010e6:	023b      	lsls	r3, r7, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_dadd+0xa8>
 80010ea:	e0d0      	b.n	800128e <__aeabi_dadd+0x24a>
 80010ec:	027f      	lsls	r7, r7, #9
 80010ee:	0a7f      	lsrs	r7, r7, #9
 80010f0:	2f00      	cmp	r7, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0xb2>
 80010f4:	e0ff      	b.n	80012f6 <__aeabi_dadd+0x2b2>
 80010f6:	0038      	movs	r0, r7
 80010f8:	f001 fdc4 	bl	8002c84 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	3908      	subs	r1, #8
 8001100:	2320      	movs	r3, #32
 8001102:	0022      	movs	r2, r4
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	408f      	lsls	r7, r1
 8001108:	40da      	lsrs	r2, r3
 800110a:	408c      	lsls	r4, r1
 800110c:	4317      	orrs	r7, r2
 800110e:	42b1      	cmp	r1, r6
 8001110:	da00      	bge.n	8001114 <__aeabi_dadd+0xd0>
 8001112:	e0ff      	b.n	8001314 <__aeabi_dadd+0x2d0>
 8001114:	1b89      	subs	r1, r1, r6
 8001116:	1c4b      	adds	r3, r1, #1
 8001118:	2b1f      	cmp	r3, #31
 800111a:	dd00      	ble.n	800111e <__aeabi_dadd+0xda>
 800111c:	e0a8      	b.n	8001270 <__aeabi_dadd+0x22c>
 800111e:	2220      	movs	r2, #32
 8001120:	0039      	movs	r1, r7
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	0020      	movs	r0, r4
 8001126:	4094      	lsls	r4, r2
 8001128:	4091      	lsls	r1, r2
 800112a:	40d8      	lsrs	r0, r3
 800112c:	1e62      	subs	r2, r4, #1
 800112e:	4194      	sbcs	r4, r2
 8001130:	40df      	lsrs	r7, r3
 8001132:	2600      	movs	r6, #0
 8001134:	4301      	orrs	r1, r0
 8001136:	430c      	orrs	r4, r1
 8001138:	0763      	lsls	r3, r4, #29
 800113a:	d009      	beq.n	8001150 <__aeabi_dadd+0x10c>
 800113c:	230f      	movs	r3, #15
 800113e:	4023      	ands	r3, r4
 8001140:	2b04      	cmp	r3, #4
 8001142:	d005      	beq.n	8001150 <__aeabi_dadd+0x10c>
 8001144:	1d23      	adds	r3, r4, #4
 8001146:	42a3      	cmp	r3, r4
 8001148:	41a4      	sbcs	r4, r4
 800114a:	4264      	negs	r4, r4
 800114c:	193f      	adds	r7, r7, r4
 800114e:	001c      	movs	r4, r3
 8001150:	023b      	lsls	r3, r7, #8
 8001152:	d400      	bmi.n	8001156 <__aeabi_dadd+0x112>
 8001154:	e09e      	b.n	8001294 <__aeabi_dadd+0x250>
 8001156:	4b95      	ldr	r3, [pc, #596]	; (80013ac <__aeabi_dadd+0x368>)
 8001158:	3601      	adds	r6, #1
 800115a:	429e      	cmp	r6, r3
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x11c>
 800115e:	e0b7      	b.n	80012d0 <__aeabi_dadd+0x28c>
 8001160:	4a93      	ldr	r2, [pc, #588]	; (80013b0 <__aeabi_dadd+0x36c>)
 8001162:	08e4      	lsrs	r4, r4, #3
 8001164:	4017      	ands	r7, r2
 8001166:	077b      	lsls	r3, r7, #29
 8001168:	0571      	lsls	r1, r6, #21
 800116a:	027f      	lsls	r7, r7, #9
 800116c:	4323      	orrs	r3, r4
 800116e:	0b3f      	lsrs	r7, r7, #12
 8001170:	0d4a      	lsrs	r2, r1, #21
 8001172:	0512      	lsls	r2, r2, #20
 8001174:	433a      	orrs	r2, r7
 8001176:	07ed      	lsls	r5, r5, #31
 8001178:	432a      	orrs	r2, r5
 800117a:	0018      	movs	r0, r3
 800117c:	0011      	movs	r1, r2
 800117e:	bce0      	pop	{r5, r6, r7}
 8001180:	46ba      	mov	sl, r7
 8001182:	46b1      	mov	r9, r6
 8001184:	46a8      	mov	r8, r5
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001188:	2c00      	cmp	r4, #0
 800118a:	d04b      	beq.n	8001224 <__aeabi_dadd+0x1e0>
 800118c:	464c      	mov	r4, r9
 800118e:	1ba4      	subs	r4, r4, r6
 8001190:	46a4      	mov	ip, r4
 8001192:	2e00      	cmp	r6, #0
 8001194:	d000      	beq.n	8001198 <__aeabi_dadd+0x154>
 8001196:	e123      	b.n	80013e0 <__aeabi_dadd+0x39c>
 8001198:	0004      	movs	r4, r0
 800119a:	431c      	orrs	r4, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x15c>
 800119e:	e1af      	b.n	8001500 <__aeabi_dadd+0x4bc>
 80011a0:	4662      	mov	r2, ip
 80011a2:	1e54      	subs	r4, r2, #1
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x166>
 80011a8:	e215      	b.n	80015d6 <__aeabi_dadd+0x592>
 80011aa:	4d80      	ldr	r5, [pc, #512]	; (80013ac <__aeabi_dadd+0x368>)
 80011ac:	45ac      	cmp	ip, r5
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x16e>
 80011b0:	e1c8      	b.n	8001544 <__aeabi_dadd+0x500>
 80011b2:	46a4      	mov	ip, r4
 80011b4:	e11b      	b.n	80013ee <__aeabi_dadd+0x3aa>
 80011b6:	464a      	mov	r2, r9
 80011b8:	1ab2      	subs	r2, r6, r2
 80011ba:	4694      	mov	ip, r2
 80011bc:	2a00      	cmp	r2, #0
 80011be:	dc00      	bgt.n	80011c2 <__aeabi_dadd+0x17e>
 80011c0:	e0ac      	b.n	800131c <__aeabi_dadd+0x2d8>
 80011c2:	464a      	mov	r2, r9
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d043      	beq.n	8001250 <__aeabi_dadd+0x20c>
 80011c8:	4a78      	ldr	r2, [pc, #480]	; (80013ac <__aeabi_dadd+0x368>)
 80011ca:	4296      	cmp	r6, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x18c>
 80011ce:	e1af      	b.n	8001530 <__aeabi_dadd+0x4ec>
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	003c      	movs	r4, r7
 80011d4:	0412      	lsls	r2, r2, #16
 80011d6:	4314      	orrs	r4, r2
 80011d8:	46a0      	mov	r8, r4
 80011da:	4662      	mov	r2, ip
 80011dc:	2a38      	cmp	r2, #56	; 0x38
 80011de:	dc67      	bgt.n	80012b0 <__aeabi_dadd+0x26c>
 80011e0:	2a1f      	cmp	r2, #31
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_dadd+0x1a2>
 80011e4:	e15f      	b.n	80014a6 <__aeabi_dadd+0x462>
 80011e6:	4647      	mov	r7, r8
 80011e8:	3a20      	subs	r2, #32
 80011ea:	40d7      	lsrs	r7, r2
 80011ec:	4662      	mov	r2, ip
 80011ee:	2a20      	cmp	r2, #32
 80011f0:	d005      	beq.n	80011fe <__aeabi_dadd+0x1ba>
 80011f2:	4664      	mov	r4, ip
 80011f4:	2240      	movs	r2, #64	; 0x40
 80011f6:	1b12      	subs	r2, r2, r4
 80011f8:	4644      	mov	r4, r8
 80011fa:	4094      	lsls	r4, r2
 80011fc:	4321      	orrs	r1, r4
 80011fe:	1e4a      	subs	r2, r1, #1
 8001200:	4191      	sbcs	r1, r2
 8001202:	000c      	movs	r4, r1
 8001204:	433c      	orrs	r4, r7
 8001206:	e057      	b.n	80012b8 <__aeabi_dadd+0x274>
 8001208:	003a      	movs	r2, r7
 800120a:	430a      	orrs	r2, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x1cc>
 800120e:	e105      	b.n	800141c <__aeabi_dadd+0x3d8>
 8001210:	0022      	movs	r2, r4
 8001212:	3a01      	subs	r2, #1
 8001214:	2c01      	cmp	r4, #1
 8001216:	d100      	bne.n	800121a <__aeabi_dadd+0x1d6>
 8001218:	e182      	b.n	8001520 <__aeabi_dadd+0x4dc>
 800121a:	4c64      	ldr	r4, [pc, #400]	; (80013ac <__aeabi_dadd+0x368>)
 800121c:	45a4      	cmp	ip, r4
 800121e:	d05b      	beq.n	80012d8 <__aeabi_dadd+0x294>
 8001220:	4694      	mov	ip, r2
 8001222:	e741      	b.n	80010a8 <__aeabi_dadd+0x64>
 8001224:	4c63      	ldr	r4, [pc, #396]	; (80013b4 <__aeabi_dadd+0x370>)
 8001226:	1c77      	adds	r7, r6, #1
 8001228:	4227      	tst	r7, r4
 800122a:	d000      	beq.n	800122e <__aeabi_dadd+0x1ea>
 800122c:	e0c4      	b.n	80013b8 <__aeabi_dadd+0x374>
 800122e:	0004      	movs	r4, r0
 8001230:	431c      	orrs	r4, r3
 8001232:	2e00      	cmp	r6, #0
 8001234:	d000      	beq.n	8001238 <__aeabi_dadd+0x1f4>
 8001236:	e169      	b.n	800150c <__aeabi_dadd+0x4c8>
 8001238:	2c00      	cmp	r4, #0
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x1fa>
 800123c:	e1bf      	b.n	80015be <__aeabi_dadd+0x57a>
 800123e:	4644      	mov	r4, r8
 8001240:	430c      	orrs	r4, r1
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x202>
 8001244:	e1d0      	b.n	80015e8 <__aeabi_dadd+0x5a4>
 8001246:	0742      	lsls	r2, r0, #29
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	4313      	orrs	r3, r2
 800124c:	08c0      	lsrs	r0, r0, #3
 800124e:	e029      	b.n	80012a4 <__aeabi_dadd+0x260>
 8001250:	003a      	movs	r2, r7
 8001252:	430a      	orrs	r2, r1
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x214>
 8001256:	e170      	b.n	800153a <__aeabi_dadd+0x4f6>
 8001258:	4662      	mov	r2, ip
 800125a:	4664      	mov	r4, ip
 800125c:	3a01      	subs	r2, #1
 800125e:	2c01      	cmp	r4, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x220>
 8001262:	e0e0      	b.n	8001426 <__aeabi_dadd+0x3e2>
 8001264:	4c51      	ldr	r4, [pc, #324]	; (80013ac <__aeabi_dadd+0x368>)
 8001266:	45a4      	cmp	ip, r4
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x228>
 800126a:	e161      	b.n	8001530 <__aeabi_dadd+0x4ec>
 800126c:	4694      	mov	ip, r2
 800126e:	e7b4      	b.n	80011da <__aeabi_dadd+0x196>
 8001270:	003a      	movs	r2, r7
 8001272:	391f      	subs	r1, #31
 8001274:	40ca      	lsrs	r2, r1
 8001276:	0011      	movs	r1, r2
 8001278:	2b20      	cmp	r3, #32
 800127a:	d003      	beq.n	8001284 <__aeabi_dadd+0x240>
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	409f      	lsls	r7, r3
 8001282:	433c      	orrs	r4, r7
 8001284:	1e63      	subs	r3, r4, #1
 8001286:	419c      	sbcs	r4, r3
 8001288:	2700      	movs	r7, #0
 800128a:	2600      	movs	r6, #0
 800128c:	430c      	orrs	r4, r1
 800128e:	0763      	lsls	r3, r4, #29
 8001290:	d000      	beq.n	8001294 <__aeabi_dadd+0x250>
 8001292:	e753      	b.n	800113c <__aeabi_dadd+0xf8>
 8001294:	46b4      	mov	ip, r6
 8001296:	08e4      	lsrs	r4, r4, #3
 8001298:	077b      	lsls	r3, r7, #29
 800129a:	4323      	orrs	r3, r4
 800129c:	08f8      	lsrs	r0, r7, #3
 800129e:	4a43      	ldr	r2, [pc, #268]	; (80013ac <__aeabi_dadd+0x368>)
 80012a0:	4594      	cmp	ip, r2
 80012a2:	d01d      	beq.n	80012e0 <__aeabi_dadd+0x29c>
 80012a4:	4662      	mov	r2, ip
 80012a6:	0307      	lsls	r7, r0, #12
 80012a8:	0552      	lsls	r2, r2, #21
 80012aa:	0b3f      	lsrs	r7, r7, #12
 80012ac:	0d52      	lsrs	r2, r2, #21
 80012ae:	e760      	b.n	8001172 <__aeabi_dadd+0x12e>
 80012b0:	4644      	mov	r4, r8
 80012b2:	430c      	orrs	r4, r1
 80012b4:	1e62      	subs	r2, r4, #1
 80012b6:	4194      	sbcs	r4, r2
 80012b8:	18e4      	adds	r4, r4, r3
 80012ba:	429c      	cmp	r4, r3
 80012bc:	419b      	sbcs	r3, r3
 80012be:	425f      	negs	r7, r3
 80012c0:	183f      	adds	r7, r7, r0
 80012c2:	023b      	lsls	r3, r7, #8
 80012c4:	d5e3      	bpl.n	800128e <__aeabi_dadd+0x24a>
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <__aeabi_dadd+0x368>)
 80012c8:	3601      	adds	r6, #1
 80012ca:	429e      	cmp	r6, r3
 80012cc:	d000      	beq.n	80012d0 <__aeabi_dadd+0x28c>
 80012ce:	e0b5      	b.n	800143c <__aeabi_dadd+0x3f8>
 80012d0:	0032      	movs	r2, r6
 80012d2:	2700      	movs	r7, #0
 80012d4:	2300      	movs	r3, #0
 80012d6:	e74c      	b.n	8001172 <__aeabi_dadd+0x12e>
 80012d8:	0742      	lsls	r2, r0, #29
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	4313      	orrs	r3, r2
 80012de:	08c0      	lsrs	r0, r0, #3
 80012e0:	001a      	movs	r2, r3
 80012e2:	4302      	orrs	r2, r0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dadd+0x2a4>
 80012e6:	e1e1      	b.n	80016ac <__aeabi_dadd+0x668>
 80012e8:	2780      	movs	r7, #128	; 0x80
 80012ea:	033f      	lsls	r7, r7, #12
 80012ec:	4307      	orrs	r7, r0
 80012ee:	033f      	lsls	r7, r7, #12
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <__aeabi_dadd+0x368>)
 80012f2:	0b3f      	lsrs	r7, r7, #12
 80012f4:	e73d      	b.n	8001172 <__aeabi_dadd+0x12e>
 80012f6:	0020      	movs	r0, r4
 80012f8:	f001 fcc4 	bl	8002c84 <__clzsi2>
 80012fc:	0001      	movs	r1, r0
 80012fe:	3118      	adds	r1, #24
 8001300:	291f      	cmp	r1, #31
 8001302:	dc00      	bgt.n	8001306 <__aeabi_dadd+0x2c2>
 8001304:	e6fc      	b.n	8001100 <__aeabi_dadd+0xbc>
 8001306:	3808      	subs	r0, #8
 8001308:	4084      	lsls	r4, r0
 800130a:	0027      	movs	r7, r4
 800130c:	2400      	movs	r4, #0
 800130e:	42b1      	cmp	r1, r6
 8001310:	db00      	blt.n	8001314 <__aeabi_dadd+0x2d0>
 8001312:	e6ff      	b.n	8001114 <__aeabi_dadd+0xd0>
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <__aeabi_dadd+0x36c>)
 8001316:	1a76      	subs	r6, r6, r1
 8001318:	4017      	ands	r7, r2
 800131a:	e70d      	b.n	8001138 <__aeabi_dadd+0xf4>
 800131c:	2a00      	cmp	r2, #0
 800131e:	d02f      	beq.n	8001380 <__aeabi_dadd+0x33c>
 8001320:	464a      	mov	r2, r9
 8001322:	1b92      	subs	r2, r2, r6
 8001324:	4694      	mov	ip, r2
 8001326:	2e00      	cmp	r6, #0
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x2e8>
 800132a:	e0ad      	b.n	8001488 <__aeabi_dadd+0x444>
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <__aeabi_dadd+0x368>)
 800132e:	4591      	cmp	r9, r2
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x2f0>
 8001332:	e10f      	b.n	8001554 <__aeabi_dadd+0x510>
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	0412      	lsls	r2, r2, #16
 8001338:	4310      	orrs	r0, r2
 800133a:	4662      	mov	r2, ip
 800133c:	2a38      	cmp	r2, #56	; 0x38
 800133e:	dd00      	ble.n	8001342 <__aeabi_dadd+0x2fe>
 8001340:	e10f      	b.n	8001562 <__aeabi_dadd+0x51e>
 8001342:	2a1f      	cmp	r2, #31
 8001344:	dd00      	ble.n	8001348 <__aeabi_dadd+0x304>
 8001346:	e180      	b.n	800164a <__aeabi_dadd+0x606>
 8001348:	4664      	mov	r4, ip
 800134a:	2220      	movs	r2, #32
 800134c:	001e      	movs	r6, r3
 800134e:	1b12      	subs	r2, r2, r4
 8001350:	4667      	mov	r7, ip
 8001352:	0004      	movs	r4, r0
 8001354:	4093      	lsls	r3, r2
 8001356:	4094      	lsls	r4, r2
 8001358:	40fe      	lsrs	r6, r7
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	4193      	sbcs	r3, r2
 800135e:	40f8      	lsrs	r0, r7
 8001360:	4334      	orrs	r4, r6
 8001362:	431c      	orrs	r4, r3
 8001364:	4480      	add	r8, r0
 8001366:	1864      	adds	r4, r4, r1
 8001368:	428c      	cmp	r4, r1
 800136a:	41bf      	sbcs	r7, r7
 800136c:	427f      	negs	r7, r7
 800136e:	464e      	mov	r6, r9
 8001370:	4447      	add	r7, r8
 8001372:	e7a6      	b.n	80012c2 <__aeabi_dadd+0x27e>
 8001374:	4642      	mov	r2, r8
 8001376:	430a      	orrs	r2, r1
 8001378:	0011      	movs	r1, r2
 800137a:	1e4a      	subs	r2, r1, #1
 800137c:	4191      	sbcs	r1, r2
 800137e:	e6ad      	b.n	80010dc <__aeabi_dadd+0x98>
 8001380:	4c0c      	ldr	r4, [pc, #48]	; (80013b4 <__aeabi_dadd+0x370>)
 8001382:	1c72      	adds	r2, r6, #1
 8001384:	4222      	tst	r2, r4
 8001386:	d000      	beq.n	800138a <__aeabi_dadd+0x346>
 8001388:	e0a1      	b.n	80014ce <__aeabi_dadd+0x48a>
 800138a:	0002      	movs	r2, r0
 800138c:	431a      	orrs	r2, r3
 800138e:	2e00      	cmp	r6, #0
 8001390:	d000      	beq.n	8001394 <__aeabi_dadd+0x350>
 8001392:	e0fa      	b.n	800158a <__aeabi_dadd+0x546>
 8001394:	2a00      	cmp	r2, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dadd+0x356>
 8001398:	e145      	b.n	8001626 <__aeabi_dadd+0x5e2>
 800139a:	003a      	movs	r2, r7
 800139c:	430a      	orrs	r2, r1
 800139e:	d000      	beq.n	80013a2 <__aeabi_dadd+0x35e>
 80013a0:	e146      	b.n	8001630 <__aeabi_dadd+0x5ec>
 80013a2:	0742      	lsls	r2, r0, #29
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	08c0      	lsrs	r0, r0, #3
 80013aa:	e77b      	b.n	80012a4 <__aeabi_dadd+0x260>
 80013ac:	000007ff 	.word	0x000007ff
 80013b0:	ff7fffff 	.word	0xff7fffff
 80013b4:	000007fe 	.word	0x000007fe
 80013b8:	4647      	mov	r7, r8
 80013ba:	1a5c      	subs	r4, r3, r1
 80013bc:	1bc2      	subs	r2, r0, r7
 80013be:	42a3      	cmp	r3, r4
 80013c0:	41bf      	sbcs	r7, r7
 80013c2:	427f      	negs	r7, r7
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	464a      	mov	r2, r9
 80013ca:	1abf      	subs	r7, r7, r2
 80013cc:	023a      	lsls	r2, r7, #8
 80013ce:	d500      	bpl.n	80013d2 <__aeabi_dadd+0x38e>
 80013d0:	e08d      	b.n	80014ee <__aeabi_dadd+0x4aa>
 80013d2:	0023      	movs	r3, r4
 80013d4:	433b      	orrs	r3, r7
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x396>
 80013d8:	e68a      	b.n	80010f0 <__aeabi_dadd+0xac>
 80013da:	2000      	movs	r0, #0
 80013dc:	2500      	movs	r5, #0
 80013de:	e761      	b.n	80012a4 <__aeabi_dadd+0x260>
 80013e0:	4cb4      	ldr	r4, [pc, #720]	; (80016b4 <__aeabi_dadd+0x670>)
 80013e2:	45a1      	cmp	r9, r4
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x3a4>
 80013e6:	e0ad      	b.n	8001544 <__aeabi_dadd+0x500>
 80013e8:	2480      	movs	r4, #128	; 0x80
 80013ea:	0424      	lsls	r4, r4, #16
 80013ec:	4320      	orrs	r0, r4
 80013ee:	4664      	mov	r4, ip
 80013f0:	2c38      	cmp	r4, #56	; 0x38
 80013f2:	dc3d      	bgt.n	8001470 <__aeabi_dadd+0x42c>
 80013f4:	4662      	mov	r2, ip
 80013f6:	2c1f      	cmp	r4, #31
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dadd+0x3b8>
 80013fa:	e0b7      	b.n	800156c <__aeabi_dadd+0x528>
 80013fc:	2520      	movs	r5, #32
 80013fe:	001e      	movs	r6, r3
 8001400:	1b2d      	subs	r5, r5, r4
 8001402:	0004      	movs	r4, r0
 8001404:	40ab      	lsls	r3, r5
 8001406:	40ac      	lsls	r4, r5
 8001408:	40d6      	lsrs	r6, r2
 800140a:	40d0      	lsrs	r0, r2
 800140c:	4642      	mov	r2, r8
 800140e:	1e5d      	subs	r5, r3, #1
 8001410:	41ab      	sbcs	r3, r5
 8001412:	4334      	orrs	r4, r6
 8001414:	1a12      	subs	r2, r2, r0
 8001416:	4690      	mov	r8, r2
 8001418:	4323      	orrs	r3, r4
 800141a:	e02c      	b.n	8001476 <__aeabi_dadd+0x432>
 800141c:	0742      	lsls	r2, r0, #29
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	4313      	orrs	r3, r2
 8001422:	08c0      	lsrs	r0, r0, #3
 8001424:	e73b      	b.n	800129e <__aeabi_dadd+0x25a>
 8001426:	185c      	adds	r4, r3, r1
 8001428:	429c      	cmp	r4, r3
 800142a:	419b      	sbcs	r3, r3
 800142c:	4440      	add	r0, r8
 800142e:	425b      	negs	r3, r3
 8001430:	18c7      	adds	r7, r0, r3
 8001432:	2601      	movs	r6, #1
 8001434:	023b      	lsls	r3, r7, #8
 8001436:	d400      	bmi.n	800143a <__aeabi_dadd+0x3f6>
 8001438:	e729      	b.n	800128e <__aeabi_dadd+0x24a>
 800143a:	2602      	movs	r6, #2
 800143c:	4a9e      	ldr	r2, [pc, #632]	; (80016b8 <__aeabi_dadd+0x674>)
 800143e:	0863      	lsrs	r3, r4, #1
 8001440:	4017      	ands	r7, r2
 8001442:	2201      	movs	r2, #1
 8001444:	4014      	ands	r4, r2
 8001446:	431c      	orrs	r4, r3
 8001448:	07fb      	lsls	r3, r7, #31
 800144a:	431c      	orrs	r4, r3
 800144c:	087f      	lsrs	r7, r7, #1
 800144e:	e673      	b.n	8001138 <__aeabi_dadd+0xf4>
 8001450:	4644      	mov	r4, r8
 8001452:	3a20      	subs	r2, #32
 8001454:	40d4      	lsrs	r4, r2
 8001456:	4662      	mov	r2, ip
 8001458:	2a20      	cmp	r2, #32
 800145a:	d005      	beq.n	8001468 <__aeabi_dadd+0x424>
 800145c:	4667      	mov	r7, ip
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	1bd2      	subs	r2, r2, r7
 8001462:	4647      	mov	r7, r8
 8001464:	4097      	lsls	r7, r2
 8001466:	4339      	orrs	r1, r7
 8001468:	1e4a      	subs	r2, r1, #1
 800146a:	4191      	sbcs	r1, r2
 800146c:	4321      	orrs	r1, r4
 800146e:	e635      	b.n	80010dc <__aeabi_dadd+0x98>
 8001470:	4303      	orrs	r3, r0
 8001472:	1e58      	subs	r0, r3, #1
 8001474:	4183      	sbcs	r3, r0
 8001476:	1acc      	subs	r4, r1, r3
 8001478:	42a1      	cmp	r1, r4
 800147a:	41bf      	sbcs	r7, r7
 800147c:	4643      	mov	r3, r8
 800147e:	427f      	negs	r7, r7
 8001480:	4655      	mov	r5, sl
 8001482:	464e      	mov	r6, r9
 8001484:	1bdf      	subs	r7, r3, r7
 8001486:	e62e      	b.n	80010e6 <__aeabi_dadd+0xa2>
 8001488:	0002      	movs	r2, r0
 800148a:	431a      	orrs	r2, r3
 800148c:	d100      	bne.n	8001490 <__aeabi_dadd+0x44c>
 800148e:	e0bd      	b.n	800160c <__aeabi_dadd+0x5c8>
 8001490:	4662      	mov	r2, ip
 8001492:	4664      	mov	r4, ip
 8001494:	3a01      	subs	r2, #1
 8001496:	2c01      	cmp	r4, #1
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x458>
 800149a:	e0e5      	b.n	8001668 <__aeabi_dadd+0x624>
 800149c:	4c85      	ldr	r4, [pc, #532]	; (80016b4 <__aeabi_dadd+0x670>)
 800149e:	45a4      	cmp	ip, r4
 80014a0:	d058      	beq.n	8001554 <__aeabi_dadd+0x510>
 80014a2:	4694      	mov	ip, r2
 80014a4:	e749      	b.n	800133a <__aeabi_dadd+0x2f6>
 80014a6:	4664      	mov	r4, ip
 80014a8:	2220      	movs	r2, #32
 80014aa:	1b12      	subs	r2, r2, r4
 80014ac:	4644      	mov	r4, r8
 80014ae:	4094      	lsls	r4, r2
 80014b0:	000f      	movs	r7, r1
 80014b2:	46a1      	mov	r9, r4
 80014b4:	4664      	mov	r4, ip
 80014b6:	4091      	lsls	r1, r2
 80014b8:	40e7      	lsrs	r7, r4
 80014ba:	464c      	mov	r4, r9
 80014bc:	1e4a      	subs	r2, r1, #1
 80014be:	4191      	sbcs	r1, r2
 80014c0:	433c      	orrs	r4, r7
 80014c2:	4642      	mov	r2, r8
 80014c4:	430c      	orrs	r4, r1
 80014c6:	4661      	mov	r1, ip
 80014c8:	40ca      	lsrs	r2, r1
 80014ca:	1880      	adds	r0, r0, r2
 80014cc:	e6f4      	b.n	80012b8 <__aeabi_dadd+0x274>
 80014ce:	4c79      	ldr	r4, [pc, #484]	; (80016b4 <__aeabi_dadd+0x670>)
 80014d0:	42a2      	cmp	r2, r4
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x492>
 80014d4:	e6fd      	b.n	80012d2 <__aeabi_dadd+0x28e>
 80014d6:	1859      	adds	r1, r3, r1
 80014d8:	4299      	cmp	r1, r3
 80014da:	419b      	sbcs	r3, r3
 80014dc:	4440      	add	r0, r8
 80014de:	425f      	negs	r7, r3
 80014e0:	19c7      	adds	r7, r0, r7
 80014e2:	07fc      	lsls	r4, r7, #31
 80014e4:	0849      	lsrs	r1, r1, #1
 80014e6:	0016      	movs	r6, r2
 80014e8:	430c      	orrs	r4, r1
 80014ea:	087f      	lsrs	r7, r7, #1
 80014ec:	e6cf      	b.n	800128e <__aeabi_dadd+0x24a>
 80014ee:	1acc      	subs	r4, r1, r3
 80014f0:	42a1      	cmp	r1, r4
 80014f2:	41bf      	sbcs	r7, r7
 80014f4:	4643      	mov	r3, r8
 80014f6:	427f      	negs	r7, r7
 80014f8:	1a18      	subs	r0, r3, r0
 80014fa:	4655      	mov	r5, sl
 80014fc:	1bc7      	subs	r7, r0, r7
 80014fe:	e5f7      	b.n	80010f0 <__aeabi_dadd+0xac>
 8001500:	08c9      	lsrs	r1, r1, #3
 8001502:	077b      	lsls	r3, r7, #29
 8001504:	4655      	mov	r5, sl
 8001506:	430b      	orrs	r3, r1
 8001508:	08f8      	lsrs	r0, r7, #3
 800150a:	e6c8      	b.n	800129e <__aeabi_dadd+0x25a>
 800150c:	2c00      	cmp	r4, #0
 800150e:	d000      	beq.n	8001512 <__aeabi_dadd+0x4ce>
 8001510:	e081      	b.n	8001616 <__aeabi_dadd+0x5d2>
 8001512:	4643      	mov	r3, r8
 8001514:	430b      	orrs	r3, r1
 8001516:	d115      	bne.n	8001544 <__aeabi_dadd+0x500>
 8001518:	2080      	movs	r0, #128	; 0x80
 800151a:	2500      	movs	r5, #0
 800151c:	0300      	lsls	r0, r0, #12
 800151e:	e6e3      	b.n	80012e8 <__aeabi_dadd+0x2a4>
 8001520:	1a5c      	subs	r4, r3, r1
 8001522:	42a3      	cmp	r3, r4
 8001524:	419b      	sbcs	r3, r3
 8001526:	1bc7      	subs	r7, r0, r7
 8001528:	425b      	negs	r3, r3
 800152a:	2601      	movs	r6, #1
 800152c:	1aff      	subs	r7, r7, r3
 800152e:	e5da      	b.n	80010e6 <__aeabi_dadd+0xa2>
 8001530:	0742      	lsls	r2, r0, #29
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	4313      	orrs	r3, r2
 8001536:	08c0      	lsrs	r0, r0, #3
 8001538:	e6d2      	b.n	80012e0 <__aeabi_dadd+0x29c>
 800153a:	0742      	lsls	r2, r0, #29
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	4313      	orrs	r3, r2
 8001540:	08c0      	lsrs	r0, r0, #3
 8001542:	e6ac      	b.n	800129e <__aeabi_dadd+0x25a>
 8001544:	4643      	mov	r3, r8
 8001546:	4642      	mov	r2, r8
 8001548:	08c9      	lsrs	r1, r1, #3
 800154a:	075b      	lsls	r3, r3, #29
 800154c:	4655      	mov	r5, sl
 800154e:	430b      	orrs	r3, r1
 8001550:	08d0      	lsrs	r0, r2, #3
 8001552:	e6c5      	b.n	80012e0 <__aeabi_dadd+0x29c>
 8001554:	4643      	mov	r3, r8
 8001556:	4642      	mov	r2, r8
 8001558:	075b      	lsls	r3, r3, #29
 800155a:	08c9      	lsrs	r1, r1, #3
 800155c:	430b      	orrs	r3, r1
 800155e:	08d0      	lsrs	r0, r2, #3
 8001560:	e6be      	b.n	80012e0 <__aeabi_dadd+0x29c>
 8001562:	4303      	orrs	r3, r0
 8001564:	001c      	movs	r4, r3
 8001566:	1e63      	subs	r3, r4, #1
 8001568:	419c      	sbcs	r4, r3
 800156a:	e6fc      	b.n	8001366 <__aeabi_dadd+0x322>
 800156c:	0002      	movs	r2, r0
 800156e:	3c20      	subs	r4, #32
 8001570:	40e2      	lsrs	r2, r4
 8001572:	0014      	movs	r4, r2
 8001574:	4662      	mov	r2, ip
 8001576:	2a20      	cmp	r2, #32
 8001578:	d003      	beq.n	8001582 <__aeabi_dadd+0x53e>
 800157a:	2540      	movs	r5, #64	; 0x40
 800157c:	1aad      	subs	r5, r5, r2
 800157e:	40a8      	lsls	r0, r5
 8001580:	4303      	orrs	r3, r0
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	4183      	sbcs	r3, r0
 8001586:	4323      	orrs	r3, r4
 8001588:	e775      	b.n	8001476 <__aeabi_dadd+0x432>
 800158a:	2a00      	cmp	r2, #0
 800158c:	d0e2      	beq.n	8001554 <__aeabi_dadd+0x510>
 800158e:	003a      	movs	r2, r7
 8001590:	430a      	orrs	r2, r1
 8001592:	d0cd      	beq.n	8001530 <__aeabi_dadd+0x4ec>
 8001594:	0742      	lsls	r2, r0, #29
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	4313      	orrs	r3, r2
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	08c0      	lsrs	r0, r0, #3
 800159e:	0312      	lsls	r2, r2, #12
 80015a0:	4210      	tst	r0, r2
 80015a2:	d006      	beq.n	80015b2 <__aeabi_dadd+0x56e>
 80015a4:	08fc      	lsrs	r4, r7, #3
 80015a6:	4214      	tst	r4, r2
 80015a8:	d103      	bne.n	80015b2 <__aeabi_dadd+0x56e>
 80015aa:	0020      	movs	r0, r4
 80015ac:	08cb      	lsrs	r3, r1, #3
 80015ae:	077a      	lsls	r2, r7, #29
 80015b0:	4313      	orrs	r3, r2
 80015b2:	0f5a      	lsrs	r2, r3, #29
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	0752      	lsls	r2, r2, #29
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	e690      	b.n	80012e0 <__aeabi_dadd+0x29c>
 80015be:	4643      	mov	r3, r8
 80015c0:	430b      	orrs	r3, r1
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x582>
 80015c4:	e709      	b.n	80013da <__aeabi_dadd+0x396>
 80015c6:	4643      	mov	r3, r8
 80015c8:	4642      	mov	r2, r8
 80015ca:	08c9      	lsrs	r1, r1, #3
 80015cc:	075b      	lsls	r3, r3, #29
 80015ce:	4655      	mov	r5, sl
 80015d0:	430b      	orrs	r3, r1
 80015d2:	08d0      	lsrs	r0, r2, #3
 80015d4:	e666      	b.n	80012a4 <__aeabi_dadd+0x260>
 80015d6:	1acc      	subs	r4, r1, r3
 80015d8:	42a1      	cmp	r1, r4
 80015da:	4189      	sbcs	r1, r1
 80015dc:	1a3f      	subs	r7, r7, r0
 80015de:	4249      	negs	r1, r1
 80015e0:	4655      	mov	r5, sl
 80015e2:	2601      	movs	r6, #1
 80015e4:	1a7f      	subs	r7, r7, r1
 80015e6:	e57e      	b.n	80010e6 <__aeabi_dadd+0xa2>
 80015e8:	4642      	mov	r2, r8
 80015ea:	1a5c      	subs	r4, r3, r1
 80015ec:	1a87      	subs	r7, r0, r2
 80015ee:	42a3      	cmp	r3, r4
 80015f0:	4192      	sbcs	r2, r2
 80015f2:	4252      	negs	r2, r2
 80015f4:	1abf      	subs	r7, r7, r2
 80015f6:	023a      	lsls	r2, r7, #8
 80015f8:	d53d      	bpl.n	8001676 <__aeabi_dadd+0x632>
 80015fa:	1acc      	subs	r4, r1, r3
 80015fc:	42a1      	cmp	r1, r4
 80015fe:	4189      	sbcs	r1, r1
 8001600:	4643      	mov	r3, r8
 8001602:	4249      	negs	r1, r1
 8001604:	1a1f      	subs	r7, r3, r0
 8001606:	4655      	mov	r5, sl
 8001608:	1a7f      	subs	r7, r7, r1
 800160a:	e595      	b.n	8001138 <__aeabi_dadd+0xf4>
 800160c:	077b      	lsls	r3, r7, #29
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	430b      	orrs	r3, r1
 8001612:	08f8      	lsrs	r0, r7, #3
 8001614:	e643      	b.n	800129e <__aeabi_dadd+0x25a>
 8001616:	4644      	mov	r4, r8
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	430c      	orrs	r4, r1
 800161c:	d130      	bne.n	8001680 <__aeabi_dadd+0x63c>
 800161e:	0742      	lsls	r2, r0, #29
 8001620:	4313      	orrs	r3, r2
 8001622:	08c0      	lsrs	r0, r0, #3
 8001624:	e65c      	b.n	80012e0 <__aeabi_dadd+0x29c>
 8001626:	077b      	lsls	r3, r7, #29
 8001628:	08c9      	lsrs	r1, r1, #3
 800162a:	430b      	orrs	r3, r1
 800162c:	08f8      	lsrs	r0, r7, #3
 800162e:	e639      	b.n	80012a4 <__aeabi_dadd+0x260>
 8001630:	185c      	adds	r4, r3, r1
 8001632:	429c      	cmp	r4, r3
 8001634:	419b      	sbcs	r3, r3
 8001636:	4440      	add	r0, r8
 8001638:	425b      	negs	r3, r3
 800163a:	18c7      	adds	r7, r0, r3
 800163c:	023b      	lsls	r3, r7, #8
 800163e:	d400      	bmi.n	8001642 <__aeabi_dadd+0x5fe>
 8001640:	e625      	b.n	800128e <__aeabi_dadd+0x24a>
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <__aeabi_dadd+0x674>)
 8001644:	2601      	movs	r6, #1
 8001646:	401f      	ands	r7, r3
 8001648:	e621      	b.n	800128e <__aeabi_dadd+0x24a>
 800164a:	0004      	movs	r4, r0
 800164c:	3a20      	subs	r2, #32
 800164e:	40d4      	lsrs	r4, r2
 8001650:	4662      	mov	r2, ip
 8001652:	2a20      	cmp	r2, #32
 8001654:	d004      	beq.n	8001660 <__aeabi_dadd+0x61c>
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	4666      	mov	r6, ip
 800165a:	1b92      	subs	r2, r2, r6
 800165c:	4090      	lsls	r0, r2
 800165e:	4303      	orrs	r3, r0
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	4193      	sbcs	r3, r2
 8001664:	431c      	orrs	r4, r3
 8001666:	e67e      	b.n	8001366 <__aeabi_dadd+0x322>
 8001668:	185c      	adds	r4, r3, r1
 800166a:	428c      	cmp	r4, r1
 800166c:	4189      	sbcs	r1, r1
 800166e:	4440      	add	r0, r8
 8001670:	4249      	negs	r1, r1
 8001672:	1847      	adds	r7, r0, r1
 8001674:	e6dd      	b.n	8001432 <__aeabi_dadd+0x3ee>
 8001676:	0023      	movs	r3, r4
 8001678:	433b      	orrs	r3, r7
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x63a>
 800167c:	e6ad      	b.n	80013da <__aeabi_dadd+0x396>
 800167e:	e606      	b.n	800128e <__aeabi_dadd+0x24a>
 8001680:	0744      	lsls	r4, r0, #29
 8001682:	4323      	orrs	r3, r4
 8001684:	2480      	movs	r4, #128	; 0x80
 8001686:	08c0      	lsrs	r0, r0, #3
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	4220      	tst	r0, r4
 800168c:	d008      	beq.n	80016a0 <__aeabi_dadd+0x65c>
 800168e:	4642      	mov	r2, r8
 8001690:	08d6      	lsrs	r6, r2, #3
 8001692:	4226      	tst	r6, r4
 8001694:	d104      	bne.n	80016a0 <__aeabi_dadd+0x65c>
 8001696:	4655      	mov	r5, sl
 8001698:	0030      	movs	r0, r6
 800169a:	08cb      	lsrs	r3, r1, #3
 800169c:	0751      	lsls	r1, r2, #29
 800169e:	430b      	orrs	r3, r1
 80016a0:	0f5a      	lsrs	r2, r3, #29
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	0752      	lsls	r2, r2, #29
 80016a8:	4313      	orrs	r3, r2
 80016aa:	e619      	b.n	80012e0 <__aeabi_dadd+0x29c>
 80016ac:	2300      	movs	r3, #0
 80016ae:	4a01      	ldr	r2, [pc, #4]	; (80016b4 <__aeabi_dadd+0x670>)
 80016b0:	001f      	movs	r7, r3
 80016b2:	e55e      	b.n	8001172 <__aeabi_dadd+0x12e>
 80016b4:	000007ff 	.word	0x000007ff
 80016b8:	ff7fffff 	.word	0xff7fffff

080016bc <__aeabi_ddiv>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	4657      	mov	r7, sl
 80016c0:	464e      	mov	r6, r9
 80016c2:	4645      	mov	r5, r8
 80016c4:	46de      	mov	lr, fp
 80016c6:	b5e0      	push	{r5, r6, r7, lr}
 80016c8:	4681      	mov	r9, r0
 80016ca:	0005      	movs	r5, r0
 80016cc:	030c      	lsls	r4, r1, #12
 80016ce:	0048      	lsls	r0, r1, #1
 80016d0:	4692      	mov	sl, r2
 80016d2:	001f      	movs	r7, r3
 80016d4:	b085      	sub	sp, #20
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	0d40      	lsrs	r0, r0, #21
 80016da:	0fce      	lsrs	r6, r1, #31
 80016dc:	2800      	cmp	r0, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_ddiv+0x26>
 80016e0:	e156      	b.n	8001990 <__aeabi_ddiv+0x2d4>
 80016e2:	4bd4      	ldr	r3, [pc, #848]	; (8001a34 <__aeabi_ddiv+0x378>)
 80016e4:	4298      	cmp	r0, r3
 80016e6:	d100      	bne.n	80016ea <__aeabi_ddiv+0x2e>
 80016e8:	e172      	b.n	80019d0 <__aeabi_ddiv+0x314>
 80016ea:	0f6b      	lsrs	r3, r5, #29
 80016ec:	00e4      	lsls	r4, r4, #3
 80016ee:	431c      	orrs	r4, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	4323      	orrs	r3, r4
 80016f6:	4698      	mov	r8, r3
 80016f8:	4bcf      	ldr	r3, [pc, #828]	; (8001a38 <__aeabi_ddiv+0x37c>)
 80016fa:	00ed      	lsls	r5, r5, #3
 80016fc:	469b      	mov	fp, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	4699      	mov	r9, r3
 8001702:	4483      	add	fp, r0
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	033c      	lsls	r4, r7, #12
 8001708:	007b      	lsls	r3, r7, #1
 800170a:	4650      	mov	r0, sl
 800170c:	0b24      	lsrs	r4, r4, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	0fff      	lsrs	r7, r7, #31
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0x5c>
 8001716:	e11f      	b.n	8001958 <__aeabi_ddiv+0x29c>
 8001718:	4ac6      	ldr	r2, [pc, #792]	; (8001a34 <__aeabi_ddiv+0x378>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x64>
 800171e:	e162      	b.n	80019e6 <__aeabi_ddiv+0x32a>
 8001720:	49c5      	ldr	r1, [pc, #788]	; (8001a38 <__aeabi_ddiv+0x37c>)
 8001722:	0f42      	lsrs	r2, r0, #29
 8001724:	468c      	mov	ip, r1
 8001726:	00e4      	lsls	r4, r4, #3
 8001728:	4659      	mov	r1, fp
 800172a:	4314      	orrs	r4, r2
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	4463      	add	r3, ip
 8001730:	0412      	lsls	r2, r2, #16
 8001732:	1acb      	subs	r3, r1, r3
 8001734:	4314      	orrs	r4, r2
 8001736:	469b      	mov	fp, r3
 8001738:	00c2      	lsls	r2, r0, #3
 800173a:	2000      	movs	r0, #0
 800173c:	0033      	movs	r3, r6
 800173e:	407b      	eors	r3, r7
 8001740:	469a      	mov	sl, r3
 8001742:	464b      	mov	r3, r9
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d827      	bhi.n	8001798 <__aeabi_ddiv+0xdc>
 8001748:	49bc      	ldr	r1, [pc, #752]	; (8001a3c <__aeabi_ddiv+0x380>)
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	58cb      	ldr	r3, [r1, r3]
 800174e:	469f      	mov	pc, r3
 8001750:	46b2      	mov	sl, r6
 8001752:	9b00      	ldr	r3, [sp, #0]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d016      	beq.n	8001786 <__aeabi_ddiv+0xca>
 8001758:	2b03      	cmp	r3, #3
 800175a:	d100      	bne.n	800175e <__aeabi_ddiv+0xa2>
 800175c:	e28e      	b.n	8001c7c <__aeabi_ddiv+0x5c0>
 800175e:	2b01      	cmp	r3, #1
 8001760:	d000      	beq.n	8001764 <__aeabi_ddiv+0xa8>
 8001762:	e0d9      	b.n	8001918 <__aeabi_ddiv+0x25c>
 8001764:	2300      	movs	r3, #0
 8001766:	2400      	movs	r4, #0
 8001768:	2500      	movs	r5, #0
 800176a:	4652      	mov	r2, sl
 800176c:	051b      	lsls	r3, r3, #20
 800176e:	4323      	orrs	r3, r4
 8001770:	07d2      	lsls	r2, r2, #31
 8001772:	4313      	orrs	r3, r2
 8001774:	0028      	movs	r0, r5
 8001776:	0019      	movs	r1, r3
 8001778:	b005      	add	sp, #20
 800177a:	bcf0      	pop	{r4, r5, r6, r7}
 800177c:	46bb      	mov	fp, r7
 800177e:	46b2      	mov	sl, r6
 8001780:	46a9      	mov	r9, r5
 8001782:	46a0      	mov	r8, r4
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001786:	2400      	movs	r4, #0
 8001788:	2500      	movs	r5, #0
 800178a:	4baa      	ldr	r3, [pc, #680]	; (8001a34 <__aeabi_ddiv+0x378>)
 800178c:	e7ed      	b.n	800176a <__aeabi_ddiv+0xae>
 800178e:	46ba      	mov	sl, r7
 8001790:	46a0      	mov	r8, r4
 8001792:	0015      	movs	r5, r2
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	e7dc      	b.n	8001752 <__aeabi_ddiv+0x96>
 8001798:	4544      	cmp	r4, r8
 800179a:	d200      	bcs.n	800179e <__aeabi_ddiv+0xe2>
 800179c:	e1c7      	b.n	8001b2e <__aeabi_ddiv+0x472>
 800179e:	d100      	bne.n	80017a2 <__aeabi_ddiv+0xe6>
 80017a0:	e1c2      	b.n	8001b28 <__aeabi_ddiv+0x46c>
 80017a2:	2301      	movs	r3, #1
 80017a4:	425b      	negs	r3, r3
 80017a6:	469c      	mov	ip, r3
 80017a8:	002e      	movs	r6, r5
 80017aa:	4640      	mov	r0, r8
 80017ac:	2500      	movs	r5, #0
 80017ae:	44e3      	add	fp, ip
 80017b0:	0223      	lsls	r3, r4, #8
 80017b2:	0e14      	lsrs	r4, r2, #24
 80017b4:	431c      	orrs	r4, r3
 80017b6:	0c1b      	lsrs	r3, r3, #16
 80017b8:	4699      	mov	r9, r3
 80017ba:	0423      	lsls	r3, r4, #16
 80017bc:	0c1f      	lsrs	r7, r3, #16
 80017be:	0212      	lsls	r2, r2, #8
 80017c0:	4649      	mov	r1, r9
 80017c2:	9200      	str	r2, [sp, #0]
 80017c4:	9701      	str	r7, [sp, #4]
 80017c6:	f7fe fd41 	bl	800024c <__aeabi_uidivmod>
 80017ca:	0002      	movs	r2, r0
 80017cc:	437a      	muls	r2, r7
 80017ce:	040b      	lsls	r3, r1, #16
 80017d0:	0c31      	lsrs	r1, r6, #16
 80017d2:	4680      	mov	r8, r0
 80017d4:	4319      	orrs	r1, r3
 80017d6:	428a      	cmp	r2, r1
 80017d8:	d907      	bls.n	80017ea <__aeabi_ddiv+0x12e>
 80017da:	2301      	movs	r3, #1
 80017dc:	425b      	negs	r3, r3
 80017de:	469c      	mov	ip, r3
 80017e0:	1909      	adds	r1, r1, r4
 80017e2:	44e0      	add	r8, ip
 80017e4:	428c      	cmp	r4, r1
 80017e6:	d800      	bhi.n	80017ea <__aeabi_ddiv+0x12e>
 80017e8:	e207      	b.n	8001bfa <__aeabi_ddiv+0x53e>
 80017ea:	1a88      	subs	r0, r1, r2
 80017ec:	4649      	mov	r1, r9
 80017ee:	f7fe fd2d 	bl	800024c <__aeabi_uidivmod>
 80017f2:	0409      	lsls	r1, r1, #16
 80017f4:	468c      	mov	ip, r1
 80017f6:	0431      	lsls	r1, r6, #16
 80017f8:	4666      	mov	r6, ip
 80017fa:	9a01      	ldr	r2, [sp, #4]
 80017fc:	0c09      	lsrs	r1, r1, #16
 80017fe:	4342      	muls	r2, r0
 8001800:	0003      	movs	r3, r0
 8001802:	4331      	orrs	r1, r6
 8001804:	428a      	cmp	r2, r1
 8001806:	d904      	bls.n	8001812 <__aeabi_ddiv+0x156>
 8001808:	1909      	adds	r1, r1, r4
 800180a:	3b01      	subs	r3, #1
 800180c:	428c      	cmp	r4, r1
 800180e:	d800      	bhi.n	8001812 <__aeabi_ddiv+0x156>
 8001810:	e1ed      	b.n	8001bee <__aeabi_ddiv+0x532>
 8001812:	1a88      	subs	r0, r1, r2
 8001814:	4642      	mov	r2, r8
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	431a      	orrs	r2, r3
 800181a:	4690      	mov	r8, r2
 800181c:	4641      	mov	r1, r8
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	040e      	lsls	r6, r1, #16
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	001f      	movs	r7, r3
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	0c36      	lsrs	r6, r6, #16
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	0c19      	lsrs	r1, r3, #16
 8001830:	000b      	movs	r3, r1
 8001832:	4373      	muls	r3, r6
 8001834:	0c12      	lsrs	r2, r2, #16
 8001836:	437e      	muls	r6, r7
 8001838:	9103      	str	r1, [sp, #12]
 800183a:	4351      	muls	r1, r2
 800183c:	437a      	muls	r2, r7
 800183e:	0c1f      	lsrs	r7, r3, #16
 8001840:	46bc      	mov	ip, r7
 8001842:	1876      	adds	r6, r6, r1
 8001844:	4466      	add	r6, ip
 8001846:	42b1      	cmp	r1, r6
 8001848:	d903      	bls.n	8001852 <__aeabi_ddiv+0x196>
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	0249      	lsls	r1, r1, #9
 800184e:	468c      	mov	ip, r1
 8001850:	4462      	add	r2, ip
 8001852:	0c31      	lsrs	r1, r6, #16
 8001854:	188a      	adds	r2, r1, r2
 8001856:	0431      	lsls	r1, r6, #16
 8001858:	041e      	lsls	r6, r3, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	198e      	adds	r6, r1, r6
 800185e:	4290      	cmp	r0, r2
 8001860:	d302      	bcc.n	8001868 <__aeabi_ddiv+0x1ac>
 8001862:	d112      	bne.n	800188a <__aeabi_ddiv+0x1ce>
 8001864:	42b5      	cmp	r5, r6
 8001866:	d210      	bcs.n	800188a <__aeabi_ddiv+0x1ce>
 8001868:	4643      	mov	r3, r8
 800186a:	1e59      	subs	r1, r3, #1
 800186c:	9b00      	ldr	r3, [sp, #0]
 800186e:	469c      	mov	ip, r3
 8001870:	4465      	add	r5, ip
 8001872:	001f      	movs	r7, r3
 8001874:	429d      	cmp	r5, r3
 8001876:	419b      	sbcs	r3, r3
 8001878:	425b      	negs	r3, r3
 800187a:	191b      	adds	r3, r3, r4
 800187c:	18c0      	adds	r0, r0, r3
 800187e:	4284      	cmp	r4, r0
 8001880:	d200      	bcs.n	8001884 <__aeabi_ddiv+0x1c8>
 8001882:	e1a0      	b.n	8001bc6 <__aeabi_ddiv+0x50a>
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x1cc>
 8001886:	e19b      	b.n	8001bc0 <__aeabi_ddiv+0x504>
 8001888:	4688      	mov	r8, r1
 800188a:	1bae      	subs	r6, r5, r6
 800188c:	42b5      	cmp	r5, r6
 800188e:	41ad      	sbcs	r5, r5
 8001890:	1a80      	subs	r0, r0, r2
 8001892:	426d      	negs	r5, r5
 8001894:	1b40      	subs	r0, r0, r5
 8001896:	4284      	cmp	r4, r0
 8001898:	d100      	bne.n	800189c <__aeabi_ddiv+0x1e0>
 800189a:	e1d5      	b.n	8001c48 <__aeabi_ddiv+0x58c>
 800189c:	4649      	mov	r1, r9
 800189e:	f7fe fcd5 	bl	800024c <__aeabi_uidivmod>
 80018a2:	9a01      	ldr	r2, [sp, #4]
 80018a4:	040b      	lsls	r3, r1, #16
 80018a6:	4342      	muls	r2, r0
 80018a8:	0c31      	lsrs	r1, r6, #16
 80018aa:	0005      	movs	r5, r0
 80018ac:	4319      	orrs	r1, r3
 80018ae:	428a      	cmp	r2, r1
 80018b0:	d900      	bls.n	80018b4 <__aeabi_ddiv+0x1f8>
 80018b2:	e16c      	b.n	8001b8e <__aeabi_ddiv+0x4d2>
 80018b4:	1a88      	subs	r0, r1, r2
 80018b6:	4649      	mov	r1, r9
 80018b8:	f7fe fcc8 	bl	800024c <__aeabi_uidivmod>
 80018bc:	9a01      	ldr	r2, [sp, #4]
 80018be:	0436      	lsls	r6, r6, #16
 80018c0:	4342      	muls	r2, r0
 80018c2:	0409      	lsls	r1, r1, #16
 80018c4:	0c36      	lsrs	r6, r6, #16
 80018c6:	0003      	movs	r3, r0
 80018c8:	430e      	orrs	r6, r1
 80018ca:	42b2      	cmp	r2, r6
 80018cc:	d900      	bls.n	80018d0 <__aeabi_ddiv+0x214>
 80018ce:	e153      	b.n	8001b78 <__aeabi_ddiv+0x4bc>
 80018d0:	9803      	ldr	r0, [sp, #12]
 80018d2:	1ab6      	subs	r6, r6, r2
 80018d4:	0002      	movs	r2, r0
 80018d6:	042d      	lsls	r5, r5, #16
 80018d8:	431d      	orrs	r5, r3
 80018da:	9f02      	ldr	r7, [sp, #8]
 80018dc:	042b      	lsls	r3, r5, #16
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	435a      	muls	r2, r3
 80018e2:	437b      	muls	r3, r7
 80018e4:	469c      	mov	ip, r3
 80018e6:	0c29      	lsrs	r1, r5, #16
 80018e8:	4348      	muls	r0, r1
 80018ea:	0c13      	lsrs	r3, r2, #16
 80018ec:	4484      	add	ip, r0
 80018ee:	4463      	add	r3, ip
 80018f0:	4379      	muls	r1, r7
 80018f2:	4298      	cmp	r0, r3
 80018f4:	d903      	bls.n	80018fe <__aeabi_ddiv+0x242>
 80018f6:	2080      	movs	r0, #128	; 0x80
 80018f8:	0240      	lsls	r0, r0, #9
 80018fa:	4684      	mov	ip, r0
 80018fc:	4461      	add	r1, ip
 80018fe:	0c18      	lsrs	r0, r3, #16
 8001900:	0412      	lsls	r2, r2, #16
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	0c12      	lsrs	r2, r2, #16
 8001906:	1841      	adds	r1, r0, r1
 8001908:	189b      	adds	r3, r3, r2
 800190a:	428e      	cmp	r6, r1
 800190c:	d200      	bcs.n	8001910 <__aeabi_ddiv+0x254>
 800190e:	e0ff      	b.n	8001b10 <__aeabi_ddiv+0x454>
 8001910:	d100      	bne.n	8001914 <__aeabi_ddiv+0x258>
 8001912:	e0fa      	b.n	8001b0a <__aeabi_ddiv+0x44e>
 8001914:	2301      	movs	r3, #1
 8001916:	431d      	orrs	r5, r3
 8001918:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <__aeabi_ddiv+0x384>)
 800191a:	445a      	add	r2, fp
 800191c:	2a00      	cmp	r2, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_ddiv+0x266>
 8001920:	e0aa      	b.n	8001a78 <__aeabi_ddiv+0x3bc>
 8001922:	076b      	lsls	r3, r5, #29
 8001924:	d000      	beq.n	8001928 <__aeabi_ddiv+0x26c>
 8001926:	e13d      	b.n	8001ba4 <__aeabi_ddiv+0x4e8>
 8001928:	08ed      	lsrs	r5, r5, #3
 800192a:	4643      	mov	r3, r8
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	d506      	bpl.n	800193e <__aeabi_ddiv+0x282>
 8001930:	4642      	mov	r2, r8
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <__aeabi_ddiv+0x388>)
 8001934:	401a      	ands	r2, r3
 8001936:	4690      	mov	r8, r2
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	00d2      	lsls	r2, r2, #3
 800193c:	445a      	add	r2, fp
 800193e:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <__aeabi_ddiv+0x38c>)
 8001940:	429a      	cmp	r2, r3
 8001942:	dd00      	ble.n	8001946 <__aeabi_ddiv+0x28a>
 8001944:	e71f      	b.n	8001786 <__aeabi_ddiv+0xca>
 8001946:	4643      	mov	r3, r8
 8001948:	075b      	lsls	r3, r3, #29
 800194a:	431d      	orrs	r5, r3
 800194c:	4643      	mov	r3, r8
 800194e:	0552      	lsls	r2, r2, #21
 8001950:	025c      	lsls	r4, r3, #9
 8001952:	0b24      	lsrs	r4, r4, #12
 8001954:	0d53      	lsrs	r3, r2, #21
 8001956:	e708      	b.n	800176a <__aeabi_ddiv+0xae>
 8001958:	4652      	mov	r2, sl
 800195a:	4322      	orrs	r2, r4
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x2a4>
 800195e:	e07b      	b.n	8001a58 <__aeabi_ddiv+0x39c>
 8001960:	2c00      	cmp	r4, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_ddiv+0x2aa>
 8001964:	e0fa      	b.n	8001b5c <__aeabi_ddiv+0x4a0>
 8001966:	0020      	movs	r0, r4
 8001968:	f001 f98c 	bl	8002c84 <__clzsi2>
 800196c:	0002      	movs	r2, r0
 800196e:	3a0b      	subs	r2, #11
 8001970:	231d      	movs	r3, #29
 8001972:	0001      	movs	r1, r0
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	4652      	mov	r2, sl
 8001978:	3908      	subs	r1, #8
 800197a:	40da      	lsrs	r2, r3
 800197c:	408c      	lsls	r4, r1
 800197e:	4314      	orrs	r4, r2
 8001980:	4652      	mov	r2, sl
 8001982:	408a      	lsls	r2, r1
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <__aeabi_ddiv+0x390>)
 8001986:	4458      	add	r0, fp
 8001988:	469b      	mov	fp, r3
 800198a:	4483      	add	fp, r0
 800198c:	2000      	movs	r0, #0
 800198e:	e6d5      	b.n	800173c <__aeabi_ddiv+0x80>
 8001990:	464b      	mov	r3, r9
 8001992:	4323      	orrs	r3, r4
 8001994:	4698      	mov	r8, r3
 8001996:	d044      	beq.n	8001a22 <__aeabi_ddiv+0x366>
 8001998:	2c00      	cmp	r4, #0
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0x2e2>
 800199c:	e0ce      	b.n	8001b3c <__aeabi_ddiv+0x480>
 800199e:	0020      	movs	r0, r4
 80019a0:	f001 f970 	bl	8002c84 <__clzsi2>
 80019a4:	0001      	movs	r1, r0
 80019a6:	0002      	movs	r2, r0
 80019a8:	390b      	subs	r1, #11
 80019aa:	231d      	movs	r3, #29
 80019ac:	1a5b      	subs	r3, r3, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	0010      	movs	r0, r2
 80019b2:	40d9      	lsrs	r1, r3
 80019b4:	3808      	subs	r0, #8
 80019b6:	4084      	lsls	r4, r0
 80019b8:	000b      	movs	r3, r1
 80019ba:	464d      	mov	r5, r9
 80019bc:	4323      	orrs	r3, r4
 80019be:	4698      	mov	r8, r3
 80019c0:	4085      	lsls	r5, r0
 80019c2:	4823      	ldr	r0, [pc, #140]	; (8001a50 <__aeabi_ddiv+0x394>)
 80019c4:	1a83      	subs	r3, r0, r2
 80019c6:	469b      	mov	fp, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	4699      	mov	r9, r3
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	e69a      	b.n	8001706 <__aeabi_ddiv+0x4a>
 80019d0:	464b      	mov	r3, r9
 80019d2:	4323      	orrs	r3, r4
 80019d4:	4698      	mov	r8, r3
 80019d6:	d11d      	bne.n	8001a14 <__aeabi_ddiv+0x358>
 80019d8:	2308      	movs	r3, #8
 80019da:	4699      	mov	r9, r3
 80019dc:	3b06      	subs	r3, #6
 80019de:	2500      	movs	r5, #0
 80019e0:	4683      	mov	fp, r0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	e68f      	b.n	8001706 <__aeabi_ddiv+0x4a>
 80019e6:	4652      	mov	r2, sl
 80019e8:	4322      	orrs	r2, r4
 80019ea:	d109      	bne.n	8001a00 <__aeabi_ddiv+0x344>
 80019ec:	2302      	movs	r3, #2
 80019ee:	4649      	mov	r1, r9
 80019f0:	4319      	orrs	r1, r3
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <__aeabi_ddiv+0x398>)
 80019f4:	4689      	mov	r9, r1
 80019f6:	469c      	mov	ip, r3
 80019f8:	2400      	movs	r4, #0
 80019fa:	2002      	movs	r0, #2
 80019fc:	44e3      	add	fp, ip
 80019fe:	e69d      	b.n	800173c <__aeabi_ddiv+0x80>
 8001a00:	2303      	movs	r3, #3
 8001a02:	464a      	mov	r2, r9
 8001a04:	431a      	orrs	r2, r3
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <__aeabi_ddiv+0x398>)
 8001a08:	4691      	mov	r9, r2
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	2003      	movs	r0, #3
 8001a10:	44e3      	add	fp, ip
 8001a12:	e693      	b.n	800173c <__aeabi_ddiv+0x80>
 8001a14:	230c      	movs	r3, #12
 8001a16:	4699      	mov	r9, r3
 8001a18:	3b09      	subs	r3, #9
 8001a1a:	46a0      	mov	r8, r4
 8001a1c:	4683      	mov	fp, r0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	e671      	b.n	8001706 <__aeabi_ddiv+0x4a>
 8001a22:	2304      	movs	r3, #4
 8001a24:	4699      	mov	r9, r3
 8001a26:	2300      	movs	r3, #0
 8001a28:	469b      	mov	fp, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	e669      	b.n	8001706 <__aeabi_ddiv+0x4a>
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	000007ff 	.word	0x000007ff
 8001a38:	fffffc01 	.word	0xfffffc01
 8001a3c:	0800cc5c 	.word	0x0800cc5c
 8001a40:	000003ff 	.word	0x000003ff
 8001a44:	feffffff 	.word	0xfeffffff
 8001a48:	000007fe 	.word	0x000007fe
 8001a4c:	000003f3 	.word	0x000003f3
 8001a50:	fffffc0d 	.word	0xfffffc0d
 8001a54:	fffff801 	.word	0xfffff801
 8001a58:	4649      	mov	r1, r9
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4319      	orrs	r1, r3
 8001a5e:	4689      	mov	r9, r1
 8001a60:	2400      	movs	r4, #0
 8001a62:	2001      	movs	r0, #1
 8001a64:	e66a      	b.n	800173c <__aeabi_ddiv+0x80>
 8001a66:	2300      	movs	r3, #0
 8001a68:	2480      	movs	r4, #128	; 0x80
 8001a6a:	469a      	mov	sl, r3
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	4b8a      	ldr	r3, [pc, #552]	; (8001c98 <__aeabi_ddiv+0x5dc>)
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	e67a      	b.n	800176a <__aeabi_ddiv+0xae>
 8001a74:	2501      	movs	r5, #1
 8001a76:	426d      	negs	r5, r5
 8001a78:	2301      	movs	r3, #1
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	2b38      	cmp	r3, #56	; 0x38
 8001a7e:	dd00      	ble.n	8001a82 <__aeabi_ddiv+0x3c6>
 8001a80:	e670      	b.n	8001764 <__aeabi_ddiv+0xa8>
 8001a82:	2b1f      	cmp	r3, #31
 8001a84:	dc00      	bgt.n	8001a88 <__aeabi_ddiv+0x3cc>
 8001a86:	e0bf      	b.n	8001c08 <__aeabi_ddiv+0x54c>
 8001a88:	211f      	movs	r1, #31
 8001a8a:	4249      	negs	r1, r1
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	4641      	mov	r1, r8
 8001a90:	40d1      	lsrs	r1, r2
 8001a92:	000a      	movs	r2, r1
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d004      	beq.n	8001aa2 <__aeabi_ddiv+0x3e6>
 8001a98:	4641      	mov	r1, r8
 8001a9a:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <__aeabi_ddiv+0x5e0>)
 8001a9c:	445b      	add	r3, fp
 8001a9e:	4099      	lsls	r1, r3
 8001aa0:	430d      	orrs	r5, r1
 8001aa2:	1e6b      	subs	r3, r5, #1
 8001aa4:	419d      	sbcs	r5, r3
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	432a      	orrs	r2, r5
 8001aaa:	001d      	movs	r5, r3
 8001aac:	2400      	movs	r4, #0
 8001aae:	4015      	ands	r5, r2
 8001ab0:	4213      	tst	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x3fa>
 8001ab4:	e0d4      	b.n	8001c60 <__aeabi_ddiv+0x5a4>
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4011      	ands	r1, r2
 8001abc:	2904      	cmp	r1, #4
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_ddiv+0x406>
 8001ac0:	e0cb      	b.n	8001c5a <__aeabi_ddiv+0x59e>
 8001ac2:	1d11      	adds	r1, r2, #4
 8001ac4:	4291      	cmp	r1, r2
 8001ac6:	4192      	sbcs	r2, r2
 8001ac8:	4252      	negs	r2, r2
 8001aca:	189b      	adds	r3, r3, r2
 8001acc:	000a      	movs	r2, r1
 8001ace:	0219      	lsls	r1, r3, #8
 8001ad0:	d400      	bmi.n	8001ad4 <__aeabi_ddiv+0x418>
 8001ad2:	e0c2      	b.n	8001c5a <__aeabi_ddiv+0x59e>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2500      	movs	r5, #0
 8001ada:	e646      	b.n	800176a <__aeabi_ddiv+0xae>
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	4641      	mov	r1, r8
 8001ae0:	031b      	lsls	r3, r3, #12
 8001ae2:	4219      	tst	r1, r3
 8001ae4:	d008      	beq.n	8001af8 <__aeabi_ddiv+0x43c>
 8001ae6:	421c      	tst	r4, r3
 8001ae8:	d106      	bne.n	8001af8 <__aeabi_ddiv+0x43c>
 8001aea:	431c      	orrs	r4, r3
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	46ba      	mov	sl, r7
 8001af0:	0015      	movs	r5, r2
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <__aeabi_ddiv+0x5dc>)
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	e638      	b.n	800176a <__aeabi_ddiv+0xae>
 8001af8:	2480      	movs	r4, #128	; 0x80
 8001afa:	4643      	mov	r3, r8
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	431c      	orrs	r4, r3
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	46b2      	mov	sl, r6
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <__aeabi_ddiv+0x5dc>)
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	e62f      	b.n	800176a <__aeabi_ddiv+0xae>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x454>
 8001b0e:	e703      	b.n	8001918 <__aeabi_ddiv+0x25c>
 8001b10:	19a6      	adds	r6, r4, r6
 8001b12:	1e68      	subs	r0, r5, #1
 8001b14:	42a6      	cmp	r6, r4
 8001b16:	d200      	bcs.n	8001b1a <__aeabi_ddiv+0x45e>
 8001b18:	e08d      	b.n	8001c36 <__aeabi_ddiv+0x57a>
 8001b1a:	428e      	cmp	r6, r1
 8001b1c:	d200      	bcs.n	8001b20 <__aeabi_ddiv+0x464>
 8001b1e:	e0a3      	b.n	8001c68 <__aeabi_ddiv+0x5ac>
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x468>
 8001b22:	e0b3      	b.n	8001c8c <__aeabi_ddiv+0x5d0>
 8001b24:	0005      	movs	r5, r0
 8001b26:	e6f5      	b.n	8001914 <__aeabi_ddiv+0x258>
 8001b28:	42aa      	cmp	r2, r5
 8001b2a:	d900      	bls.n	8001b2e <__aeabi_ddiv+0x472>
 8001b2c:	e639      	b.n	80017a2 <__aeabi_ddiv+0xe6>
 8001b2e:	4643      	mov	r3, r8
 8001b30:	07de      	lsls	r6, r3, #31
 8001b32:	0858      	lsrs	r0, r3, #1
 8001b34:	086b      	lsrs	r3, r5, #1
 8001b36:	431e      	orrs	r6, r3
 8001b38:	07ed      	lsls	r5, r5, #31
 8001b3a:	e639      	b.n	80017b0 <__aeabi_ddiv+0xf4>
 8001b3c:	4648      	mov	r0, r9
 8001b3e:	f001 f8a1 	bl	8002c84 <__clzsi2>
 8001b42:	0001      	movs	r1, r0
 8001b44:	0002      	movs	r2, r0
 8001b46:	3115      	adds	r1, #21
 8001b48:	3220      	adds	r2, #32
 8001b4a:	291c      	cmp	r1, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_ddiv+0x494>
 8001b4e:	e72c      	b.n	80019aa <__aeabi_ddiv+0x2ee>
 8001b50:	464b      	mov	r3, r9
 8001b52:	3808      	subs	r0, #8
 8001b54:	4083      	lsls	r3, r0
 8001b56:	2500      	movs	r5, #0
 8001b58:	4698      	mov	r8, r3
 8001b5a:	e732      	b.n	80019c2 <__aeabi_ddiv+0x306>
 8001b5c:	f001 f892 	bl	8002c84 <__clzsi2>
 8001b60:	0003      	movs	r3, r0
 8001b62:	001a      	movs	r2, r3
 8001b64:	3215      	adds	r2, #21
 8001b66:	3020      	adds	r0, #32
 8001b68:	2a1c      	cmp	r2, #28
 8001b6a:	dc00      	bgt.n	8001b6e <__aeabi_ddiv+0x4b2>
 8001b6c:	e700      	b.n	8001970 <__aeabi_ddiv+0x2b4>
 8001b6e:	4654      	mov	r4, sl
 8001b70:	3b08      	subs	r3, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	409c      	lsls	r4, r3
 8001b76:	e705      	b.n	8001984 <__aeabi_ddiv+0x2c8>
 8001b78:	1936      	adds	r6, r6, r4
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	42b4      	cmp	r4, r6
 8001b7e:	d900      	bls.n	8001b82 <__aeabi_ddiv+0x4c6>
 8001b80:	e6a6      	b.n	80018d0 <__aeabi_ddiv+0x214>
 8001b82:	42b2      	cmp	r2, r6
 8001b84:	d800      	bhi.n	8001b88 <__aeabi_ddiv+0x4cc>
 8001b86:	e6a3      	b.n	80018d0 <__aeabi_ddiv+0x214>
 8001b88:	1e83      	subs	r3, r0, #2
 8001b8a:	1936      	adds	r6, r6, r4
 8001b8c:	e6a0      	b.n	80018d0 <__aeabi_ddiv+0x214>
 8001b8e:	1909      	adds	r1, r1, r4
 8001b90:	3d01      	subs	r5, #1
 8001b92:	428c      	cmp	r4, r1
 8001b94:	d900      	bls.n	8001b98 <__aeabi_ddiv+0x4dc>
 8001b96:	e68d      	b.n	80018b4 <__aeabi_ddiv+0x1f8>
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	d800      	bhi.n	8001b9e <__aeabi_ddiv+0x4e2>
 8001b9c:	e68a      	b.n	80018b4 <__aeabi_ddiv+0x1f8>
 8001b9e:	1e85      	subs	r5, r0, #2
 8001ba0:	1909      	adds	r1, r1, r4
 8001ba2:	e687      	b.n	80018b4 <__aeabi_ddiv+0x1f8>
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	402b      	ands	r3, r5
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x4f2>
 8001bac:	e6bc      	b.n	8001928 <__aeabi_ddiv+0x26c>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	42ab      	cmp	r3, r5
 8001bb4:	419b      	sbcs	r3, r3
 8001bb6:	3504      	adds	r5, #4
 8001bb8:	425b      	negs	r3, r3
 8001bba:	08ed      	lsrs	r5, r5, #3
 8001bbc:	4498      	add	r8, r3
 8001bbe:	e6b4      	b.n	800192a <__aeabi_ddiv+0x26e>
 8001bc0:	42af      	cmp	r7, r5
 8001bc2:	d900      	bls.n	8001bc6 <__aeabi_ddiv+0x50a>
 8001bc4:	e660      	b.n	8001888 <__aeabi_ddiv+0x1cc>
 8001bc6:	4282      	cmp	r2, r0
 8001bc8:	d804      	bhi.n	8001bd4 <__aeabi_ddiv+0x518>
 8001bca:	d000      	beq.n	8001bce <__aeabi_ddiv+0x512>
 8001bcc:	e65c      	b.n	8001888 <__aeabi_ddiv+0x1cc>
 8001bce:	42ae      	cmp	r6, r5
 8001bd0:	d800      	bhi.n	8001bd4 <__aeabi_ddiv+0x518>
 8001bd2:	e659      	b.n	8001888 <__aeabi_ddiv+0x1cc>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	469c      	mov	ip, r3
 8001bda:	9b00      	ldr	r3, [sp, #0]
 8001bdc:	44e0      	add	r8, ip
 8001bde:	469c      	mov	ip, r3
 8001be0:	4465      	add	r5, ip
 8001be2:	429d      	cmp	r5, r3
 8001be4:	419b      	sbcs	r3, r3
 8001be6:	425b      	negs	r3, r3
 8001be8:	191b      	adds	r3, r3, r4
 8001bea:	18c0      	adds	r0, r0, r3
 8001bec:	e64d      	b.n	800188a <__aeabi_ddiv+0x1ce>
 8001bee:	428a      	cmp	r2, r1
 8001bf0:	d800      	bhi.n	8001bf4 <__aeabi_ddiv+0x538>
 8001bf2:	e60e      	b.n	8001812 <__aeabi_ddiv+0x156>
 8001bf4:	1e83      	subs	r3, r0, #2
 8001bf6:	1909      	adds	r1, r1, r4
 8001bf8:	e60b      	b.n	8001812 <__aeabi_ddiv+0x156>
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x544>
 8001bfe:	e5f4      	b.n	80017ea <__aeabi_ddiv+0x12e>
 8001c00:	1e83      	subs	r3, r0, #2
 8001c02:	4698      	mov	r8, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	e5f0      	b.n	80017ea <__aeabi_ddiv+0x12e>
 8001c08:	4925      	ldr	r1, [pc, #148]	; (8001ca0 <__aeabi_ddiv+0x5e4>)
 8001c0a:	0028      	movs	r0, r5
 8001c0c:	4459      	add	r1, fp
 8001c0e:	408d      	lsls	r5, r1
 8001c10:	4642      	mov	r2, r8
 8001c12:	408a      	lsls	r2, r1
 8001c14:	1e69      	subs	r1, r5, #1
 8001c16:	418d      	sbcs	r5, r1
 8001c18:	4641      	mov	r1, r8
 8001c1a:	40d8      	lsrs	r0, r3
 8001c1c:	40d9      	lsrs	r1, r3
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	432a      	orrs	r2, r5
 8001c22:	000b      	movs	r3, r1
 8001c24:	0751      	lsls	r1, r2, #29
 8001c26:	d100      	bne.n	8001c2a <__aeabi_ddiv+0x56e>
 8001c28:	e751      	b.n	8001ace <__aeabi_ddiv+0x412>
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	4011      	ands	r1, r2
 8001c2e:	2904      	cmp	r1, #4
 8001c30:	d000      	beq.n	8001c34 <__aeabi_ddiv+0x578>
 8001c32:	e746      	b.n	8001ac2 <__aeabi_ddiv+0x406>
 8001c34:	e74b      	b.n	8001ace <__aeabi_ddiv+0x412>
 8001c36:	0005      	movs	r5, r0
 8001c38:	428e      	cmp	r6, r1
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_ddiv+0x582>
 8001c3c:	e66a      	b.n	8001914 <__aeabi_ddiv+0x258>
 8001c3e:	9a00      	ldr	r2, [sp, #0]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d000      	beq.n	8001c46 <__aeabi_ddiv+0x58a>
 8001c44:	e666      	b.n	8001914 <__aeabi_ddiv+0x258>
 8001c46:	e667      	b.n	8001918 <__aeabi_ddiv+0x25c>
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <__aeabi_ddiv+0x5e8>)
 8001c4a:	445a      	add	r2, fp
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_ddiv+0x596>
 8001c50:	e710      	b.n	8001a74 <__aeabi_ddiv+0x3b8>
 8001c52:	2301      	movs	r3, #1
 8001c54:	2500      	movs	r5, #0
 8001c56:	4498      	add	r8, r3
 8001c58:	e667      	b.n	800192a <__aeabi_ddiv+0x26e>
 8001c5a:	075d      	lsls	r5, r3, #29
 8001c5c:	025b      	lsls	r3, r3, #9
 8001c5e:	0b1c      	lsrs	r4, r3, #12
 8001c60:	08d2      	lsrs	r2, r2, #3
 8001c62:	2300      	movs	r3, #0
 8001c64:	4315      	orrs	r5, r2
 8001c66:	e580      	b.n	800176a <__aeabi_ddiv+0xae>
 8001c68:	9800      	ldr	r0, [sp, #0]
 8001c6a:	3d02      	subs	r5, #2
 8001c6c:	0042      	lsls	r2, r0, #1
 8001c6e:	4282      	cmp	r2, r0
 8001c70:	41bf      	sbcs	r7, r7
 8001c72:	427f      	negs	r7, r7
 8001c74:	193c      	adds	r4, r7, r4
 8001c76:	1936      	adds	r6, r6, r4
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	e7dd      	b.n	8001c38 <__aeabi_ddiv+0x57c>
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	4643      	mov	r3, r8
 8001c80:	0324      	lsls	r4, r4, #12
 8001c82:	431c      	orrs	r4, r3
 8001c84:	0324      	lsls	r4, r4, #12
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__aeabi_ddiv+0x5dc>)
 8001c88:	0b24      	lsrs	r4, r4, #12
 8001c8a:	e56e      	b.n	800176a <__aeabi_ddiv+0xae>
 8001c8c:	9a00      	ldr	r2, [sp, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d3ea      	bcc.n	8001c68 <__aeabi_ddiv+0x5ac>
 8001c92:	0005      	movs	r5, r0
 8001c94:	e7d3      	b.n	8001c3e <__aeabi_ddiv+0x582>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	0000043e 	.word	0x0000043e
 8001ca0:	0000041e 	.word	0x0000041e
 8001ca4:	000003ff 	.word	0x000003ff

08001ca8 <__eqdf2>:
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	464e      	mov	r6, r9
 8001cac:	4645      	mov	r5, r8
 8001cae:	46de      	mov	lr, fp
 8001cb0:	4657      	mov	r7, sl
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	b5e0      	push	{r5, r6, r7, lr}
 8001cb6:	0017      	movs	r7, r2
 8001cb8:	031a      	lsls	r2, r3, #12
 8001cba:	0b12      	lsrs	r2, r2, #12
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	4684      	mov	ip, r0
 8001cc0:	4819      	ldr	r0, [pc, #100]	; (8001d28 <__eqdf2+0x80>)
 8001cc2:	030e      	lsls	r6, r1, #12
 8001cc4:	004c      	lsls	r4, r1, #1
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	005a      	lsls	r2, r3, #1
 8001cca:	0fdb      	lsrs	r3, r3, #31
 8001ccc:	469b      	mov	fp, r3
 8001cce:	0b36      	lsrs	r6, r6, #12
 8001cd0:	0d64      	lsrs	r4, r4, #21
 8001cd2:	0fc9      	lsrs	r1, r1, #31
 8001cd4:	0d52      	lsrs	r2, r2, #21
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	d019      	beq.n	8001d0e <__eqdf2+0x66>
 8001cda:	4282      	cmp	r2, r0
 8001cdc:	d010      	beq.n	8001d00 <__eqdf2+0x58>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	4294      	cmp	r4, r2
 8001ce2:	d10e      	bne.n	8001d02 <__eqdf2+0x5a>
 8001ce4:	454e      	cmp	r6, r9
 8001ce6:	d10c      	bne.n	8001d02 <__eqdf2+0x5a>
 8001ce8:	2001      	movs	r0, #1
 8001cea:	45c4      	cmp	ip, r8
 8001cec:	d109      	bne.n	8001d02 <__eqdf2+0x5a>
 8001cee:	4559      	cmp	r1, fp
 8001cf0:	d017      	beq.n	8001d22 <__eqdf2+0x7a>
 8001cf2:	2c00      	cmp	r4, #0
 8001cf4:	d105      	bne.n	8001d02 <__eqdf2+0x5a>
 8001cf6:	0030      	movs	r0, r6
 8001cf8:	4328      	orrs	r0, r5
 8001cfa:	1e43      	subs	r3, r0, #1
 8001cfc:	4198      	sbcs	r0, r3
 8001cfe:	e000      	b.n	8001d02 <__eqdf2+0x5a>
 8001d00:	2001      	movs	r0, #1
 8001d02:	bcf0      	pop	{r4, r5, r6, r7}
 8001d04:	46bb      	mov	fp, r7
 8001d06:	46b2      	mov	sl, r6
 8001d08:	46a9      	mov	r9, r5
 8001d0a:	46a0      	mov	r8, r4
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	0033      	movs	r3, r6
 8001d10:	2001      	movs	r0, #1
 8001d12:	432b      	orrs	r3, r5
 8001d14:	d1f5      	bne.n	8001d02 <__eqdf2+0x5a>
 8001d16:	42a2      	cmp	r2, r4
 8001d18:	d1f3      	bne.n	8001d02 <__eqdf2+0x5a>
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	d1f0      	bne.n	8001d02 <__eqdf2+0x5a>
 8001d20:	e7e2      	b.n	8001ce8 <__eqdf2+0x40>
 8001d22:	2000      	movs	r0, #0
 8001d24:	e7ed      	b.n	8001d02 <__eqdf2+0x5a>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff

08001d2c <__gedf2>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	4647      	mov	r7, r8
 8001d30:	46ce      	mov	lr, r9
 8001d32:	0004      	movs	r4, r0
 8001d34:	0018      	movs	r0, r3
 8001d36:	0016      	movs	r6, r2
 8001d38:	031b      	lsls	r3, r3, #12
 8001d3a:	0b1b      	lsrs	r3, r3, #12
 8001d3c:	4d2d      	ldr	r5, [pc, #180]	; (8001df4 <__gedf2+0xc8>)
 8001d3e:	004a      	lsls	r2, r1, #1
 8001d40:	4699      	mov	r9, r3
 8001d42:	b580      	push	{r7, lr}
 8001d44:	0043      	lsls	r3, r0, #1
 8001d46:	030f      	lsls	r7, r1, #12
 8001d48:	46a4      	mov	ip, r4
 8001d4a:	46b0      	mov	r8, r6
 8001d4c:	0b3f      	lsrs	r7, r7, #12
 8001d4e:	0d52      	lsrs	r2, r2, #21
 8001d50:	0fc9      	lsrs	r1, r1, #31
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	0fc0      	lsrs	r0, r0, #31
 8001d56:	42aa      	cmp	r2, r5
 8001d58:	d021      	beq.n	8001d9e <__gedf2+0x72>
 8001d5a:	42ab      	cmp	r3, r5
 8001d5c:	d013      	beq.n	8001d86 <__gedf2+0x5a>
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	d122      	bne.n	8001da8 <__gedf2+0x7c>
 8001d62:	433c      	orrs	r4, r7
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <__gedf2+0x42>
 8001d68:	464d      	mov	r5, r9
 8001d6a:	432e      	orrs	r6, r5
 8001d6c:	d022      	beq.n	8001db4 <__gedf2+0x88>
 8001d6e:	2c00      	cmp	r4, #0
 8001d70:	d010      	beq.n	8001d94 <__gedf2+0x68>
 8001d72:	4281      	cmp	r1, r0
 8001d74:	d022      	beq.n	8001dbc <__gedf2+0x90>
 8001d76:	2002      	movs	r0, #2
 8001d78:	3901      	subs	r1, #1
 8001d7a:	4008      	ands	r0, r1
 8001d7c:	3801      	subs	r0, #1
 8001d7e:	bcc0      	pop	{r6, r7}
 8001d80:	46b9      	mov	r9, r7
 8001d82:	46b0      	mov	r8, r6
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d86:	464d      	mov	r5, r9
 8001d88:	432e      	orrs	r6, r5
 8001d8a:	d129      	bne.n	8001de0 <__gedf2+0xb4>
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	d1f0      	bne.n	8001d72 <__gedf2+0x46>
 8001d90:	433c      	orrs	r4, r7
 8001d92:	d1ee      	bne.n	8001d72 <__gedf2+0x46>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d1f2      	bne.n	8001d7e <__gedf2+0x52>
 8001d98:	2001      	movs	r0, #1
 8001d9a:	4240      	negs	r0, r0
 8001d9c:	e7ef      	b.n	8001d7e <__gedf2+0x52>
 8001d9e:	003d      	movs	r5, r7
 8001da0:	4325      	orrs	r5, r4
 8001da2:	d11d      	bne.n	8001de0 <__gedf2+0xb4>
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d0ee      	beq.n	8001d86 <__gedf2+0x5a>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e2      	bne.n	8001d72 <__gedf2+0x46>
 8001dac:	464c      	mov	r4, r9
 8001dae:	4326      	orrs	r6, r4
 8001db0:	d1df      	bne.n	8001d72 <__gedf2+0x46>
 8001db2:	e7e0      	b.n	8001d76 <__gedf2+0x4a>
 8001db4:	2000      	movs	r0, #0
 8001db6:	2c00      	cmp	r4, #0
 8001db8:	d0e1      	beq.n	8001d7e <__gedf2+0x52>
 8001dba:	e7dc      	b.n	8001d76 <__gedf2+0x4a>
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dc0a      	bgt.n	8001dd6 <__gedf2+0xaa>
 8001dc0:	dbe8      	blt.n	8001d94 <__gedf2+0x68>
 8001dc2:	454f      	cmp	r7, r9
 8001dc4:	d8d7      	bhi.n	8001d76 <__gedf2+0x4a>
 8001dc6:	d00e      	beq.n	8001de6 <__gedf2+0xba>
 8001dc8:	2000      	movs	r0, #0
 8001dca:	454f      	cmp	r7, r9
 8001dcc:	d2d7      	bcs.n	8001d7e <__gedf2+0x52>
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d0e2      	beq.n	8001d98 <__gedf2+0x6c>
 8001dd2:	0008      	movs	r0, r1
 8001dd4:	e7d3      	b.n	8001d7e <__gedf2+0x52>
 8001dd6:	4243      	negs	r3, r0
 8001dd8:	4158      	adcs	r0, r3
 8001dda:	0040      	lsls	r0, r0, #1
 8001ddc:	3801      	subs	r0, #1
 8001dde:	e7ce      	b.n	8001d7e <__gedf2+0x52>
 8001de0:	2002      	movs	r0, #2
 8001de2:	4240      	negs	r0, r0
 8001de4:	e7cb      	b.n	8001d7e <__gedf2+0x52>
 8001de6:	45c4      	cmp	ip, r8
 8001de8:	d8c5      	bhi.n	8001d76 <__gedf2+0x4a>
 8001dea:	2000      	movs	r0, #0
 8001dec:	45c4      	cmp	ip, r8
 8001dee:	d2c6      	bcs.n	8001d7e <__gedf2+0x52>
 8001df0:	e7ed      	b.n	8001dce <__gedf2+0xa2>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff

08001df8 <__ledf2>:
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	4647      	mov	r7, r8
 8001dfc:	46ce      	mov	lr, r9
 8001dfe:	0004      	movs	r4, r0
 8001e00:	0018      	movs	r0, r3
 8001e02:	0016      	movs	r6, r2
 8001e04:	031b      	lsls	r3, r3, #12
 8001e06:	0b1b      	lsrs	r3, r3, #12
 8001e08:	4d2c      	ldr	r5, [pc, #176]	; (8001ebc <__ledf2+0xc4>)
 8001e0a:	004a      	lsls	r2, r1, #1
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	0043      	lsls	r3, r0, #1
 8001e12:	030f      	lsls	r7, r1, #12
 8001e14:	46a4      	mov	ip, r4
 8001e16:	46b0      	mov	r8, r6
 8001e18:	0b3f      	lsrs	r7, r7, #12
 8001e1a:	0d52      	lsrs	r2, r2, #21
 8001e1c:	0fc9      	lsrs	r1, r1, #31
 8001e1e:	0d5b      	lsrs	r3, r3, #21
 8001e20:	0fc0      	lsrs	r0, r0, #31
 8001e22:	42aa      	cmp	r2, r5
 8001e24:	d00d      	beq.n	8001e42 <__ledf2+0x4a>
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	d010      	beq.n	8001e4c <__ledf2+0x54>
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d127      	bne.n	8001e7e <__ledf2+0x86>
 8001e2e:	433c      	orrs	r4, r7
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <__ledf2+0x60>
 8001e34:	464d      	mov	r5, r9
 8001e36:	432e      	orrs	r6, r5
 8001e38:	d10e      	bne.n	8001e58 <__ledf2+0x60>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d015      	beq.n	8001e6c <__ledf2+0x74>
 8001e40:	e00e      	b.n	8001e60 <__ledf2+0x68>
 8001e42:	003d      	movs	r5, r7
 8001e44:	4325      	orrs	r5, r4
 8001e46:	d110      	bne.n	8001e6a <__ledf2+0x72>
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d118      	bne.n	8001e7e <__ledf2+0x86>
 8001e4c:	464d      	mov	r5, r9
 8001e4e:	432e      	orrs	r6, r5
 8001e50:	d10b      	bne.n	8001e6a <__ledf2+0x72>
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d102      	bne.n	8001e5c <__ledf2+0x64>
 8001e56:	433c      	orrs	r4, r7
 8001e58:	2c00      	cmp	r4, #0
 8001e5a:	d00b      	beq.n	8001e74 <__ledf2+0x7c>
 8001e5c:	4281      	cmp	r1, r0
 8001e5e:	d014      	beq.n	8001e8a <__ledf2+0x92>
 8001e60:	2002      	movs	r0, #2
 8001e62:	3901      	subs	r1, #1
 8001e64:	4008      	ands	r0, r1
 8001e66:	3801      	subs	r0, #1
 8001e68:	e000      	b.n	8001e6c <__ledf2+0x74>
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	bcc0      	pop	{r6, r7}
 8001e6e:	46b9      	mov	r9, r7
 8001e70:	46b0      	mov	r8, r6
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d1f9      	bne.n	8001e6c <__ledf2+0x74>
 8001e78:	2001      	movs	r0, #1
 8001e7a:	4240      	negs	r0, r0
 8001e7c:	e7f6      	b.n	8001e6c <__ledf2+0x74>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ec      	bne.n	8001e5c <__ledf2+0x64>
 8001e82:	464c      	mov	r4, r9
 8001e84:	4326      	orrs	r6, r4
 8001e86:	d1e9      	bne.n	8001e5c <__ledf2+0x64>
 8001e88:	e7ea      	b.n	8001e60 <__ledf2+0x68>
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dd04      	ble.n	8001e98 <__ledf2+0xa0>
 8001e8e:	4243      	negs	r3, r0
 8001e90:	4158      	adcs	r0, r3
 8001e92:	0040      	lsls	r0, r0, #1
 8001e94:	3801      	subs	r0, #1
 8001e96:	e7e9      	b.n	8001e6c <__ledf2+0x74>
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbeb      	blt.n	8001e74 <__ledf2+0x7c>
 8001e9c:	454f      	cmp	r7, r9
 8001e9e:	d8df      	bhi.n	8001e60 <__ledf2+0x68>
 8001ea0:	d006      	beq.n	8001eb0 <__ledf2+0xb8>
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	454f      	cmp	r7, r9
 8001ea6:	d2e1      	bcs.n	8001e6c <__ledf2+0x74>
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d0e5      	beq.n	8001e78 <__ledf2+0x80>
 8001eac:	0008      	movs	r0, r1
 8001eae:	e7dd      	b.n	8001e6c <__ledf2+0x74>
 8001eb0:	45c4      	cmp	ip, r8
 8001eb2:	d8d5      	bhi.n	8001e60 <__ledf2+0x68>
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	45c4      	cmp	ip, r8
 8001eb8:	d2d8      	bcs.n	8001e6c <__ledf2+0x74>
 8001eba:	e7f5      	b.n	8001ea8 <__ledf2+0xb0>
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__aeabi_dmul>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	4657      	mov	r7, sl
 8001ec4:	464e      	mov	r6, r9
 8001ec6:	4645      	mov	r5, r8
 8001ec8:	46de      	mov	lr, fp
 8001eca:	b5e0      	push	{r5, r6, r7, lr}
 8001ecc:	4698      	mov	r8, r3
 8001ece:	030c      	lsls	r4, r1, #12
 8001ed0:	004b      	lsls	r3, r1, #1
 8001ed2:	0006      	movs	r6, r0
 8001ed4:	4692      	mov	sl, r2
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	0b24      	lsrs	r4, r4, #12
 8001eda:	0d5b      	lsrs	r3, r3, #21
 8001edc:	0fcf      	lsrs	r7, r1, #31
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dmul+0x24>
 8001ee2:	e15c      	b.n	800219e <__aeabi_dmul+0x2de>
 8001ee4:	4ad9      	ldr	r2, [pc, #868]	; (800224c <__aeabi_dmul+0x38c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dmul+0x2c>
 8001eea:	e175      	b.n	80021d8 <__aeabi_dmul+0x318>
 8001eec:	0f42      	lsrs	r2, r0, #29
 8001eee:	00e4      	lsls	r4, r4, #3
 8001ef0:	4314      	orrs	r4, r2
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0412      	lsls	r2, r2, #16
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	4ad5      	ldr	r2, [pc, #852]	; (8002250 <__aeabi_dmul+0x390>)
 8001efa:	00c5      	lsls	r5, r0, #3
 8001efc:	4694      	mov	ip, r2
 8001efe:	4463      	add	r3, ip
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	4699      	mov	r9, r3
 8001f06:	469b      	mov	fp, r3
 8001f08:	4643      	mov	r3, r8
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	031e      	lsls	r6, r3, #12
 8001f0e:	0fd2      	lsrs	r2, r2, #31
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4650      	mov	r0, sl
 8001f14:	4690      	mov	r8, r2
 8001f16:	0b36      	lsrs	r6, r6, #12
 8001f18:	0d5b      	lsrs	r3, r3, #21
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dmul+0x5e>
 8001f1c:	e120      	b.n	8002160 <__aeabi_dmul+0x2a0>
 8001f1e:	4acb      	ldr	r2, [pc, #812]	; (800224c <__aeabi_dmul+0x38c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dmul+0x66>
 8001f24:	e162      	b.n	80021ec <__aeabi_dmul+0x32c>
 8001f26:	49ca      	ldr	r1, [pc, #808]	; (8002250 <__aeabi_dmul+0x390>)
 8001f28:	0f42      	lsrs	r2, r0, #29
 8001f2a:	468c      	mov	ip, r1
 8001f2c:	9900      	ldr	r1, [sp, #0]
 8001f2e:	4463      	add	r3, ip
 8001f30:	00f6      	lsls	r6, r6, #3
 8001f32:	468c      	mov	ip, r1
 8001f34:	4316      	orrs	r6, r2
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	449c      	add	ip, r3
 8001f3a:	0412      	lsls	r2, r2, #16
 8001f3c:	4663      	mov	r3, ip
 8001f3e:	4316      	orrs	r6, r2
 8001f40:	00c2      	lsls	r2, r0, #3
 8001f42:	2000      	movs	r0, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	9900      	ldr	r1, [sp, #0]
 8001f48:	4643      	mov	r3, r8
 8001f4a:	3101      	adds	r1, #1
 8001f4c:	468c      	mov	ip, r1
 8001f4e:	4649      	mov	r1, r9
 8001f50:	407b      	eors	r3, r7
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	290f      	cmp	r1, #15
 8001f56:	d826      	bhi.n	8001fa6 <__aeabi_dmul+0xe6>
 8001f58:	4bbe      	ldr	r3, [pc, #760]	; (8002254 <__aeabi_dmul+0x394>)
 8001f5a:	0089      	lsls	r1, r1, #2
 8001f5c:	5859      	ldr	r1, [r3, r1]
 8001f5e:	468f      	mov	pc, r1
 8001f60:	4643      	mov	r3, r8
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	0034      	movs	r4, r6
 8001f66:	0015      	movs	r5, r2
 8001f68:	4683      	mov	fp, r0
 8001f6a:	465b      	mov	r3, fp
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d016      	beq.n	8001f9e <__aeabi_dmul+0xde>
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dmul+0xb6>
 8001f74:	e203      	b.n	800237e <__aeabi_dmul+0x4be>
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dmul+0xbc>
 8001f7a:	e0cd      	b.n	8002118 <__aeabi_dmul+0x258>
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2400      	movs	r4, #0
 8001f80:	2500      	movs	r5, #0
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	0512      	lsls	r2, r2, #20
 8001f86:	4322      	orrs	r2, r4
 8001f88:	07db      	lsls	r3, r3, #31
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	0028      	movs	r0, r5
 8001f8e:	0011      	movs	r1, r2
 8001f90:	b007      	add	sp, #28
 8001f92:	bcf0      	pop	{r4, r5, r6, r7}
 8001f94:	46bb      	mov	fp, r7
 8001f96:	46b2      	mov	sl, r6
 8001f98:	46a9      	mov	r9, r5
 8001f9a:	46a0      	mov	r8, r4
 8001f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	4aaa      	ldr	r2, [pc, #680]	; (800224c <__aeabi_dmul+0x38c>)
 8001fa4:	e7ed      	b.n	8001f82 <__aeabi_dmul+0xc2>
 8001fa6:	0c28      	lsrs	r0, r5, #16
 8001fa8:	042d      	lsls	r5, r5, #16
 8001faa:	0c2d      	lsrs	r5, r5, #16
 8001fac:	002b      	movs	r3, r5
 8001fae:	0c11      	lsrs	r1, r2, #16
 8001fb0:	0412      	lsls	r2, r2, #16
 8001fb2:	0c12      	lsrs	r2, r2, #16
 8001fb4:	4353      	muls	r3, r2
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	002f      	movs	r7, r5
 8001fbc:	4343      	muls	r3, r0
 8001fbe:	4699      	mov	r9, r3
 8001fc0:	434f      	muls	r7, r1
 8001fc2:	444f      	add	r7, r9
 8001fc4:	46bb      	mov	fp, r7
 8001fc6:	4647      	mov	r7, r8
 8001fc8:	000b      	movs	r3, r1
 8001fca:	0c3f      	lsrs	r7, r7, #16
 8001fcc:	46ba      	mov	sl, r7
 8001fce:	4343      	muls	r3, r0
 8001fd0:	44da      	add	sl, fp
 8001fd2:	9302      	str	r3, [sp, #8]
 8001fd4:	45d1      	cmp	r9, sl
 8001fd6:	d904      	bls.n	8001fe2 <__aeabi_dmul+0x122>
 8001fd8:	2780      	movs	r7, #128	; 0x80
 8001fda:	027f      	lsls	r7, r7, #9
 8001fdc:	46b9      	mov	r9, r7
 8001fde:	444b      	add	r3, r9
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	469b      	mov	fp, r3
 8001fe8:	4653      	mov	r3, sl
 8001fea:	041f      	lsls	r7, r3, #16
 8001fec:	4643      	mov	r3, r8
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4698      	mov	r8, r3
 8001ff4:	003b      	movs	r3, r7
 8001ff6:	4443      	add	r3, r8
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	0c33      	lsrs	r3, r6, #16
 8001ffc:	0436      	lsls	r6, r6, #16
 8001ffe:	0c36      	lsrs	r6, r6, #16
 8002000:	4698      	mov	r8, r3
 8002002:	0033      	movs	r3, r6
 8002004:	4343      	muls	r3, r0
 8002006:	4699      	mov	r9, r3
 8002008:	4643      	mov	r3, r8
 800200a:	4343      	muls	r3, r0
 800200c:	002f      	movs	r7, r5
 800200e:	469a      	mov	sl, r3
 8002010:	4643      	mov	r3, r8
 8002012:	4377      	muls	r7, r6
 8002014:	435d      	muls	r5, r3
 8002016:	0c38      	lsrs	r0, r7, #16
 8002018:	444d      	add	r5, r9
 800201a:	1945      	adds	r5, r0, r5
 800201c:	45a9      	cmp	r9, r5
 800201e:	d903      	bls.n	8002028 <__aeabi_dmul+0x168>
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	025b      	lsls	r3, r3, #9
 8002024:	4699      	mov	r9, r3
 8002026:	44ca      	add	sl, r9
 8002028:	043f      	lsls	r7, r7, #16
 800202a:	0c28      	lsrs	r0, r5, #16
 800202c:	0c3f      	lsrs	r7, r7, #16
 800202e:	042d      	lsls	r5, r5, #16
 8002030:	19ed      	adds	r5, r5, r7
 8002032:	0c27      	lsrs	r7, r4, #16
 8002034:	0424      	lsls	r4, r4, #16
 8002036:	0c24      	lsrs	r4, r4, #16
 8002038:	0003      	movs	r3, r0
 800203a:	0020      	movs	r0, r4
 800203c:	4350      	muls	r0, r2
 800203e:	437a      	muls	r2, r7
 8002040:	4691      	mov	r9, r2
 8002042:	003a      	movs	r2, r7
 8002044:	4453      	add	r3, sl
 8002046:	9305      	str	r3, [sp, #20]
 8002048:	0c03      	lsrs	r3, r0, #16
 800204a:	469a      	mov	sl, r3
 800204c:	434a      	muls	r2, r1
 800204e:	4361      	muls	r1, r4
 8002050:	4449      	add	r1, r9
 8002052:	4451      	add	r1, sl
 8002054:	44ab      	add	fp, r5
 8002056:	4589      	cmp	r9, r1
 8002058:	d903      	bls.n	8002062 <__aeabi_dmul+0x1a2>
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	4699      	mov	r9, r3
 8002060:	444a      	add	r2, r9
 8002062:	0400      	lsls	r0, r0, #16
 8002064:	0c0b      	lsrs	r3, r1, #16
 8002066:	0c00      	lsrs	r0, r0, #16
 8002068:	0409      	lsls	r1, r1, #16
 800206a:	1809      	adds	r1, r1, r0
 800206c:	0020      	movs	r0, r4
 800206e:	4699      	mov	r9, r3
 8002070:	4643      	mov	r3, r8
 8002072:	4370      	muls	r0, r6
 8002074:	435c      	muls	r4, r3
 8002076:	437e      	muls	r6, r7
 8002078:	435f      	muls	r7, r3
 800207a:	0c03      	lsrs	r3, r0, #16
 800207c:	4698      	mov	r8, r3
 800207e:	19a4      	adds	r4, r4, r6
 8002080:	4444      	add	r4, r8
 8002082:	444a      	add	r2, r9
 8002084:	9703      	str	r7, [sp, #12]
 8002086:	42a6      	cmp	r6, r4
 8002088:	d904      	bls.n	8002094 <__aeabi_dmul+0x1d4>
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	4698      	mov	r8, r3
 8002090:	4447      	add	r7, r8
 8002092:	9703      	str	r7, [sp, #12]
 8002094:	0423      	lsls	r3, r4, #16
 8002096:	9e02      	ldr	r6, [sp, #8]
 8002098:	469a      	mov	sl, r3
 800209a:	9b05      	ldr	r3, [sp, #20]
 800209c:	445e      	add	r6, fp
 800209e:	4698      	mov	r8, r3
 80020a0:	42ae      	cmp	r6, r5
 80020a2:	41ad      	sbcs	r5, r5
 80020a4:	1876      	adds	r6, r6, r1
 80020a6:	428e      	cmp	r6, r1
 80020a8:	4189      	sbcs	r1, r1
 80020aa:	0400      	lsls	r0, r0, #16
 80020ac:	0c00      	lsrs	r0, r0, #16
 80020ae:	4450      	add	r0, sl
 80020b0:	4440      	add	r0, r8
 80020b2:	426d      	negs	r5, r5
 80020b4:	1947      	adds	r7, r0, r5
 80020b6:	46b8      	mov	r8, r7
 80020b8:	4693      	mov	fp, r2
 80020ba:	4249      	negs	r1, r1
 80020bc:	4689      	mov	r9, r1
 80020be:	44c3      	add	fp, r8
 80020c0:	44d9      	add	r9, fp
 80020c2:	4298      	cmp	r0, r3
 80020c4:	4180      	sbcs	r0, r0
 80020c6:	45a8      	cmp	r8, r5
 80020c8:	41ad      	sbcs	r5, r5
 80020ca:	4593      	cmp	fp, r2
 80020cc:	4192      	sbcs	r2, r2
 80020ce:	4589      	cmp	r9, r1
 80020d0:	4189      	sbcs	r1, r1
 80020d2:	426d      	negs	r5, r5
 80020d4:	4240      	negs	r0, r0
 80020d6:	4328      	orrs	r0, r5
 80020d8:	0c24      	lsrs	r4, r4, #16
 80020da:	4252      	negs	r2, r2
 80020dc:	4249      	negs	r1, r1
 80020de:	430a      	orrs	r2, r1
 80020e0:	9b03      	ldr	r3, [sp, #12]
 80020e2:	1900      	adds	r0, r0, r4
 80020e4:	1880      	adds	r0, r0, r2
 80020e6:	18c7      	adds	r7, r0, r3
 80020e8:	464b      	mov	r3, r9
 80020ea:	0ddc      	lsrs	r4, r3, #23
 80020ec:	9b04      	ldr	r3, [sp, #16]
 80020ee:	0275      	lsls	r5, r6, #9
 80020f0:	431d      	orrs	r5, r3
 80020f2:	1e6a      	subs	r2, r5, #1
 80020f4:	4195      	sbcs	r5, r2
 80020f6:	464b      	mov	r3, r9
 80020f8:	0df6      	lsrs	r6, r6, #23
 80020fa:	027f      	lsls	r7, r7, #9
 80020fc:	4335      	orrs	r5, r6
 80020fe:	025a      	lsls	r2, r3, #9
 8002100:	433c      	orrs	r4, r7
 8002102:	4315      	orrs	r5, r2
 8002104:	01fb      	lsls	r3, r7, #7
 8002106:	d400      	bmi.n	800210a <__aeabi_dmul+0x24a>
 8002108:	e11c      	b.n	8002344 <__aeabi_dmul+0x484>
 800210a:	2101      	movs	r1, #1
 800210c:	086a      	lsrs	r2, r5, #1
 800210e:	400d      	ands	r5, r1
 8002110:	4315      	orrs	r5, r2
 8002112:	07e2      	lsls	r2, r4, #31
 8002114:	4315      	orrs	r5, r2
 8002116:	0864      	lsrs	r4, r4, #1
 8002118:	494f      	ldr	r1, [pc, #316]	; (8002258 <__aeabi_dmul+0x398>)
 800211a:	4461      	add	r1, ip
 800211c:	2900      	cmp	r1, #0
 800211e:	dc00      	bgt.n	8002122 <__aeabi_dmul+0x262>
 8002120:	e0b0      	b.n	8002284 <__aeabi_dmul+0x3c4>
 8002122:	076b      	lsls	r3, r5, #29
 8002124:	d009      	beq.n	800213a <__aeabi_dmul+0x27a>
 8002126:	220f      	movs	r2, #15
 8002128:	402a      	ands	r2, r5
 800212a:	2a04      	cmp	r2, #4
 800212c:	d005      	beq.n	800213a <__aeabi_dmul+0x27a>
 800212e:	1d2a      	adds	r2, r5, #4
 8002130:	42aa      	cmp	r2, r5
 8002132:	41ad      	sbcs	r5, r5
 8002134:	426d      	negs	r5, r5
 8002136:	1964      	adds	r4, r4, r5
 8002138:	0015      	movs	r5, r2
 800213a:	01e3      	lsls	r3, r4, #7
 800213c:	d504      	bpl.n	8002148 <__aeabi_dmul+0x288>
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <__aeabi_dmul+0x39c>)
 8002142:	00c9      	lsls	r1, r1, #3
 8002144:	4014      	ands	r4, r2
 8002146:	4461      	add	r1, ip
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <__aeabi_dmul+0x3a0>)
 800214a:	4291      	cmp	r1, r2
 800214c:	dd00      	ble.n	8002150 <__aeabi_dmul+0x290>
 800214e:	e726      	b.n	8001f9e <__aeabi_dmul+0xde>
 8002150:	0762      	lsls	r2, r4, #29
 8002152:	08ed      	lsrs	r5, r5, #3
 8002154:	0264      	lsls	r4, r4, #9
 8002156:	0549      	lsls	r1, r1, #21
 8002158:	4315      	orrs	r5, r2
 800215a:	0b24      	lsrs	r4, r4, #12
 800215c:	0d4a      	lsrs	r2, r1, #21
 800215e:	e710      	b.n	8001f82 <__aeabi_dmul+0xc2>
 8002160:	4652      	mov	r2, sl
 8002162:	4332      	orrs	r2, r6
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x2a8>
 8002166:	e07f      	b.n	8002268 <__aeabi_dmul+0x3a8>
 8002168:	2e00      	cmp	r6, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x2ae>
 800216c:	e0dc      	b.n	8002328 <__aeabi_dmul+0x468>
 800216e:	0030      	movs	r0, r6
 8002170:	f000 fd88 	bl	8002c84 <__clzsi2>
 8002174:	0002      	movs	r2, r0
 8002176:	3a0b      	subs	r2, #11
 8002178:	231d      	movs	r3, #29
 800217a:	0001      	movs	r1, r0
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	4652      	mov	r2, sl
 8002180:	3908      	subs	r1, #8
 8002182:	40da      	lsrs	r2, r3
 8002184:	408e      	lsls	r6, r1
 8002186:	4316      	orrs	r6, r2
 8002188:	4652      	mov	r2, sl
 800218a:	408a      	lsls	r2, r1
 800218c:	9b00      	ldr	r3, [sp, #0]
 800218e:	4935      	ldr	r1, [pc, #212]	; (8002264 <__aeabi_dmul+0x3a4>)
 8002190:	1a18      	subs	r0, r3, r0
 8002192:	0003      	movs	r3, r0
 8002194:	468c      	mov	ip, r1
 8002196:	4463      	add	r3, ip
 8002198:	2000      	movs	r0, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	e6d3      	b.n	8001f46 <__aeabi_dmul+0x86>
 800219e:	0025      	movs	r5, r4
 80021a0:	4305      	orrs	r5, r0
 80021a2:	d04a      	beq.n	800223a <__aeabi_dmul+0x37a>
 80021a4:	2c00      	cmp	r4, #0
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x2ea>
 80021a8:	e0b0      	b.n	800230c <__aeabi_dmul+0x44c>
 80021aa:	0020      	movs	r0, r4
 80021ac:	f000 fd6a 	bl	8002c84 <__clzsi2>
 80021b0:	0001      	movs	r1, r0
 80021b2:	0002      	movs	r2, r0
 80021b4:	390b      	subs	r1, #11
 80021b6:	231d      	movs	r3, #29
 80021b8:	0010      	movs	r0, r2
 80021ba:	1a5b      	subs	r3, r3, r1
 80021bc:	0031      	movs	r1, r6
 80021be:	0035      	movs	r5, r6
 80021c0:	3808      	subs	r0, #8
 80021c2:	4084      	lsls	r4, r0
 80021c4:	40d9      	lsrs	r1, r3
 80021c6:	4085      	lsls	r5, r0
 80021c8:	430c      	orrs	r4, r1
 80021ca:	4826      	ldr	r0, [pc, #152]	; (8002264 <__aeabi_dmul+0x3a4>)
 80021cc:	1a83      	subs	r3, r0, r2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	4699      	mov	r9, r3
 80021d4:	469b      	mov	fp, r3
 80021d6:	e697      	b.n	8001f08 <__aeabi_dmul+0x48>
 80021d8:	0005      	movs	r5, r0
 80021da:	4325      	orrs	r5, r4
 80021dc:	d126      	bne.n	800222c <__aeabi_dmul+0x36c>
 80021de:	2208      	movs	r2, #8
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2302      	movs	r3, #2
 80021e4:	2400      	movs	r4, #0
 80021e6:	4691      	mov	r9, r2
 80021e8:	469b      	mov	fp, r3
 80021ea:	e68d      	b.n	8001f08 <__aeabi_dmul+0x48>
 80021ec:	4652      	mov	r2, sl
 80021ee:	9b00      	ldr	r3, [sp, #0]
 80021f0:	4332      	orrs	r2, r6
 80021f2:	d110      	bne.n	8002216 <__aeabi_dmul+0x356>
 80021f4:	4915      	ldr	r1, [pc, #84]	; (800224c <__aeabi_dmul+0x38c>)
 80021f6:	2600      	movs	r6, #0
 80021f8:	468c      	mov	ip, r1
 80021fa:	4463      	add	r3, ip
 80021fc:	4649      	mov	r1, r9
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2302      	movs	r3, #2
 8002202:	4319      	orrs	r1, r3
 8002204:	4689      	mov	r9, r1
 8002206:	2002      	movs	r0, #2
 8002208:	e69d      	b.n	8001f46 <__aeabi_dmul+0x86>
 800220a:	465b      	mov	r3, fp
 800220c:	9701      	str	r7, [sp, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d000      	beq.n	8002214 <__aeabi_dmul+0x354>
 8002212:	e6ad      	b.n	8001f70 <__aeabi_dmul+0xb0>
 8002214:	e6c3      	b.n	8001f9e <__aeabi_dmul+0xde>
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <__aeabi_dmul+0x38c>)
 8002218:	2003      	movs	r0, #3
 800221a:	4694      	mov	ip, r2
 800221c:	4463      	add	r3, ip
 800221e:	464a      	mov	r2, r9
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2303      	movs	r3, #3
 8002224:	431a      	orrs	r2, r3
 8002226:	4691      	mov	r9, r2
 8002228:	4652      	mov	r2, sl
 800222a:	e68c      	b.n	8001f46 <__aeabi_dmul+0x86>
 800222c:	220c      	movs	r2, #12
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2303      	movs	r3, #3
 8002232:	0005      	movs	r5, r0
 8002234:	4691      	mov	r9, r2
 8002236:	469b      	mov	fp, r3
 8002238:	e666      	b.n	8001f08 <__aeabi_dmul+0x48>
 800223a:	2304      	movs	r3, #4
 800223c:	4699      	mov	r9, r3
 800223e:	2300      	movs	r3, #0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	2400      	movs	r4, #0
 8002246:	469b      	mov	fp, r3
 8002248:	e65e      	b.n	8001f08 <__aeabi_dmul+0x48>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff
 8002250:	fffffc01 	.word	0xfffffc01
 8002254:	0800cc9c 	.word	0x0800cc9c
 8002258:	000003ff 	.word	0x000003ff
 800225c:	feffffff 	.word	0xfeffffff
 8002260:	000007fe 	.word	0x000007fe
 8002264:	fffffc0d 	.word	0xfffffc0d
 8002268:	4649      	mov	r1, r9
 800226a:	2301      	movs	r3, #1
 800226c:	4319      	orrs	r1, r3
 800226e:	4689      	mov	r9, r1
 8002270:	2600      	movs	r6, #0
 8002272:	2001      	movs	r0, #1
 8002274:	e667      	b.n	8001f46 <__aeabi_dmul+0x86>
 8002276:	2300      	movs	r3, #0
 8002278:	2480      	movs	r4, #128	; 0x80
 800227a:	2500      	movs	r5, #0
 800227c:	4a43      	ldr	r2, [pc, #268]	; (800238c <__aeabi_dmul+0x4cc>)
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	0324      	lsls	r4, r4, #12
 8002282:	e67e      	b.n	8001f82 <__aeabi_dmul+0xc2>
 8002284:	2001      	movs	r0, #1
 8002286:	1a40      	subs	r0, r0, r1
 8002288:	2838      	cmp	r0, #56	; 0x38
 800228a:	dd00      	ble.n	800228e <__aeabi_dmul+0x3ce>
 800228c:	e676      	b.n	8001f7c <__aeabi_dmul+0xbc>
 800228e:	281f      	cmp	r0, #31
 8002290:	dd5b      	ble.n	800234a <__aeabi_dmul+0x48a>
 8002292:	221f      	movs	r2, #31
 8002294:	0023      	movs	r3, r4
 8002296:	4252      	negs	r2, r2
 8002298:	1a51      	subs	r1, r2, r1
 800229a:	40cb      	lsrs	r3, r1
 800229c:	0019      	movs	r1, r3
 800229e:	2820      	cmp	r0, #32
 80022a0:	d003      	beq.n	80022aa <__aeabi_dmul+0x3ea>
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <__aeabi_dmul+0x4d0>)
 80022a4:	4462      	add	r2, ip
 80022a6:	4094      	lsls	r4, r2
 80022a8:	4325      	orrs	r5, r4
 80022aa:	1e6a      	subs	r2, r5, #1
 80022ac:	4195      	sbcs	r5, r2
 80022ae:	002a      	movs	r2, r5
 80022b0:	430a      	orrs	r2, r1
 80022b2:	2107      	movs	r1, #7
 80022b4:	000d      	movs	r5, r1
 80022b6:	2400      	movs	r4, #0
 80022b8:	4015      	ands	r5, r2
 80022ba:	4211      	tst	r1, r2
 80022bc:	d05b      	beq.n	8002376 <__aeabi_dmul+0x4b6>
 80022be:	210f      	movs	r1, #15
 80022c0:	2400      	movs	r4, #0
 80022c2:	4011      	ands	r1, r2
 80022c4:	2904      	cmp	r1, #4
 80022c6:	d053      	beq.n	8002370 <__aeabi_dmul+0x4b0>
 80022c8:	1d11      	adds	r1, r2, #4
 80022ca:	4291      	cmp	r1, r2
 80022cc:	4192      	sbcs	r2, r2
 80022ce:	4252      	negs	r2, r2
 80022d0:	18a4      	adds	r4, r4, r2
 80022d2:	000a      	movs	r2, r1
 80022d4:	0223      	lsls	r3, r4, #8
 80022d6:	d54b      	bpl.n	8002370 <__aeabi_dmul+0x4b0>
 80022d8:	2201      	movs	r2, #1
 80022da:	2400      	movs	r4, #0
 80022dc:	2500      	movs	r5, #0
 80022de:	e650      	b.n	8001f82 <__aeabi_dmul+0xc2>
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	031b      	lsls	r3, r3, #12
 80022e4:	421c      	tst	r4, r3
 80022e6:	d009      	beq.n	80022fc <__aeabi_dmul+0x43c>
 80022e8:	421e      	tst	r6, r3
 80022ea:	d107      	bne.n	80022fc <__aeabi_dmul+0x43c>
 80022ec:	4333      	orrs	r3, r6
 80022ee:	031c      	lsls	r4, r3, #12
 80022f0:	4643      	mov	r3, r8
 80022f2:	0015      	movs	r5, r2
 80022f4:	0b24      	lsrs	r4, r4, #12
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <__aeabi_dmul+0x4cc>)
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	e642      	b.n	8001f82 <__aeabi_dmul+0xc2>
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	4314      	orrs	r4, r2
 8002302:	0324      	lsls	r4, r4, #12
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <__aeabi_dmul+0x4cc>)
 8002306:	0b24      	lsrs	r4, r4, #12
 8002308:	9701      	str	r7, [sp, #4]
 800230a:	e63a      	b.n	8001f82 <__aeabi_dmul+0xc2>
 800230c:	f000 fcba 	bl	8002c84 <__clzsi2>
 8002310:	0001      	movs	r1, r0
 8002312:	0002      	movs	r2, r0
 8002314:	3115      	adds	r1, #21
 8002316:	3220      	adds	r2, #32
 8002318:	291c      	cmp	r1, #28
 800231a:	dc00      	bgt.n	800231e <__aeabi_dmul+0x45e>
 800231c:	e74b      	b.n	80021b6 <__aeabi_dmul+0x2f6>
 800231e:	0034      	movs	r4, r6
 8002320:	3808      	subs	r0, #8
 8002322:	2500      	movs	r5, #0
 8002324:	4084      	lsls	r4, r0
 8002326:	e750      	b.n	80021ca <__aeabi_dmul+0x30a>
 8002328:	f000 fcac 	bl	8002c84 <__clzsi2>
 800232c:	0003      	movs	r3, r0
 800232e:	001a      	movs	r2, r3
 8002330:	3215      	adds	r2, #21
 8002332:	3020      	adds	r0, #32
 8002334:	2a1c      	cmp	r2, #28
 8002336:	dc00      	bgt.n	800233a <__aeabi_dmul+0x47a>
 8002338:	e71e      	b.n	8002178 <__aeabi_dmul+0x2b8>
 800233a:	4656      	mov	r6, sl
 800233c:	3b08      	subs	r3, #8
 800233e:	2200      	movs	r2, #0
 8002340:	409e      	lsls	r6, r3
 8002342:	e723      	b.n	800218c <__aeabi_dmul+0x2cc>
 8002344:	9b00      	ldr	r3, [sp, #0]
 8002346:	469c      	mov	ip, r3
 8002348:	e6e6      	b.n	8002118 <__aeabi_dmul+0x258>
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <__aeabi_dmul+0x4d4>)
 800234c:	0022      	movs	r2, r4
 800234e:	4461      	add	r1, ip
 8002350:	002e      	movs	r6, r5
 8002352:	408d      	lsls	r5, r1
 8002354:	408a      	lsls	r2, r1
 8002356:	40c6      	lsrs	r6, r0
 8002358:	1e69      	subs	r1, r5, #1
 800235a:	418d      	sbcs	r5, r1
 800235c:	4332      	orrs	r2, r6
 800235e:	432a      	orrs	r2, r5
 8002360:	40c4      	lsrs	r4, r0
 8002362:	0753      	lsls	r3, r2, #29
 8002364:	d0b6      	beq.n	80022d4 <__aeabi_dmul+0x414>
 8002366:	210f      	movs	r1, #15
 8002368:	4011      	ands	r1, r2
 800236a:	2904      	cmp	r1, #4
 800236c:	d1ac      	bne.n	80022c8 <__aeabi_dmul+0x408>
 800236e:	e7b1      	b.n	80022d4 <__aeabi_dmul+0x414>
 8002370:	0765      	lsls	r5, r4, #29
 8002372:	0264      	lsls	r4, r4, #9
 8002374:	0b24      	lsrs	r4, r4, #12
 8002376:	08d2      	lsrs	r2, r2, #3
 8002378:	4315      	orrs	r5, r2
 800237a:	2200      	movs	r2, #0
 800237c:	e601      	b.n	8001f82 <__aeabi_dmul+0xc2>
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	0312      	lsls	r2, r2, #12
 8002382:	4314      	orrs	r4, r2
 8002384:	0324      	lsls	r4, r4, #12
 8002386:	4a01      	ldr	r2, [pc, #4]	; (800238c <__aeabi_dmul+0x4cc>)
 8002388:	0b24      	lsrs	r4, r4, #12
 800238a:	e5fa      	b.n	8001f82 <__aeabi_dmul+0xc2>
 800238c:	000007ff 	.word	0x000007ff
 8002390:	0000043e 	.word	0x0000043e
 8002394:	0000041e 	.word	0x0000041e

08002398 <__aeabi_dsub>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	4657      	mov	r7, sl
 800239c:	464e      	mov	r6, r9
 800239e:	4645      	mov	r5, r8
 80023a0:	46de      	mov	lr, fp
 80023a2:	b5e0      	push	{r5, r6, r7, lr}
 80023a4:	001e      	movs	r6, r3
 80023a6:	0017      	movs	r7, r2
 80023a8:	004a      	lsls	r2, r1, #1
 80023aa:	030b      	lsls	r3, r1, #12
 80023ac:	0d52      	lsrs	r2, r2, #21
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	4690      	mov	r8, r2
 80023b2:	0f42      	lsrs	r2, r0, #29
 80023b4:	431a      	orrs	r2, r3
 80023b6:	0fcd      	lsrs	r5, r1, #31
 80023b8:	4ccd      	ldr	r4, [pc, #820]	; (80026f0 <__aeabi_dsub+0x358>)
 80023ba:	0331      	lsls	r1, r6, #12
 80023bc:	00c3      	lsls	r3, r0, #3
 80023be:	4694      	mov	ip, r2
 80023c0:	0070      	lsls	r0, r6, #1
 80023c2:	0f7a      	lsrs	r2, r7, #29
 80023c4:	0a49      	lsrs	r1, r1, #9
 80023c6:	00ff      	lsls	r7, r7, #3
 80023c8:	469a      	mov	sl, r3
 80023ca:	46b9      	mov	r9, r7
 80023cc:	0d40      	lsrs	r0, r0, #21
 80023ce:	0ff6      	lsrs	r6, r6, #31
 80023d0:	4311      	orrs	r1, r2
 80023d2:	42a0      	cmp	r0, r4
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x40>
 80023d6:	e0b1      	b.n	800253c <__aeabi_dsub+0x1a4>
 80023d8:	2201      	movs	r2, #1
 80023da:	4056      	eors	r6, r2
 80023dc:	46b3      	mov	fp, r6
 80023de:	42b5      	cmp	r5, r6
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x4c>
 80023e2:	e088      	b.n	80024f6 <__aeabi_dsub+0x15e>
 80023e4:	4642      	mov	r2, r8
 80023e6:	1a12      	subs	r2, r2, r0
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	dc00      	bgt.n	80023ee <__aeabi_dsub+0x56>
 80023ec:	e0ae      	b.n	800254c <__aeabi_dsub+0x1b4>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x5c>
 80023f2:	e0c1      	b.n	8002578 <__aeabi_dsub+0x1e0>
 80023f4:	48be      	ldr	r0, [pc, #760]	; (80026f0 <__aeabi_dsub+0x358>)
 80023f6:	4580      	cmp	r8, r0
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x64>
 80023fa:	e151      	b.n	80026a0 <__aeabi_dsub+0x308>
 80023fc:	2080      	movs	r0, #128	; 0x80
 80023fe:	0400      	lsls	r0, r0, #16
 8002400:	4301      	orrs	r1, r0
 8002402:	2a38      	cmp	r2, #56	; 0x38
 8002404:	dd00      	ble.n	8002408 <__aeabi_dsub+0x70>
 8002406:	e17b      	b.n	8002700 <__aeabi_dsub+0x368>
 8002408:	2a1f      	cmp	r2, #31
 800240a:	dd00      	ble.n	800240e <__aeabi_dsub+0x76>
 800240c:	e1ee      	b.n	80027ec <__aeabi_dsub+0x454>
 800240e:	2020      	movs	r0, #32
 8002410:	003e      	movs	r6, r7
 8002412:	1a80      	subs	r0, r0, r2
 8002414:	000c      	movs	r4, r1
 8002416:	40d6      	lsrs	r6, r2
 8002418:	40d1      	lsrs	r1, r2
 800241a:	4087      	lsls	r7, r0
 800241c:	4662      	mov	r2, ip
 800241e:	4084      	lsls	r4, r0
 8002420:	1a52      	subs	r2, r2, r1
 8002422:	1e78      	subs	r0, r7, #1
 8002424:	4187      	sbcs	r7, r0
 8002426:	4694      	mov	ip, r2
 8002428:	4334      	orrs	r4, r6
 800242a:	4327      	orrs	r7, r4
 800242c:	1bdc      	subs	r4, r3, r7
 800242e:	42a3      	cmp	r3, r4
 8002430:	419b      	sbcs	r3, r3
 8002432:	4662      	mov	r2, ip
 8002434:	425b      	negs	r3, r3
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4699      	mov	r9, r3
 800243a:	464b      	mov	r3, r9
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	d400      	bmi.n	8002442 <__aeabi_dsub+0xaa>
 8002440:	e118      	b.n	8002674 <__aeabi_dsub+0x2dc>
 8002442:	464b      	mov	r3, r9
 8002444:	0258      	lsls	r0, r3, #9
 8002446:	0a43      	lsrs	r3, r0, #9
 8002448:	4699      	mov	r9, r3
 800244a:	464b      	mov	r3, r9
 800244c:	2b00      	cmp	r3, #0
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0xba>
 8002450:	e137      	b.n	80026c2 <__aeabi_dsub+0x32a>
 8002452:	4648      	mov	r0, r9
 8002454:	f000 fc16 	bl	8002c84 <__clzsi2>
 8002458:	0001      	movs	r1, r0
 800245a:	3908      	subs	r1, #8
 800245c:	2320      	movs	r3, #32
 800245e:	0022      	movs	r2, r4
 8002460:	4648      	mov	r0, r9
 8002462:	1a5b      	subs	r3, r3, r1
 8002464:	40da      	lsrs	r2, r3
 8002466:	4088      	lsls	r0, r1
 8002468:	408c      	lsls	r4, r1
 800246a:	4643      	mov	r3, r8
 800246c:	4310      	orrs	r0, r2
 800246e:	4588      	cmp	r8, r1
 8002470:	dd00      	ble.n	8002474 <__aeabi_dsub+0xdc>
 8002472:	e136      	b.n	80026e2 <__aeabi_dsub+0x34a>
 8002474:	1ac9      	subs	r1, r1, r3
 8002476:	1c4b      	adds	r3, r1, #1
 8002478:	2b1f      	cmp	r3, #31
 800247a:	dd00      	ble.n	800247e <__aeabi_dsub+0xe6>
 800247c:	e0ea      	b.n	8002654 <__aeabi_dsub+0x2bc>
 800247e:	2220      	movs	r2, #32
 8002480:	0026      	movs	r6, r4
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	0001      	movs	r1, r0
 8002486:	4094      	lsls	r4, r2
 8002488:	40de      	lsrs	r6, r3
 800248a:	40d8      	lsrs	r0, r3
 800248c:	2300      	movs	r3, #0
 800248e:	4091      	lsls	r1, r2
 8002490:	1e62      	subs	r2, r4, #1
 8002492:	4194      	sbcs	r4, r2
 8002494:	4681      	mov	r9, r0
 8002496:	4698      	mov	r8, r3
 8002498:	4331      	orrs	r1, r6
 800249a:	430c      	orrs	r4, r1
 800249c:	0763      	lsls	r3, r4, #29
 800249e:	d009      	beq.n	80024b4 <__aeabi_dsub+0x11c>
 80024a0:	230f      	movs	r3, #15
 80024a2:	4023      	ands	r3, r4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d005      	beq.n	80024b4 <__aeabi_dsub+0x11c>
 80024a8:	1d23      	adds	r3, r4, #4
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	41a4      	sbcs	r4, r4
 80024ae:	4264      	negs	r4, r4
 80024b0:	44a1      	add	r9, r4
 80024b2:	001c      	movs	r4, r3
 80024b4:	464b      	mov	r3, r9
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	d400      	bmi.n	80024bc <__aeabi_dsub+0x124>
 80024ba:	e0de      	b.n	800267a <__aeabi_dsub+0x2e2>
 80024bc:	4641      	mov	r1, r8
 80024be:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <__aeabi_dsub+0x358>)
 80024c0:	3101      	adds	r1, #1
 80024c2:	4299      	cmp	r1, r3
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x130>
 80024c6:	e0e7      	b.n	8002698 <__aeabi_dsub+0x300>
 80024c8:	464b      	mov	r3, r9
 80024ca:	488a      	ldr	r0, [pc, #552]	; (80026f4 <__aeabi_dsub+0x35c>)
 80024cc:	08e4      	lsrs	r4, r4, #3
 80024ce:	4003      	ands	r3, r0
 80024d0:	0018      	movs	r0, r3
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	075b      	lsls	r3, r3, #29
 80024d6:	0240      	lsls	r0, r0, #9
 80024d8:	4323      	orrs	r3, r4
 80024da:	0d4a      	lsrs	r2, r1, #21
 80024dc:	0b04      	lsrs	r4, r0, #12
 80024de:	0512      	lsls	r2, r2, #20
 80024e0:	07ed      	lsls	r5, r5, #31
 80024e2:	4322      	orrs	r2, r4
 80024e4:	432a      	orrs	r2, r5
 80024e6:	0018      	movs	r0, r3
 80024e8:	0011      	movs	r1, r2
 80024ea:	bcf0      	pop	{r4, r5, r6, r7}
 80024ec:	46bb      	mov	fp, r7
 80024ee:	46b2      	mov	sl, r6
 80024f0:	46a9      	mov	r9, r5
 80024f2:	46a0      	mov	r8, r4
 80024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f6:	4642      	mov	r2, r8
 80024f8:	1a12      	subs	r2, r2, r0
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	dd52      	ble.n	80025a4 <__aeabi_dsub+0x20c>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x16c>
 8002502:	e09c      	b.n	800263e <__aeabi_dsub+0x2a6>
 8002504:	45a0      	cmp	r8, r4
 8002506:	d100      	bne.n	800250a <__aeabi_dsub+0x172>
 8002508:	e0ca      	b.n	80026a0 <__aeabi_dsub+0x308>
 800250a:	2080      	movs	r0, #128	; 0x80
 800250c:	0400      	lsls	r0, r0, #16
 800250e:	4301      	orrs	r1, r0
 8002510:	2a38      	cmp	r2, #56	; 0x38
 8002512:	dd00      	ble.n	8002516 <__aeabi_dsub+0x17e>
 8002514:	e149      	b.n	80027aa <__aeabi_dsub+0x412>
 8002516:	2a1f      	cmp	r2, #31
 8002518:	dc00      	bgt.n	800251c <__aeabi_dsub+0x184>
 800251a:	e197      	b.n	800284c <__aeabi_dsub+0x4b4>
 800251c:	0010      	movs	r0, r2
 800251e:	000e      	movs	r6, r1
 8002520:	3820      	subs	r0, #32
 8002522:	40c6      	lsrs	r6, r0
 8002524:	2a20      	cmp	r2, #32
 8002526:	d004      	beq.n	8002532 <__aeabi_dsub+0x19a>
 8002528:	2040      	movs	r0, #64	; 0x40
 800252a:	1a82      	subs	r2, r0, r2
 800252c:	4091      	lsls	r1, r2
 800252e:	430f      	orrs	r7, r1
 8002530:	46b9      	mov	r9, r7
 8002532:	464c      	mov	r4, r9
 8002534:	1e62      	subs	r2, r4, #1
 8002536:	4194      	sbcs	r4, r2
 8002538:	4334      	orrs	r4, r6
 800253a:	e13a      	b.n	80027b2 <__aeabi_dsub+0x41a>
 800253c:	000a      	movs	r2, r1
 800253e:	433a      	orrs	r2, r7
 8002540:	d028      	beq.n	8002594 <__aeabi_dsub+0x1fc>
 8002542:	46b3      	mov	fp, r6
 8002544:	42b5      	cmp	r5, r6
 8002546:	d02b      	beq.n	80025a0 <__aeabi_dsub+0x208>
 8002548:	4a6b      	ldr	r2, [pc, #428]	; (80026f8 <__aeabi_dsub+0x360>)
 800254a:	4442      	add	r2, r8
 800254c:	2a00      	cmp	r2, #0
 800254e:	d05d      	beq.n	800260c <__aeabi_dsub+0x274>
 8002550:	4642      	mov	r2, r8
 8002552:	4644      	mov	r4, r8
 8002554:	1a82      	subs	r2, r0, r2
 8002556:	2c00      	cmp	r4, #0
 8002558:	d000      	beq.n	800255c <__aeabi_dsub+0x1c4>
 800255a:	e0f5      	b.n	8002748 <__aeabi_dsub+0x3b0>
 800255c:	4665      	mov	r5, ip
 800255e:	431d      	orrs	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x1cc>
 8002562:	e19c      	b.n	800289e <__aeabi_dsub+0x506>
 8002564:	1e55      	subs	r5, r2, #1
 8002566:	2a01      	cmp	r2, #1
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x1d4>
 800256a:	e1fb      	b.n	8002964 <__aeabi_dsub+0x5cc>
 800256c:	4c60      	ldr	r4, [pc, #384]	; (80026f0 <__aeabi_dsub+0x358>)
 800256e:	42a2      	cmp	r2, r4
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x1dc>
 8002572:	e1bd      	b.n	80028f0 <__aeabi_dsub+0x558>
 8002574:	002a      	movs	r2, r5
 8002576:	e0f0      	b.n	800275a <__aeabi_dsub+0x3c2>
 8002578:	0008      	movs	r0, r1
 800257a:	4338      	orrs	r0, r7
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x1e8>
 800257e:	e0c3      	b.n	8002708 <__aeabi_dsub+0x370>
 8002580:	1e50      	subs	r0, r2, #1
 8002582:	2a01      	cmp	r2, #1
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x1f0>
 8002586:	e1a8      	b.n	80028da <__aeabi_dsub+0x542>
 8002588:	4c59      	ldr	r4, [pc, #356]	; (80026f0 <__aeabi_dsub+0x358>)
 800258a:	42a2      	cmp	r2, r4
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x1f8>
 800258e:	e087      	b.n	80026a0 <__aeabi_dsub+0x308>
 8002590:	0002      	movs	r2, r0
 8002592:	e736      	b.n	8002402 <__aeabi_dsub+0x6a>
 8002594:	2201      	movs	r2, #1
 8002596:	4056      	eors	r6, r2
 8002598:	46b3      	mov	fp, r6
 800259a:	42b5      	cmp	r5, r6
 800259c:	d000      	beq.n	80025a0 <__aeabi_dsub+0x208>
 800259e:	e721      	b.n	80023e4 <__aeabi_dsub+0x4c>
 80025a0:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <__aeabi_dsub+0x360>)
 80025a2:	4442      	add	r2, r8
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dsub+0x212>
 80025a8:	e0b5      	b.n	8002716 <__aeabi_dsub+0x37e>
 80025aa:	4642      	mov	r2, r8
 80025ac:	4644      	mov	r4, r8
 80025ae:	1a82      	subs	r2, r0, r2
 80025b0:	2c00      	cmp	r4, #0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x21e>
 80025b4:	e138      	b.n	8002828 <__aeabi_dsub+0x490>
 80025b6:	4e4e      	ldr	r6, [pc, #312]	; (80026f0 <__aeabi_dsub+0x358>)
 80025b8:	42b0      	cmp	r0, r6
 80025ba:	d100      	bne.n	80025be <__aeabi_dsub+0x226>
 80025bc:	e1de      	b.n	800297c <__aeabi_dsub+0x5e4>
 80025be:	2680      	movs	r6, #128	; 0x80
 80025c0:	4664      	mov	r4, ip
 80025c2:	0436      	lsls	r6, r6, #16
 80025c4:	4334      	orrs	r4, r6
 80025c6:	46a4      	mov	ip, r4
 80025c8:	2a38      	cmp	r2, #56	; 0x38
 80025ca:	dd00      	ble.n	80025ce <__aeabi_dsub+0x236>
 80025cc:	e196      	b.n	80028fc <__aeabi_dsub+0x564>
 80025ce:	2a1f      	cmp	r2, #31
 80025d0:	dd00      	ble.n	80025d4 <__aeabi_dsub+0x23c>
 80025d2:	e224      	b.n	8002a1e <__aeabi_dsub+0x686>
 80025d4:	2620      	movs	r6, #32
 80025d6:	1ab4      	subs	r4, r6, r2
 80025d8:	46a2      	mov	sl, r4
 80025da:	4664      	mov	r4, ip
 80025dc:	4656      	mov	r6, sl
 80025de:	40b4      	lsls	r4, r6
 80025e0:	46a1      	mov	r9, r4
 80025e2:	001c      	movs	r4, r3
 80025e4:	464e      	mov	r6, r9
 80025e6:	40d4      	lsrs	r4, r2
 80025e8:	4326      	orrs	r6, r4
 80025ea:	0034      	movs	r4, r6
 80025ec:	4656      	mov	r6, sl
 80025ee:	40b3      	lsls	r3, r6
 80025f0:	1e5e      	subs	r6, r3, #1
 80025f2:	41b3      	sbcs	r3, r6
 80025f4:	431c      	orrs	r4, r3
 80025f6:	4663      	mov	r3, ip
 80025f8:	40d3      	lsrs	r3, r2
 80025fa:	18c9      	adds	r1, r1, r3
 80025fc:	19e4      	adds	r4, r4, r7
 80025fe:	42bc      	cmp	r4, r7
 8002600:	41bf      	sbcs	r7, r7
 8002602:	427f      	negs	r7, r7
 8002604:	46b9      	mov	r9, r7
 8002606:	4680      	mov	r8, r0
 8002608:	4489      	add	r9, r1
 800260a:	e0d8      	b.n	80027be <__aeabi_dsub+0x426>
 800260c:	4640      	mov	r0, r8
 800260e:	4c3b      	ldr	r4, [pc, #236]	; (80026fc <__aeabi_dsub+0x364>)
 8002610:	3001      	adds	r0, #1
 8002612:	4220      	tst	r0, r4
 8002614:	d000      	beq.n	8002618 <__aeabi_dsub+0x280>
 8002616:	e0b4      	b.n	8002782 <__aeabi_dsub+0x3ea>
 8002618:	4640      	mov	r0, r8
 800261a:	2800      	cmp	r0, #0
 800261c:	d000      	beq.n	8002620 <__aeabi_dsub+0x288>
 800261e:	e144      	b.n	80028aa <__aeabi_dsub+0x512>
 8002620:	4660      	mov	r0, ip
 8002622:	4318      	orrs	r0, r3
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x290>
 8002626:	e190      	b.n	800294a <__aeabi_dsub+0x5b2>
 8002628:	0008      	movs	r0, r1
 800262a:	4338      	orrs	r0, r7
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x298>
 800262e:	e1aa      	b.n	8002986 <__aeabi_dsub+0x5ee>
 8002630:	4661      	mov	r1, ip
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	0749      	lsls	r1, r1, #29
 8002636:	430b      	orrs	r3, r1
 8002638:	4661      	mov	r1, ip
 800263a:	08cc      	lsrs	r4, r1, #3
 800263c:	e027      	b.n	800268e <__aeabi_dsub+0x2f6>
 800263e:	0008      	movs	r0, r1
 8002640:	4338      	orrs	r0, r7
 8002642:	d061      	beq.n	8002708 <__aeabi_dsub+0x370>
 8002644:	1e50      	subs	r0, r2, #1
 8002646:	2a01      	cmp	r2, #1
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x2b4>
 800264a:	e139      	b.n	80028c0 <__aeabi_dsub+0x528>
 800264c:	42a2      	cmp	r2, r4
 800264e:	d027      	beq.n	80026a0 <__aeabi_dsub+0x308>
 8002650:	0002      	movs	r2, r0
 8002652:	e75d      	b.n	8002510 <__aeabi_dsub+0x178>
 8002654:	0002      	movs	r2, r0
 8002656:	391f      	subs	r1, #31
 8002658:	40ca      	lsrs	r2, r1
 800265a:	0011      	movs	r1, r2
 800265c:	2b20      	cmp	r3, #32
 800265e:	d003      	beq.n	8002668 <__aeabi_dsub+0x2d0>
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4098      	lsls	r0, r3
 8002666:	4304      	orrs	r4, r0
 8002668:	1e63      	subs	r3, r4, #1
 800266a:	419c      	sbcs	r4, r3
 800266c:	2300      	movs	r3, #0
 800266e:	4699      	mov	r9, r3
 8002670:	4698      	mov	r8, r3
 8002672:	430c      	orrs	r4, r1
 8002674:	0763      	lsls	r3, r4, #29
 8002676:	d000      	beq.n	800267a <__aeabi_dsub+0x2e2>
 8002678:	e712      	b.n	80024a0 <__aeabi_dsub+0x108>
 800267a:	464b      	mov	r3, r9
 800267c:	464a      	mov	r2, r9
 800267e:	08e4      	lsrs	r4, r4, #3
 8002680:	075b      	lsls	r3, r3, #29
 8002682:	4323      	orrs	r3, r4
 8002684:	08d4      	lsrs	r4, r2, #3
 8002686:	4642      	mov	r2, r8
 8002688:	4919      	ldr	r1, [pc, #100]	; (80026f0 <__aeabi_dsub+0x358>)
 800268a:	428a      	cmp	r2, r1
 800268c:	d00e      	beq.n	80026ac <__aeabi_dsub+0x314>
 800268e:	0324      	lsls	r4, r4, #12
 8002690:	0552      	lsls	r2, r2, #21
 8002692:	0b24      	lsrs	r4, r4, #12
 8002694:	0d52      	lsrs	r2, r2, #21
 8002696:	e722      	b.n	80024de <__aeabi_dsub+0x146>
 8002698:	000a      	movs	r2, r1
 800269a:	2400      	movs	r4, #0
 800269c:	2300      	movs	r3, #0
 800269e:	e71e      	b.n	80024de <__aeabi_dsub+0x146>
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	4662      	mov	r2, ip
 80026a4:	0752      	lsls	r2, r2, #29
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4662      	mov	r2, ip
 80026aa:	08d4      	lsrs	r4, r2, #3
 80026ac:	001a      	movs	r2, r3
 80026ae:	4322      	orrs	r2, r4
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x31c>
 80026b2:	e1fc      	b.n	8002aae <__aeabi_dsub+0x716>
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	0312      	lsls	r2, r2, #12
 80026b8:	4314      	orrs	r4, r2
 80026ba:	0324      	lsls	r4, r4, #12
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <__aeabi_dsub+0x358>)
 80026be:	0b24      	lsrs	r4, r4, #12
 80026c0:	e70d      	b.n	80024de <__aeabi_dsub+0x146>
 80026c2:	0020      	movs	r0, r4
 80026c4:	f000 fade 	bl	8002c84 <__clzsi2>
 80026c8:	0001      	movs	r1, r0
 80026ca:	3118      	adds	r1, #24
 80026cc:	291f      	cmp	r1, #31
 80026ce:	dc00      	bgt.n	80026d2 <__aeabi_dsub+0x33a>
 80026d0:	e6c4      	b.n	800245c <__aeabi_dsub+0xc4>
 80026d2:	3808      	subs	r0, #8
 80026d4:	4084      	lsls	r4, r0
 80026d6:	4643      	mov	r3, r8
 80026d8:	0020      	movs	r0, r4
 80026da:	2400      	movs	r4, #0
 80026dc:	4588      	cmp	r8, r1
 80026de:	dc00      	bgt.n	80026e2 <__aeabi_dsub+0x34a>
 80026e0:	e6c8      	b.n	8002474 <__aeabi_dsub+0xdc>
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__aeabi_dsub+0x35c>)
 80026e4:	1a5b      	subs	r3, r3, r1
 80026e6:	4010      	ands	r0, r2
 80026e8:	4698      	mov	r8, r3
 80026ea:	4681      	mov	r9, r0
 80026ec:	e6d6      	b.n	800249c <__aeabi_dsub+0x104>
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	000007ff 	.word	0x000007ff
 80026f4:	ff7fffff 	.word	0xff7fffff
 80026f8:	fffff801 	.word	0xfffff801
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	430f      	orrs	r7, r1
 8002702:	1e7a      	subs	r2, r7, #1
 8002704:	4197      	sbcs	r7, r2
 8002706:	e691      	b.n	800242c <__aeabi_dsub+0x94>
 8002708:	4661      	mov	r1, ip
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	0749      	lsls	r1, r1, #29
 800270e:	430b      	orrs	r3, r1
 8002710:	4661      	mov	r1, ip
 8002712:	08cc      	lsrs	r4, r1, #3
 8002714:	e7b8      	b.n	8002688 <__aeabi_dsub+0x2f0>
 8002716:	4640      	mov	r0, r8
 8002718:	4cd3      	ldr	r4, [pc, #844]	; (8002a68 <__aeabi_dsub+0x6d0>)
 800271a:	3001      	adds	r0, #1
 800271c:	4220      	tst	r0, r4
 800271e:	d000      	beq.n	8002722 <__aeabi_dsub+0x38a>
 8002720:	e0a2      	b.n	8002868 <__aeabi_dsub+0x4d0>
 8002722:	4640      	mov	r0, r8
 8002724:	2800      	cmp	r0, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x392>
 8002728:	e101      	b.n	800292e <__aeabi_dsub+0x596>
 800272a:	4660      	mov	r0, ip
 800272c:	4318      	orrs	r0, r3
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x39a>
 8002730:	e15e      	b.n	80029f0 <__aeabi_dsub+0x658>
 8002732:	0008      	movs	r0, r1
 8002734:	4338      	orrs	r0, r7
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x3a2>
 8002738:	e15f      	b.n	80029fa <__aeabi_dsub+0x662>
 800273a:	4661      	mov	r1, ip
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	0749      	lsls	r1, r1, #29
 8002740:	430b      	orrs	r3, r1
 8002742:	4661      	mov	r1, ip
 8002744:	08cc      	lsrs	r4, r1, #3
 8002746:	e7a2      	b.n	800268e <__aeabi_dsub+0x2f6>
 8002748:	4dc8      	ldr	r5, [pc, #800]	; (8002a6c <__aeabi_dsub+0x6d4>)
 800274a:	42a8      	cmp	r0, r5
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x3b8>
 800274e:	e0cf      	b.n	80028f0 <__aeabi_dsub+0x558>
 8002750:	2580      	movs	r5, #128	; 0x80
 8002752:	4664      	mov	r4, ip
 8002754:	042d      	lsls	r5, r5, #16
 8002756:	432c      	orrs	r4, r5
 8002758:	46a4      	mov	ip, r4
 800275a:	2a38      	cmp	r2, #56	; 0x38
 800275c:	dc56      	bgt.n	800280c <__aeabi_dsub+0x474>
 800275e:	2a1f      	cmp	r2, #31
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0x3cc>
 8002762:	e0d1      	b.n	8002908 <__aeabi_dsub+0x570>
 8002764:	2520      	movs	r5, #32
 8002766:	001e      	movs	r6, r3
 8002768:	1aad      	subs	r5, r5, r2
 800276a:	4664      	mov	r4, ip
 800276c:	40ab      	lsls	r3, r5
 800276e:	40ac      	lsls	r4, r5
 8002770:	40d6      	lsrs	r6, r2
 8002772:	1e5d      	subs	r5, r3, #1
 8002774:	41ab      	sbcs	r3, r5
 8002776:	4334      	orrs	r4, r6
 8002778:	4323      	orrs	r3, r4
 800277a:	4664      	mov	r4, ip
 800277c:	40d4      	lsrs	r4, r2
 800277e:	1b09      	subs	r1, r1, r4
 8002780:	e049      	b.n	8002816 <__aeabi_dsub+0x47e>
 8002782:	4660      	mov	r0, ip
 8002784:	1bdc      	subs	r4, r3, r7
 8002786:	1a46      	subs	r6, r0, r1
 8002788:	42a3      	cmp	r3, r4
 800278a:	4180      	sbcs	r0, r0
 800278c:	4240      	negs	r0, r0
 800278e:	4681      	mov	r9, r0
 8002790:	0030      	movs	r0, r6
 8002792:	464e      	mov	r6, r9
 8002794:	1b80      	subs	r0, r0, r6
 8002796:	4681      	mov	r9, r0
 8002798:	0200      	lsls	r0, r0, #8
 800279a:	d476      	bmi.n	800288a <__aeabi_dsub+0x4f2>
 800279c:	464b      	mov	r3, r9
 800279e:	4323      	orrs	r3, r4
 80027a0:	d000      	beq.n	80027a4 <__aeabi_dsub+0x40c>
 80027a2:	e652      	b.n	800244a <__aeabi_dsub+0xb2>
 80027a4:	2400      	movs	r4, #0
 80027a6:	2500      	movs	r5, #0
 80027a8:	e771      	b.n	800268e <__aeabi_dsub+0x2f6>
 80027aa:	4339      	orrs	r1, r7
 80027ac:	000c      	movs	r4, r1
 80027ae:	1e62      	subs	r2, r4, #1
 80027b0:	4194      	sbcs	r4, r2
 80027b2:	18e4      	adds	r4, r4, r3
 80027b4:	429c      	cmp	r4, r3
 80027b6:	419b      	sbcs	r3, r3
 80027b8:	425b      	negs	r3, r3
 80027ba:	4463      	add	r3, ip
 80027bc:	4699      	mov	r9, r3
 80027be:	464b      	mov	r3, r9
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	d400      	bmi.n	80027c6 <__aeabi_dsub+0x42e>
 80027c4:	e756      	b.n	8002674 <__aeabi_dsub+0x2dc>
 80027c6:	2301      	movs	r3, #1
 80027c8:	469c      	mov	ip, r3
 80027ca:	4ba8      	ldr	r3, [pc, #672]	; (8002a6c <__aeabi_dsub+0x6d4>)
 80027cc:	44e0      	add	r8, ip
 80027ce:	4598      	cmp	r8, r3
 80027d0:	d038      	beq.n	8002844 <__aeabi_dsub+0x4ac>
 80027d2:	464b      	mov	r3, r9
 80027d4:	48a6      	ldr	r0, [pc, #664]	; (8002a70 <__aeabi_dsub+0x6d8>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	4003      	ands	r3, r0
 80027da:	0018      	movs	r0, r3
 80027dc:	0863      	lsrs	r3, r4, #1
 80027de:	4014      	ands	r4, r2
 80027e0:	431c      	orrs	r4, r3
 80027e2:	07c3      	lsls	r3, r0, #31
 80027e4:	431c      	orrs	r4, r3
 80027e6:	0843      	lsrs	r3, r0, #1
 80027e8:	4699      	mov	r9, r3
 80027ea:	e657      	b.n	800249c <__aeabi_dsub+0x104>
 80027ec:	0010      	movs	r0, r2
 80027ee:	000e      	movs	r6, r1
 80027f0:	3820      	subs	r0, #32
 80027f2:	40c6      	lsrs	r6, r0
 80027f4:	2a20      	cmp	r2, #32
 80027f6:	d004      	beq.n	8002802 <__aeabi_dsub+0x46a>
 80027f8:	2040      	movs	r0, #64	; 0x40
 80027fa:	1a82      	subs	r2, r0, r2
 80027fc:	4091      	lsls	r1, r2
 80027fe:	430f      	orrs	r7, r1
 8002800:	46b9      	mov	r9, r7
 8002802:	464f      	mov	r7, r9
 8002804:	1e7a      	subs	r2, r7, #1
 8002806:	4197      	sbcs	r7, r2
 8002808:	4337      	orrs	r7, r6
 800280a:	e60f      	b.n	800242c <__aeabi_dsub+0x94>
 800280c:	4662      	mov	r2, ip
 800280e:	431a      	orrs	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	4193      	sbcs	r3, r2
 8002816:	1afc      	subs	r4, r7, r3
 8002818:	42a7      	cmp	r7, r4
 800281a:	41bf      	sbcs	r7, r7
 800281c:	427f      	negs	r7, r7
 800281e:	1bcb      	subs	r3, r1, r7
 8002820:	4699      	mov	r9, r3
 8002822:	465d      	mov	r5, fp
 8002824:	4680      	mov	r8, r0
 8002826:	e608      	b.n	800243a <__aeabi_dsub+0xa2>
 8002828:	4666      	mov	r6, ip
 800282a:	431e      	orrs	r6, r3
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x498>
 800282e:	e0be      	b.n	80029ae <__aeabi_dsub+0x616>
 8002830:	1e56      	subs	r6, r2, #1
 8002832:	2a01      	cmp	r2, #1
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x4a0>
 8002836:	e109      	b.n	8002a4c <__aeabi_dsub+0x6b4>
 8002838:	4c8c      	ldr	r4, [pc, #560]	; (8002a6c <__aeabi_dsub+0x6d4>)
 800283a:	42a2      	cmp	r2, r4
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x4a8>
 800283e:	e119      	b.n	8002a74 <__aeabi_dsub+0x6dc>
 8002840:	0032      	movs	r2, r6
 8002842:	e6c1      	b.n	80025c8 <__aeabi_dsub+0x230>
 8002844:	4642      	mov	r2, r8
 8002846:	2400      	movs	r4, #0
 8002848:	2300      	movs	r3, #0
 800284a:	e648      	b.n	80024de <__aeabi_dsub+0x146>
 800284c:	2020      	movs	r0, #32
 800284e:	000c      	movs	r4, r1
 8002850:	1a80      	subs	r0, r0, r2
 8002852:	003e      	movs	r6, r7
 8002854:	4087      	lsls	r7, r0
 8002856:	4084      	lsls	r4, r0
 8002858:	40d6      	lsrs	r6, r2
 800285a:	1e78      	subs	r0, r7, #1
 800285c:	4187      	sbcs	r7, r0
 800285e:	40d1      	lsrs	r1, r2
 8002860:	4334      	orrs	r4, r6
 8002862:	433c      	orrs	r4, r7
 8002864:	448c      	add	ip, r1
 8002866:	e7a4      	b.n	80027b2 <__aeabi_dsub+0x41a>
 8002868:	4a80      	ldr	r2, [pc, #512]	; (8002a6c <__aeabi_dsub+0x6d4>)
 800286a:	4290      	cmp	r0, r2
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x4d8>
 800286e:	e0e9      	b.n	8002a44 <__aeabi_dsub+0x6ac>
 8002870:	19df      	adds	r7, r3, r7
 8002872:	429f      	cmp	r7, r3
 8002874:	419b      	sbcs	r3, r3
 8002876:	4461      	add	r1, ip
 8002878:	425b      	negs	r3, r3
 800287a:	18c9      	adds	r1, r1, r3
 800287c:	07cc      	lsls	r4, r1, #31
 800287e:	087f      	lsrs	r7, r7, #1
 8002880:	084b      	lsrs	r3, r1, #1
 8002882:	4699      	mov	r9, r3
 8002884:	4680      	mov	r8, r0
 8002886:	433c      	orrs	r4, r7
 8002888:	e6f4      	b.n	8002674 <__aeabi_dsub+0x2dc>
 800288a:	1afc      	subs	r4, r7, r3
 800288c:	42a7      	cmp	r7, r4
 800288e:	41bf      	sbcs	r7, r7
 8002890:	4663      	mov	r3, ip
 8002892:	427f      	negs	r7, r7
 8002894:	1ac9      	subs	r1, r1, r3
 8002896:	1bcb      	subs	r3, r1, r7
 8002898:	4699      	mov	r9, r3
 800289a:	465d      	mov	r5, fp
 800289c:	e5d5      	b.n	800244a <__aeabi_dsub+0xb2>
 800289e:	08ff      	lsrs	r7, r7, #3
 80028a0:	074b      	lsls	r3, r1, #29
 80028a2:	465d      	mov	r5, fp
 80028a4:	433b      	orrs	r3, r7
 80028a6:	08cc      	lsrs	r4, r1, #3
 80028a8:	e6ee      	b.n	8002688 <__aeabi_dsub+0x2f0>
 80028aa:	4662      	mov	r2, ip
 80028ac:	431a      	orrs	r2, r3
 80028ae:	d000      	beq.n	80028b2 <__aeabi_dsub+0x51a>
 80028b0:	e082      	b.n	80029b8 <__aeabi_dsub+0x620>
 80028b2:	000b      	movs	r3, r1
 80028b4:	433b      	orrs	r3, r7
 80028b6:	d11b      	bne.n	80028f0 <__aeabi_dsub+0x558>
 80028b8:	2480      	movs	r4, #128	; 0x80
 80028ba:	2500      	movs	r5, #0
 80028bc:	0324      	lsls	r4, r4, #12
 80028be:	e6f9      	b.n	80026b4 <__aeabi_dsub+0x31c>
 80028c0:	19dc      	adds	r4, r3, r7
 80028c2:	429c      	cmp	r4, r3
 80028c4:	419b      	sbcs	r3, r3
 80028c6:	4461      	add	r1, ip
 80028c8:	4689      	mov	r9, r1
 80028ca:	425b      	negs	r3, r3
 80028cc:	4499      	add	r9, r3
 80028ce:	464b      	mov	r3, r9
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	d444      	bmi.n	800295e <__aeabi_dsub+0x5c6>
 80028d4:	2301      	movs	r3, #1
 80028d6:	4698      	mov	r8, r3
 80028d8:	e6cc      	b.n	8002674 <__aeabi_dsub+0x2dc>
 80028da:	1bdc      	subs	r4, r3, r7
 80028dc:	4662      	mov	r2, ip
 80028de:	42a3      	cmp	r3, r4
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	1a51      	subs	r1, r2, r1
 80028e4:	425b      	negs	r3, r3
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	4699      	mov	r9, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	4698      	mov	r8, r3
 80028ee:	e5a4      	b.n	800243a <__aeabi_dsub+0xa2>
 80028f0:	08ff      	lsrs	r7, r7, #3
 80028f2:	074b      	lsls	r3, r1, #29
 80028f4:	465d      	mov	r5, fp
 80028f6:	433b      	orrs	r3, r7
 80028f8:	08cc      	lsrs	r4, r1, #3
 80028fa:	e6d7      	b.n	80026ac <__aeabi_dsub+0x314>
 80028fc:	4662      	mov	r2, ip
 80028fe:	431a      	orrs	r2, r3
 8002900:	0014      	movs	r4, r2
 8002902:	1e63      	subs	r3, r4, #1
 8002904:	419c      	sbcs	r4, r3
 8002906:	e679      	b.n	80025fc <__aeabi_dsub+0x264>
 8002908:	0015      	movs	r5, r2
 800290a:	4664      	mov	r4, ip
 800290c:	3d20      	subs	r5, #32
 800290e:	40ec      	lsrs	r4, r5
 8002910:	46a0      	mov	r8, r4
 8002912:	2a20      	cmp	r2, #32
 8002914:	d005      	beq.n	8002922 <__aeabi_dsub+0x58a>
 8002916:	2540      	movs	r5, #64	; 0x40
 8002918:	4664      	mov	r4, ip
 800291a:	1aaa      	subs	r2, r5, r2
 800291c:	4094      	lsls	r4, r2
 800291e:	4323      	orrs	r3, r4
 8002920:	469a      	mov	sl, r3
 8002922:	4654      	mov	r4, sl
 8002924:	1e63      	subs	r3, r4, #1
 8002926:	419c      	sbcs	r4, r3
 8002928:	4643      	mov	r3, r8
 800292a:	4323      	orrs	r3, r4
 800292c:	e773      	b.n	8002816 <__aeabi_dsub+0x47e>
 800292e:	4662      	mov	r2, ip
 8002930:	431a      	orrs	r2, r3
 8002932:	d023      	beq.n	800297c <__aeabi_dsub+0x5e4>
 8002934:	000a      	movs	r2, r1
 8002936:	433a      	orrs	r2, r7
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x5a4>
 800293a:	e0a0      	b.n	8002a7e <__aeabi_dsub+0x6e6>
 800293c:	4662      	mov	r2, ip
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	0752      	lsls	r2, r2, #29
 8002942:	4313      	orrs	r3, r2
 8002944:	4662      	mov	r2, ip
 8002946:	08d4      	lsrs	r4, r2, #3
 8002948:	e6b0      	b.n	80026ac <__aeabi_dsub+0x314>
 800294a:	000b      	movs	r3, r1
 800294c:	433b      	orrs	r3, r7
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x5ba>
 8002950:	e728      	b.n	80027a4 <__aeabi_dsub+0x40c>
 8002952:	08ff      	lsrs	r7, r7, #3
 8002954:	074b      	lsls	r3, r1, #29
 8002956:	465d      	mov	r5, fp
 8002958:	433b      	orrs	r3, r7
 800295a:	08cc      	lsrs	r4, r1, #3
 800295c:	e697      	b.n	800268e <__aeabi_dsub+0x2f6>
 800295e:	2302      	movs	r3, #2
 8002960:	4698      	mov	r8, r3
 8002962:	e736      	b.n	80027d2 <__aeabi_dsub+0x43a>
 8002964:	1afc      	subs	r4, r7, r3
 8002966:	42a7      	cmp	r7, r4
 8002968:	41bf      	sbcs	r7, r7
 800296a:	4663      	mov	r3, ip
 800296c:	427f      	negs	r7, r7
 800296e:	1ac9      	subs	r1, r1, r3
 8002970:	1bcb      	subs	r3, r1, r7
 8002972:	4699      	mov	r9, r3
 8002974:	2301      	movs	r3, #1
 8002976:	465d      	mov	r5, fp
 8002978:	4698      	mov	r8, r3
 800297a:	e55e      	b.n	800243a <__aeabi_dsub+0xa2>
 800297c:	074b      	lsls	r3, r1, #29
 800297e:	08ff      	lsrs	r7, r7, #3
 8002980:	433b      	orrs	r3, r7
 8002982:	08cc      	lsrs	r4, r1, #3
 8002984:	e692      	b.n	80026ac <__aeabi_dsub+0x314>
 8002986:	1bdc      	subs	r4, r3, r7
 8002988:	4660      	mov	r0, ip
 800298a:	42a3      	cmp	r3, r4
 800298c:	41b6      	sbcs	r6, r6
 800298e:	1a40      	subs	r0, r0, r1
 8002990:	4276      	negs	r6, r6
 8002992:	1b80      	subs	r0, r0, r6
 8002994:	4681      	mov	r9, r0
 8002996:	0200      	lsls	r0, r0, #8
 8002998:	d560      	bpl.n	8002a5c <__aeabi_dsub+0x6c4>
 800299a:	1afc      	subs	r4, r7, r3
 800299c:	42a7      	cmp	r7, r4
 800299e:	41bf      	sbcs	r7, r7
 80029a0:	4663      	mov	r3, ip
 80029a2:	427f      	negs	r7, r7
 80029a4:	1ac9      	subs	r1, r1, r3
 80029a6:	1bcb      	subs	r3, r1, r7
 80029a8:	4699      	mov	r9, r3
 80029aa:	465d      	mov	r5, fp
 80029ac:	e576      	b.n	800249c <__aeabi_dsub+0x104>
 80029ae:	08ff      	lsrs	r7, r7, #3
 80029b0:	074b      	lsls	r3, r1, #29
 80029b2:	433b      	orrs	r3, r7
 80029b4:	08cc      	lsrs	r4, r1, #3
 80029b6:	e667      	b.n	8002688 <__aeabi_dsub+0x2f0>
 80029b8:	000a      	movs	r2, r1
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	433a      	orrs	r2, r7
 80029be:	d100      	bne.n	80029c2 <__aeabi_dsub+0x62a>
 80029c0:	e66f      	b.n	80026a2 <__aeabi_dsub+0x30a>
 80029c2:	4662      	mov	r2, ip
 80029c4:	0752      	lsls	r2, r2, #29
 80029c6:	4313      	orrs	r3, r2
 80029c8:	4662      	mov	r2, ip
 80029ca:	08d4      	lsrs	r4, r2, #3
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	0312      	lsls	r2, r2, #12
 80029d0:	4214      	tst	r4, r2
 80029d2:	d007      	beq.n	80029e4 <__aeabi_dsub+0x64c>
 80029d4:	08c8      	lsrs	r0, r1, #3
 80029d6:	4210      	tst	r0, r2
 80029d8:	d104      	bne.n	80029e4 <__aeabi_dsub+0x64c>
 80029da:	465d      	mov	r5, fp
 80029dc:	0004      	movs	r4, r0
 80029de:	08fb      	lsrs	r3, r7, #3
 80029e0:	0749      	lsls	r1, r1, #29
 80029e2:	430b      	orrs	r3, r1
 80029e4:	0f5a      	lsrs	r2, r3, #29
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	0752      	lsls	r2, r2, #29
 80029ec:	4313      	orrs	r3, r2
 80029ee:	e65d      	b.n	80026ac <__aeabi_dsub+0x314>
 80029f0:	074b      	lsls	r3, r1, #29
 80029f2:	08ff      	lsrs	r7, r7, #3
 80029f4:	433b      	orrs	r3, r7
 80029f6:	08cc      	lsrs	r4, r1, #3
 80029f8:	e649      	b.n	800268e <__aeabi_dsub+0x2f6>
 80029fa:	19dc      	adds	r4, r3, r7
 80029fc:	429c      	cmp	r4, r3
 80029fe:	419b      	sbcs	r3, r3
 8002a00:	4461      	add	r1, ip
 8002a02:	4689      	mov	r9, r1
 8002a04:	425b      	negs	r3, r3
 8002a06:	4499      	add	r9, r3
 8002a08:	464b      	mov	r3, r9
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	d400      	bmi.n	8002a10 <__aeabi_dsub+0x678>
 8002a0e:	e631      	b.n	8002674 <__aeabi_dsub+0x2dc>
 8002a10:	464a      	mov	r2, r9
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <__aeabi_dsub+0x6d8>)
 8002a14:	401a      	ands	r2, r3
 8002a16:	2301      	movs	r3, #1
 8002a18:	4691      	mov	r9, r2
 8002a1a:	4698      	mov	r8, r3
 8002a1c:	e62a      	b.n	8002674 <__aeabi_dsub+0x2dc>
 8002a1e:	0016      	movs	r6, r2
 8002a20:	4664      	mov	r4, ip
 8002a22:	3e20      	subs	r6, #32
 8002a24:	40f4      	lsrs	r4, r6
 8002a26:	46a0      	mov	r8, r4
 8002a28:	2a20      	cmp	r2, #32
 8002a2a:	d005      	beq.n	8002a38 <__aeabi_dsub+0x6a0>
 8002a2c:	2640      	movs	r6, #64	; 0x40
 8002a2e:	4664      	mov	r4, ip
 8002a30:	1ab2      	subs	r2, r6, r2
 8002a32:	4094      	lsls	r4, r2
 8002a34:	4323      	orrs	r3, r4
 8002a36:	469a      	mov	sl, r3
 8002a38:	4654      	mov	r4, sl
 8002a3a:	1e63      	subs	r3, r4, #1
 8002a3c:	419c      	sbcs	r4, r3
 8002a3e:	4643      	mov	r3, r8
 8002a40:	431c      	orrs	r4, r3
 8002a42:	e5db      	b.n	80025fc <__aeabi_dsub+0x264>
 8002a44:	0002      	movs	r2, r0
 8002a46:	2400      	movs	r4, #0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e548      	b.n	80024de <__aeabi_dsub+0x146>
 8002a4c:	19dc      	adds	r4, r3, r7
 8002a4e:	42bc      	cmp	r4, r7
 8002a50:	41bf      	sbcs	r7, r7
 8002a52:	4461      	add	r1, ip
 8002a54:	4689      	mov	r9, r1
 8002a56:	427f      	negs	r7, r7
 8002a58:	44b9      	add	r9, r7
 8002a5a:	e738      	b.n	80028ce <__aeabi_dsub+0x536>
 8002a5c:	464b      	mov	r3, r9
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x6cc>
 8002a62:	e69f      	b.n	80027a4 <__aeabi_dsub+0x40c>
 8002a64:	e606      	b.n	8002674 <__aeabi_dsub+0x2dc>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	000007fe 	.word	0x000007fe
 8002a6c:	000007ff 	.word	0x000007ff
 8002a70:	ff7fffff 	.word	0xff7fffff
 8002a74:	08ff      	lsrs	r7, r7, #3
 8002a76:	074b      	lsls	r3, r1, #29
 8002a78:	433b      	orrs	r3, r7
 8002a7a:	08cc      	lsrs	r4, r1, #3
 8002a7c:	e616      	b.n	80026ac <__aeabi_dsub+0x314>
 8002a7e:	4662      	mov	r2, ip
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	0752      	lsls	r2, r2, #29
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4662      	mov	r2, ip
 8002a88:	08d4      	lsrs	r4, r2, #3
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	0312      	lsls	r2, r2, #12
 8002a8e:	4214      	tst	r4, r2
 8002a90:	d007      	beq.n	8002aa2 <__aeabi_dsub+0x70a>
 8002a92:	08c8      	lsrs	r0, r1, #3
 8002a94:	4210      	tst	r0, r2
 8002a96:	d104      	bne.n	8002aa2 <__aeabi_dsub+0x70a>
 8002a98:	465d      	mov	r5, fp
 8002a9a:	0004      	movs	r4, r0
 8002a9c:	08fb      	lsrs	r3, r7, #3
 8002a9e:	0749      	lsls	r1, r1, #29
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	0f5a      	lsrs	r2, r3, #29
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	0752      	lsls	r2, r2, #29
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	e5fe      	b.n	80026ac <__aeabi_dsub+0x314>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4a01      	ldr	r2, [pc, #4]	; (8002ab8 <__aeabi_dsub+0x720>)
 8002ab2:	001c      	movs	r4, r3
 8002ab4:	e513      	b.n	80024de <__aeabi_dsub+0x146>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	000007ff 	.word	0x000007ff

08002abc <__aeabi_dcmpun>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	0005      	movs	r5, r0
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <__aeabi_dcmpun+0x38>)
 8002ac2:	031c      	lsls	r4, r3, #12
 8002ac4:	0016      	movs	r6, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	030a      	lsls	r2, r1, #12
 8002aca:	0049      	lsls	r1, r1, #1
 8002acc:	0b12      	lsrs	r2, r2, #12
 8002ace:	0d49      	lsrs	r1, r1, #21
 8002ad0:	0b24      	lsrs	r4, r4, #12
 8002ad2:	0d5b      	lsrs	r3, r3, #21
 8002ad4:	4281      	cmp	r1, r0
 8002ad6:	d008      	beq.n	8002aea <__aeabi_dcmpun+0x2e>
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <__aeabi_dcmpun+0x38>)
 8002ada:	2000      	movs	r0, #0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d103      	bne.n	8002ae8 <__aeabi_dcmpun+0x2c>
 8002ae0:	0020      	movs	r0, r4
 8002ae2:	4330      	orrs	r0, r6
 8002ae4:	1e43      	subs	r3, r0, #1
 8002ae6:	4198      	sbcs	r0, r3
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	2001      	movs	r0, #1
 8002aec:	432a      	orrs	r2, r5
 8002aee:	d1fb      	bne.n	8002ae8 <__aeabi_dcmpun+0x2c>
 8002af0:	e7f2      	b.n	8002ad8 <__aeabi_dcmpun+0x1c>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	000007ff 	.word	0x000007ff

08002af8 <__aeabi_d2iz>:
 8002af8:	000a      	movs	r2, r1
 8002afa:	b530      	push	{r4, r5, lr}
 8002afc:	4c13      	ldr	r4, [pc, #76]	; (8002b4c <__aeabi_d2iz+0x54>)
 8002afe:	0053      	lsls	r3, r2, #1
 8002b00:	0309      	lsls	r1, r1, #12
 8002b02:	0005      	movs	r5, r0
 8002b04:	0b09      	lsrs	r1, r1, #12
 8002b06:	2000      	movs	r0, #0
 8002b08:	0d5b      	lsrs	r3, r3, #21
 8002b0a:	0fd2      	lsrs	r2, r2, #31
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	dd04      	ble.n	8002b1a <__aeabi_d2iz+0x22>
 8002b10:	480f      	ldr	r0, [pc, #60]	; (8002b50 <__aeabi_d2iz+0x58>)
 8002b12:	4283      	cmp	r3, r0
 8002b14:	dd02      	ble.n	8002b1c <__aeabi_d2iz+0x24>
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <__aeabi_d2iz+0x5c>)
 8002b18:	18d0      	adds	r0, r2, r3
 8002b1a:	bd30      	pop	{r4, r5, pc}
 8002b1c:	2080      	movs	r0, #128	; 0x80
 8002b1e:	0340      	lsls	r0, r0, #13
 8002b20:	4301      	orrs	r1, r0
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <__aeabi_d2iz+0x60>)
 8002b24:	1ac0      	subs	r0, r0, r3
 8002b26:	281f      	cmp	r0, #31
 8002b28:	dd08      	ble.n	8002b3c <__aeabi_d2iz+0x44>
 8002b2a:	480c      	ldr	r0, [pc, #48]	; (8002b5c <__aeabi_d2iz+0x64>)
 8002b2c:	1ac3      	subs	r3, r0, r3
 8002b2e:	40d9      	lsrs	r1, r3
 8002b30:	000b      	movs	r3, r1
 8002b32:	4258      	negs	r0, r3
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d1f0      	bne.n	8002b1a <__aeabi_d2iz+0x22>
 8002b38:	0018      	movs	r0, r3
 8002b3a:	e7ee      	b.n	8002b1a <__aeabi_d2iz+0x22>
 8002b3c:	4c08      	ldr	r4, [pc, #32]	; (8002b60 <__aeabi_d2iz+0x68>)
 8002b3e:	40c5      	lsrs	r5, r0
 8002b40:	46a4      	mov	ip, r4
 8002b42:	4463      	add	r3, ip
 8002b44:	4099      	lsls	r1, r3
 8002b46:	000b      	movs	r3, r1
 8002b48:	432b      	orrs	r3, r5
 8002b4a:	e7f2      	b.n	8002b32 <__aeabi_d2iz+0x3a>
 8002b4c:	000003fe 	.word	0x000003fe
 8002b50:	0000041d 	.word	0x0000041d
 8002b54:	7fffffff 	.word	0x7fffffff
 8002b58:	00000433 	.word	0x00000433
 8002b5c:	00000413 	.word	0x00000413
 8002b60:	fffffbed 	.word	0xfffffbed

08002b64 <__aeabi_i2d>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d016      	beq.n	8002b98 <__aeabi_i2d+0x34>
 8002b6a:	17c3      	asrs	r3, r0, #31
 8002b6c:	18c5      	adds	r5, r0, r3
 8002b6e:	405d      	eors	r5, r3
 8002b70:	0fc4      	lsrs	r4, r0, #31
 8002b72:	0028      	movs	r0, r5
 8002b74:	f000 f886 	bl	8002c84 <__clzsi2>
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <__aeabi_i2d+0x5c>)
 8002b7a:	1a12      	subs	r2, r2, r0
 8002b7c:	280a      	cmp	r0, #10
 8002b7e:	dc16      	bgt.n	8002bae <__aeabi_i2d+0x4a>
 8002b80:	0003      	movs	r3, r0
 8002b82:	002e      	movs	r6, r5
 8002b84:	3315      	adds	r3, #21
 8002b86:	409e      	lsls	r6, r3
 8002b88:	230b      	movs	r3, #11
 8002b8a:	1a18      	subs	r0, r3, r0
 8002b8c:	40c5      	lsrs	r5, r0
 8002b8e:	0552      	lsls	r2, r2, #21
 8002b90:	032d      	lsls	r5, r5, #12
 8002b92:	0b2d      	lsrs	r5, r5, #12
 8002b94:	0d53      	lsrs	r3, r2, #21
 8002b96:	e003      	b.n	8002ba0 <__aeabi_i2d+0x3c>
 8002b98:	2400      	movs	r4, #0
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2500      	movs	r5, #0
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	051b      	lsls	r3, r3, #20
 8002ba2:	432b      	orrs	r3, r5
 8002ba4:	07e4      	lsls	r4, r4, #31
 8002ba6:	4323      	orrs	r3, r4
 8002ba8:	0030      	movs	r0, r6
 8002baa:	0019      	movs	r1, r3
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	380b      	subs	r0, #11
 8002bb0:	4085      	lsls	r5, r0
 8002bb2:	0552      	lsls	r2, r2, #21
 8002bb4:	032d      	lsls	r5, r5, #12
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	0b2d      	lsrs	r5, r5, #12
 8002bba:	0d53      	lsrs	r3, r2, #21
 8002bbc:	e7f0      	b.n	8002ba0 <__aeabi_i2d+0x3c>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	0000041e 	.word	0x0000041e

08002bc4 <__aeabi_ui2d>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	1e04      	subs	r4, r0, #0
 8002bc8:	d010      	beq.n	8002bec <__aeabi_ui2d+0x28>
 8002bca:	f000 f85b 	bl	8002c84 <__clzsi2>
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <__aeabi_ui2d+0x48>)
 8002bd0:	1a1b      	subs	r3, r3, r0
 8002bd2:	280a      	cmp	r0, #10
 8002bd4:	dc11      	bgt.n	8002bfa <__aeabi_ui2d+0x36>
 8002bd6:	220b      	movs	r2, #11
 8002bd8:	0021      	movs	r1, r4
 8002bda:	1a12      	subs	r2, r2, r0
 8002bdc:	40d1      	lsrs	r1, r2
 8002bde:	3015      	adds	r0, #21
 8002be0:	030a      	lsls	r2, r1, #12
 8002be2:	055b      	lsls	r3, r3, #21
 8002be4:	4084      	lsls	r4, r0
 8002be6:	0b12      	lsrs	r2, r2, #12
 8002be8:	0d5b      	lsrs	r3, r3, #21
 8002bea:	e001      	b.n	8002bf0 <__aeabi_ui2d+0x2c>
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	0022      	movs	r2, r4
 8002bfc:	380b      	subs	r0, #11
 8002bfe:	4082      	lsls	r2, r0
 8002c00:	055b      	lsls	r3, r3, #21
 8002c02:	0312      	lsls	r2, r2, #12
 8002c04:	2400      	movs	r4, #0
 8002c06:	0b12      	lsrs	r2, r2, #12
 8002c08:	0d5b      	lsrs	r3, r3, #21
 8002c0a:	e7f1      	b.n	8002bf0 <__aeabi_ui2d+0x2c>
 8002c0c:	0000041e 	.word	0x0000041e

08002c10 <__aeabi_cfrcmple>:
 8002c10:	4684      	mov	ip, r0
 8002c12:	0008      	movs	r0, r1
 8002c14:	4661      	mov	r1, ip
 8002c16:	e7ff      	b.n	8002c18 <__aeabi_cfcmpeq>

08002c18 <__aeabi_cfcmpeq>:
 8002c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c1a:	f000 f8c9 	bl	8002db0 <__lesf2>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d401      	bmi.n	8002c26 <__aeabi_cfcmpeq+0xe>
 8002c22:	2100      	movs	r1, #0
 8002c24:	42c8      	cmn	r0, r1
 8002c26:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002c28 <__aeabi_fcmpeq>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	f000 f855 	bl	8002cd8 <__eqsf2>
 8002c2e:	4240      	negs	r0, r0
 8002c30:	3001      	adds	r0, #1
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <__aeabi_fcmplt>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	f000 f8bb 	bl	8002db0 <__lesf2>
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	db01      	blt.n	8002c42 <__aeabi_fcmplt+0xe>
 8002c3e:	2000      	movs	r0, #0
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	2001      	movs	r0, #1
 8002c44:	bd10      	pop	{r4, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)

08002c48 <__aeabi_fcmple>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	f000 f8b1 	bl	8002db0 <__lesf2>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	dd01      	ble.n	8002c56 <__aeabi_fcmple+0xe>
 8002c52:	2000      	movs	r0, #0
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	2001      	movs	r0, #1
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)

08002c5c <__aeabi_fcmpgt>:
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	f000 f861 	bl	8002d24 <__gesf2>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	dc01      	bgt.n	8002c6a <__aeabi_fcmpgt+0xe>
 8002c66:	2000      	movs	r0, #0
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)

08002c70 <__aeabi_fcmpge>:
 8002c70:	b510      	push	{r4, lr}
 8002c72:	f000 f857 	bl	8002d24 <__gesf2>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	da01      	bge.n	8002c7e <__aeabi_fcmpge+0xe>
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	2001      	movs	r0, #1
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)

08002c84 <__clzsi2>:
 8002c84:	211c      	movs	r1, #28
 8002c86:	2301      	movs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	d301      	bcc.n	8002c92 <__clzsi2+0xe>
 8002c8e:	0c00      	lsrs	r0, r0, #16
 8002c90:	3910      	subs	r1, #16
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d301      	bcc.n	8002c9c <__clzsi2+0x18>
 8002c98:	0a00      	lsrs	r0, r0, #8
 8002c9a:	3908      	subs	r1, #8
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	4298      	cmp	r0, r3
 8002ca0:	d301      	bcc.n	8002ca6 <__clzsi2+0x22>
 8002ca2:	0900      	lsrs	r0, r0, #4
 8002ca4:	3904      	subs	r1, #4
 8002ca6:	a202      	add	r2, pc, #8	; (adr r2, 8002cb0 <__clzsi2+0x2c>)
 8002ca8:	5c10      	ldrb	r0, [r2, r0]
 8002caa:	1840      	adds	r0, r0, r1
 8002cac:	4770      	bx	lr
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	02020304 	.word	0x02020304
 8002cb4:	01010101 	.word	0x01010101
	...

08002cc0 <__clzdi2>:
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d103      	bne.n	8002cce <__clzdi2+0xe>
 8002cc6:	f7ff ffdd 	bl	8002c84 <__clzsi2>
 8002cca:	3020      	adds	r0, #32
 8002ccc:	e002      	b.n	8002cd4 <__clzdi2+0x14>
 8002cce:	0008      	movs	r0, r1
 8002cd0:	f7ff ffd8 	bl	8002c84 <__clzsi2>
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)

08002cd8 <__eqsf2>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	0042      	lsls	r2, r0, #1
 8002cdc:	0245      	lsls	r5, r0, #9
 8002cde:	024e      	lsls	r6, r1, #9
 8002ce0:	004c      	lsls	r4, r1, #1
 8002ce2:	0fc3      	lsrs	r3, r0, #31
 8002ce4:	0a6d      	lsrs	r5, r5, #9
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	0e12      	lsrs	r2, r2, #24
 8002cea:	0a76      	lsrs	r6, r6, #9
 8002cec:	0e24      	lsrs	r4, r4, #24
 8002cee:	0fc9      	lsrs	r1, r1, #31
 8002cf0:	2aff      	cmp	r2, #255	; 0xff
 8002cf2:	d006      	beq.n	8002d02 <__eqsf2+0x2a>
 8002cf4:	2cff      	cmp	r4, #255	; 0xff
 8002cf6:	d003      	beq.n	8002d00 <__eqsf2+0x28>
 8002cf8:	42a2      	cmp	r2, r4
 8002cfa:	d101      	bne.n	8002d00 <__eqsf2+0x28>
 8002cfc:	42b5      	cmp	r5, r6
 8002cfe:	d006      	beq.n	8002d0e <__eqsf2+0x36>
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	2d00      	cmp	r5, #0
 8002d04:	d1fc      	bne.n	8002d00 <__eqsf2+0x28>
 8002d06:	2cff      	cmp	r4, #255	; 0xff
 8002d08:	d1fa      	bne.n	8002d00 <__eqsf2+0x28>
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d1f8      	bne.n	8002d00 <__eqsf2+0x28>
 8002d0e:	428b      	cmp	r3, r1
 8002d10:	d006      	beq.n	8002d20 <__eqsf2+0x48>
 8002d12:	2001      	movs	r0, #1
 8002d14:	2a00      	cmp	r2, #0
 8002d16:	d1f3      	bne.n	8002d00 <__eqsf2+0x28>
 8002d18:	0028      	movs	r0, r5
 8002d1a:	1e43      	subs	r3, r0, #1
 8002d1c:	4198      	sbcs	r0, r3
 8002d1e:	e7ef      	b.n	8002d00 <__eqsf2+0x28>
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7ed      	b.n	8002d00 <__eqsf2+0x28>

08002d24 <__gesf2>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	0042      	lsls	r2, r0, #1
 8002d28:	0245      	lsls	r5, r0, #9
 8002d2a:	024e      	lsls	r6, r1, #9
 8002d2c:	004c      	lsls	r4, r1, #1
 8002d2e:	0fc3      	lsrs	r3, r0, #31
 8002d30:	0a6d      	lsrs	r5, r5, #9
 8002d32:	0e12      	lsrs	r2, r2, #24
 8002d34:	0a76      	lsrs	r6, r6, #9
 8002d36:	0e24      	lsrs	r4, r4, #24
 8002d38:	0fc8      	lsrs	r0, r1, #31
 8002d3a:	2aff      	cmp	r2, #255	; 0xff
 8002d3c:	d01b      	beq.n	8002d76 <__gesf2+0x52>
 8002d3e:	2cff      	cmp	r4, #255	; 0xff
 8002d40:	d00e      	beq.n	8002d60 <__gesf2+0x3c>
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d11b      	bne.n	8002d7e <__gesf2+0x5a>
 8002d46:	2c00      	cmp	r4, #0
 8002d48:	d101      	bne.n	8002d4e <__gesf2+0x2a>
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d01c      	beq.n	8002d88 <__gesf2+0x64>
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d00c      	beq.n	8002d6c <__gesf2+0x48>
 8002d52:	4283      	cmp	r3, r0
 8002d54:	d01c      	beq.n	8002d90 <__gesf2+0x6c>
 8002d56:	2102      	movs	r1, #2
 8002d58:	1e58      	subs	r0, r3, #1
 8002d5a:	4008      	ands	r0, r1
 8002d5c:	3801      	subs	r0, #1
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	2e00      	cmp	r6, #0
 8002d62:	d122      	bne.n	8002daa <__gesf2+0x86>
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d1f4      	bne.n	8002d52 <__gesf2+0x2e>
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	d1f2      	bne.n	8002d52 <__gesf2+0x2e>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1f6      	bne.n	8002d5e <__gesf2+0x3a>
 8002d70:	2001      	movs	r0, #1
 8002d72:	4240      	negs	r0, r0
 8002d74:	e7f3      	b.n	8002d5e <__gesf2+0x3a>
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d117      	bne.n	8002daa <__gesf2+0x86>
 8002d7a:	2cff      	cmp	r4, #255	; 0xff
 8002d7c:	d0f0      	beq.n	8002d60 <__gesf2+0x3c>
 8002d7e:	2c00      	cmp	r4, #0
 8002d80:	d1e7      	bne.n	8002d52 <__gesf2+0x2e>
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d1e5      	bne.n	8002d52 <__gesf2+0x2e>
 8002d86:	e7e6      	b.n	8002d56 <__gesf2+0x32>
 8002d88:	2000      	movs	r0, #0
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	d0e7      	beq.n	8002d5e <__gesf2+0x3a>
 8002d8e:	e7e2      	b.n	8002d56 <__gesf2+0x32>
 8002d90:	42a2      	cmp	r2, r4
 8002d92:	dc05      	bgt.n	8002da0 <__gesf2+0x7c>
 8002d94:	dbea      	blt.n	8002d6c <__gesf2+0x48>
 8002d96:	42b5      	cmp	r5, r6
 8002d98:	d802      	bhi.n	8002da0 <__gesf2+0x7c>
 8002d9a:	d3e7      	bcc.n	8002d6c <__gesf2+0x48>
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e7de      	b.n	8002d5e <__gesf2+0x3a>
 8002da0:	4243      	negs	r3, r0
 8002da2:	4158      	adcs	r0, r3
 8002da4:	0040      	lsls	r0, r0, #1
 8002da6:	3801      	subs	r0, #1
 8002da8:	e7d9      	b.n	8002d5e <__gesf2+0x3a>
 8002daa:	2002      	movs	r0, #2
 8002dac:	4240      	negs	r0, r0
 8002dae:	e7d6      	b.n	8002d5e <__gesf2+0x3a>

08002db0 <__lesf2>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	0042      	lsls	r2, r0, #1
 8002db4:	0245      	lsls	r5, r0, #9
 8002db6:	024e      	lsls	r6, r1, #9
 8002db8:	004c      	lsls	r4, r1, #1
 8002dba:	0fc3      	lsrs	r3, r0, #31
 8002dbc:	0a6d      	lsrs	r5, r5, #9
 8002dbe:	0e12      	lsrs	r2, r2, #24
 8002dc0:	0a76      	lsrs	r6, r6, #9
 8002dc2:	0e24      	lsrs	r4, r4, #24
 8002dc4:	0fc8      	lsrs	r0, r1, #31
 8002dc6:	2aff      	cmp	r2, #255	; 0xff
 8002dc8:	d00b      	beq.n	8002de2 <__lesf2+0x32>
 8002dca:	2cff      	cmp	r4, #255	; 0xff
 8002dcc:	d00d      	beq.n	8002dea <__lesf2+0x3a>
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	d11f      	bne.n	8002e12 <__lesf2+0x62>
 8002dd2:	2c00      	cmp	r4, #0
 8002dd4:	d116      	bne.n	8002e04 <__lesf2+0x54>
 8002dd6:	2e00      	cmp	r6, #0
 8002dd8:	d114      	bne.n	8002e04 <__lesf2+0x54>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	d010      	beq.n	8002e02 <__lesf2+0x52>
 8002de0:	e009      	b.n	8002df6 <__lesf2+0x46>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d10c      	bne.n	8002e00 <__lesf2+0x50>
 8002de6:	2cff      	cmp	r4, #255	; 0xff
 8002de8:	d113      	bne.n	8002e12 <__lesf2+0x62>
 8002dea:	2e00      	cmp	r6, #0
 8002dec:	d108      	bne.n	8002e00 <__lesf2+0x50>
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	d008      	beq.n	8002e04 <__lesf2+0x54>
 8002df2:	4283      	cmp	r3, r0
 8002df4:	d012      	beq.n	8002e1c <__lesf2+0x6c>
 8002df6:	2102      	movs	r1, #2
 8002df8:	1e58      	subs	r0, r3, #1
 8002dfa:	4008      	ands	r0, r1
 8002dfc:	3801      	subs	r0, #1
 8002dfe:	e000      	b.n	8002e02 <__lesf2+0x52>
 8002e00:	2002      	movs	r0, #2
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	2d00      	cmp	r5, #0
 8002e06:	d1f4      	bne.n	8002df2 <__lesf2+0x42>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d1fa      	bne.n	8002e02 <__lesf2+0x52>
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	4240      	negs	r0, r0
 8002e10:	e7f7      	b.n	8002e02 <__lesf2+0x52>
 8002e12:	2c00      	cmp	r4, #0
 8002e14:	d1ed      	bne.n	8002df2 <__lesf2+0x42>
 8002e16:	2e00      	cmp	r6, #0
 8002e18:	d1eb      	bne.n	8002df2 <__lesf2+0x42>
 8002e1a:	e7ec      	b.n	8002df6 <__lesf2+0x46>
 8002e1c:	42a2      	cmp	r2, r4
 8002e1e:	dc05      	bgt.n	8002e2c <__lesf2+0x7c>
 8002e20:	dbf2      	blt.n	8002e08 <__lesf2+0x58>
 8002e22:	42b5      	cmp	r5, r6
 8002e24:	d802      	bhi.n	8002e2c <__lesf2+0x7c>
 8002e26:	d3ef      	bcc.n	8002e08 <__lesf2+0x58>
 8002e28:	2000      	movs	r0, #0
 8002e2a:	e7ea      	b.n	8002e02 <__lesf2+0x52>
 8002e2c:	4243      	negs	r3, r0
 8002e2e:	4158      	adcs	r0, r3
 8002e30:	0040      	lsls	r0, r0, #1
 8002e32:	3801      	subs	r0, #1
 8002e34:	e7e5      	b.n	8002e02 <__lesf2+0x52>
 8002e36:	46c0      	nop			; (mov r8, r8)

08002e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b08b      	sub	sp, #44	; 0x2c
 8002e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	2414      	movs	r4, #20
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	0018      	movs	r0, r3
 8002e44:	2314      	movs	r3, #20
 8002e46:	001a      	movs	r2, r3
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f007 f862 	bl	8009f12 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e54:	2104      	movs	r1, #4
 8002e56:	430a      	orrs	r2, r1
 8002e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	430a      	orrs	r2, r1
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <MX_GPIO_Init+0xd4>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	4817      	ldr	r0, [pc, #92]	; (8002f10 <MX_GPIO_Init+0xd8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f001 f85e 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	0152      	lsls	r2, r2, #5
 8002ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <MX_GPIO_Init+0xd8>)
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f000 fed0 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002edc:	0021      	movs	r1, r4
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	0192      	lsls	r2, r2, #6
 8002ee4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee6:	187b      	adds	r3, r7, r1
 8002ee8:	2201      	movs	r2, #1
 8002eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <MX_GPIO_Init+0xd8>)
 8002efc:	0019      	movs	r1, r3
 8002efe:	0010      	movs	r0, r2
 8002f00:	f000 febc 	bl	8003c7c <HAL_GPIO_Init>

}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b00b      	add	sp, #44	; 0x2c
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	50000400 	.word	0x50000400

08002f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <MX_I2C1_Init+0x78>)
 8002f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <MX_I2C1_Init+0x7c>)
 8002f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 f82f 	bl	8003fb4 <HAL_I2C_Init>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d001      	beq.n	8002f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f5a:	f000 f967 	bl	800322c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f60:	2100      	movs	r1, #0
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 fcc4 	bl	80048f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f6c:	f000 f95e 	bl	800322c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <MX_I2C1_Init+0x74>)
 8002f72:	2100      	movs	r1, #0
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 fd07 	bl	8004988 <HAL_I2CEx_ConfigDigitalFilter>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f7e:	f000 f955 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000278 	.word	0x20000278
 8002f8c:	40005400 	.word	0x40005400
 8002f90:	00707cbb 	.word	0x00707cbb

08002f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	240c      	movs	r4, #12
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f006 ffb3 	bl	8009f12 <memset>
  if(i2cHandle->Instance==I2C1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_I2C_MspInit+0x80>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12a      	bne.n	800300c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_I2C_MspInit+0x84>)
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fba:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_I2C_MspInit+0x84>)
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_I2C_MspInit+0x84>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	22c0      	movs	r2, #192	; 0xc0
 8002fd2:	00d2      	lsls	r2, r2, #3
 8002fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2212      	movs	r2, #18
 8002fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	2206      	movs	r2, #6
 8002fee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	187a      	adds	r2, r7, r1
 8002ff2:	23a0      	movs	r3, #160	; 0xa0
 8002ff4:	05db      	lsls	r3, r3, #23
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fe3f 	bl	8003c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_I2C_MspInit+0x84>)
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_I2C_MspInit+0x84>)
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0389      	lsls	r1, r1, #14
 8003008:	430a      	orrs	r2, r1
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b009      	add	sp, #36	; 0x24
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	40005400 	.word	0x40005400
 8003018:	40021000 	.word	0x40021000

0800301c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003022:	f000 fc55 	bl	80038d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003026:	f000 f863 	bl	80030f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800302a:	f7ff ff05 	bl	8002e38 <MX_GPIO_Init>
	MX_I2C1_Init();
 800302e:	f7ff ff71 	bl	8002f14 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 8003032:	f000 fb3f 	bl	80036b4 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 8003036:	f000 fb6b 	bl	8003710 <MX_USART1_UART_Init>
	MX_RTC_Init();
 800303a:	f000 f8fd 	bl	8003238 <MX_RTC_Init>
	MX_TIM2_Init();
 800303e:	f000 fa5d 	bl	80034fc <MX_TIM2_Init>
	MX_TIM3_Init();
 8003042:	f000 faad 	bl	80035a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	i2c_init();
 8003046:	f006 fd83 	bl	8009b50 <i2c_init>
	SHT_begin(&sht31);
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <main+0xc8>)
 800304c:	0018      	movs	r0, r3
 800304e:	f006 fdc1 	bl	8009bd4 <SHT_begin>
	SHT_reset(&sht31);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <main+0xc8>)
 8003054:	0018      	movs	r0, r3
 8003056:	f006 fdf3 	bl	8009c40 <SHT_reset>
	eMBInit(MB_RTU, 1, 0, 115200, MB_PAR_NONE);
 800305a:	23e1      	movs	r3, #225	; 0xe1
 800305c:	025b      	lsls	r3, r3, #9
 800305e:	2200      	movs	r2, #0
 8003060:	9200      	str	r2, [sp, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	2101      	movs	r1, #1
 8003066:	2000      	movs	r0, #0
 8003068:	f005 ffcc 	bl	8009004 <eMBInit>
	eMBEnable();
 800306c:	f006 f862 	bl	8009134 <eMBEnable>
	uint32_t mesure_sensor = HAL_GetTick();
 8003070:	f000 fc94 	bl	800399c <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		eMBPoll();
 8003078:	f006 f87a 	bl	8009170 <eMBPoll>
		if (HAL_GetTick() - mesure_sensor > 1000) {
 800307c:	f000 fc8e 	bl	800399c <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	23fa      	movs	r3, #250	; 0xfa
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	429a      	cmp	r2, r3
 800308c:	d9f4      	bls.n	8003078 <main+0x5c>
			SHT_mesure(&sht31);
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <main+0xc8>)
 8003090:	0018      	movs	r0, r3
 8003092:	f006 fde5 	bl	8009c60 <SHT_mesure>
			usSRegInBuf[TEMP_ADDR] = SHT_read_temp(&sht31)*100;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <main+0xc8>)
 8003098:	0018      	movs	r0, r3
 800309a:	f006 fdbd 	bl	8009c18 <SHT_read_temp>
 800309e:	1c03      	adds	r3, r0, #0
 80030a0:	4911      	ldr	r1, [pc, #68]	; (80030e8 <main+0xcc>)
 80030a2:	1c18      	adds	r0, r3, #0
 80030a4:	f7fd fc4a 	bl	800093c <__aeabi_fmul>
 80030a8:	1c03      	adds	r3, r0, #0
 80030aa:	1c18      	adds	r0, r3, #0
 80030ac:	f7fd fa4a 	bl	8000544 <__aeabi_f2uiz>
 80030b0:	0003      	movs	r3, r0
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <main+0xd0>)
 80030b6:	805a      	strh	r2, [r3, #2]
			usSRegInBuf[HUMI_ADDR] = SHT_read_humi(&sht31)*100;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <main+0xc8>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f006 fdb6 	bl	8009c2c <SHT_read_humi>
 80030c0:	1c03      	adds	r3, r0, #0
 80030c2:	4909      	ldr	r1, [pc, #36]	; (80030e8 <main+0xcc>)
 80030c4:	1c18      	adds	r0, r3, #0
 80030c6:	f7fd fc39 	bl	800093c <__aeabi_fmul>
 80030ca:	1c03      	adds	r3, r0, #0
 80030cc:	1c18      	adds	r0, r3, #0
 80030ce:	f7fd fa39 	bl	8000544 <__aeabi_f2uiz>
 80030d2:	0003      	movs	r3, r0
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <main+0xd0>)
 80030d8:	809a      	strh	r2, [r3, #4]
			mesure_sensor = HAL_GetTick();
 80030da:	f000 fc5f 	bl	800399c <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	607b      	str	r3, [r7, #4]
		eMBPoll();
 80030e2:	e7c9      	b.n	8003078 <main+0x5c>
 80030e4:	20000794 	.word	0x20000794
 80030e8:	42c80000 	.word	0x42c80000
 80030ec:	2000048c 	.word	0x2000048c

080030f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b09d      	sub	sp, #116	; 0x74
 80030f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80030f6:	2438      	movs	r4, #56	; 0x38
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	0018      	movs	r0, r3
 80030fc:	2338      	movs	r3, #56	; 0x38
 80030fe:	001a      	movs	r2, r3
 8003100:	2100      	movs	r1, #0
 8003102:	f006 ff06 	bl	8009f12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003106:	2324      	movs	r3, #36	; 0x24
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	0018      	movs	r0, r3
 800310c:	2314      	movs	r3, #20
 800310e:	001a      	movs	r2, r3
 8003110:	2100      	movs	r1, #0
 8003112:	f006 fefe 	bl	8009f12 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003116:	003b      	movs	r3, r7
 8003118:	0018      	movs	r0, r3
 800311a:	2324      	movs	r3, #36	; 0x24
 800311c:	001a      	movs	r2, r3
 800311e:	2100      	movs	r1, #0
 8003120:	f006 fef7 	bl	8009f12 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <SystemClock_Config+0x108>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a34      	ldr	r2, [pc, #208]	; (80031fc <SystemClock_Config+0x10c>)
 800312a:	401a      	ands	r2, r3
 800312c:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <SystemClock_Config+0x108>)
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	0109      	lsls	r1, r1, #4
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8003136:	f001 fc73 	bl	8004a20 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <SystemClock_Config+0x110>)
 800313c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800313e:	4b30      	ldr	r3, [pc, #192]	; (8003200 <SystemClock_Config+0x110>)
 8003140:	492e      	ldr	r1, [pc, #184]	; (80031fc <SystemClock_Config+0x10c>)
 8003142:	400a      	ands	r2, r1
 8003144:	651a      	str	r2, [r3, #80]	; 0x50

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8003146:	193b      	adds	r3, r7, r4
 8003148:	2206      	movs	r2, #6
 800314a:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800314c:	193b      	adds	r3, r7, r4
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	0052      	lsls	r2, r2, #1
 8003152:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003154:	0021      	movs	r1, r4
 8003156:	187b      	adds	r3, r7, r1
 8003158:	2201      	movs	r2, #1
 800315a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2210      	movs	r2, #16
 8003160:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2202      	movs	r2, #2
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2200      	movs	r2, #0
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	02d2      	lsls	r2, r2, #11
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	03d2      	lsls	r2, r2, #15
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800317e:	187b      	adds	r3, r7, r1
 8003180:	0018      	movs	r0, r3
 8003182:	f001 fc5b 	bl	8004a3c <HAL_RCC_OscConfig>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <SystemClock_Config+0x9e>
		Error_Handler();
 800318a:	f000 f84f 	bl	800322c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800318e:	2124      	movs	r1, #36	; 0x24
 8003190:	187b      	adds	r3, r7, r1
 8003192:	220f      	movs	r2, #15
 8003194:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2203      	movs	r2, #3
 800319a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2101      	movs	r1, #1
 80031b2:	0018      	movs	r0, r3
 80031b4:	f002 f816 	bl	80051e4 <HAL_RCC_ClockConfig>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <SystemClock_Config+0xd0>
		Error_Handler();
 80031bc:	f000 f836 	bl	800322c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80031c0:	003b      	movs	r3, r7
 80031c2:	222d      	movs	r2, #45	; 0x2d
 80031c4:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031c6:	003b      	movs	r3, r7
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80031cc:	003b      	movs	r3, r7
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031d2:	003b      	movs	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031d8:	003b      	movs	r3, r7
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0252      	lsls	r2, r2, #9
 80031de:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80031e0:	003b      	movs	r3, r7
 80031e2:	0018      	movs	r0, r3
 80031e4:	f002 fa22 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d001      	beq.n	80031f0 <SystemClock_Config+0x100>
		Error_Handler();
 80031ec:	f000 f81e 	bl	800322c <Error_Handler>
	}
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b01d      	add	sp, #116	; 0x74
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	40007000 	.word	0x40007000
 80031fc:	ffffe7ff 	.word	0xffffe7ff
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

	prvvUARTRxISR();
 800320c:	f006 fc26 	bl	8009a5c <prvvUARTRxISR>
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PeriodElapsedCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
	prvvUARTTxReadyISR();
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	prvvTIMERExpiredISR();
 8003220:	f006 fc7c 	bl	8009b1c <prvvTIMERExpiredISR>
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003230:	b672      	cpsid	i
}
 8003232:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003234:	e7fe      	b.n	8003234 <Error_Handler+0x8>
	...

08003238 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_RTC_Init+0x4c>)
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <MX_RTC_Init+0x50>)
 8003240:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <MX_RTC_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <MX_RTC_Init+0x4c>)
 800324a:	227f      	movs	r2, #127	; 0x7f
 800324c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <MX_RTC_Init+0x4c>)
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <MX_RTC_Init+0x4c>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <MX_RTC_Init+0x4c>)
 800325c:	2200      	movs	r2, #0
 800325e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <MX_RTC_Init+0x4c>)
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <MX_RTC_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <MX_RTC_Init+0x4c>)
 800326e:	0018      	movs	r0, r3
 8003270:	f002 fb32 	bl	80058d8 <HAL_RTC_Init>
 8003274:	1e03      	subs	r3, r0, #0
 8003276:	d001      	beq.n	800327c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003278:	f7ff ffd8 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	200002c4 	.word	0x200002c4
 8003288:	40002800 	.word	0x40002800

0800328c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_RTC_MspInit+0x28>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d106      	bne.n	80032ac <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RTC_MspInit+0x2c>)
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RTC_MspInit+0x2c>)
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	02c9      	lsls	r1, r1, #11
 80032a8:	430a      	orrs	r2, r1
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40002800 	.word	0x40002800
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_MspInit+0x24>)
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x24>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_MspInit+0x24>)
 80032ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_MspInit+0x24>)
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	0549      	lsls	r1, r1, #21
 80032d6:	430a      	orrs	r2, r1
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000

080032e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <NMI_Handler+0x4>

080032ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler+0x4>

080032f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003308:	f000 fb36 	bl	8003978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <TIM2_IRQHandler+0x14>)
 800331a:	0018      	movs	r0, r3
 800331c:	f002 fc84 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	200002ec 	.word	0x200002ec

0800332c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <TIM3_IRQHandler+0x14>)
 8003332:	0018      	movs	r0, r3
 8003334:	f002 fc78 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	2000032c 	.word	0x2000032c

08003344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <USART1_IRQHandler+0x14>)
 800334a:	0018      	movs	r0, r3
 800334c:	f003 fa18 	bl	8006780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	200003f0 	.word	0x200003f0

0800335c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <RNG_LPUART1_IRQHandler+0x14>)
 8003362:	0018      	movs	r0, r3
 8003364:	f003 fa0c 	bl	8006780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	2000036c 	.word	0x2000036c

08003374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	return 1;
 8003378:	2301      	movs	r3, #1
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_kill>:

int _kill(int pid, int sig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800338a:	f006 fd7f 	bl	8009e8c <__errno>
 800338e:	0003      	movs	r3, r0
 8003390:	2216      	movs	r2, #22
 8003392:	601a      	str	r2, [r3, #0]
	return -1;
 8003394:	2301      	movs	r3, #1
 8003396:	425b      	negs	r3, r3
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_exit>:

void _exit (int status)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033a8:	2301      	movs	r3, #1
 80033aa:	425a      	negs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff ffe5 	bl	8003380 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033b6:	e7fe      	b.n	80033b6 <_exit+0x16>

080033b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e00a      	b.n	80033e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ca:	e000      	b.n	80033ce <_read+0x16>
 80033cc:	bf00      	nop
 80033ce:	0001      	movs	r1, r0
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	60ba      	str	r2, [r7, #8]
 80033d6:	b2ca      	uxtb	r2, r1
 80033d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	dbf0      	blt.n	80033ca <_read+0x12>
	}

return len;
 80033e8:	687b      	ldr	r3, [r7, #4]
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b006      	add	sp, #24
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e009      	b.n	8003418 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	60ba      	str	r2, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	0018      	movs	r0, r3
 800340e:	e000      	b.n	8003412 <_write+0x20>
 8003410:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3301      	adds	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	dbf1      	blt.n	8003404 <_write+0x12>
	}
	return len;
 8003420:	687b      	ldr	r3, [r7, #4]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b006      	add	sp, #24
 8003428:	bd80      	pop	{r7, pc}

0800342a <_close>:

int _close(int file)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
	return -1;
 8003432:	2301      	movs	r3, #1
 8003434:	425b      	negs	r3, r3
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}

0800343e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	0192      	lsls	r2, r2, #6
 800344e:	605a      	str	r2, [r3, #4]
	return 0;
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}

0800345a <_isatty>:

int _isatty(int file)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
	return 1;
 8003462:	2301      	movs	r3, #1
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
	return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b004      	add	sp, #16
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <_sbrk+0x5c>)
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <_sbrk+0x60>)
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <_sbrk+0x64>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <_sbrk+0x64>)
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <_sbrk+0x68>)
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <_sbrk+0x64>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	18d3      	adds	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d207      	bcs.n	80034c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b4:	f006 fcea 	bl	8009e8c <__errno>
 80034b8:	0003      	movs	r3, r0
 80034ba:	220c      	movs	r2, #12
 80034bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034be:	2301      	movs	r3, #1
 80034c0:	425b      	negs	r3, r3
 80034c2:	e009      	b.n	80034d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <_sbrk+0x64>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	18d2      	adds	r2, r2, r3
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <_sbrk+0x64>)
 80034d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b006      	add	sp, #24
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20005000 	.word	0x20005000
 80034e4:	00000400 	.word	0x00000400
 80034e8:	200002e8 	.word	0x200002e8
 80034ec:	200007c0 	.word	0x200007c0

080034f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003502:	2308      	movs	r3, #8
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	0018      	movs	r0, r3
 8003508:	2310      	movs	r3, #16
 800350a:	001a      	movs	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	f006 fd00 	bl	8009f12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003512:	003b      	movs	r3, r7
 8003514:	0018      	movs	r0, r3
 8003516:	2308      	movs	r3, #8
 8003518:	001a      	movs	r2, r3
 800351a:	2100      	movs	r1, #0
 800351c:	f006 fcf9 	bl	8009f12 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <MX_TIM2_Init+0xa0>)
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	05d2      	lsls	r2, r2, #23
 8003526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <MX_TIM2_Init+0xa0>)
 800352a:	221f      	movs	r2, #31
 800352c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <MX_TIM2_Init+0xa0>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <MX_TIM2_Init+0xa0>)
 8003536:	2263      	movs	r2, #99	; 0x63
 8003538:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <MX_TIM2_Init+0xa0>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <MX_TIM2_Init+0xa0>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <MX_TIM2_Init+0xa0>)
 8003548:	0018      	movs	r0, r3
 800354a:	f002 fab4 	bl	8005ab6 <HAL_TIM_Base_Init>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003552:	f7ff fe6b 	bl	800322c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003556:	2108      	movs	r1, #8
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	0152      	lsls	r2, r2, #5
 800355e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003560:	187a      	adds	r2, r7, r1
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_TIM2_Init+0xa0>)
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f002 fc46 	bl	8005df8 <HAL_TIM_ConfigClockSource>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003570:	f7ff fe5c 	bl	800322c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003574:	003b      	movs	r3, r7
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800357a:	003b      	movs	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003580:	003a      	movs	r2, r7
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_TIM2_Init+0xa0>)
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f002 fe22 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003590:	f7ff fe4c 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b006      	add	sp, #24
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200002ec 	.word	0x200002ec

080035a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a6:	2308      	movs	r3, #8
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	0018      	movs	r0, r3
 80035ac:	2310      	movs	r3, #16
 80035ae:	001a      	movs	r2, r3
 80035b0:	2100      	movs	r1, #0
 80035b2:	f006 fcae 	bl	8009f12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b6:	003b      	movs	r3, r7
 80035b8:	0018      	movs	r0, r3
 80035ba:	2308      	movs	r3, #8
 80035bc:	001a      	movs	r2, r3
 80035be:	2100      	movs	r1, #0
 80035c0:	f006 fca7 	bl	8009f12 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <MX_TIM3_Init+0xa4>)
 80035c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <MX_TIM3_Init+0xa8>)
 80035da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_TIM3_Init+0xa0>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f002 fa63 	bl	8005ab6 <HAL_TIM_Base_Init>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80035f4:	f7ff fe1a 	bl	800322c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f8:	2108      	movs	r1, #8
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	0152      	lsls	r2, r2, #5
 8003600:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003602:	187a      	adds	r2, r7, r1
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_TIM3_Init+0xa0>)
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f002 fbf5 	bl	8005df8 <HAL_TIM_ConfigClockSource>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003612:	f7ff fe0b 	bl	800322c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003616:	003b      	movs	r3, r7
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361c:	003b      	movs	r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003622:	003a      	movs	r2, r7
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_TIM3_Init+0xa0>)
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f002 fdd1 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003632:	f7ff fdfb 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	2000032c 	.word	0x2000032c
 8003644:	40000400 	.word	0x40000400
 8003648:	0000ffff 	.word	0x0000ffff

0800364c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	05db      	lsls	r3, r3, #23
 800365c:	429a      	cmp	r2, r3
 800365e:	d10e      	bne.n	800367e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_TIM_Base_MspInit+0x60>)
 8003662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_TIM_Base_MspInit+0x60>)
 8003666:	2101      	movs	r1, #1
 8003668:	430a      	orrs	r2, r1
 800366a:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	200f      	movs	r0, #15
 8003672:	f000 fa49 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003676:	200f      	movs	r0, #15
 8003678:	f000 fa5b 	bl	8003b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800367c:	e012      	b.n	80036a4 <HAL_TIM_Base_MspInit+0x58>
  else if(tim_baseHandle->Instance==TIM3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <HAL_TIM_Base_MspInit+0x64>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10d      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_TIM_Base_MspInit+0x60>)
 800368a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <HAL_TIM_Base_MspInit+0x60>)
 800368e:	2102      	movs	r1, #2
 8003690:	430a      	orrs	r2, r1
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	2100      	movs	r1, #0
 8003698:	2010      	movs	r0, #16
 800369a:	f000 fa35 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800369e:	2010      	movs	r0, #16
 80036a0:	f000 fa47 	bl	8003b32 <HAL_NVIC_EnableIRQ>
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40000400 	.word	0x40000400

080036b4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <MX_LPUART1_UART_Init+0x58>)
 80036bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036c0:	22e1      	movs	r2, #225	; 0xe1
 80036c2:	0252      	lsls	r2, r2, #9
 80036c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <MX_LPUART1_UART_Init+0x54>)
 80036f2:	0018      	movs	r0, r3
 80036f4:	f002 fdca 	bl	800628c <HAL_UART_Init>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80036fc:	f7ff fd96 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	2000036c 	.word	0x2000036c
 800370c:	40004800 	.word	0x40004800

08003710 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <MX_USART1_UART_Init+0x5c>)
 8003718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <MX_USART1_UART_Init+0x58>)
 800371c:	22e1      	movs	r2, #225	; 0xe1
 800371e:	0252      	lsls	r2, r2, #9
 8003720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <MX_USART1_UART_Init+0x58>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <MX_USART1_UART_Init+0x58>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003748:	2200      	movs	r2, #0
 800374a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_USART1_UART_Init+0x58>)
 800374e:	2200      	movs	r2, #0
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <MX_USART1_UART_Init+0x58>)
 8003754:	0018      	movs	r0, r3
 8003756:	f002 fd99 	bl	800628c <HAL_UART_Init>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800375e:	f7ff fd65 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200003f0 	.word	0x200003f0
 800376c:	40013800 	.word	0x40013800

08003770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b08b      	sub	sp, #44	; 0x2c
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	2414      	movs	r4, #20
 800377a:	193b      	adds	r3, r7, r4
 800377c:	0018      	movs	r0, r3
 800377e:	2314      	movs	r3, #20
 8003780:	001a      	movs	r2, r3
 8003782:	2100      	movs	r1, #0
 8003784:	f006 fbc5 	bl	8009f12 <memset>
  if(uartHandle->Instance==LPUART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a37      	ldr	r2, [pc, #220]	; (800386c <HAL_UART_MspInit+0xfc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d132      	bne.n	80037f8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	02c9      	lsls	r1, r1, #11
 800379c:	430a      	orrs	r2, r1
 800379e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_UART_MspInit+0x100>)
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <HAL_UART_MspInit+0x100>)
 80037a6:	2101      	movs	r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_UART_MspInit+0x100>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037b8:	0021      	movs	r1, r4
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	220c      	movs	r2, #12
 80037be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2202      	movs	r2, #2
 80037c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	2203      	movs	r2, #3
 80037d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2206      	movs	r2, #6
 80037d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	187a      	adds	r2, r7, r1
 80037da:	23a0      	movs	r3, #160	; 0xa0
 80037dc:	05db      	lsls	r3, r3, #23
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fa4b 	bl	8003c7c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2100      	movs	r1, #0
 80037ea:	201d      	movs	r0, #29
 80037ec:	f000 f98c 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80037f0:	201d      	movs	r0, #29
 80037f2:	f000 f99e 	bl	8003b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80037f6:	e035      	b.n	8003864 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_UART_MspInit+0x104>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d130      	bne.n	8003864 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	01c9      	lsls	r1, r1, #7
 800380c:	430a      	orrs	r2, r1
 800380e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_UART_MspInit+0x100>)
 8003816:	2102      	movs	r1, #2
 8003818:	430a      	orrs	r2, r1
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_UART_MspInit+0x100>)
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003828:	2114      	movs	r1, #20
 800382a:	187b      	adds	r3, r7, r1
 800382c:	22c0      	movs	r2, #192	; 0xc0
 800382e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	187b      	adds	r3, r7, r1
 8003832:	2202      	movs	r2, #2
 8003834:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	187b      	adds	r3, r7, r1
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	187b      	adds	r3, r7, r1
 800383e:	2203      	movs	r2, #3
 8003840:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003842:	187b      	adds	r3, r7, r1
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003848:	187b      	adds	r3, r7, r1
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_UART_MspInit+0x108>)
 800384c:	0019      	movs	r1, r3
 800384e:	0010      	movs	r0, r2
 8003850:	f000 fa14 	bl	8003c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	2100      	movs	r1, #0
 8003858:	201b      	movs	r0, #27
 800385a:	f000 f955 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800385e:	201b      	movs	r0, #27
 8003860:	f000 f967 	bl	8003b32 <HAL_NVIC_EnableIRQ>
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b00b      	add	sp, #44	; 0x2c
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	40004800 	.word	0x40004800
 8003870:	40021000 	.word	0x40021000
 8003874:	40013800 	.word	0x40013800
 8003878:	50000400 	.word	0x50000400

0800387c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800387c:	480d      	ldr	r0, [pc, #52]	; (80038b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800387e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003882:	490e      	ldr	r1, [pc, #56]	; (80038bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <LoopForever+0xe>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003898:	4c0b      	ldr	r4, [pc, #44]	; (80038c8 <LoopForever+0x16>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80038a6:	f7ff fe23 	bl	80034f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038aa:	f006 fb05 	bl	8009eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ae:	f7ff fbb5 	bl	800301c <main>

080038b2 <LoopForever>:

LoopForever:
    b LoopForever
 80038b2:	e7fe      	b.n	80038b2 <LoopForever>
   ldr   r0, =_estack
 80038b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80038b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038bc:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80038c0:	0800d398 	.word	0x0800d398
  ldr r2, =_sbss
 80038c4:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80038c8:	200007bc 	.word	0x200007bc

080038cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038cc:	e7fe      	b.n	80038cc <ADC1_COMP_IRQHandler>
	...

080038d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038d6:	1dfb      	adds	r3, r7, #7
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_Init+0x3c>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_Init+0x3c>)
 80038e2:	2140      	movs	r1, #64	; 0x40
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 f811 	bl	8003910 <HAL_InitTick>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d003      	beq.n	80038fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e001      	b.n	80038fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038fa:	f7ff fcdf 	bl	80032bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_InitTick+0x5c>)
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_InitTick+0x60>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	0019      	movs	r1, r3
 8003922:	23fa      	movs	r3, #250	; 0xfa
 8003924:	0098      	lsls	r0, r3, #2
 8003926:	f7fc fc0b 	bl	8000140 <__udivsi3>
 800392a:	0003      	movs	r3, r0
 800392c:	0019      	movs	r1, r3
 800392e:	0020      	movs	r0, r4
 8003930:	f7fc fc06 	bl	8000140 <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	0018      	movs	r0, r3
 8003938:	f000 f90b 	bl	8003b52 <HAL_SYSTICK_Config>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d001      	beq.n	8003944 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e00f      	b.n	8003964 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d80b      	bhi.n	8003962 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	2301      	movs	r3, #1
 800394e:	425b      	negs	r3, r3
 8003950:	2200      	movs	r2, #0
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f8d8 	bl	8003b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_InitTick+0x64>)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b003      	add	sp, #12
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	20000000 	.word	0x20000000
 8003970:	20000008 	.word	0x20000008
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_IncTick+0x1c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	001a      	movs	r2, r3
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_IncTick+0x20>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	18d2      	adds	r2, r2, r3
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_IncTick+0x20>)
 800398a:	601a      	str	r2, [r3, #0]
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000008 	.word	0x20000008
 8003998:	20000474 	.word	0x20000474

0800399c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  return uwTick;
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_GetTick+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	20000474 	.word	0x20000474

080039b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	0002      	movs	r2, r0
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b7f      	cmp	r3, #127	; 0x7f
 80039c2:	d809      	bhi.n	80039d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	001a      	movs	r2, r3
 80039ca:	231f      	movs	r3, #31
 80039cc:	401a      	ands	r2, r3
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <__NVIC_EnableIRQ+0x30>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	4091      	lsls	r1, r2
 80039d4:	000a      	movs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
  }
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	0002      	movs	r2, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b7f      	cmp	r3, #127	; 0x7f
 80039f8:	d828      	bhi.n	8003a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039fa:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <__NVIC_SetPriority+0xd4>)
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	33c0      	adds	r3, #192	; 0xc0
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	589b      	ldr	r3, [r3, r2]
 8003a0a:	1dfa      	adds	r2, r7, #7
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	0011      	movs	r1, r2
 8003a10:	2203      	movs	r2, #3
 8003a12:	400a      	ands	r2, r1
 8003a14:	00d2      	lsls	r2, r2, #3
 8003a16:	21ff      	movs	r1, #255	; 0xff
 8003a18:	4091      	lsls	r1, r2
 8003a1a:	000a      	movs	r2, r1
 8003a1c:	43d2      	mvns	r2, r2
 8003a1e:	401a      	ands	r2, r3
 8003a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	401a      	ands	r2, r3
 8003a2a:	1dfb      	adds	r3, r7, #7
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2303      	movs	r3, #3
 8003a32:	4003      	ands	r3, r0
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a38:	481f      	ldr	r0, [pc, #124]	; (8003ab8 <__NVIC_SetPriority+0xd4>)
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	430a      	orrs	r2, r1
 8003a44:	33c0      	adds	r3, #192	; 0xc0
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a4a:	e031      	b.n	8003ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <__NVIC_SetPriority+0xd8>)
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	0019      	movs	r1, r3
 8003a54:	230f      	movs	r3, #15
 8003a56:	400b      	ands	r3, r1
 8003a58:	3b08      	subs	r3, #8
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3306      	adds	r3, #6
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	18d3      	adds	r3, r2, r3
 8003a62:	3304      	adds	r3, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1dfa      	adds	r2, r7, #7
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	400a      	ands	r2, r1
 8003a70:	00d2      	lsls	r2, r2, #3
 8003a72:	21ff      	movs	r1, #255	; 0xff
 8003a74:	4091      	lsls	r1, r2
 8003a76:	000a      	movs	r2, r1
 8003a78:	43d2      	mvns	r2, r2
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	401a      	ands	r2, r3
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	4003      	ands	r3, r0
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a94:	4809      	ldr	r0, [pc, #36]	; (8003abc <__NVIC_SetPriority+0xd8>)
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	001c      	movs	r4, r3
 8003a9c:	230f      	movs	r3, #15
 8003a9e:	4023      	ands	r3, r4
 8003aa0:	3b08      	subs	r3, #8
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	3306      	adds	r3, #6
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	18c3      	adds	r3, r0, r3
 8003aac:	3304      	adds	r3, #4
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b003      	add	sp, #12
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	045b      	lsls	r3, r3, #17
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d301      	bcc.n	8003ad8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e010      	b.n	8003afa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <SysTick_Config+0x44>)
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	425b      	negs	r3, r3
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff ff7c 	bl	80039e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <SysTick_Config+0x44>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <SysTick_Config+0x44>)
 8003af4:	2207      	movs	r2, #7
 8003af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	e000e010 	.word	0xe000e010

08003b08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	210f      	movs	r1, #15
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	1c02      	adds	r2, r0, #0
 8003b18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff ff5d 	bl	80039e4 <__NVIC_SetPriority>
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	0002      	movs	r2, r0
 8003b3a:	1dfb      	adds	r3, r7, #7
 8003b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff ff33 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ffaf 	bl	8003ac0 <SysTick_Config>
 8003b62:	0003      	movs	r3, r0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	230f      	movs	r3, #15
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2225      	movs	r2, #37	; 0x25
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d008      	beq.n	8003b9a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	; 0x24
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e024      	b.n	8003be4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	210e      	movs	r1, #14
 8003ba6:	438a      	bics	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	221c      	movs	r2, #28
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4091      	lsls	r1, r2
 8003bca:	000a      	movs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2225      	movs	r2, #37	; 0x25
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	; 0x24
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

    return status;
 8003bde:	230f      	movs	r3, #15
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	210f      	movs	r1, #15
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2225      	movs	r2, #37	; 0x25
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d006      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e02a      	b.n	8003c6c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	210e      	movs	r1, #14
 8003c22:	438a      	bics	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	438a      	bics	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	221c      	movs	r2, #28
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2101      	movs	r1, #1
 8003c44:	4091      	lsls	r1, r2
 8003c46:	000a      	movs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2225      	movs	r2, #37	; 0x25
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2224      	movs	r2, #36	; 0x24
 8003c56:	2100      	movs	r1, #0
 8003c58:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	0010      	movs	r0, r2
 8003c6a:	4798      	blx	r3
    }
  }
  return status;
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c92:	e155      	b.n	8003f40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4091      	lsls	r1, r2
 8003c9e:	000a      	movs	r2, r1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d100      	bne.n	8003cac <HAL_GPIO_Init+0x30>
 8003caa:	e146      	b.n	8003f3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d005      	beq.n	8003cc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d130      	bne.n	8003d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	0013      	movs	r3, r2
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	0013      	movs	r3, r2
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	0013      	movs	r3, r2
 8003d02:	43da      	mvns	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	2201      	movs	r2, #1
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
 8003d18:	0013      	movs	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d017      	beq.n	8003d62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	43da      	mvns	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	0013      	movs	r3, r2
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2203      	movs	r2, #3
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d123      	bne.n	8003db6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	08da      	lsrs	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3208      	adds	r2, #8
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	58d3      	ldr	r3, [r2, r3]
 8003d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2207      	movs	r2, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	409a      	lsls	r2, r3
 8003d88:	0013      	movs	r3, r2
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2107      	movs	r1, #7
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	0013      	movs	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	0013      	movs	r3, r2
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	0013      	movs	r3, r2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	23c0      	movs	r3, #192	; 0xc0
 8003df0:	029b      	lsls	r3, r3, #10
 8003df2:	4013      	ands	r3, r2
 8003df4:	d100      	bne.n	8003df8 <HAL_GPIO_Init+0x17c>
 8003df6:	e0a0      	b.n	8003f3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df8:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <HAL_GPIO_Init+0x2dc>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	4b56      	ldr	r3, [pc, #344]	; (8003f58 <HAL_GPIO_Init+0x2dc>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e04:	4a55      	ldr	r2, [pc, #340]	; (8003f5c <HAL_GPIO_Init+0x2e0>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	589b      	ldr	r3, [r3, r2]
 8003e10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2203      	movs	r2, #3
 8003e16:	4013      	ands	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	0013      	movs	r3, r2
 8003e20:	43da      	mvns	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	23a0      	movs	r3, #160	; 0xa0
 8003e2c:	05db      	lsls	r3, r3, #23
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d01f      	beq.n	8003e72 <HAL_GPIO_Init+0x1f6>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <HAL_GPIO_Init+0x2e4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d019      	beq.n	8003e6e <HAL_GPIO_Init+0x1f2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_GPIO_Init+0x1ee>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a48      	ldr	r2, [pc, #288]	; (8003f68 <HAL_GPIO_Init+0x2ec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00d      	beq.n	8003e66 <HAL_GPIO_Init+0x1ea>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a47      	ldr	r2, [pc, #284]	; (8003f6c <HAL_GPIO_Init+0x2f0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <HAL_GPIO_Init+0x1e6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a46      	ldr	r2, [pc, #280]	; (8003f70 <HAL_GPIO_Init+0x2f4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d101      	bne.n	8003e5e <HAL_GPIO_Init+0x1e2>
 8003e5a:	2305      	movs	r3, #5
 8003e5c:	e00a      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e5e:	2306      	movs	r3, #6
 8003e60:	e008      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e62:	2304      	movs	r3, #4
 8003e64:	e006      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e66:	2303      	movs	r3, #3
 8003e68:	e004      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e002      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	2103      	movs	r1, #3
 8003e78:	400a      	ands	r2, r1
 8003e7a:	0092      	lsls	r2, r2, #2
 8003e7c:	4093      	lsls	r3, r2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e84:	4935      	ldr	r1, [pc, #212]	; (8003f5c <HAL_GPIO_Init+0x2e0>)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e92:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	025b      	lsls	r3, r3, #9
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee6:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	035b      	lsls	r3, r3, #13
 8003efe:	4013      	ands	r3, r2
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	039b      	lsls	r3, r3, #14
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	40da      	lsrs	r2, r3
 8003f48:	1e13      	subs	r3, r2, #0
 8003f4a:	d000      	beq.n	8003f4e <HAL_GPIO_Init+0x2d2>
 8003f4c:	e6a2      	b.n	8003c94 <HAL_GPIO_Init+0x18>
  }
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b006      	add	sp, #24
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	50000400 	.word	0x50000400
 8003f64:	50000800 	.word	0x50000800
 8003f68:	50000c00 	.word	0x50000c00
 8003f6c:	50001000 	.word	0x50001000
 8003f70:	50001c00 	.word	0x50001c00
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	0008      	movs	r0, r1
 8003f82:	0011      	movs	r1, r2
 8003f84:	1cbb      	adds	r3, r7, #2
 8003f86:	1c02      	adds	r2, r0, #0
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	1c7b      	adds	r3, r7, #1
 8003f8c:	1c0a      	adds	r2, r1, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f90:	1c7b      	adds	r3, r7, #1
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f98:	1cbb      	adds	r3, r7, #2
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003fa0:	e003      	b.n	8003faa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003fa2:	1cbb      	adds	r3, r7, #2
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e082      	b.n	80040cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2241      	movs	r2, #65	; 0x41
 8003fca:	5c9b      	ldrb	r3, [r3, r2]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2240      	movs	r2, #64	; 0x40
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fe ffd9 	bl	8002f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	; 0x41
 8003fe6:	2124      	movs	r1, #36	; 0x24
 8003fe8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_I2C_Init+0x120>)
 8004004:	400a      	ands	r2, r1
 8004006:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4931      	ldr	r1, [pc, #196]	; (80040d8 <HAL_I2C_Init+0x124>)
 8004014:	400a      	ands	r2, r1
 8004016:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	0209      	lsls	r1, r1, #8
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e007      	b.n	8004042 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2184      	movs	r1, #132	; 0x84
 800403c:	0209      	lsls	r1, r1, #8
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d104      	bne.n	8004054 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	491f      	ldr	r1, [pc, #124]	; (80040dc <HAL_I2C_Init+0x128>)
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	491a      	ldr	r1, [pc, #104]	; (80040d8 <HAL_I2C_Init+0x124>)
 8004070:	400a      	ands	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	431a      	orrs	r2, r3
 800407e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69d9      	ldr	r1, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2241      	movs	r2, #65	; 0x41
 80040b8:	2120      	movs	r1, #32
 80040ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2242      	movs	r2, #66	; 0x42
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f0ffffff 	.word	0xf0ffffff
 80040d8:	ffff7fff 	.word	0xffff7fff
 80040dc:	02008000 	.word	0x02008000

080040e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	0008      	movs	r0, r1
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	0019      	movs	r1, r3
 80040ee:	230a      	movs	r3, #10
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	1c02      	adds	r2, r0, #0
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	2308      	movs	r3, #8
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	1c0a      	adds	r2, r1, #0
 80040fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2241      	movs	r2, #65	; 0x41
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	d000      	beq.n	800410c <HAL_I2C_Master_Transmit+0x2c>
 800410a:	e0e7      	b.n	80042dc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_I2C_Master_Transmit+0x3a>
 8004116:	2302      	movs	r3, #2
 8004118:	e0e1      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2240      	movs	r2, #64	; 0x40
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004122:	f7ff fc3b 	bl	800399c <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	0219      	lsls	r1, r3, #8
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2319      	movs	r3, #25
 8004136:	2201      	movs	r2, #1
 8004138:	f000 fa04 	bl	8004544 <I2C_WaitOnFlagUntilTimeout>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2241      	movs	r2, #65	; 0x41
 8004148:	2121      	movs	r1, #33	; 0x21
 800414a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2242      	movs	r2, #66	; 0x42
 8004150:	2110      	movs	r1, #16
 8004152:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2208      	movs	r2, #8
 8004164:	18ba      	adds	r2, r7, r2
 8004166:	8812      	ldrh	r2, [r2, #0]
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2bff      	cmp	r3, #255	; 0xff
 8004178:	d911      	bls.n	800419e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	b2da      	uxtb	r2, r3
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	045c      	lsls	r4, r3, #17
 800418a:	230a      	movs	r3, #10
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	8819      	ldrh	r1, [r3, #0]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	4b55      	ldr	r3, [pc, #340]	; (80042e8 <HAL_I2C_Master_Transmit+0x208>)
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	0023      	movs	r3, r4
 8004198:	f000 fb74 	bl	8004884 <I2C_TransferConfig>
 800419c:	e075      	b.n	800428a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	049c      	lsls	r4, r3, #18
 80041b2:	230a      	movs	r3, #10
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	8819      	ldrh	r1, [r3, #0]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_I2C_Master_Transmit+0x208>)
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	0023      	movs	r3, r4
 80041c0:	f000 fb60 	bl	8004884 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041c4:	e061      	b.n	800428a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f9f8 	bl	80045c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e081      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03a      	beq.n	800428a <HAL_I2C_Master_Transmit+0x1aa>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d136      	bne.n	800428a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800421c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	0013      	movs	r3, r2
 8004226:	2200      	movs	r2, #0
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	f000 f98b 	bl	8004544 <I2C_WaitOnFlagUntilTimeout>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e053      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	2bff      	cmp	r3, #255	; 0xff
 800423e:	d911      	bls.n	8004264 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	22ff      	movs	r2, #255	; 0xff
 8004244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	b2da      	uxtb	r2, r3
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	045c      	lsls	r4, r3, #17
 8004250:	230a      	movs	r3, #10
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	8819      	ldrh	r1, [r3, #0]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	0023      	movs	r3, r4
 800425e:	f000 fb11 	bl	8004884 <I2C_TransferConfig>
 8004262:	e012      	b.n	800428a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	b2da      	uxtb	r2, r3
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	049c      	lsls	r4, r3, #18
 8004278:	230a      	movs	r3, #10
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	8819      	ldrh	r1, [r3, #0]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0023      	movs	r3, r4
 8004286:	f000 fafd 	bl	8004884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d198      	bne.n	80041c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	0018      	movs	r0, r3
 800429c:	f000 f9d0 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e01a      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2220      	movs	r2, #32
 80042ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	490c      	ldr	r1, [pc, #48]	; (80042ec <HAL_I2C_Master_Transmit+0x20c>)
 80042bc:	400a      	ands	r2, r1
 80042be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2241      	movs	r2, #65	; 0x41
 80042c4:	2120      	movs	r1, #32
 80042c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2242      	movs	r2, #66	; 0x42
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	2100      	movs	r1, #0
 80042d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b007      	add	sp, #28
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	80002000 	.word	0x80002000
 80042ec:	fe00e800 	.word	0xfe00e800

080042f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	0008      	movs	r0, r1
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	0019      	movs	r1, r3
 80042fe:	230a      	movs	r3, #10
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	2308      	movs	r3, #8
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	1c0a      	adds	r2, r1, #0
 800430c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2241      	movs	r2, #65	; 0x41
 8004312:	5c9b      	ldrb	r3, [r3, r2]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b20      	cmp	r3, #32
 8004318:	d000      	beq.n	800431c <HAL_I2C_Master_Receive+0x2c>
 800431a:	e0e8      	b.n	80044ee <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_I2C_Master_Receive+0x3a>
 8004326:	2302      	movs	r3, #2
 8004328:	e0e2      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2240      	movs	r2, #64	; 0x40
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004332:	f7ff fb33 	bl	800399c <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	0219      	lsls	r1, r3, #8
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2319      	movs	r3, #25
 8004346:	2201      	movs	r2, #1
 8004348:	f000 f8fc 	bl	8004544 <I2C_WaitOnFlagUntilTimeout>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cd      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2241      	movs	r2, #65	; 0x41
 8004358:	2122      	movs	r1, #34	; 0x22
 800435a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2242      	movs	r2, #66	; 0x42
 8004360:	2110      	movs	r1, #16
 8004362:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2208      	movs	r2, #8
 8004374:	18ba      	adds	r2, r7, r2
 8004376:	8812      	ldrh	r2, [r2, #0]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2bff      	cmp	r3, #255	; 0xff
 8004388:	d911      	bls.n	80043ae <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	b2da      	uxtb	r2, r3
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	045c      	lsls	r4, r3, #17
 800439a:	230a      	movs	r3, #10
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	8819      	ldrh	r1, [r3, #0]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	4b55      	ldr	r3, [pc, #340]	; (80044f8 <HAL_I2C_Master_Receive+0x208>)
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	0023      	movs	r3, r4
 80043a8:	f000 fa6c 	bl	8004884 <I2C_TransferConfig>
 80043ac:	e076      	b.n	800449c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	049c      	lsls	r4, r3, #18
 80043c2:	230a      	movs	r3, #10
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	8819      	ldrh	r1, [r3, #0]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_I2C_Master_Receive+0x208>)
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	0023      	movs	r3, r4
 80043d0:	f000 fa58 	bl	8004884 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043d4:	e062      	b.n	800449c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f96b 	bl	80046b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e2:	1e03      	subs	r3, r0, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e082      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03a      	beq.n	800449c <HAL_I2C_Master_Receive+0x1ac>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d136      	bne.n	800449c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	0013      	movs	r3, r2
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	f000 f882 	bl	8004544 <I2C_WaitOnFlagUntilTimeout>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e053      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d911      	bls.n	8004476 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	045c      	lsls	r4, r3, #17
 8004462:	230a      	movs	r3, #10
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	8819      	ldrh	r1, [r3, #0]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	2300      	movs	r3, #0
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	0023      	movs	r3, r4
 8004470:	f000 fa08 	bl	8004884 <I2C_TransferConfig>
 8004474:	e012      	b.n	800449c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	b2da      	uxtb	r2, r3
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	049c      	lsls	r4, r3, #18
 800448a:	230a      	movs	r3, #10
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	8819      	ldrh	r1, [r3, #0]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	0023      	movs	r3, r4
 8004498:	f000 f9f4 	bl	8004884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d197      	bne.n	80043d6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 f8c7 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044b2:	1e03      	subs	r3, r0, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e01a      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2220      	movs	r2, #32
 80044c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	490b      	ldr	r1, [pc, #44]	; (80044fc <HAL_I2C_Master_Receive+0x20c>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2241      	movs	r2, #65	; 0x41
 80044d6:	2120      	movs	r1, #32
 80044d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2242      	movs	r2, #66	; 0x42
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b007      	add	sp, #28
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	80002400 	.word	0x80002400
 80044fc:	fe00e800 	.word	0xfe00e800

08004500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d103      	bne.n	800451e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2201      	movs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	2b01      	cmp	r3, #1
 800452a:	d007      	beq.n	800453c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2101      	movs	r1, #1
 8004538:	430a      	orrs	r2, r1
 800453a:	619a      	str	r2, [r3, #24]
  }
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004554:	e021      	b.n	800459a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	d01e      	beq.n	800459a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7ff fa1e 	bl	800399c <HAL_GetTick>
 8004560:	0002      	movs	r2, r0
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	2220      	movs	r2, #32
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	2120      	movs	r1, #32
 8004584:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2242      	movs	r2, #66	; 0x42
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e00f      	b.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	425a      	negs	r2, r3
 80045aa:	4153      	adcs	r3, r2
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	001a      	movs	r2, r3
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d0ce      	beq.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045ce:	e02b      	b.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 f8da 	bl	8004790 <I2C_IsAcknowledgeFailed>
 80045dc:	1e03      	subs	r3, r0, #0
 80045de:	d001      	beq.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e029      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3301      	adds	r3, #1
 80045e8:	d01e      	beq.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7ff f9d7 	bl	800399c <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	2220      	movs	r2, #32
 8004606:	431a      	orrs	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2241      	movs	r2, #65	; 0x41
 8004610:	2120      	movs	r1, #32
 8004612:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2242      	movs	r2, #66	; 0x42
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d1cc      	bne.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	e028      	b.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 f89b 	bl	8004790 <I2C_IsAcknowledgeFailed>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d001      	beq.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e026      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7ff f99b 	bl	800399c <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	2220      	movs	r2, #32
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2241      	movs	r2, #65	; 0x41
 8004688:	2120      	movs	r1, #32
 800468a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2242      	movs	r2, #66	; 0x42
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e007      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2220      	movs	r2, #32
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d1cf      	bne.n	800464e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b004      	add	sp, #16
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c4:	e055      	b.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 f85f 	bl	8004790 <I2C_IsAcknowledgeFailed>
 80046d2:	1e03      	subs	r3, r0, #0
 80046d4:	d001      	beq.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e053      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2220      	movs	r2, #32
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d129      	bne.n	800473c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2204      	movs	r2, #4
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d105      	bne.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e03f      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	491d      	ldr	r1, [pc, #116]	; (800478c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004716:	400a      	ands	r2, r1
 8004718:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2241      	movs	r2, #65	; 0x41
 8004724:	2120      	movs	r1, #32
 8004726:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2242      	movs	r2, #66	; 0x42
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2240      	movs	r2, #64	; 0x40
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e022      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7ff f92e 	bl	800399c <HAL_GetTick>
 8004740:	0002      	movs	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	2220      	movs	r2, #32
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2241      	movs	r2, #65	; 0x41
 8004762:	2120      	movs	r1, #32
 8004764:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2240      	movs	r2, #64	; 0x40
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e007      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2204      	movs	r2, #4
 800477a:	4013      	ands	r3, r2
 800477c:	2b04      	cmp	r3, #4
 800477e:	d1a2      	bne.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	fe00e800 	.word	0xfe00e800

08004790 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2210      	movs	r2, #16
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d164      	bne.n	8004874 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	049b      	lsls	r3, r3, #18
 80047b4:	401a      	ands	r2, r3
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	049b      	lsls	r3, r3, #18
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d02b      	beq.n	8004816 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	01c9      	lsls	r1, r1, #7
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d0:	e021      	b.n	8004816 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3301      	adds	r3, #1
 80047d6:	d01e      	beq.n	8004816 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7ff f8e0 	bl	800399c <HAL_GetTick>
 80047dc:	0002      	movs	r2, r0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <I2C_IsAcknowledgeFailed+0x5e>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d113      	bne.n	8004816 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	2220      	movs	r2, #32
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2241      	movs	r2, #65	; 0x41
 80047fe:	2120      	movs	r1, #32
 8004800:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2242      	movs	r2, #66	; 0x42
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e02f      	b.n	8004876 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2220      	movs	r2, #32
 800481e:	4013      	ands	r3, r2
 8004820:	2b20      	cmp	r3, #32
 8004822:	d1d6      	bne.n	80047d2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff fe62 	bl	8004500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	490e      	ldr	r1, [pc, #56]	; (8004880 <I2C_IsAcknowledgeFailed+0xf0>)
 8004848:	400a      	ands	r2, r1
 800484a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	2204      	movs	r2, #4
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2241      	movs	r2, #65	; 0x41
 800485c:	2120      	movs	r1, #32
 800485e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2242      	movs	r2, #66	; 0x42
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	2100      	movs	r1, #0
 800486e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	fe00e800 	.word	0xfe00e800

08004884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	0008      	movs	r0, r1
 800488e:	0011      	movs	r1, r2
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	240a      	movs	r4, #10
 8004894:	193b      	adds	r3, r7, r4
 8004896:	1c02      	adds	r2, r0, #0
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	2009      	movs	r0, #9
 800489c:	183b      	adds	r3, r7, r0
 800489e:	1c0a      	adds	r2, r1, #0
 80048a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	0d51      	lsrs	r1, r2, #21
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	00d2      	lsls	r2, r2, #3
 80048b0:	400a      	ands	r2, r1
 80048b2:	490e      	ldr	r1, [pc, #56]	; (80048ec <I2C_TransferConfig+0x68>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	43d2      	mvns	r2, r2
 80048b8:	401a      	ands	r2, r3
 80048ba:	0011      	movs	r1, r2
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	059b      	lsls	r3, r3, #22
 80048c2:	0d9a      	lsrs	r2, r3, #22
 80048c4:	183b      	adds	r3, r7, r0
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	0418      	lsls	r0, r3, #16
 80048ca:	23ff      	movs	r3, #255	; 0xff
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	4003      	ands	r3, r0
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b005      	add	sp, #20
 80048e8:	bd90      	pop	{r4, r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	03ff63ff 	.word	0x03ff63ff

080048f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2241      	movs	r2, #65	; 0x41
 80048fe:	5c9b      	ldrb	r3, [r3, r2]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	d138      	bne.n	8004978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	5c9b      	ldrb	r3, [r3, r2]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004910:	2302      	movs	r3, #2
 8004912:	e032      	b.n	800497a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2240      	movs	r2, #64	; 0x40
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2241      	movs	r2, #65	; 0x41
 8004920:	2124      	movs	r1, #36	; 0x24
 8004922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	438a      	bics	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4911      	ldr	r1, [pc, #68]	; (8004984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004940:	400a      	ands	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2101      	movs	r1, #1
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	; 0x41
 8004968:	2120      	movs	r1, #32
 800496a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	2100      	movs	r1, #0
 8004972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b002      	add	sp, #8
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	ffffefff 	.word	0xffffefff

08004988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2241      	movs	r2, #65	; 0x41
 8004996:	5c9b      	ldrb	r3, [r3, r2]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	d139      	bne.n	8004a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e033      	b.n	8004a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2241      	movs	r2, #65	; 0x41
 80049b8:	2124      	movs	r1, #36	; 0x24
 80049ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2101      	movs	r1, #1
 80049c8:	438a      	bics	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a11      	ldr	r2, [pc, #68]	; (8004a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2101      	movs	r1, #1
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2241      	movs	r2, #65	; 0x41
 8004a02:	2120      	movs	r1, #32
 8004a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2240      	movs	r2, #64	; 0x40
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b004      	add	sp, #16
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	fffff0ff 	.word	0xfffff0ff

08004a20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a2a:	2180      	movs	r1, #128	; 0x80
 8004a2c:	0049      	lsls	r1, r1, #1
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40007000 	.word	0x40007000

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b5b0      	push	{r4, r5, r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f000 fbbf 	bl	80051ce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a50:	4bc9      	ldr	r3, [pc, #804]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	220c      	movs	r2, #12
 8004a56:	4013      	ands	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a5a:	4bc7      	ldr	r3, [pc, #796]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	025b      	lsls	r3, r3, #9
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <HAL_RCC_OscConfig+0x36>
 8004a70:	e07e      	b.n	8004b70 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x68>
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	4bbb      	ldr	r3, [pc, #748]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	4013      	ands	r3, r2
 8004a92:	d100      	bne.n	8004a96 <HAL_RCC_OscConfig+0x5a>
 8004a94:	e06b      	b.n	8004b6e <HAL_RCC_OscConfig+0x132>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d167      	bne.n	8004b6e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f000 fb95 	bl	80051ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	025b      	lsls	r3, r3, #9
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x84>
 8004ab0:	4bb1      	ldr	r3, [pc, #708]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4bb0      	ldr	r3, [pc, #704]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0249      	lsls	r1, r1, #9
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e027      	b.n	8004b10 <HAL_RCC_OscConfig+0xd4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	23a0      	movs	r3, #160	; 0xa0
 8004ac6:	02db      	lsls	r3, r3, #11
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d10e      	bne.n	8004aea <HAL_RCC_OscConfig+0xae>
 8004acc:	4baa      	ldr	r3, [pc, #680]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4ba9      	ldr	r3, [pc, #676]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	02c9      	lsls	r1, r1, #11
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	4ba7      	ldr	r3, [pc, #668]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4ba6      	ldr	r3, [pc, #664]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	0249      	lsls	r1, r1, #9
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e012      	b.n	8004b10 <HAL_RCC_OscConfig+0xd4>
 8004aea:	4ba3      	ldr	r3, [pc, #652]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4ba2      	ldr	r3, [pc, #648]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004af0:	49a2      	ldr	r1, [pc, #648]	; (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	4ba0      	ldr	r3, [pc, #640]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4b9c      	ldr	r3, [pc, #624]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b9b      	ldr	r3, [pc, #620]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b0a:	499d      	ldr	r1, [pc, #628]	; (8004d80 <HAL_RCC_OscConfig+0x344>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d015      	beq.n	8004b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe ff40 	bl	800399c <HAL_GetTick>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b20:	e009      	b.n	8004b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b22:	f7fe ff3b 	bl	800399c <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	; 0x64
 8004b2e:	d902      	bls.n	8004b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	f000 fb4c 	bl	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b36:	4b90      	ldr	r3, [pc, #576]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d0ef      	beq.n	8004b22 <HAL_RCC_OscConfig+0xe6>
 8004b42:	e015      	b.n	8004b70 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe ff2a 	bl	800399c <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4e:	f7fe ff25 	bl	800399c <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e336      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b60:	4b85      	ldr	r3, [pc, #532]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x112>
 8004b6c:	e000      	b.n	8004b70 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d100      	bne.n	8004b7c <HAL_RCC_OscConfig+0x140>
 8004b7a:	e099      	b.n	8004cb0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	2220      	movs	r2, #32
 8004b86:	4013      	ands	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b8a:	4b7b      	ldr	r3, [pc, #492]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b7a      	ldr	r3, [pc, #488]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004b90:	2120      	movs	r1, #32
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2220      	movs	r2, #32
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d13e      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1ec>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d13b      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bb0:	4b71      	ldr	r3, [pc, #452]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x188>
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e304      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b6c      	ldr	r3, [pc, #432]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4a6e      	ldr	r2, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x348>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bda:	4b67      	ldr	r3, [pc, #412]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2209      	movs	r2, #9
 8004be0:	4393      	bics	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	4b64      	ldr	r3, [pc, #400]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bec:	f000 fc42 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8004bf0:	0001      	movs	r1, r0
 8004bf2:	4b61      	ldr	r3, [pc, #388]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	4a62      	ldr	r2, [pc, #392]	; (8004d88 <HAL_RCC_OscConfig+0x34c>)
 8004bfe:	5cd3      	ldrb	r3, [r2, r3]
 8004c00:	000a      	movs	r2, r1
 8004c02:	40da      	lsrs	r2, r3
 8004c04:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <HAL_RCC_OscConfig+0x350>)
 8004c06:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004c08:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <HAL_RCC_OscConfig+0x354>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2513      	movs	r5, #19
 8004c0e:	197c      	adds	r4, r7, r5
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fe fe7d 	bl	8003910 <HAL_InitTick>
 8004c16:	0003      	movs	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c1a:	197b      	adds	r3, r7, r5
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d046      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004c22:	197b      	adds	r3, r7, r5
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	e2d2      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d027      	beq.n	8004c7e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c2e:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2209      	movs	r2, #9
 8004c34:	4393      	bics	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe feac 	bl	800399c <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe fea7 	bl	800399c <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e2b8      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c5c:	4b46      	ldr	r3, [pc, #280]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	4013      	ands	r3, r2
 8004c64:	d0f1      	beq.n	8004c4a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b44      	ldr	r3, [pc, #272]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a46      	ldr	r2, [pc, #280]	; (8004d84 <HAL_RCC_OscConfig+0x348>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	4b40      	ldr	r3, [pc, #256]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e018      	b.n	8004cb0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c84:	2101      	movs	r1, #1
 8004c86:	438a      	bics	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fe87 	bl	800399c <HAL_GetTick>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fe fe82 	bl	800399c <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e293      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca6:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2204      	movs	r2, #4
 8004cac:	4013      	ands	r3, r2
 8004cae:	d1f1      	bne.n	8004c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d100      	bne.n	8004cbc <HAL_RCC_OscConfig+0x280>
 8004cba:	e0a2      	b.n	8004e02 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d140      	bne.n	8004d44 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x29e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e279      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_RCC_OscConfig+0x358>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce8:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	0a19      	lsrs	r1, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	061a      	lsls	r2, r3, #24
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	0b5b      	lsrs	r3, r3, #13
 8004d08:	3301      	adds	r3, #1
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	0212      	lsls	r2, r2, #8
 8004d0e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	210f      	movs	r1, #15
 8004d18:	400b      	ands	r3, r1
 8004d1a:	491b      	ldr	r1, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x34c>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <HAL_RCC_OscConfig+0x350>)
 8004d22:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d24:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCC_OscConfig+0x354>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2513      	movs	r5, #19
 8004d2a:	197c      	adds	r4, r7, r5
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fe fdef 	bl	8003910 <HAL_InitTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d36:	197b      	adds	r3, r7, r5
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d061      	beq.n	8004e02 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004d3e:	197b      	adds	r3, r7, r5
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	e244      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d040      	beq.n	8004dce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	0049      	lsls	r1, r1, #1
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fe1f 	bl	800399c <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d62:	e019      	b.n	8004d98 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d64:	f7fe fe1a 	bl	800399c <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d912      	bls.n	8004d98 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e22b      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	fffeffff 	.word	0xfffeffff
 8004d80:	fffbffff 	.word	0xfffbffff
 8004d84:	ffffe0ff 	.word	0xffffe0ff
 8004d88:	0800ccdc 	.word	0x0800ccdc
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	20000004 	.word	0x20000004
 8004d94:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d98:	4bca      	ldr	r3, [pc, #808]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d0df      	beq.n	8004d64 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da4:	4bc7      	ldr	r3, [pc, #796]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4ac7      	ldr	r2, [pc, #796]	; (80050c8 <HAL_RCC_OscConfig+0x68c>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db2:	4bc4      	ldr	r3, [pc, #784]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db8:	4bc2      	ldr	r3, [pc, #776]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	0a19      	lsrs	r1, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	061a      	lsls	r2, r3, #24
 8004dc6:	4bbf      	ldr	r3, [pc, #764]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	e019      	b.n	8004e02 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dce:	4bbd      	ldr	r3, [pc, #756]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4bbc      	ldr	r3, [pc, #752]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004dd4:	49bd      	ldr	r1, [pc, #756]	; (80050cc <HAL_RCC_OscConfig+0x690>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fe fddf 	bl	800399c <HAL_GetTick>
 8004dde:	0003      	movs	r3, r0
 8004de0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de4:	f7fe fdda 	bl	800399c <HAL_GetTick>
 8004de8:	0002      	movs	r2, r0
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e1eb      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004df6:	4bb3      	ldr	r3, [pc, #716]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2208      	movs	r2, #8
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e14:	4bab      	ldr	r3, [pc, #684]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e18:	4baa      	ldr	r3, [pc, #680]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e20:	f7fe fdbc 	bl	800399c <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fe fdb7 	bl	800399c <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1c8      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3c:	4ba1      	ldr	r3, [pc, #644]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	d0f1      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3ee>
 8004e46:	e018      	b.n	8004e7a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b9e      	ldr	r3, [pc, #632]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4c:	4b9d      	ldr	r3, [pc, #628]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	438a      	bics	r2, r1
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e54:	f7fe fda2 	bl	800399c <HAL_GetTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fd9d 	bl	800399c <HAL_GetTick>
 8004e62:	0002      	movs	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1ae      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e70:	4b94      	ldr	r3, [pc, #592]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	2202      	movs	r2, #2
 8004e76:	4013      	ands	r3, r2
 8004e78:	d1f1      	bne.n	8004e5e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_RCC_OscConfig+0x44a>
 8004e84:	e0ae      	b.n	8004fe4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2023      	movs	r0, #35	; 0x23
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8e:	4b8d      	ldr	r3, [pc, #564]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	055b      	lsls	r3, r3, #21
 8004e96:	4013      	ands	r3, r2
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	4b8a      	ldr	r3, [pc, #552]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	0549      	lsls	r1, r1, #21
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ea8:	183b      	adds	r3, r7, r0
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCC_OscConfig+0x694>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eba:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCC_OscConfig+0x694>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b84      	ldr	r3, [pc, #528]	; (80050d0 <HAL_RCC_OscConfig+0x694>)
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	0049      	lsls	r1, r1, #1
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec8:	f7fe fd68 	bl	800399c <HAL_GetTick>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fe fd63 	bl	800399c <HAL_GetTick>
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b64      	cmp	r3, #100	; 0x64
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e174      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	4b7a      	ldr	r3, [pc, #488]	; (80050d0 <HAL_RCC_OscConfig+0x694>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4d0>
 8004efc:	4b71      	ldr	r3, [pc, #452]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f00:	4b70      	ldr	r3, [pc, #448]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	0049      	lsls	r1, r1, #1
 8004f06:	430a      	orrs	r2, r1
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
 8004f0a:	e031      	b.n	8004f70 <HAL_RCC_OscConfig+0x534>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x4f2>
 8004f14:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f18:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f1a:	496c      	ldr	r1, [pc, #432]	; (80050cc <HAL_RCC_OscConfig+0x690>)
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f20:	4b68      	ldr	r3, [pc, #416]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f24:	4b67      	ldr	r3, [pc, #412]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f26:	496b      	ldr	r1, [pc, #428]	; (80050d4 <HAL_RCC_OscConfig+0x698>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f2c:	e020      	b.n	8004f70 <HAL_RCC_OscConfig+0x534>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	23a0      	movs	r3, #160	; 0xa0
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d10e      	bne.n	8004f58 <HAL_RCC_OscConfig+0x51c>
 8004f3a:	4b62      	ldr	r3, [pc, #392]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f3e:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	00c9      	lsls	r1, r1, #3
 8004f44:	430a      	orrs	r2, r1
 8004f46:	651a      	str	r2, [r3, #80]	; 0x50
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f4c:	4b5d      	ldr	r3, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	0049      	lsls	r1, r1, #1
 8004f52:	430a      	orrs	r2, r1
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
 8004f56:	e00b      	b.n	8004f70 <HAL_RCC_OscConfig+0x534>
 8004f58:	4b5a      	ldr	r3, [pc, #360]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f5e:	495b      	ldr	r1, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x690>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	651a      	str	r2, [r3, #80]	; 0x50
 8004f64:	4b57      	ldr	r3, [pc, #348]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f68:	4b56      	ldr	r3, [pc, #344]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f6a:	495a      	ldr	r1, [pc, #360]	; (80050d4 <HAL_RCC_OscConfig+0x698>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7fe fd10 	bl	800399c <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f80:	e009      	b.n	8004f96 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fe fd0b 	bl	800399c <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_RCC_OscConfig+0x69c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e11b      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f96:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d0ef      	beq.n	8004f82 <HAL_RCC_OscConfig+0x546>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa4:	f7fe fcfa 	bl	800399c <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fac:	e009      	b.n	8004fc2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fe fcf5 	bl	800399c <HAL_GetTick>
 8004fb2:	0002      	movs	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <HAL_RCC_OscConfig+0x69c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e105      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fc2:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d1ef      	bne.n	8004fae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fce:	2323      	movs	r3, #35	; 0x23
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd8:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fdc:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004fde:	493f      	ldr	r1, [pc, #252]	; (80050dc <HAL_RCC_OscConfig+0x6a0>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	4013      	ands	r3, r2
 8004fec:	d049      	beq.n	8005082 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d026      	beq.n	8005044 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ff6:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8005008:	2101      	movs	r1, #1
 800500a:	430a      	orrs	r2, r1
 800500c:	635a      	str	r2, [r3, #52]	; 0x34
 800500e:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_RCC_OscConfig+0x6a4>)
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	4b33      	ldr	r3, [pc, #204]	; (80050e0 <HAL_RCC_OscConfig+0x6a4>)
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0189      	lsls	r1, r1, #6
 8005018:	430a      	orrs	r2, r1
 800501a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fe fcbe 	bl	800399c <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005026:	f7fe fcb9 	bl	800399c <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e0ca      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005038:	4b22      	ldr	r3, [pc, #136]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	d0f1      	beq.n	8005026 <HAL_RCC_OscConfig+0x5ea>
 8005042:	e01e      	b.n	8005082 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005044:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 800504a:	2101      	movs	r1, #1
 800504c:	438a      	bics	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <HAL_RCC_OscConfig+0x6a4>)
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <HAL_RCC_OscConfig+0x6a4>)
 8005056:	4923      	ldr	r1, [pc, #140]	; (80050e4 <HAL_RCC_OscConfig+0x6a8>)
 8005058:	400a      	ands	r2, r1
 800505a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fe fc9e 	bl	800399c <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005066:	f7fe fc99 	bl	800399c <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e0aa      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005078:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2202      	movs	r2, #2
 800507e:	4013      	ands	r3, r2
 8005080:	d1f1      	bne.n	8005066 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d100      	bne.n	800508c <HAL_RCC_OscConfig+0x650>
 800508a:	e09f      	b.n	80051cc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d100      	bne.n	8005094 <HAL_RCC_OscConfig+0x658>
 8005092:	e078      	b.n	8005186 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	2b02      	cmp	r3, #2
 800509a:	d159      	bne.n	8005150 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509c:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_RCC_OscConfig+0x688>)
 80050a2:	4911      	ldr	r1, [pc, #68]	; (80050e8 <HAL_RCC_OscConfig+0x6ac>)
 80050a4:	400a      	ands	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fe fc78 	bl	800399c <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050b0:	e01c      	b.n	80050ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b2:	f7fe fc73 	bl	800399c <HAL_GetTick>
 80050b6:	0002      	movs	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d915      	bls.n	80050ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e084      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
 80050c4:	40021000 	.word	0x40021000
 80050c8:	ffff1fff 	.word	0xffff1fff
 80050cc:	fffffeff 	.word	0xfffffeff
 80050d0:	40007000 	.word	0x40007000
 80050d4:	fffffbff 	.word	0xfffffbff
 80050d8:	00001388 	.word	0x00001388
 80050dc:	efffffff 	.word	0xefffffff
 80050e0:	40010000 	.word	0x40010000
 80050e4:	ffffdfff 	.word	0xffffdfff
 80050e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050ec:	4b3a      	ldr	r3, [pc, #232]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	049b      	lsls	r3, r3, #18
 80050f4:	4013      	ands	r3, r2
 80050f6:	d1dc      	bne.n	80050b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f8:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a37      	ldr	r2, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x7a0>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	431a      	orrs	r2, r3
 8005112:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	0449      	lsls	r1, r1, #17
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005126:	f7fe fc39 	bl	800399c <HAL_GetTick>
 800512a:	0003      	movs	r3, r0
 800512c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fe fc34 	bl	800399c <HAL_GetTick>
 8005134:	0002      	movs	r2, r0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e045      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005142:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	049b      	lsls	r3, r3, #18
 800514a:	4013      	ands	r3, r2
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x6f4>
 800514e:	e03d      	b.n	80051cc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005150:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 8005156:	4922      	ldr	r1, [pc, #136]	; (80051e0 <HAL_RCC_OscConfig+0x7a4>)
 8005158:	400a      	ands	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fe fc1e 	bl	800399c <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fe fc19 	bl	800399c <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e02a      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005178:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	049b      	lsls	r3, r3, #18
 8005180:	4013      	ands	r3, r2
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_OscConfig+0x72a>
 8005184:	e022      	b.n	80051cc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e01d      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_RCC_OscConfig+0x79c>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	025b      	lsls	r3, r3, #9
 800519e:	401a      	ands	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d10f      	bne.n	80051c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	23f0      	movs	r3, #240	; 0xf0
 80051ac:	039b      	lsls	r3, r3, #14
 80051ae:	401a      	ands	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	23c0      	movs	r3, #192	; 0xc0
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	401a      	ands	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	0018      	movs	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b00a      	add	sp, #40	; 0x28
 80051d4:	bdb0      	pop	{r4, r5, r7, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	40021000 	.word	0x40021000
 80051dc:	ff02ffff 	.word	0xff02ffff
 80051e0:	feffffff 	.word	0xfeffffff

080051e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e4:	b5b0      	push	{r4, r5, r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e128      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f8:	4b96      	ldr	r3, [pc, #600]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d91e      	bls.n	8005244 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b93      	ldr	r3, [pc, #588]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	4393      	bics	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005218:	f7fe fbc0 	bl	800399c <HAL_GetTick>
 800521c:	0003      	movs	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005220:	e009      	b.n	8005236 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005222:	f7fe fbbb 	bl	800399c <HAL_GetTick>
 8005226:	0002      	movs	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	4a8a      	ldr	r2, [pc, #552]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e109      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005236:	4b87      	ldr	r3, [pc, #540]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2201      	movs	r2, #1
 800523c:	4013      	ands	r3, r2
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d1ee      	bne.n	8005222 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2202      	movs	r2, #2
 800524a:	4013      	ands	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800524e:	4b83      	ldr	r3, [pc, #524]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	22f0      	movs	r2, #240	; 0xf0
 8005254:	4393      	bics	r3, r2
 8005256:	0019      	movs	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	4b7f      	ldr	r3, [pc, #508]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 800525e:	430a      	orrs	r2, r1
 8005260:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	4013      	ands	r3, r2
 800526a:	d100      	bne.n	800526e <HAL_RCC_ClockConfig+0x8a>
 800526c:	e089      	b.n	8005382 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d107      	bne.n	8005286 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005276:	4b79      	ldr	r3, [pc, #484]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	029b      	lsls	r3, r3, #10
 800527e:	4013      	ands	r3, r2
 8005280:	d120      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0e1      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800528e:	4b73      	ldr	r3, [pc, #460]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	049b      	lsls	r3, r3, #18
 8005296:	4013      	ands	r3, r2
 8005298:	d114      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0d5      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d106      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052a6:	4b6d      	ldr	r3, [pc, #436]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2204      	movs	r2, #4
 80052ac:	4013      	ands	r3, r2
 80052ae:	d109      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0ca      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052b4:	4b69      	ldr	r3, [pc, #420]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0c2      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c4:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2203      	movs	r2, #3
 80052ca:	4393      	bics	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4b62      	ldr	r3, [pc, #392]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80052d4:	430a      	orrs	r2, r1
 80052d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052d8:	f7fe fb60 	bl	800399c <HAL_GetTick>
 80052dc:	0003      	movs	r3, r0
 80052de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d111      	bne.n	800530c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e8:	e009      	b.n	80052fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ea:	f7fe fb57 	bl	800399c <HAL_GetTick>
 80052ee:	0002      	movs	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	4a58      	ldr	r2, [pc, #352]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0a5      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052fe:	4b57      	ldr	r3, [pc, #348]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	220c      	movs	r2, #12
 8005304:	4013      	ands	r3, r2
 8005306:	2b08      	cmp	r3, #8
 8005308:	d1ef      	bne.n	80052ea <HAL_RCC_ClockConfig+0x106>
 800530a:	e03a      	b.n	8005382 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d111      	bne.n	8005338 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005314:	e009      	b.n	800532a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005316:	f7fe fb41 	bl	800399c <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e08f      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800532a:	4b4c      	ldr	r3, [pc, #304]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	220c      	movs	r2, #12
 8005330:	4013      	ands	r3, r2
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d1ef      	bne.n	8005316 <HAL_RCC_ClockConfig+0x132>
 8005336:	e024      	b.n	8005382 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11b      	bne.n	8005378 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005340:	e009      	b.n	8005356 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005342:	f7fe fb2b 	bl	800399c <HAL_GetTick>
 8005346:	0002      	movs	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	4a42      	ldr	r2, [pc, #264]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e079      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005356:	4b41      	ldr	r3, [pc, #260]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	220c      	movs	r2, #12
 800535c:	4013      	ands	r3, r2
 800535e:	2b04      	cmp	r3, #4
 8005360:	d1ef      	bne.n	8005342 <HAL_RCC_ClockConfig+0x15e>
 8005362:	e00e      	b.n	8005382 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fe fb1a 	bl	800399c <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e068      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005378:	4b38      	ldr	r3, [pc, #224]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	220c      	movs	r2, #12
 800537e:	4013      	ands	r3, r2
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005382:	4b34      	ldr	r3, [pc, #208]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	4013      	ands	r3, r2
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d21e      	bcs.n	80053ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	4393      	bics	r3, r2
 8005398:	0019      	movs	r1, r3
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053a2:	f7fe fafb 	bl	800399c <HAL_GetTick>
 80053a6:	0003      	movs	r3, r0
 80053a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	e009      	b.n	80053c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ac:	f7fe faf6 	bl	800399c <HAL_GetTick>
 80053b0:	0002      	movs	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	4a28      	ldr	r2, [pc, #160]	; (8005458 <HAL_RCC_ClockConfig+0x274>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e044      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c0:	4b24      	ldr	r3, [pc, #144]	; (8005454 <HAL_RCC_ClockConfig+0x270>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d1ee      	bne.n	80053ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a20      	ldr	r2, [pc, #128]	; (8005460 <HAL_RCC_ClockConfig+0x27c>)
 80053de:	4013      	ands	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4013      	ands	r3, r2
 80053f4:	d00a      	beq.n	800540c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053f6:	4b19      	ldr	r3, [pc, #100]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <HAL_RCC_ClockConfig+0x280>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00da      	lsls	r2, r3, #3
 8005406:	4b15      	ldr	r3, [pc, #84]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005408:	430a      	orrs	r2, r1
 800540a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800540c:	f000 f832 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8005410:	0001      	movs	r1, r0
 8005412:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCC_ClockConfig+0x278>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	220f      	movs	r2, #15
 800541a:	4013      	ands	r3, r2
 800541c:	4a12      	ldr	r2, [pc, #72]	; (8005468 <HAL_RCC_ClockConfig+0x284>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	000a      	movs	r2, r1
 8005422:	40da      	lsrs	r2, r3
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_RCC_ClockConfig+0x288>)
 8005426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_RCC_ClockConfig+0x28c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	250b      	movs	r5, #11
 800542e:	197c      	adds	r4, r7, r5
 8005430:	0018      	movs	r0, r3
 8005432:	f7fe fa6d 	bl	8003910 <HAL_InitTick>
 8005436:	0003      	movs	r3, r0
 8005438:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800543a:	197b      	adds	r3, r7, r5
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005442:	197b      	adds	r3, r7, r5
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	e000      	b.n	800544a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bdb0      	pop	{r4, r5, r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40022000 	.word	0x40022000
 8005458:	00001388 	.word	0x00001388
 800545c:	40021000 	.word	0x40021000
 8005460:	fffff8ff 	.word	0xfffff8ff
 8005464:	ffffc7ff 	.word	0xffffc7ff
 8005468:	0800ccdc 	.word	0x0800ccdc
 800546c:	20000000 	.word	0x20000000
 8005470:	20000004 	.word	0x20000004

08005474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800547a:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <HAL_RCC_GetSysClockFreq+0x138>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005482:	230c      	movs	r3, #12
 8005484:	4013      	ands	r3, r2
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d014      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x40>
 800548a:	d900      	bls.n	800548e <HAL_RCC_GetSysClockFreq+0x1a>
 800548c:	e07b      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x112>
 800548e:	2b04      	cmp	r3, #4
 8005490:	d002      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x24>
 8005492:	2b08      	cmp	r3, #8
 8005494:	d00b      	beq.n	80054ae <HAL_RCC_GetSysClockFreq+0x3a>
 8005496:	e076      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005498:	4b44      	ldr	r3, [pc, #272]	; (80055ac <HAL_RCC_GetSysClockFreq+0x138>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2210      	movs	r2, #16
 800549e:	4013      	ands	r3, r2
 80054a0:	d002      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80054a2:	4b43      	ldr	r3, [pc, #268]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80054a6:	e07c      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80054a8:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x140>)
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054ac:	e079      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054ae:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b2:	e076      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	0c9a      	lsrs	r2, r3, #18
 80054b8:	230f      	movs	r3, #15
 80054ba:	401a      	ands	r2, r3
 80054bc:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <HAL_RCC_GetSysClockFreq+0x148>)
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	0d9a      	lsrs	r2, r3, #22
 80054c6:	2303      	movs	r3, #3
 80054c8:	4013      	ands	r3, r2
 80054ca:	3301      	adds	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ce:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCC_GetSysClockFreq+0x138>)
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	025b      	lsls	r3, r3, #9
 80054d6:	4013      	ands	r3, r2
 80054d8:	d01a      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	4a35      	ldr	r2, [pc, #212]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	69b8      	ldr	r0, [r7, #24]
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	f7fa fffd 	bl	80004e8 <__aeabi_lmul>
 80054ee:	0002      	movs	r2, r0
 80054f0:	000b      	movs	r3, r1
 80054f2:	0010      	movs	r0, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f7fa ffd1 	bl	80004a8 <__aeabi_uldivmod>
 8005506:	0002      	movs	r2, r0
 8005508:	000b      	movs	r3, r1
 800550a:	0013      	movs	r3, r2
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
 800550e:	e037      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005510:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_RCC_GetSysClockFreq+0x138>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	4013      	ands	r3, r2
 8005518:	d01a      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005524:	2300      	movs	r3, #0
 8005526:	68b8      	ldr	r0, [r7, #8]
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	f7fa ffdd 	bl	80004e8 <__aeabi_lmul>
 800552e:	0002      	movs	r2, r0
 8005530:	000b      	movs	r3, r1
 8005532:	0010      	movs	r0, r2
 8005534:	0019      	movs	r1, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f7fa ffb1 	bl	80004a8 <__aeabi_uldivmod>
 8005546:	0002      	movs	r2, r0
 8005548:	000b      	movs	r3, r1
 800554a:	0013      	movs	r3, r2
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
 800554e:	e017      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	0018      	movs	r0, r3
 8005554:	2300      	movs	r3, #0
 8005556:	0019      	movs	r1, r3
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x140>)
 800555a:	2300      	movs	r3, #0
 800555c:	f7fa ffc4 	bl	80004e8 <__aeabi_lmul>
 8005560:	0002      	movs	r2, r0
 8005562:	000b      	movs	r3, r1
 8005564:	0010      	movs	r0, r2
 8005566:	0019      	movs	r1, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	001c      	movs	r4, r3
 800556c:	2300      	movs	r3, #0
 800556e:	001d      	movs	r5, r3
 8005570:	0022      	movs	r2, r4
 8005572:	002b      	movs	r3, r5
 8005574:	f7fa ff98 	bl	80004a8 <__aeabi_uldivmod>
 8005578:	0002      	movs	r2, r0
 800557a:	000b      	movs	r3, r1
 800557c:	0013      	movs	r3, r2
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005584:	e00d      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <HAL_RCC_GetSysClockFreq+0x138>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	0b5b      	lsrs	r3, r3, #13
 800558c:	2207      	movs	r2, #7
 800558e:	4013      	ands	r3, r2
 8005590:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	3301      	adds	r3, #1
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	0212      	lsls	r2, r2, #8
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b00e      	add	sp, #56	; 0x38
 80055aa:	bdb0      	pop	{r4, r5, r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	003d0900 	.word	0x003d0900
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	007a1200 	.word	0x007a1200
 80055bc:	0800ccf4 	.word	0x0800ccf4

080055c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	20000000 	.word	0x20000000

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff2 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 80055dc:	0001      	movs	r1, r0
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	2207      	movs	r2, #7
 80055e6:	4013      	ands	r3, r2
 80055e8:	4a04      	ldr	r2, [pc, #16]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	40d9      	lsrs	r1, r3
 80055ee:	000b      	movs	r3, r1
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40021000 	.word	0x40021000
 80055fc:	0800ccec 	.word	0x0800ccec

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005604:	f7ff ffdc 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8005608:	0001      	movs	r1, r0
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	0adb      	lsrs	r3, r3, #11
 8005610:	2207      	movs	r2, #7
 8005612:	4013      	ands	r3, r2
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005616:	5cd3      	ldrb	r3, [r2, r3]
 8005618:	40d9      	lsrs	r1, r3
 800561a:	000b      	movs	r3, r1
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	40021000 	.word	0x40021000
 8005628:	0800ccec 	.word	0x0800ccec

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005634:	2017      	movs	r0, #23
 8005636:	183b      	adds	r3, r7, r0
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2220      	movs	r2, #32
 8005642:	4013      	ands	r3, r2
 8005644:	d100      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005646:	e0c2      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005648:	4b98      	ldr	r3, [pc, #608]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	055b      	lsls	r3, r3, #21
 8005650:	4013      	ands	r3, r2
 8005652:	d109      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	4b95      	ldr	r3, [pc, #596]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005658:	4b94      	ldr	r3, [pc, #592]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	0549      	lsls	r1, r1, #21
 800565e:	430a      	orrs	r2, r1
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005662:	183b      	adds	r3, r7, r0
 8005664:	2201      	movs	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	4b91      	ldr	r3, [pc, #580]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4013      	ands	r3, r2
 8005672:	d11a      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005674:	4b8e      	ldr	r3, [pc, #568]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4b8d      	ldr	r3, [pc, #564]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	0049      	lsls	r1, r1, #1
 800567e:	430a      	orrs	r2, r1
 8005680:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005682:	f7fe f98b 	bl	800399c <HAL_GetTick>
 8005686:	0003      	movs	r3, r0
 8005688:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	e008      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568c:	f7fe f986 	bl	800399c <HAL_GetTick>
 8005690:	0002      	movs	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e102      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	d0f0      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056aa:	4b80      	ldr	r3, [pc, #512]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	23c0      	movs	r3, #192	; 0xc0
 80056b0:	039b      	lsls	r3, r3, #14
 80056b2:	4013      	ands	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	23c0      	movs	r3, #192	; 0xc0
 80056bc:	039b      	lsls	r3, r3, #14
 80056be:	4013      	ands	r3, r2
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d013      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	23c0      	movs	r3, #192	; 0xc0
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	401a      	ands	r2, r3
 80056d0:	23c0      	movs	r3, #192	; 0xc0
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d10a      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056d8:	4b74      	ldr	r3, [pc, #464]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	401a      	ands	r2, r3
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d101      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0da      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f2:	23c0      	movs	r3, #192	; 0xc0
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d03b      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	23c0      	movs	r3, #192	; 0xc0
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	4013      	ands	r3, r2
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d033      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2220      	movs	r2, #32
 8005716:	4013      	ands	r3, r2
 8005718:	d02e      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800571a:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005724:	4b61      	ldr	r3, [pc, #388]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005728:	4b60      	ldr	r3, [pc, #384]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	0309      	lsls	r1, r1, #12
 800572e:	430a      	orrs	r2, r1
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005732:	4b5e      	ldr	r3, [pc, #376]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005736:	4b5d      	ldr	r3, [pc, #372]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005738:	495f      	ldr	r1, [pc, #380]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800573a:	400a      	ands	r2, r1
 800573c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800573e:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d014      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fe f925 	bl	800399c <HAL_GetTick>
 8005752:	0003      	movs	r3, r0
 8005754:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005756:	e009      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005758:	f7fe f920 	bl	800399c <HAL_GetTick>
 800575c:	0002      	movs	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e09b      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800576c:	4b4f      	ldr	r3, [pc, #316]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800576e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d0ef      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	23c0      	movs	r3, #192	; 0xc0
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	401a      	ands	r2, r3
 8005782:	23c0      	movs	r3, #192	; 0xc0
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	429a      	cmp	r2, r3
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800578a:	4b48      	ldr	r3, [pc, #288]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4c      	ldr	r2, [pc, #304]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005790:	4013      	ands	r3, r2
 8005792:	0019      	movs	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	23c0      	movs	r3, #192	; 0xc0
 800579a:	039b      	lsls	r3, r3, #14
 800579c:	401a      	ands	r2, r3
 800579e:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	23c0      	movs	r3, #192	; 0xc0
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	401a      	ands	r2, r3
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057b8:	2317      	movs	r3, #23
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d105      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c2:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c8:	493e      	ldr	r1, [pc, #248]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	4013      	ands	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	2203      	movs	r2, #3
 80057de:	4393      	bics	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e8:	430a      	orrs	r2, r1
 80057ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2202      	movs	r2, #2
 80057f2:	4013      	ands	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	220c      	movs	r2, #12
 80057fc:	4393      	bics	r3, r2
 80057fe:	0019      	movs	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4b29      	ldr	r3, [pc, #164]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005806:	430a      	orrs	r2, r1
 8005808:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2204      	movs	r2, #4
 8005810:	4013      	ands	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	4a2b      	ldr	r2, [pc, #172]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005824:	430a      	orrs	r2, r1
 8005826:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2208      	movs	r2, #8
 800582e:	4013      	ands	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	4a25      	ldr	r2, [pc, #148]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005838:	4013      	ands	r3, r2
 800583a:	0019      	movs	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005842:	430a      	orrs	r2, r1
 8005844:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005852:	4b16      	ldr	r3, [pc, #88]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005858:	4013      	ands	r3, r2
 800585a:	0019      	movs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005862:	430a      	orrs	r2, r1
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	4013      	ands	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005880:	430a      	orrs	r2, r1
 8005882:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	4013      	ands	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005894:	4013      	ands	r3, r2
 8005896:	0019      	movs	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589e:	430a      	orrs	r2, r1
 80058a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b006      	add	sp, #24
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40007000 	.word	0x40007000
 80058b4:	fffcffff 	.word	0xfffcffff
 80058b8:	fff7ffff 	.word	0xfff7ffff
 80058bc:	00001388 	.word	0x00001388
 80058c0:	ffcfffff 	.word	0xffcfffff
 80058c4:	efffffff 	.word	0xefffffff
 80058c8:	fffff3ff 	.word	0xfffff3ff
 80058cc:	ffffcfff 	.word	0xffffcfff
 80058d0:	fbffffff 	.word	0xfbffffff
 80058d4:	fff3ffff 	.word	0xfff3ffff

080058d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e08e      	b.n	8005a08 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2221      	movs	r2, #33	; 0x21
 80058ee:	5c9b      	ldrb	r3, [r3, r2]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f7fd fcc3 	bl	800328c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2221      	movs	r2, #33	; 0x21
 800590a:	2102      	movs	r1, #2
 800590c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22ca      	movs	r2, #202	; 0xca
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2253      	movs	r2, #83	; 0x53
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f89e 	bl	8005a62 <RTC_EnterInitMode>
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d009      	beq.n	800593e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2221      	movs	r2, #33	; 0x21
 8005936:	2104      	movs	r1, #4
 8005938:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e064      	b.n	8005a08 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4931      	ldr	r1, [pc, #196]	; (8005a10 <HAL_RTC_Init+0x138>)
 800594a:	400a      	ands	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6899      	ldr	r1, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68d2      	ldr	r2, [r2, #12]
 8005974:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6919      	ldr	r1, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	041a      	lsls	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	438a      	bics	r2, r1
 8005998:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2103      	movs	r1, #3
 80059a6:	438a      	bics	r2, r1
 80059a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2220      	movs	r2, #32
 80059ca:	4013      	ands	r3, r2
 80059cc:	d113      	bne.n	80059f6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 f81f 	bl	8005a14 <HAL_RTC_WaitForSynchro>
 80059d6:	1e03      	subs	r3, r0, #0
 80059d8:	d00d      	beq.n	80059f6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2221      	movs	r2, #33	; 0x21
 80059e6:	2104      	movs	r1, #4
 80059e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	2100      	movs	r1, #0
 80059f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e008      	b.n	8005a08 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	22ff      	movs	r2, #255	; 0xff
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2221      	movs	r2, #33	; 0x21
 8005a02:	2101      	movs	r1, #1
 8005a04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
  }
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	ff8fffbf 	.word	0xff8fffbf

08005a14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	21a0      	movs	r1, #160	; 0xa0
 8005a28:	438a      	bics	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a2c:	f7fd ffb6 	bl	800399c <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a34:	e00a      	b.n	8005a4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a36:	f7fd ffb1 	bl	800399c <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	23fa      	movs	r3, #250	; 0xfa
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d901      	bls.n	8005a4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	4013      	ands	r3, r2
 8005a56:	d0ee      	beq.n	8005a36 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2240      	movs	r2, #64	; 0x40
 8005a72:	4013      	ands	r3, r2
 8005a74:	d11a      	bne.n	8005aac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4252      	negs	r2, r2
 8005a7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a80:	f7fd ff8c 	bl	800399c <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a88:	e00a      	b.n	8005aa0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a8a:	f7fd ff87 	bl	800399c <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	23fa      	movs	r3, #250	; 0xfa
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d901      	bls.n	8005aa0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d0ee      	beq.n	8005a8a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e032      	b.n	8005b2e <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2239      	movs	r2, #57	; 0x39
 8005acc:	5c9b      	ldrb	r3, [r3, r2]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2238      	movs	r2, #56	; 0x38
 8005ad8:	2100      	movs	r1, #0
 8005ada:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fd fdb4 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2239      	movs	r2, #57	; 0x39
 8005ae8:	2102      	movs	r1, #2
 8005aea:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	0019      	movs	r1, r3
 8005af6:	0010      	movs	r0, r2
 8005af8:	f000 fa72 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	223e      	movs	r2, #62	; 0x3e
 8005b00:	2101      	movs	r1, #1
 8005b02:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223a      	movs	r2, #58	; 0x3a
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5499      	strb	r1, [r3, r2]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	223b      	movs	r2, #59	; 0x3b
 8005b10:	2101      	movs	r1, #1
 8005b12:	5499      	strb	r1, [r3, r2]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	223c      	movs	r2, #60	; 0x3c
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	223d      	movs	r2, #61	; 0x3d
 8005b20:	2101      	movs	r1, #1
 8005b22:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2239      	movs	r2, #57	; 0x39
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	0018      	movs	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b002      	add	sp, #8
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2239      	movs	r2, #57	; 0x39
 8005b44:	5c9b      	ldrb	r3, [r3, r2]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e03b      	b.n	8005bc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2239      	movs	r2, #57	; 0x39
 8005b54:	2102      	movs	r1, #2
 8005b56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2101      	movs	r1, #1
 8005b64:	430a      	orrs	r2, r1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	05db      	lsls	r3, r3, #23
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d00e      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0x5a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_TIM_Base_Start_IT+0x98>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0x5a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0x5a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d111      	bne.n	8005bb6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2207      	movs	r2, #7
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b06      	cmp	r3, #6
 8005ba2:	d010      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	e007      	b.n	8005bc6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b004      	add	sp, #16
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40010800 	.word	0x40010800
 8005bd8:	40011400 	.word	0x40011400

08005bdc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2101      	movs	r1, #1
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <HAL_TIM_Base_Stop_IT+0x48>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_Base_Stop_IT+0x34>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	438a      	bics	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2239      	movs	r2, #57	; 0x39
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b002      	add	sp, #8
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	00001111 	.word	0x00001111

08005c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2202      	movs	r2, #2
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d124      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4013      	ands	r3, r2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d11d      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2203      	movs	r2, #3
 8005c52:	4252      	negs	r2, r2
 8005c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2203      	movs	r2, #3
 8005c64:	4013      	ands	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 f9a0 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e007      	b.n	8005c82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 f993 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 f99f 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d125      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d11e      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2205      	movs	r2, #5
 8005caa:	4252      	negs	r2, r2
 8005cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	23c0      	movs	r3, #192	; 0xc0
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f000 f973 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005cca:	e007      	b.n	8005cdc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f966 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 f972 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2208      	movs	r2, #8
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d124      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d11d      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2209      	movs	r2, #9
 8005d04:	4252      	negs	r2, r2
 8005d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2203      	movs	r2, #3
 8005d16:	4013      	ands	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 f947 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005d22:	e007      	b.n	8005d34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 f93a 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f000 f946 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2210      	movs	r2, #16
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d125      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d11e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2211      	movs	r2, #17
 8005d5c:	4252      	negs	r2, r2
 8005d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2208      	movs	r2, #8
 8005d64:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	23c0      	movs	r3, #192	; 0xc0
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4013      	ands	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f91a 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e007      	b.n	8005d8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 f90d 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f000 f919 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10f      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2202      	movs	r2, #2
 8005db6:	4252      	negs	r2, r2
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fd fa2b 	bl	8003218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d10f      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d108      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2241      	movs	r2, #65	; 0x41
 8005de4:	4252      	negs	r2, r2
 8005de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f8f0 	bl	8005fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	230f      	movs	r3, #15
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2238      	movs	r2, #56	; 0x38
 8005e0e:	5c9b      	ldrb	r3, [r3, r2]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x20>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e0bc      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x19a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2238      	movs	r2, #56	; 0x38
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2239      	movs	r2, #57	; 0x39
 8005e24:	2102      	movs	r1, #2
 8005e26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2277      	movs	r2, #119	; 0x77
 8005e34:	4393      	bics	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4a58      	ldr	r2, [pc, #352]	; (8005f9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	0192      	lsls	r2, r2, #6
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0xde>
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	0192      	lsls	r2, r2, #6
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d900      	bls.n	8005e5e <HAL_TIM_ConfigClockSource+0x66>
 8005e5c:	e088      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	0152      	lsls	r2, r2, #5
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d100      	bne.n	8005e68 <HAL_TIM_ConfigClockSource+0x70>
 8005e66:	e088      	b.n	8005f7a <HAL_TIM_ConfigClockSource+0x182>
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	0152      	lsls	r2, r2, #5
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d900      	bls.n	8005e72 <HAL_TIM_ConfigClockSource+0x7a>
 8005e70:	e07e      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e72:	2b70      	cmp	r3, #112	; 0x70
 8005e74:	d018      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0xb0>
 8005e76:	d900      	bls.n	8005e7a <HAL_TIM_ConfigClockSource+0x82>
 8005e78:	e07a      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e7a:	2b60      	cmp	r3, #96	; 0x60
 8005e7c:	d04f      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x126>
 8005e7e:	d900      	bls.n	8005e82 <HAL_TIM_ConfigClockSource+0x8a>
 8005e80:	e076      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e82:	2b50      	cmp	r3, #80	; 0x50
 8005e84:	d03b      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x106>
 8005e86:	d900      	bls.n	8005e8a <HAL_TIM_ConfigClockSource+0x92>
 8005e88:	e072      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d057      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x146>
 8005e8e:	d900      	bls.n	8005e92 <HAL_TIM_ConfigClockSource+0x9a>
 8005e90:	e06e      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	d063      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x166>
 8005e96:	d86b      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d060      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x166>
 8005e9c:	d868      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d05d      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x166>
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d05b      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x166>
 8005ea6:	e063      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6899      	ldr	r1, [r3, #8]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f000 f96a 	bl	8006190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2277      	movs	r2, #119	; 0x77
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]
      break;
 8005ed4:	e052      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6899      	ldr	r1, [r3, #8]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f000 f953 	bl	8006190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	01c9      	lsls	r1, r1, #7
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	609a      	str	r2, [r3, #8]
      break;
 8005efc:	e03e      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	f000 f8c6 	bl	800609c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2150      	movs	r1, #80	; 0x50
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 f920 	bl	800615c <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e02e      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	001a      	movs	r2, r3
 8005f2c:	f000 f8e4 	bl	80060f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2160      	movs	r1, #96	; 0x60
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f910 	bl	800615c <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e01e      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	f000 f8a6 	bl	800609c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2140      	movs	r1, #64	; 0x40
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 f900 	bl	800615c <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e00e      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	0019      	movs	r1, r3
 8005f68:	0010      	movs	r0, r2
 8005f6a:	f000 f8f7 	bl	800615c <TIM_ITRx_SetConfig>
      break;
 8005f6e:	e005      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005f70:	230f      	movs	r3, #15
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
      break;
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005f7a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2239      	movs	r2, #57	; 0x39
 8005f80:	2101      	movs	r1, #1
 8005f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2238      	movs	r2, #56	; 0x38
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]

  return status;
 8005f8c:	230f      	movs	r3, #15
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	781b      	ldrb	r3, [r3, #0]
}
 8005f92:	0018      	movs	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b004      	add	sp, #16
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	ffff00ff 	.word	0xffff00ff

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	05db      	lsls	r3, r3, #23
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0x32>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a23      	ldr	r2, [pc, #140]	; (800608c <TIM_Base_SetConfig+0xac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0x32>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <TIM_Base_SetConfig+0xb0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0x32>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a21      	ldr	r2, [pc, #132]	; (8006094 <TIM_Base_SetConfig+0xb4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2270      	movs	r2, #112	; 0x70
 8006016:	4393      	bics	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	05db      	lsls	r3, r3, #23
 800602a:	429a      	cmp	r2, r3
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0x66>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <TIM_Base_SetConfig+0xac>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0x66>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <TIM_Base_SetConfig+0xb0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0x66>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <TIM_Base_SetConfig+0xb4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a13      	ldr	r2, [pc, #76]	; (8006098 <TIM_Base_SetConfig+0xb8>)
 800604a:	4013      	ands	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	4393      	bics	r3, r2
 800605e:	001a      	movs	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	615a      	str	r2, [r3, #20]
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40000400 	.word	0x40000400
 8006090:	40010800 	.word	0x40010800
 8006094:	40011400 	.word	0x40011400
 8006098:	fffffcff 	.word	0xfffffcff

0800609c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	2201      	movs	r2, #1
 80060b4:	4393      	bics	r3, r2
 80060b6:	001a      	movs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	22f0      	movs	r2, #240	; 0xf0
 80060c6:	4393      	bics	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	220a      	movs	r2, #10
 80060d8:	4393      	bics	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b006      	add	sp, #24
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	2210      	movs	r2, #16
 800610a:	4393      	bics	r3, r2
 800610c:	001a      	movs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <TIM_TI2_ConfigInputStage+0x60>)
 8006122:	4013      	ands	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	22a0      	movs	r2, #160	; 0xa0
 8006134:	4393      	bics	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	46bd      	mov	sp, r7
 8006152:	b006      	add	sp, #24
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	ffff0fff 	.word	0xffff0fff

0800615c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2270      	movs	r2, #112	; 0x70
 8006170:	4393      	bics	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	2207      	movs	r2, #7
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	609a      	str	r2, [r3, #8]
}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	46bd      	mov	sp, r7
 800618a:	b004      	add	sp, #16
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <TIM_ETR_SetConfig+0x3c>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	021a      	lsls	r2, r3, #8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	609a      	str	r2, [r3, #8]
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b006      	add	sp, #24
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	ffff00ff 	.word	0xffff00ff

080061d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2238      	movs	r2, #56	; 0x38
 80061de:	5c9b      	ldrb	r3, [r3, r2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e047      	b.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2238      	movs	r2, #56	; 0x38
 80061ec:	2101      	movs	r1, #1
 80061ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2239      	movs	r2, #57	; 0x39
 80061f4:	2102      	movs	r1, #2
 80061f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2270      	movs	r2, #112	; 0x70
 800620c:	4393      	bics	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	05db      	lsls	r3, r3, #23
 800622a:	429a      	cmp	r2, r3
 800622c:	d00e      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a10      	ldr	r2, [pc, #64]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10c      	bne.n	8006266 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2280      	movs	r2, #128	; 0x80
 8006250:	4393      	bics	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2239      	movs	r2, #57	; 0x39
 800626a:	2101      	movs	r1, #1
 800626c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2238      	movs	r2, #56	; 0x38
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40000400 	.word	0x40000400
 8006284:	40010800 	.word	0x40010800
 8006288:	40011400 	.word	0x40011400

0800628c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e044      	b.n	8006328 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d107      	bne.n	80062b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2274      	movs	r2, #116	; 0x74
 80062aa:	2100      	movs	r1, #0
 80062ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0018      	movs	r0, r3
 80062b2:	f7fd fa5d 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2224      	movs	r2, #36	; 0x24
 80062ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2101      	movs	r1, #1
 80062c8:	438a      	bics	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f000 fd5c 	bl	8006d8c <UART_SetConfig>
 80062d4:	0003      	movs	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e024      	b.n	8006328 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 ffef 	bl	80072cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	490d      	ldr	r1, [pc, #52]	; (8006330 <HAL_UART_Init+0xa4>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	212a      	movs	r1, #42	; 0x2a
 800630a:	438a      	bics	r2, r1
 800630c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2101      	movs	r1, #1
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0018      	movs	r0, r3
 8006322:	f001 f887 	bl	8007434 <UART_CheckIdleState>
 8006326:	0003      	movs	r3, r0
}
 8006328:	0018      	movs	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}
 8006330:	ffffb7ff 	.word	0xffffb7ff

08006334 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	1dbb      	adds	r3, r7, #6
 8006340:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006346:	2b20      	cmp	r3, #32
 8006348:	d000      	beq.n	800634c <HAL_UART_Transmit_IT+0x18>
 800634a:	e06a      	b.n	8006422 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_UART_Transmit_IT+0x26>
 8006352:	1dbb      	adds	r3, r7, #6
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e062      	b.n	8006424 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	429a      	cmp	r2, r3
 8006368:	d109      	bne.n	800637e <HAL_UART_Transmit_IT+0x4a>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2201      	movs	r2, #1
 8006376:	4013      	ands	r3, r2
 8006378:	d001      	beq.n	800637e <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e052      	b.n	8006424 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2274      	movs	r2, #116	; 0x74
 8006382:	5c9b      	ldrb	r3, [r3, r2]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UART_Transmit_IT+0x58>
 8006388:	2302      	movs	r3, #2
 800638a:	e04b      	b.n	8006424 <HAL_UART_Transmit_IT+0xf0>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2274      	movs	r2, #116	; 0x74
 8006390:	2101      	movs	r1, #1
 8006392:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1dba      	adds	r2, r7, #6
 800639e:	2150      	movs	r1, #80	; 0x50
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1dba      	adds	r2, r7, #6
 80063a8:	2152      	movs	r1, #82	; 0x52
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	2100      	movs	r1, #0
 80063ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2221      	movs	r2, #33	; 0x21
 80063c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	015b      	lsls	r3, r3, #5
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d107      	bne.n	80063de <HAL_UART_Transmit_IT+0xaa>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <HAL_UART_Transmit_IT+0xf8>)
 80063da:	669a      	str	r2, [r3, #104]	; 0x68
 80063dc:	e002      	b.n	80063e4 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <HAL_UART_Transmit_IT+0xfc>)
 80063e2:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2274      	movs	r2, #116	; 0x74
 80063e8:	2100      	movs	r1, #0
 80063ea:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ec:	f3ef 8310 	mrs	r3, PRIMASK
 80063f0:	613b      	str	r3, [r7, #16]
  return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	2301      	movs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f383 8810 	msr	PRIMASK, r3
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	430a      	orrs	r2, r1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f383 8810 	msr	PRIMASK, r3
}
 800641c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b008      	add	sp, #32
 800642a:	bd80      	pop	{r7, pc}
 800642c:	080079c7 	.word	0x080079c7
 8006430:	08007915 	.word	0x08007915

08006434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	1dbb      	adds	r3, r7, #6
 8006440:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	2b20      	cmp	r3, #32
 8006448:	d155      	bne.n	80064f6 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_UART_Receive_IT+0x24>
 8006450:	1dbb      	adds	r3, r7, #6
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e04d      	b.n	80064f8 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	015b      	lsls	r3, r3, #5
 8006464:	429a      	cmp	r2, r3
 8006466:	d109      	bne.n	800647c <HAL_UART_Receive_IT+0x48>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2201      	movs	r2, #1
 8006474:	4013      	ands	r3, r2
 8006476:	d001      	beq.n	800647c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e03d      	b.n	80064f8 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2274      	movs	r2, #116	; 0x74
 8006480:	5c9b      	ldrb	r3, [r3, r2]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_UART_Receive_IT+0x56>
 8006486:	2302      	movs	r3, #2
 8006488:	e036      	b.n	80064f8 <HAL_UART_Receive_IT+0xc4>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2274      	movs	r2, #116	; 0x74
 800648e:	2101      	movs	r1, #1
 8006490:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_UART_Receive_IT+0xcc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d020      	beq.n	80064e4 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	4013      	ands	r3, r2
 80064ae:	d019      	beq.n	80064e4 <HAL_UART_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	613b      	str	r3, [r7, #16]
  return(result);
 80064b6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	2301      	movs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	04c9      	lsls	r1, r1, #19
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f383 8810 	msr	PRIMASK, r3
}
 80064e2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064e4:	1dbb      	adds	r3, r7, #6
 80064e6:	881a      	ldrh	r2, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f001 f8ad 	bl	800764c <UART_Start_Receive_IT>
 80064f2:	0003      	movs	r3, r0
 80064f4:	e000      	b.n	80064f8 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	0018      	movs	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b008      	add	sp, #32
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40004800 	.word	0x40004800

08006504 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650c:	f3ef 8310 	mrs	r3, PRIMASK
 8006510:	617b      	str	r3, [r7, #20]
  return(result);
 8006512:	697b      	ldr	r3, [r7, #20]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	2301      	movs	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f383 8810 	msr	PRIMASK, r3
}
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	21c0      	movs	r1, #192	; 0xc0
 800652e:	438a      	bics	r2, r1
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f383 8810 	msr	PRIMASK, r3
}
 800653c:	46c0      	nop			; (mov r8, r8)

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	4013      	ands	r3, r2
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d13e      	bne.n	80065ca <HAL_UART_AbortTransmit_IT+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654c:	f3ef 8310 	mrs	r3, PRIMASK
 8006550:	60bb      	str	r3, [r7, #8]
  return(result);
 8006552:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	2301      	movs	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f383 8810 	msr	PRIMASK, r3
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	438a      	bics	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f383 8810 	msr	PRIMASK, r3
}
 800657c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <HAL_UART_AbortTransmit_IT+0xa8>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658a:	4a19      	ldr	r2, [pc, #100]	; (80065f0 <HAL_UART_AbortTransmit_IT+0xec>)
 800658c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006592:	0018      	movs	r0, r3
 8006594:	f7fd fb2a 	bl	8003bec <HAL_DMA_Abort_IT>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d024      	beq.n	80065e6 <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	0018      	movs	r0, r3
 80065a8:	4790      	blx	r2
 80065aa:	e01c      	b.n	80065e6 <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2252      	movs	r2, #82	; 0x52
 80065b0:	2100      	movs	r1, #0
 80065b2:	5299      	strh	r1, [r3, r2]

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	0018      	movs	r0, r3
 80065c4:	f000 fbc6 	bl	8006d54 <HAL_UART_AbortTransmitCpltCallback>
 80065c8:	e00d      	b.n	80065e6 <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2252      	movs	r2, #82	; 0x52
 80065ce:	2100      	movs	r1, #0
 80065d0:	5299      	strh	r1, [r3, r2]

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	669a      	str	r2, [r3, #104]	; 0x68


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f000 fbb7 	bl	8006d54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b00a      	add	sp, #40	; 0x28
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	0800789f 	.word	0x0800789f

080065f4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b092      	sub	sp, #72	; 0x48
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006600:	623b      	str	r3, [r7, #32]
  return(result);
 8006602:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006604:	647b      	str	r3, [r7, #68]	; 0x44
 8006606:	2301      	movs	r3, #1
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	f383 8810 	msr	PRIMASK, r3
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4956      	ldr	r1, [pc, #344]	; (8006778 <HAL_UART_AbortReceive_IT+0x184>)
 800661e:	400a      	ands	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	f383 8810 	msr	PRIMASK, r3
}
 800662c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662e:	f3ef 8310 	mrs	r3, PRIMASK
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
 8006638:	2301      	movs	r3, #1
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f383 8810 	msr	PRIMASK, r3
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2101      	movs	r1, #1
 8006650:	438a      	bics	r2, r1
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	f383 8810 	msr	PRIMASK, r3
}
 800665e:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006664:	2b01      	cmp	r3, #1
 8006666:	d118      	bne.n	800669a <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006668:	f3ef 8310 	mrs	r3, PRIMASK
 800666c:	617b      	str	r3, [r7, #20]
  return(result);
 800666e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f383 8810 	msr	PRIMASK, r3
}
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2110      	movs	r1, #16
 800668a:	438a      	bics	r2, r1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f383 8810 	msr	PRIMASK, r3
}
 8006698:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2240      	movs	r2, #64	; 0x40
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d14d      	bne.n	8006744 <HAL_UART_AbortReceive_IT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a8:	f3ef 8310 	mrs	r3, PRIMASK
 80066ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b2:	2301      	movs	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2140      	movs	r1, #64	; 0x40
 80066ca:	438a      	bics	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f383 8810 	msr	PRIMASK, r3
}
 80066d8:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d012      	beq.n	8006708 <HAL_UART_AbortReceive_IT+0x114>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a25      	ldr	r2, [pc, #148]	; (800677c <HAL_UART_AbortReceive_IT+0x188>)
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7fd fa7c 	bl	8003bec <HAL_DMA_Abort_IT>
 80066f4:	1e03      	subs	r3, r0, #0
 80066f6:	d03a      	beq.n	800676e <HAL_UART_AbortReceive_IT+0x17a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	0018      	movs	r0, r3
 8006704:	4790      	blx	r2
 8006706:	e032      	b.n	800676e <HAL_UART_AbortReceive_IT+0x17a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	225a      	movs	r2, #90	; 0x5a
 800670c:	2100      	movs	r1, #0
 800670e:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	220f      	movs	r2, #15
 800671c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2108      	movs	r1, #8
 800672a:	430a      	orrs	r2, r1
 800672c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	0018      	movs	r0, r3
 800673e:	f000 fb11 	bl	8006d64 <HAL_UART_AbortReceiveCpltCallback>
 8006742:	e014      	b.n	800676e <HAL_UART_AbortReceive_IT+0x17a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	225a      	movs	r2, #90	; 0x5a
 8006748:	2100      	movs	r1, #0
 800674a:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	220f      	movs	r2, #15
 8006758:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0018      	movs	r0, r3
 800676a:	f000 fafb 	bl	8006d64 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	0018      	movs	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	b012      	add	sp, #72	; 0x48
 8006776:	bd80      	pop	{r7, pc}
 8006778:	fffffedf 	.word	0xfffffedf
 800677c:	080078cb 	.word	0x080078cb

08006780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b0ab      	sub	sp, #172	; 0xac
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	22a4      	movs	r2, #164	; 0xa4
 8006790:	18b9      	adds	r1, r7, r2
 8006792:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	20a0      	movs	r0, #160	; 0xa0
 800679c:	1839      	adds	r1, r7, r0
 800679e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	219c      	movs	r1, #156	; 0x9c
 80067a8:	1879      	adds	r1, r7, r1
 80067aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067ac:	0011      	movs	r1, r2
 80067ae:	18bb      	adds	r3, r7, r2
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a99      	ldr	r2, [pc, #612]	; (8006a18 <HAL_UART_IRQHandler+0x298>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	2298      	movs	r2, #152	; 0x98
 80067b8:	18bc      	adds	r4, r7, r2
 80067ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80067bc:	18bb      	adds	r3, r7, r2
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d114      	bne.n	80067ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067c4:	187b      	adds	r3, r7, r1
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2220      	movs	r2, #32
 80067ca:	4013      	ands	r3, r2
 80067cc:	d00f      	beq.n	80067ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ce:	183b      	adds	r3, r7, r0
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2220      	movs	r2, #32
 80067d4:	4013      	ands	r3, r2
 80067d6:	d00a      	beq.n	80067ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d100      	bne.n	80067e2 <HAL_UART_IRQHandler+0x62>
 80067e0:	e298      	b.n	8006d14 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	0010      	movs	r0, r2
 80067ea:	4798      	blx	r3
      }
      return;
 80067ec:	e292      	b.n	8006d14 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067ee:	2398      	movs	r3, #152	; 0x98
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d100      	bne.n	80067fa <HAL_UART_IRQHandler+0x7a>
 80067f8:	e114      	b.n	8006a24 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067fa:	239c      	movs	r3, #156	; 0x9c
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	4013      	ands	r3, r2
 8006804:	d106      	bne.n	8006814 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006806:	23a0      	movs	r3, #160	; 0xa0
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a83      	ldr	r2, [pc, #524]	; (8006a1c <HAL_UART_IRQHandler+0x29c>)
 800680e:	4013      	ands	r3, r2
 8006810:	d100      	bne.n	8006814 <HAL_UART_IRQHandler+0x94>
 8006812:	e107      	b.n	8006a24 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006814:	23a4      	movs	r3, #164	; 0xa4
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	4013      	ands	r3, r2
 800681e:	d012      	beq.n	8006846 <HAL_UART_IRQHandler+0xc6>
 8006820:	23a0      	movs	r3, #160	; 0xa0
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	4013      	ands	r3, r2
 800682c:	d00b      	beq.n	8006846 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2201      	movs	r2, #1
 8006834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2280      	movs	r2, #128	; 0x80
 800683a:	589b      	ldr	r3, [r3, r2]
 800683c:	2201      	movs	r2, #1
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2180      	movs	r1, #128	; 0x80
 8006844:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006846:	23a4      	movs	r3, #164	; 0xa4
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2202      	movs	r2, #2
 800684e:	4013      	ands	r3, r2
 8006850:	d011      	beq.n	8006876 <HAL_UART_IRQHandler+0xf6>
 8006852:	239c      	movs	r3, #156	; 0x9c
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	4013      	ands	r3, r2
 800685c:	d00b      	beq.n	8006876 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2202      	movs	r2, #2
 8006864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2280      	movs	r2, #128	; 0x80
 800686a:	589b      	ldr	r3, [r3, r2]
 800686c:	2204      	movs	r2, #4
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006876:	23a4      	movs	r3, #164	; 0xa4
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2204      	movs	r2, #4
 800687e:	4013      	ands	r3, r2
 8006880:	d011      	beq.n	80068a6 <HAL_UART_IRQHandler+0x126>
 8006882:	239c      	movs	r3, #156	; 0x9c
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	4013      	ands	r3, r2
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2204      	movs	r2, #4
 8006894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2280      	movs	r2, #128	; 0x80
 800689a:	589b      	ldr	r3, [r3, r2]
 800689c:	2202      	movs	r2, #2
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2180      	movs	r1, #128	; 0x80
 80068a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068a6:	23a4      	movs	r3, #164	; 0xa4
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2208      	movs	r2, #8
 80068ae:	4013      	ands	r3, r2
 80068b0:	d017      	beq.n	80068e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068b2:	23a0      	movs	r3, #160	; 0xa0
 80068b4:	18fb      	adds	r3, r7, r3
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2220      	movs	r2, #32
 80068ba:	4013      	ands	r3, r2
 80068bc:	d105      	bne.n	80068ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068be:	239c      	movs	r3, #156	; 0x9c
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2208      	movs	r2, #8
 80068d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	589b      	ldr	r3, [r3, r2]
 80068d8:	2208      	movs	r2, #8
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068e2:	23a4      	movs	r3, #164	; 0xa4
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	4013      	ands	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_UART_IRQHandler+0x198>
 80068f0:	23a0      	movs	r3, #160	; 0xa0
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	04db      	lsls	r3, r3, #19
 80068fa:	4013      	ands	r3, r2
 80068fc:	d00c      	beq.n	8006918 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	0112      	lsls	r2, r2, #4
 8006906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	589b      	ldr	r3, [r3, r2]
 800690e:	2220      	movs	r2, #32
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2280      	movs	r2, #128	; 0x80
 800691c:	589b      	ldr	r3, [r3, r2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d100      	bne.n	8006924 <HAL_UART_IRQHandler+0x1a4>
 8006922:	e1f9      	b.n	8006d18 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006924:	23a4      	movs	r3, #164	; 0xa4
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2220      	movs	r2, #32
 800692c:	4013      	ands	r3, r2
 800692e:	d00e      	beq.n	800694e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006930:	23a0      	movs	r3, #160	; 0xa0
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2220      	movs	r2, #32
 8006938:	4013      	ands	r3, r2
 800693a:	d008      	beq.n	800694e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	0010      	movs	r0, r2
 800694c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2280      	movs	r2, #128	; 0x80
 8006952:	589b      	ldr	r3, [r3, r2]
 8006954:	2194      	movs	r1, #148	; 0x94
 8006956:	187a      	adds	r2, r7, r1
 8006958:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2240      	movs	r2, #64	; 0x40
 8006962:	4013      	ands	r3, r2
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d004      	beq.n	8006972 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006968:	187b      	adds	r3, r7, r1
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2228      	movs	r2, #40	; 0x28
 800696e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006970:	d047      	beq.n	8006a02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f000 ff19 	bl	80077ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2240      	movs	r2, #64	; 0x40
 8006982:	4013      	ands	r3, r2
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d137      	bne.n	80069f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006988:	f3ef 8310 	mrs	r3, PRIMASK
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800698e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006990:	2090      	movs	r0, #144	; 0x90
 8006992:	183a      	adds	r2, r7, r0
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	2301      	movs	r3, #1
 8006998:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699c:	f383 8810 	msr	PRIMASK, r3
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2140      	movs	r1, #64	; 0x40
 80069ae:	438a      	bics	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ba:	f383 8810 	msr	PRIMASK, r3
}
 80069be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <HAL_UART_IRQHandler+0x2a0>)
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fd f909 	bl	8003bec <HAL_DMA_Abort_IT>
 80069da:	1e03      	subs	r3, r0, #0
 80069dc:	d01a      	beq.n	8006a14 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	0018      	movs	r0, r3
 80069ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	e012      	b.n	8006a14 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 f9a7 	bl	8006d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f6:	e00d      	b.n	8006a14 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 f9a2 	bl	8006d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	e008      	b.n	8006a14 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 f99d 	bl	8006d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	2100      	movs	r1, #0
 8006a10:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006a12:	e181      	b.n	8006d18 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	46c0      	nop			; (mov r8, r8)
    return;
 8006a16:	e17f      	b.n	8006d18 <HAL_UART_IRQHandler+0x598>
 8006a18:	0000080f 	.word	0x0000080f
 8006a1c:	04000120 	.word	0x04000120
 8006a20:	08007871 	.word	0x08007871

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d000      	beq.n	8006a2e <HAL_UART_IRQHandler+0x2ae>
 8006a2c:	e133      	b.n	8006c96 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a2e:	23a4      	movs	r3, #164	; 0xa4
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2210      	movs	r2, #16
 8006a36:	4013      	ands	r3, r2
 8006a38:	d100      	bne.n	8006a3c <HAL_UART_IRQHandler+0x2bc>
 8006a3a:	e12c      	b.n	8006c96 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a3c:	23a0      	movs	r3, #160	; 0xa0
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2210      	movs	r2, #16
 8006a44:	4013      	ands	r3, r2
 8006a46:	d100      	bne.n	8006a4a <HAL_UART_IRQHandler+0x2ca>
 8006a48:	e125      	b.n	8006c96 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2240      	movs	r2, #64	; 0x40
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d000      	beq.n	8006a62 <HAL_UART_IRQHandler+0x2e2>
 8006a60:	e09d      	b.n	8006b9e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	217e      	movs	r1, #126	; 0x7e
 8006a6c:	187b      	adds	r3, r7, r1
 8006a6e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006a70:	187b      	adds	r3, r7, r1
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d100      	bne.n	8006a7a <HAL_UART_IRQHandler+0x2fa>
 8006a78:	e150      	b.n	8006d1c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2258      	movs	r2, #88	; 0x58
 8006a7e:	5a9b      	ldrh	r3, [r3, r2]
 8006a80:	187a      	adds	r2, r7, r1
 8006a82:	8812      	ldrh	r2, [r2, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d300      	bcc.n	8006a8a <HAL_UART_IRQHandler+0x30a>
 8006a88:	e148      	b.n	8006d1c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	187a      	adds	r2, r7, r1
 8006a8e:	215a      	movs	r1, #90	; 0x5a
 8006a90:	8812      	ldrh	r2, [r2, #0]
 8006a92:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d16e      	bne.n	8006b80 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aac:	2301      	movs	r3, #1
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	f383 8810 	msr	PRIMASK, r3
}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	499a      	ldr	r1, [pc, #616]	; (8006d2c <HAL_UART_IRQHandler+0x5ac>)
 8006ac4:	400a      	ands	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	f383 8810 	msr	PRIMASK, r3
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006adc:	677b      	str	r3, [r7, #116]	; 0x74
 8006ade:	2301      	movs	r3, #1
 8006ae0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	f383 8810 	msr	PRIMASK, r3
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2101      	movs	r1, #1
 8006af6:	438a      	bics	r2, r1
 8006af8:	609a      	str	r2, [r3, #8]
 8006afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006afc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	f383 8810 	msr	PRIMASK, r3
}
 8006b04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b06:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b10:	2301      	movs	r3, #1
 8006b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	f383 8810 	msr	PRIMASK, r3
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2140      	movs	r1, #64	; 0x40
 8006b28:	438a      	bics	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b32:	f383 8810 	msr	PRIMASK, r3
}
 8006b36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b44:	f3ef 8310 	mrs	r3, PRIMASK
 8006b48:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4e:	2301      	movs	r3, #1
 8006b50:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2110      	movs	r1, #16
 8006b66:	438a      	bics	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b70:	f383 8810 	msr	PRIMASK, r3
}
 8006b74:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7fc fff6 	bl	8003b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2258      	movs	r2, #88	; 0x58
 8006b84:	5a9a      	ldrh	r2, [r3, r2]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	215a      	movs	r1, #90	; 0x5a
 8006b8a:	5a5b      	ldrh	r3, [r3, r1]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f8ec 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b9c:	e0be      	b.n	8006d1c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2258      	movs	r2, #88	; 0x58
 8006ba2:	5a99      	ldrh	r1, [r3, r2]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	225a      	movs	r2, #90	; 0x5a
 8006ba8:	5a9b      	ldrh	r3, [r3, r2]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	208e      	movs	r0, #142	; 0x8e
 8006bae:	183b      	adds	r3, r7, r0
 8006bb0:	1a8a      	subs	r2, r1, r2
 8006bb2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	225a      	movs	r2, #90	; 0x5a
 8006bb8:	5a9b      	ldrh	r3, [r3, r2]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d100      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x442>
 8006bc0:	e0ae      	b.n	8006d20 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8006bc2:	183b      	adds	r3, r7, r0
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d100      	bne.n	8006bcc <HAL_UART_IRQHandler+0x44c>
 8006bca:	e0a9      	b.n	8006d20 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd4:	2488      	movs	r4, #136	; 0x88
 8006bd6:	193a      	adds	r2, r7, r4
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	2301      	movs	r3, #1
 8006bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f383 8810 	msr	PRIMASK, r3
}
 8006be4:	46c0      	nop			; (mov r8, r8)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	494f      	ldr	r1, [pc, #316]	; (8006d30 <HAL_UART_IRQHandler+0x5b0>)
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	193b      	adds	r3, r7, r4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f383 8810 	msr	PRIMASK, r3
}
 8006c02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c04:	f3ef 8310 	mrs	r3, PRIMASK
 8006c08:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c0a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	2484      	movs	r4, #132	; 0x84
 8006c0e:	193a      	adds	r2, r7, r4
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	2301      	movs	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	f383 8810 	msr	PRIMASK, r3
}
 8006c3a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c56:	2480      	movs	r4, #128	; 0x80
 8006c58:	193a      	adds	r2, r7, r4
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f383 8810 	msr	PRIMASK, r3
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2110      	movs	r1, #16
 8006c74:	438a      	bics	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	193b      	adds	r3, r7, r4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	f383 8810 	msr	PRIMASK, r3
}
 8006c84:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c86:	183b      	adds	r3, r7, r0
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0011      	movs	r1, r2
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 f870 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c94:	e044      	b.n	8006d20 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c96:	23a4      	movs	r3, #164	; 0xa4
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	035b      	lsls	r3, r3, #13
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d010      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x546>
 8006ca4:	239c      	movs	r3, #156	; 0x9c
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	03db      	lsls	r3, r3, #15
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	0352      	lsls	r2, r2, #13
 8006cba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f001 f872 	bl	8007da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc4:	e02f      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006cc6:	23a4      	movs	r3, #164	; 0xa4
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2280      	movs	r2, #128	; 0x80
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d00f      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006cd2:	23a0      	movs	r3, #160	; 0xa0
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01e      	beq.n	8006d24 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	0010      	movs	r0, r2
 8006cee:	4798      	blx	r3
    }
    return;
 8006cf0:	e018      	b.n	8006d24 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cf2:	23a4      	movs	r3, #164	; 0xa4
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2240      	movs	r2, #64	; 0x40
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
 8006cfe:	23a0      	movs	r3, #160	; 0xa0
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2240      	movs	r2, #64	; 0x40
 8006d06:	4013      	ands	r3, r2
 8006d08:	d00d      	beq.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f000 feb8 	bl	8007a82 <UART_EndTransmit_IT>
    return;
 8006d12:	e008      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	e006      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006d18:	46c0      	nop			; (mov r8, r8)
 8006d1a:	e004      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	e002      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	e000      	b.n	8006d26 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006d24:	46c0      	nop			; (mov r8, r8)
  }

}
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b02b      	add	sp, #172	; 0xac
 8006d2a:	bd90      	pop	{r4, r7, pc}
 8006d2c:	fffffeff 	.word	0xfffffeff
 8006d30:	fffffedf 	.word	0xfffffedf

08006d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b002      	add	sp, #8
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b002      	add	sp, #8
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	000a      	movs	r2, r1
 8006d7e:	1cbb      	adds	r3, r7, #2
 8006d80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b5b0      	push	{r4, r5, r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d94:	231a      	movs	r3, #26
 8006d96:	2218      	movs	r2, #24
 8006d98:	189b      	adds	r3, r3, r2
 8006d9a:	19db      	adds	r3, r3, r7
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4ac3      	ldr	r2, [pc, #780]	; (80070cc <UART_SetConfig+0x340>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4abe      	ldr	r2, [pc, #760]	; (80070d0 <UART_SetConfig+0x344>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	0019      	movs	r1, r3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4ab8      	ldr	r2, [pc, #736]	; (80070d4 <UART_SetConfig+0x348>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4ab4      	ldr	r2, [pc, #720]	; (80070d8 <UART_SetConfig+0x34c>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4ab0      	ldr	r2, [pc, #704]	; (80070dc <UART_SetConfig+0x350>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d131      	bne.n	8006e84 <UART_SetConfig+0xf8>
 8006e20:	4baf      	ldr	r3, [pc, #700]	; (80070e0 <UART_SetConfig+0x354>)
 8006e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e24:	2203      	movs	r2, #3
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d01d      	beq.n	8006e68 <UART_SetConfig+0xdc>
 8006e2c:	d823      	bhi.n	8006e76 <UART_SetConfig+0xea>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d00c      	beq.n	8006e4c <UART_SetConfig+0xc0>
 8006e32:	d820      	bhi.n	8006e76 <UART_SetConfig+0xea>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <UART_SetConfig+0xb2>
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d00e      	beq.n	8006e5a <UART_SetConfig+0xce>
 8006e3c:	e01b      	b.n	8006e76 <UART_SetConfig+0xea>
 8006e3e:	231b      	movs	r3, #27
 8006e40:	2218      	movs	r2, #24
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	19db      	adds	r3, r3, r7
 8006e46:	2201      	movs	r2, #1
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e0b4      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e4c:	231b      	movs	r3, #27
 8006e4e:	2218      	movs	r2, #24
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	19db      	adds	r3, r3, r7
 8006e54:	2202      	movs	r2, #2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e0ad      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e5a:	231b      	movs	r3, #27
 8006e5c:	2218      	movs	r2, #24
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	19db      	adds	r3, r3, r7
 8006e62:	2204      	movs	r2, #4
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e0a6      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e68:	231b      	movs	r3, #27
 8006e6a:	2218      	movs	r2, #24
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	19db      	adds	r3, r3, r7
 8006e70:	2208      	movs	r2, #8
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e09f      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e76:	231b      	movs	r3, #27
 8006e78:	2218      	movs	r2, #24
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	19db      	adds	r3, r3, r7
 8006e7e:	2210      	movs	r2, #16
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e098      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a96      	ldr	r2, [pc, #600]	; (80070e4 <UART_SetConfig+0x358>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d131      	bne.n	8006ef2 <UART_SetConfig+0x166>
 8006e8e:	4b94      	ldr	r3, [pc, #592]	; (80070e0 <UART_SetConfig+0x354>)
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	220c      	movs	r2, #12
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d01d      	beq.n	8006ed6 <UART_SetConfig+0x14a>
 8006e9a:	d823      	bhi.n	8006ee4 <UART_SetConfig+0x158>
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d00c      	beq.n	8006eba <UART_SetConfig+0x12e>
 8006ea0:	d820      	bhi.n	8006ee4 <UART_SetConfig+0x158>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <UART_SetConfig+0x120>
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d00e      	beq.n	8006ec8 <UART_SetConfig+0x13c>
 8006eaa:	e01b      	b.n	8006ee4 <UART_SetConfig+0x158>
 8006eac:	231b      	movs	r3, #27
 8006eae:	2218      	movs	r2, #24
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	19db      	adds	r3, r3, r7
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e07d      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006eba:	231b      	movs	r3, #27
 8006ebc:	2218      	movs	r2, #24
 8006ebe:	189b      	adds	r3, r3, r2
 8006ec0:	19db      	adds	r3, r3, r7
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e076      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ec8:	231b      	movs	r3, #27
 8006eca:	2218      	movs	r2, #24
 8006ecc:	189b      	adds	r3, r3, r2
 8006ece:	19db      	adds	r3, r3, r7
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	e06f      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ed6:	231b      	movs	r3, #27
 8006ed8:	2218      	movs	r2, #24
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	19db      	adds	r3, r3, r7
 8006ede:	2208      	movs	r2, #8
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e068      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ee4:	231b      	movs	r3, #27
 8006ee6:	2218      	movs	r2, #24
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	2210      	movs	r2, #16
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e061      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a7c      	ldr	r2, [pc, #496]	; (80070e8 <UART_SetConfig+0x35c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d106      	bne.n	8006f0a <UART_SetConfig+0x17e>
 8006efc:	231b      	movs	r3, #27
 8006efe:	2218      	movs	r2, #24
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e055      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a77      	ldr	r2, [pc, #476]	; (80070ec <UART_SetConfig+0x360>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d106      	bne.n	8006f22 <UART_SetConfig+0x196>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2218      	movs	r2, #24
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e049      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <UART_SetConfig+0x348>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d13e      	bne.n	8006faa <UART_SetConfig+0x21e>
 8006f2c:	4b6c      	ldr	r3, [pc, #432]	; (80070e0 <UART_SetConfig+0x354>)
 8006f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f30:	23c0      	movs	r3, #192	; 0xc0
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	4013      	ands	r3, r2
 8006f36:	22c0      	movs	r2, #192	; 0xc0
 8006f38:	0112      	lsls	r2, r2, #4
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d027      	beq.n	8006f8e <UART_SetConfig+0x202>
 8006f3e:	22c0      	movs	r2, #192	; 0xc0
 8006f40:	0112      	lsls	r2, r2, #4
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d82a      	bhi.n	8006f9c <UART_SetConfig+0x210>
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	0112      	lsls	r2, r2, #4
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d011      	beq.n	8006f72 <UART_SetConfig+0x1e6>
 8006f4e:	2280      	movs	r2, #128	; 0x80
 8006f50:	0112      	lsls	r2, r2, #4
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d822      	bhi.n	8006f9c <UART_SetConfig+0x210>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <UART_SetConfig+0x1d8>
 8006f5a:	2280      	movs	r2, #128	; 0x80
 8006f5c:	00d2      	lsls	r2, r2, #3
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <UART_SetConfig+0x1f4>
 8006f62:	e01b      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f64:	231b      	movs	r3, #27
 8006f66:	2218      	movs	r2, #24
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	19db      	adds	r3, r3, r7
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e021      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f72:	231b      	movs	r3, #27
 8006f74:	2218      	movs	r2, #24
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	19db      	adds	r3, r3, r7
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e01a      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f80:	231b      	movs	r3, #27
 8006f82:	2218      	movs	r2, #24
 8006f84:	189b      	adds	r3, r3, r2
 8006f86:	19db      	adds	r3, r3, r7
 8006f88:	2204      	movs	r2, #4
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e013      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f8e:	231b      	movs	r3, #27
 8006f90:	2218      	movs	r2, #24
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	19db      	adds	r3, r3, r7
 8006f96:	2208      	movs	r2, #8
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e00c      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f9c:	231b      	movs	r3, #27
 8006f9e:	2218      	movs	r2, #24
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	19db      	adds	r3, r3, r7
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e005      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006faa:	231b      	movs	r3, #27
 8006fac:	2218      	movs	r2, #24
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	19db      	adds	r3, r3, r7
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a46      	ldr	r2, [pc, #280]	; (80070d4 <UART_SetConfig+0x348>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d000      	beq.n	8006fc2 <UART_SetConfig+0x236>
 8006fc0:	e09a      	b.n	80070f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fc2:	231b      	movs	r3, #27
 8006fc4:	2218      	movs	r2, #24
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	19db      	adds	r3, r3, r7
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d01d      	beq.n	800700c <UART_SetConfig+0x280>
 8006fd0:	dc20      	bgt.n	8007014 <UART_SetConfig+0x288>
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d015      	beq.n	8007002 <UART_SetConfig+0x276>
 8006fd6:	dc1d      	bgt.n	8007014 <UART_SetConfig+0x288>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <UART_SetConfig+0x256>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d005      	beq.n	8006fec <UART_SetConfig+0x260>
 8006fe0:	e018      	b.n	8007014 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe2:	f7fe faf7 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fea:	e01c      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fec:	4b3c      	ldr	r3, [pc, #240]	; (80070e0 <UART_SetConfig+0x354>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d002      	beq.n	8006ffc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <UART_SetConfig+0x364>)
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ffa:	e014      	b.n	8007026 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006ffc:	4b3d      	ldr	r3, [pc, #244]	; (80070f4 <UART_SetConfig+0x368>)
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007000:	e011      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007002:	f7fe fa37 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8007006:	0003      	movs	r3, r0
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800700a:	e00c      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007012:	e008      	b.n	8007026 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007018:	231a      	movs	r3, #26
 800701a:	2218      	movs	r2, #24
 800701c:	189b      	adds	r3, r3, r2
 800701e:	19db      	adds	r3, r3, r7
 8007020:	2201      	movs	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]
        break;
 8007024:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d100      	bne.n	800702e <UART_SetConfig+0x2a2>
 800702c:	e134      	b.n	8007298 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	0013      	movs	r3, r2
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	189b      	adds	r3, r3, r2
 8007038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d305      	bcc.n	800704a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007046:	429a      	cmp	r2, r3
 8007048:	d906      	bls.n	8007058 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800704a:	231a      	movs	r3, #26
 800704c:	2218      	movs	r2, #24
 800704e:	189b      	adds	r3, r3, r2
 8007050:	19db      	adds	r3, r3, r7
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e11f      	b.n	8007298 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	6939      	ldr	r1, [r7, #16]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	000b      	movs	r3, r1
 8007066:	0e1b      	lsrs	r3, r3, #24
 8007068:	0010      	movs	r0, r2
 800706a:	0205      	lsls	r5, r0, #8
 800706c:	431d      	orrs	r5, r3
 800706e:	000b      	movs	r3, r1
 8007070:	021c      	lsls	r4, r3, #8
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	68b8      	ldr	r0, [r7, #8]
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	1900      	adds	r0, r0, r4
 8007084:	4169      	adcs	r1, r5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	2300      	movs	r3, #0
 800708e:	607b      	str	r3, [r7, #4]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f7f9 fa08 	bl	80004a8 <__aeabi_uldivmod>
 8007098:	0002      	movs	r2, r0
 800709a:	000b      	movs	r3, r1
 800709c:	0013      	movs	r3, r2
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a2:	23c0      	movs	r3, #192	; 0xc0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d309      	bcc.n	80070be <UART_SetConfig+0x332>
 80070aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	035b      	lsls	r3, r3, #13
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d204      	bcs.n	80070be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	e0ec      	b.n	8007298 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80070be:	231a      	movs	r3, #26
 80070c0:	2218      	movs	r2, #24
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e0e5      	b.n	8007298 <UART_SetConfig+0x50c>
 80070cc:	efff69f3 	.word	0xefff69f3
 80070d0:	ffffcfff 	.word	0xffffcfff
 80070d4:	40004800 	.word	0x40004800
 80070d8:	fffff4ff 	.word	0xfffff4ff
 80070dc:	40013800 	.word	0x40013800
 80070e0:	40021000 	.word	0x40021000
 80070e4:	40004400 	.word	0x40004400
 80070e8:	40004c00 	.word	0x40004c00
 80070ec:	40005000 	.word	0x40005000
 80070f0:	003d0900 	.word	0x003d0900
 80070f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	429a      	cmp	r2, r3
 8007102:	d000      	beq.n	8007106 <UART_SetConfig+0x37a>
 8007104:	e071      	b.n	80071ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007106:	231b      	movs	r3, #27
 8007108:	2218      	movs	r2, #24
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d822      	bhi.n	800715a <UART_SetConfig+0x3ce>
 8007114:	009a      	lsls	r2, r3, #2
 8007116:	4b68      	ldr	r3, [pc, #416]	; (80072b8 <UART_SetConfig+0x52c>)
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800711e:	f7fe fa59 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8007122:	0003      	movs	r3, r0
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007126:	e021      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fe fa6a 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 800712c:	0003      	movs	r3, r0
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007130:	e01c      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007132:	4b62      	ldr	r3, [pc, #392]	; (80072bc <UART_SetConfig+0x530>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2210      	movs	r2, #16
 8007138:	4013      	ands	r3, r2
 800713a:	d002      	beq.n	8007142 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800713c:	4b60      	ldr	r3, [pc, #384]	; (80072c0 <UART_SetConfig+0x534>)
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007140:	e014      	b.n	800716c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007142:	4b60      	ldr	r3, [pc, #384]	; (80072c4 <UART_SetConfig+0x538>)
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007146:	e011      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007148:	f7fe f994 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 800714c:	0003      	movs	r3, r0
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007150:	e00c      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007152:	2380      	movs	r3, #128	; 0x80
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007158:	e008      	b.n	800716c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800715e:	231a      	movs	r3, #26
 8007160:	2218      	movs	r2, #24
 8007162:	189b      	adds	r3, r3, r2
 8007164:	19db      	adds	r3, r3, r7
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
        break;
 800716a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d100      	bne.n	8007174 <UART_SetConfig+0x3e8>
 8007172:	e091      	b.n	8007298 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	005a      	lsls	r2, r3, #1
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	18d2      	adds	r2, r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	0019      	movs	r1, r3
 8007186:	0010      	movs	r0, r2
 8007188:	f7f8 ffda 	bl	8000140 <__udivsi3>
 800718c:	0003      	movs	r3, r0
 800718e:	b29b      	uxth	r3, r3
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	2b0f      	cmp	r3, #15
 8007196:	d921      	bls.n	80071dc <UART_SetConfig+0x450>
 8007198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	025b      	lsls	r3, r3, #9
 800719e:	429a      	cmp	r2, r3
 80071a0:	d21c      	bcs.n	80071dc <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	200e      	movs	r0, #14
 80071a8:	2418      	movs	r4, #24
 80071aa:	1903      	adds	r3, r0, r4
 80071ac:	19db      	adds	r3, r3, r7
 80071ae:	210f      	movs	r1, #15
 80071b0:	438a      	bics	r2, r1
 80071b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2207      	movs	r2, #7
 80071bc:	4013      	ands	r3, r2
 80071be:	b299      	uxth	r1, r3
 80071c0:	1903      	adds	r3, r0, r4
 80071c2:	19db      	adds	r3, r3, r7
 80071c4:	1902      	adds	r2, r0, r4
 80071c6:	19d2      	adds	r2, r2, r7
 80071c8:	8812      	ldrh	r2, [r2, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	1902      	adds	r2, r0, r4
 80071d4:	19d2      	adds	r2, r2, r7
 80071d6:	8812      	ldrh	r2, [r2, #0]
 80071d8:	60da      	str	r2, [r3, #12]
 80071da:	e05d      	b.n	8007298 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80071dc:	231a      	movs	r3, #26
 80071de:	2218      	movs	r2, #24
 80071e0:	189b      	adds	r3, r3, r2
 80071e2:	19db      	adds	r3, r3, r7
 80071e4:	2201      	movs	r2, #1
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e056      	b.n	8007298 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ea:	231b      	movs	r3, #27
 80071ec:	2218      	movs	r2, #24
 80071ee:	189b      	adds	r3, r3, r2
 80071f0:	19db      	adds	r3, r3, r7
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d822      	bhi.n	800723e <UART_SetConfig+0x4b2>
 80071f8:	009a      	lsls	r2, r3, #2
 80071fa:	4b33      	ldr	r3, [pc, #204]	; (80072c8 <UART_SetConfig+0x53c>)
 80071fc:	18d3      	adds	r3, r2, r3
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fe f9e7 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8007206:	0003      	movs	r3, r0
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800720a:	e021      	b.n	8007250 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7fe f9f8 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8007210:	0003      	movs	r3, r0
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007214:	e01c      	b.n	8007250 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007216:	4b29      	ldr	r3, [pc, #164]	; (80072bc <UART_SetConfig+0x530>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2210      	movs	r2, #16
 800721c:	4013      	ands	r3, r2
 800721e:	d002      	beq.n	8007226 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007220:	4b27      	ldr	r3, [pc, #156]	; (80072c0 <UART_SetConfig+0x534>)
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007224:	e014      	b.n	8007250 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8007226:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <UART_SetConfig+0x538>)
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800722a:	e011      	b.n	8007250 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722c:	f7fe f922 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8007230:	0003      	movs	r3, r0
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007234:	e00c      	b.n	8007250 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800723c:	e008      	b.n	8007250 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007242:	231a      	movs	r3, #26
 8007244:	2218      	movs	r2, #24
 8007246:	189b      	adds	r3, r3, r2
 8007248:	19db      	adds	r3, r3, r7
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
        break;
 800724e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d020      	beq.n	8007298 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	085a      	lsrs	r2, r3, #1
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	18d2      	adds	r2, r2, r3
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	0019      	movs	r1, r3
 8007266:	0010      	movs	r0, r2
 8007268:	f7f8 ff6a 	bl	8000140 <__udivsi3>
 800726c:	0003      	movs	r3, r0
 800726e:	b29b      	uxth	r3, r3
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	2b0f      	cmp	r3, #15
 8007276:	d909      	bls.n	800728c <UART_SetConfig+0x500>
 8007278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	025b      	lsls	r3, r3, #9
 800727e:	429a      	cmp	r2, r3
 8007280:	d204      	bcs.n	800728c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e005      	b.n	8007298 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	231a      	movs	r3, #26
 800728e:	2218      	movs	r2, #24
 8007290:	189b      	adds	r3, r3, r2
 8007292:	19db      	adds	r3, r3, r7
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2200      	movs	r2, #0
 800729c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2200      	movs	r2, #0
 80072a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072a4:	231a      	movs	r3, #26
 80072a6:	2218      	movs	r2, #24
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	19db      	adds	r3, r3, r7
 80072ac:	781b      	ldrb	r3, [r3, #0]
}
 80072ae:	0018      	movs	r0, r3
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b00e      	add	sp, #56	; 0x38
 80072b4:	bdb0      	pop	{r4, r5, r7, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	0800cd00 	.word	0x0800cd00
 80072bc:	40021000 	.word	0x40021000
 80072c0:	003d0900 	.word	0x003d0900
 80072c4:	00f42400 	.word	0x00f42400
 80072c8:	0800cd24 	.word	0x0800cd24

080072cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2201      	movs	r2, #1
 80072da:	4013      	ands	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a4a      	ldr	r2, [pc, #296]	; (8007410 <UART_AdvFeatureConfig+0x144>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	0019      	movs	r1, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2202      	movs	r2, #2
 80072fc:	4013      	ands	r3, r2
 80072fe:	d00b      	beq.n	8007318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4a43      	ldr	r2, [pc, #268]	; (8007414 <UART_AdvFeatureConfig+0x148>)
 8007308:	4013      	ands	r3, r2
 800730a:	0019      	movs	r1, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2204      	movs	r2, #4
 800731e:	4013      	ands	r3, r2
 8007320:	d00b      	beq.n	800733a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a3b      	ldr	r2, [pc, #236]	; (8007418 <UART_AdvFeatureConfig+0x14c>)
 800732a:	4013      	ands	r3, r2
 800732c:	0019      	movs	r1, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2208      	movs	r2, #8
 8007340:	4013      	ands	r3, r2
 8007342:	d00b      	beq.n	800735c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	4a34      	ldr	r2, [pc, #208]	; (800741c <UART_AdvFeatureConfig+0x150>)
 800734c:	4013      	ands	r3, r2
 800734e:	0019      	movs	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2210      	movs	r2, #16
 8007362:	4013      	ands	r3, r2
 8007364:	d00b      	beq.n	800737e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <UART_AdvFeatureConfig+0x154>)
 800736e:	4013      	ands	r3, r2
 8007370:	0019      	movs	r1, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2220      	movs	r2, #32
 8007384:	4013      	ands	r3, r2
 8007386:	d00b      	beq.n	80073a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <UART_AdvFeatureConfig+0x158>)
 8007390:	4013      	ands	r3, r2
 8007392:	0019      	movs	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2240      	movs	r2, #64	; 0x40
 80073a6:	4013      	ands	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <UART_AdvFeatureConfig+0x15c>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	0019      	movs	r1, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c6:	2380      	movs	r3, #128	; 0x80
 80073c8:	035b      	lsls	r3, r3, #13
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d10b      	bne.n	80073e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	4a15      	ldr	r2, [pc, #84]	; (800742c <UART_AdvFeatureConfig+0x160>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	0019      	movs	r1, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2280      	movs	r2, #128	; 0x80
 80073ec:	4013      	ands	r3, r2
 80073ee:	d00b      	beq.n	8007408 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	4a0e      	ldr	r2, [pc, #56]	; (8007430 <UART_AdvFeatureConfig+0x164>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	0019      	movs	r1, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	b002      	add	sp, #8
 800740e:	bd80      	pop	{r7, pc}
 8007410:	fffdffff 	.word	0xfffdffff
 8007414:	fffeffff 	.word	0xfffeffff
 8007418:	fffbffff 	.word	0xfffbffff
 800741c:	ffff7fff 	.word	0xffff7fff
 8007420:	ffffefff 	.word	0xffffefff
 8007424:	ffffdfff 	.word	0xffffdfff
 8007428:	ffefffff 	.word	0xffefffff
 800742c:	ff9fffff 	.word	0xff9fffff
 8007430:	fff7ffff 	.word	0xfff7ffff

08007434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af02      	add	r7, sp, #8
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	2100      	movs	r1, #0
 8007442:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007444:	f7fc faaa 	bl	800399c <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2208      	movs	r2, #8
 8007454:	4013      	ands	r3, r2
 8007456:	2b08      	cmp	r3, #8
 8007458:	d10c      	bne.n	8007474 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	0391      	lsls	r1, r2, #14
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4a17      	ldr	r2, [pc, #92]	; (80074c0 <UART_CheckIdleState+0x8c>)
 8007464:	9200      	str	r2, [sp, #0]
 8007466:	2200      	movs	r2, #0
 8007468:	f000 f82c 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 800746c:	1e03      	subs	r3, r0, #0
 800746e:	d001      	beq.n	8007474 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e021      	b.n	80074b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2204      	movs	r2, #4
 800747c:	4013      	ands	r3, r2
 800747e:	2b04      	cmp	r3, #4
 8007480:	d10c      	bne.n	800749c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2280      	movs	r2, #128	; 0x80
 8007486:	03d1      	lsls	r1, r2, #15
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <UART_CheckIdleState+0x8c>)
 800748c:	9200      	str	r2, [sp, #0]
 800748e:	2200      	movs	r2, #0
 8007490:	f000 f818 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007494:	1e03      	subs	r3, r0, #0
 8007496:	d001      	beq.n	800749c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e00d      	b.n	80074b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2274      	movs	r2, #116	; 0x74
 80074b2:	2100      	movs	r1, #0
 80074b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	0018      	movs	r0, r3
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b004      	add	sp, #16
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	01ffffff 	.word	0x01ffffff

080074c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b094      	sub	sp, #80	; 0x50
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	1dfb      	adds	r3, r7, #7
 80074d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	e0a3      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074d8:	3301      	adds	r3, #1
 80074da:	d100      	bne.n	80074de <UART_WaitOnFlagUntilTimeout+0x1a>
 80074dc:	e09f      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074de:	f7fc fa5d 	bl	800399c <HAL_GetTick>
 80074e2:	0002      	movs	r2, r0
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d13d      	bne.n	8007570 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f4:	f3ef 8310 	mrs	r3, PRIMASK
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fc:	647b      	str	r3, [r7, #68]	; 0x44
 80074fe:	2301      	movs	r3, #1
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	f383 8810 	msr	PRIMASK, r3
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	494c      	ldr	r1, [pc, #304]	; (8007648 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007516:	400a      	ands	r2, r1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	f383 8810 	msr	PRIMASK, r3
}
 8007524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007526:	f3ef 8310 	mrs	r3, PRIMASK
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	643b      	str	r3, [r7, #64]	; 0x40
 8007530:	2301      	movs	r3, #1
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2101      	movs	r1, #1
 8007548:	438a      	bics	r2, r1
 800754a:	609a      	str	r2, [r3, #8]
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	f383 8810 	msr	PRIMASK, r3
}
 8007556:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2274      	movs	r2, #116	; 0x74
 8007568:	2100      	movs	r1, #0
 800756a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e067      	b.n	8007640 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2204      	movs	r2, #4
 8007578:	4013      	ands	r3, r2
 800757a:	d050      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69da      	ldr	r2, [r3, #28]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	401a      	ands	r2, r3
 8007588:	2380      	movs	r3, #128	; 0x80
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	429a      	cmp	r2, r3
 800758e:	d146      	bne.n	800761e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2280      	movs	r2, #128	; 0x80
 8007596:	0112      	lsls	r2, r2, #4
 8007598:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759a:	f3ef 8310 	mrs	r3, PRIMASK
 800759e:	613b      	str	r3, [r7, #16]
  return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f383 8810 	msr	PRIMASK, r3
}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4923      	ldr	r1, [pc, #140]	; (8007648 <UART_WaitOnFlagUntilTimeout+0x184>)
 80075bc:	400a      	ands	r2, r1
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f383 8810 	msr	PRIMASK, r3
}
 80075ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80075d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075d6:	2301      	movs	r3, #1
 80075d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f383 8810 	msr	PRIMASK, r3
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2101      	movs	r1, #1
 80075ee:	438a      	bics	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	f383 8810 	msr	PRIMASK, r3
}
 80075fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2280      	movs	r2, #128	; 0x80
 800760e:	2120      	movs	r1, #32
 8007610:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2274      	movs	r2, #116	; 0x74
 8007616:	2100      	movs	r1, #0
 8007618:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e010      	b.n	8007640 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	425a      	negs	r2, r3
 800762e:	4153      	adcs	r3, r2
 8007630:	b2db      	uxtb	r3, r3
 8007632:	001a      	movs	r2, r3
 8007634:	1dfb      	adds	r3, r7, #7
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d100      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0x17a>
 800763c:	e74b      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b014      	add	sp, #80	; 0x50
 8007646:	bd80      	pop	{r7, pc}
 8007648:	fffffe5f 	.word	0xfffffe5f

0800764c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08c      	sub	sp, #48	; 0x30
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	1dbb      	adds	r3, r7, #6
 8007658:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1dba      	adds	r2, r7, #6
 8007664:	2158      	movs	r1, #88	; 0x58
 8007666:	8812      	ldrh	r2, [r2, #0]
 8007668:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1dba      	adds	r2, r7, #6
 800766e:	215a      	movs	r1, #90	; 0x5a
 8007670:	8812      	ldrh	r2, [r2, #0]
 8007672:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	015b      	lsls	r3, r3, #5
 8007682:	429a      	cmp	r2, r3
 8007684:	d10d      	bne.n	80076a2 <UART_Start_Receive_IT+0x56>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d104      	bne.n	8007698 <UART_Start_Receive_IT+0x4c>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	225c      	movs	r2, #92	; 0x5c
 8007692:	4943      	ldr	r1, [pc, #268]	; (80077a0 <UART_Start_Receive_IT+0x154>)
 8007694:	5299      	strh	r1, [r3, r2]
 8007696:	e02e      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	225c      	movs	r2, #92	; 0x5c
 800769c:	21ff      	movs	r1, #255	; 0xff
 800769e:	5299      	strh	r1, [r3, r2]
 80076a0:	e029      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <UART_Start_Receive_IT+0x7a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <UART_Start_Receive_IT+0x70>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	225c      	movs	r2, #92	; 0x5c
 80076b6:	21ff      	movs	r1, #255	; 0xff
 80076b8:	5299      	strh	r1, [r3, r2]
 80076ba:	e01c      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	225c      	movs	r2, #92	; 0x5c
 80076c0:	217f      	movs	r1, #127	; 0x7f
 80076c2:	5299      	strh	r1, [r3, r2]
 80076c4:	e017      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	055b      	lsls	r3, r3, #21
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d10d      	bne.n	80076ee <UART_Start_Receive_IT+0xa2>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <UART_Start_Receive_IT+0x98>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	225c      	movs	r2, #92	; 0x5c
 80076de:	217f      	movs	r1, #127	; 0x7f
 80076e0:	5299      	strh	r1, [r3, r2]
 80076e2:	e008      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	225c      	movs	r2, #92	; 0x5c
 80076e8:	213f      	movs	r1, #63	; 0x3f
 80076ea:	5299      	strh	r1, [r3, r2]
 80076ec:	e003      	b.n	80076f6 <UART_Start_Receive_IT+0xaa>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	225c      	movs	r2, #92	; 0x5c
 80076f2:	2100      	movs	r1, #0
 80076f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	2100      	movs	r1, #0
 80076fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2222      	movs	r2, #34	; 0x22
 8007702:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	61fb      	str	r3, [r7, #28]
  return(result);
 800770a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770e:	2301      	movs	r3, #1
 8007710:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2101      	movs	r1, #1
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	f383 8810 	msr	PRIMASK, r3
}
 8007734:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	015b      	lsls	r3, r3, #5
 800773e:	429a      	cmp	r2, r3
 8007740:	d107      	bne.n	8007752 <UART_Start_Receive_IT+0x106>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <UART_Start_Receive_IT+0x158>)
 800774e:	665a      	str	r2, [r3, #100]	; 0x64
 8007750:	e002      	b.n	8007758 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <UART_Start_Receive_IT+0x15c>)
 8007756:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2274      	movs	r2, #116	; 0x74
 800775c:	2100      	movs	r1, #0
 800775e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007760:	f3ef 8310 	mrs	r3, PRIMASK
 8007764:	613b      	str	r3, [r7, #16]
  return(result);
 8007766:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007768:	62bb      	str	r3, [r7, #40]	; 0x28
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f383 8810 	msr	PRIMASK, r3
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2190      	movs	r1, #144	; 0x90
 8007782:	0049      	lsls	r1, r1, #1
 8007784:	430a      	orrs	r2, r1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	f383 8810 	msr	PRIMASK, r3
}
 8007792:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	0018      	movs	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	b00c      	add	sp, #48	; 0x30
 800779c:	bd80      	pop	{r7, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	000001ff 	.word	0x000001ff
 80077a4:	08007c41 	.word	0x08007c41
 80077a8:	08007ad9 	.word	0x08007ad9

080077ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	; 0x38
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b4:	f3ef 8310 	mrs	r3, PRIMASK
 80077b8:	617b      	str	r3, [r7, #20]
  return(result);
 80077ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	2301      	movs	r3, #1
 80077c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f383 8810 	msr	PRIMASK, r3
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4925      	ldr	r1, [pc, #148]	; (800786c <UART_EndRxTransfer+0xc0>)
 80077d6:	400a      	ands	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e6:	f3ef 8310 	mrs	r3, PRIMASK
 80077ea:	623b      	str	r3, [r7, #32]
  return(result);
 80077ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	633b      	str	r3, [r7, #48]	; 0x30
 80077f0:	2301      	movs	r3, #1
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2101      	movs	r1, #1
 8007808:	438a      	bics	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	f383 8810 	msr	PRIMASK, r3
}
 8007816:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781c:	2b01      	cmp	r3, #1
 800781e:	d118      	bne.n	8007852 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007820:	f3ef 8310 	mrs	r3, PRIMASK
 8007824:	60bb      	str	r3, [r7, #8]
  return(result);
 8007826:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782a:	2301      	movs	r3, #1
 800782c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f383 8810 	msr	PRIMASK, r3
}
 8007834:	46c0      	nop			; (mov r8, r8)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2110      	movs	r1, #16
 8007842:	438a      	bics	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b00e      	add	sp, #56	; 0x38
 800786a:	bd80      	pop	{r7, pc}
 800786c:	fffffedf 	.word	0xfffffedf

08007870 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	225a      	movs	r2, #90	; 0x5a
 8007882:	2100      	movs	r1, #0
 8007884:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2252      	movs	r2, #82	; 0x52
 800788a:	2100      	movs	r1, #0
 800788c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	0018      	movs	r0, r3
 8007892:	f7ff fa57 	bl	8006d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	b004      	add	sp, #16
 800789c:	bd80      	pop	{r7, pc}

0800789e <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2252      	movs	r2, #82	; 0x52
 80078b0:	2100      	movs	r1, #0
 80078b2:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	0018      	movs	r0, r3
 80078be:	f7ff fa49 	bl	8006d54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b004      	add	sp, #16
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	225a      	movs	r2, #90	; 0x5a
 80078dc:	2100      	movs	r1, #0
 80078de:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	220f      	movs	r2, #15
 80078e6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2108      	movs	r1, #8
 80078f4:	430a      	orrs	r2, r1
 80078f6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	0018      	movs	r0, r3
 8007908:	f7ff fa2c 	bl	8006d64 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b004      	add	sp, #16
 8007912:	bd80      	pop	{r7, pc}

08007914 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007920:	2b21      	cmp	r3, #33	; 0x21
 8007922:	d14c      	bne.n	80079be <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2252      	movs	r2, #82	; 0x52
 8007928:	5a9b      	ldrh	r3, [r3, r2]
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d132      	bne.n	8007996 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007930:	f3ef 8310 	mrs	r3, PRIMASK
 8007934:	60bb      	str	r3, [r7, #8]
  return(result);
 8007936:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	2301      	movs	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	438a      	bics	r2, r1
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f383 8810 	msr	PRIMASK, r3
}
 8007960:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007962:	f3ef 8310 	mrs	r3, PRIMASK
 8007966:	617b      	str	r3, [r7, #20]
  return(result);
 8007968:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	2301      	movs	r3, #1
 800796e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f383 8810 	msr	PRIMASK, r3
}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2140      	movs	r1, #64	; 0x40
 8007984:	430a      	orrs	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f383 8810 	msr	PRIMASK, r3
}
 8007992:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007994:	e013      	b.n	80079be <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2252      	movs	r2, #82	; 0x52
 80079b0:	5a9b      	ldrh	r3, [r3, r2]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b299      	uxth	r1, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2252      	movs	r2, #82	; 0x52
 80079bc:	5299      	strh	r1, [r3, r2]
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b00a      	add	sp, #40	; 0x28
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b08c      	sub	sp, #48	; 0x30
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d2:	2b21      	cmp	r3, #33	; 0x21
 80079d4:	d151      	bne.n	8007a7a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2252      	movs	r2, #82	; 0x52
 80079da:	5a9b      	ldrh	r3, [r3, r2]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d132      	bne.n	8007a48 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e2:	f3ef 8310 	mrs	r3, PRIMASK
 80079e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80079e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ec:	2301      	movs	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	438a      	bics	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a14:	f3ef 8310 	mrs	r3, PRIMASK
 8007a18:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a1a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1e:	2301      	movs	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	f383 8810 	msr	PRIMASK, r3
}
 8007a28:	46c0      	nop			; (mov r8, r8)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2140      	movs	r1, #64	; 0x40
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	f383 8810 	msr	PRIMASK, r3
}
 8007a44:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a46:	e018      	b.n	8007a7a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	001a      	movs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	05d2      	lsls	r2, r2, #23
 8007a5a:	0dd2      	lsrs	r2, r2, #23
 8007a5c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2252      	movs	r2, #82	; 0x52
 8007a6c:	5a9b      	ldrh	r3, [r3, r2]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b299      	uxth	r1, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2252      	movs	r2, #82	; 0x52
 8007a78:	5299      	strh	r1, [r3, r2]
}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b00c      	add	sp, #48	; 0x30
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	2301      	movs	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f383 8810 	msr	PRIMASK, r3
}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2140      	movs	r1, #64	; 0x40
 8007aac:	438a      	bics	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f383 8810 	msr	PRIMASK, r3
}
 8007aba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	0018      	movs	r0, r3
 8007acc:	f7ff f932 	bl	8006d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad0:	46c0      	nop			; (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b006      	add	sp, #24
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b090      	sub	sp, #64	; 0x40
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ae0:	203e      	movs	r0, #62	; 0x3e
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	215c      	movs	r1, #92	; 0x5c
 8007ae8:	5a52      	ldrh	r2, [r2, r1]
 8007aea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af0:	2b22      	cmp	r3, #34	; 0x22
 8007af2:	d000      	beq.n	8007af6 <UART_RxISR_8BIT+0x1e>
 8007af4:	e095      	b.n	8007c22 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007afc:	213c      	movs	r1, #60	; 0x3c
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	183b      	adds	r3, r7, r0
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b2d9      	uxtb	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b12:	400a      	ands	r2, r1
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	225a      	movs	r2, #90	; 0x5a
 8007b26:	5a9b      	ldrh	r3, [r3, r2]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b299      	uxth	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	225a      	movs	r2, #90	; 0x5a
 8007b32:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	225a      	movs	r2, #90	; 0x5a
 8007b38:	5a9b      	ldrh	r3, [r3, r2]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d178      	bne.n	8007c32 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b40:	f3ef 8310 	mrs	r3, PRIMASK
 8007b44:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b46:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f383 8810 	msr	PRIMASK, r3
}
 8007b54:	46c0      	nop			; (mov r8, r8)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4936      	ldr	r1, [pc, #216]	; (8007c3c <UART_RxISR_8BIT+0x164>)
 8007b62:	400a      	ands	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	f383 8810 	msr	PRIMASK, r3
}
 8007b70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b72:	f3ef 8310 	mrs	r3, PRIMASK
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2101      	movs	r1, #1
 8007b94:	438a      	bics	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ba2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d12f      	bne.n	8007c18 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bc4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8007bc8:	2301      	movs	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f383 8810 	msr	PRIMASK, r3
}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2110      	movs	r1, #16
 8007be0:	438a      	bics	r2, r1
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f383 8810 	msr	PRIMASK, r3
}
 8007bee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d103      	bne.n	8007c06 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2258      	movs	r2, #88	; 0x58
 8007c0a:	5a9a      	ldrh	r2, [r3, r2]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	0011      	movs	r1, r2
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7ff f8af 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c16:	e00c      	b.n	8007c32 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7fb faf2 	bl	8003204 <HAL_UART_RxCpltCallback>
}
 8007c20:	e007      	b.n	8007c32 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2108      	movs	r1, #8
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	619a      	str	r2, [r3, #24]
}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	46bd      	mov	sp, r7
 8007c36:	b010      	add	sp, #64	; 0x40
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	fffffedf 	.word	0xfffffedf

08007c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b090      	sub	sp, #64	; 0x40
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c48:	203e      	movs	r0, #62	; 0x3e
 8007c4a:	183b      	adds	r3, r7, r0
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	215c      	movs	r1, #92	; 0x5c
 8007c50:	5a52      	ldrh	r2, [r2, r1]
 8007c52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c58:	2b22      	cmp	r3, #34	; 0x22
 8007c5a:	d000      	beq.n	8007c5e <UART_RxISR_16BIT+0x1e>
 8007c5c:	e095      	b.n	8007d8a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c64:	213c      	movs	r1, #60	; 0x3c
 8007c66:	187b      	adds	r3, r7, r1
 8007c68:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	183a      	adds	r2, r7, r0
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	8812      	ldrh	r2, [r2, #0]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c84:	1c9a      	adds	r2, r3, #2
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	225a      	movs	r2, #90	; 0x5a
 8007c8e:	5a9b      	ldrh	r3, [r3, r2]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b299      	uxth	r1, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	225a      	movs	r2, #90	; 0x5a
 8007c9a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	225a      	movs	r2, #90	; 0x5a
 8007ca0:	5a9b      	ldrh	r3, [r3, r2]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d178      	bne.n	8007d9a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cac:	617b      	str	r3, [r7, #20]
  return(result);
 8007cae:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f383 8810 	msr	PRIMASK, r3
}
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4936      	ldr	r1, [pc, #216]	; (8007da4 <UART_RxISR_16BIT+0x164>)
 8007cca:	400a      	ands	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f383 8810 	msr	PRIMASK, r3
}
 8007cd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cda:	f3ef 8310 	mrs	r3, PRIMASK
 8007cde:	623b      	str	r3, [r7, #32]
  return(result);
 8007ce0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	f383 8810 	msr	PRIMASK, r3
}
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	438a      	bics	r2, r1
 8007cfe:	609a      	str	r2, [r3, #8]
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	f383 8810 	msr	PRIMASK, r3
}
 8007d0a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d12f      	bne.n	8007d80 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d26:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d2c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d30:	2301      	movs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f383 8810 	msr	PRIMASK, r3
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2110      	movs	r1, #16
 8007d48:	438a      	bics	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f383 8810 	msr	PRIMASK, r3
}
 8007d56:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d103      	bne.n	8007d6e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2258      	movs	r2, #88	; 0x58
 8007d72:	5a9a      	ldrh	r2, [r3, r2]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7fe fffb 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d7e:	e00c      	b.n	8007d9a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7fb fa3e 	bl	8003204 <HAL_UART_RxCpltCallback>
}
 8007d88:	e007      	b.n	8007d9a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2108      	movs	r1, #8
 8007d96:	430a      	orrs	r2, r1
 8007d98:	619a      	str	r2, [r3, #24]
}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b010      	add	sp, #64	; 0x40
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	fffffedf 	.word	0xfffffedf

08007da8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007db0:	46c0      	nop			; (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <eMBRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	0008      	movs	r0, r1
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	1cbb      	adds	r3, r7, #2
 8007dc6:	1c02      	adds	r2, r0, #0
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	003b      	movs	r3, r7
 8007dcc:	1c0a      	adds	r2, r1, #0
 8007dce:	801a      	strh	r2, [r3, #0]
#if S_REG_INPUT_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8007dd0:	2317      	movs	r3, #23
 8007dd2:	18fb      	adds	r3, r7, r3
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8007dd8:	4b30      	ldr	r3, [pc, #192]	; (8007e9c <eMBRegInputCB+0xe4>)
 8007dda:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8007ddc:	210e      	movs	r1, #14
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	801a      	strh	r2, [r3, #0]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8007de4:	200c      	movs	r0, #12
 8007de6:	183b      	adds	r3, r7, r0
 8007de8:	2264      	movs	r2, #100	; 0x64
 8007dea:	801a      	strh	r2, [r3, #0]
    usRegInStart = usSRegInStart;
 8007dec:	240a      	movs	r4, #10
 8007dee:	193b      	adds	r3, r7, r4
 8007df0:	4a2b      	ldr	r2, [pc, #172]	; (8007ea0 <eMBRegInputCB+0xe8>)
 8007df2:	8812      	ldrh	r2, [r2, #0]
 8007df4:	801a      	strh	r2, [r3, #0]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007df6:	1cbb      	adds	r3, r7, #2
 8007df8:	881a      	ldrh	r2, [r3, #0]
 8007dfa:	1cbb      	adds	r3, r7, #2
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	801a      	strh	r2, [r3, #0]

    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8007e00:	1cba      	adds	r2, r7, #2
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	8812      	ldrh	r2, [r2, #0]
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d33c      	bcc.n	8007e86 <eMBRegInputCB+0xce>
 8007e0c:	1cbb      	adds	r3, r7, #2
 8007e0e:	881a      	ldrh	r2, [r3, #0]
 8007e10:	003b      	movs	r3, r7
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	18d2      	adds	r2, r2, r3
 8007e16:	187b      	adds	r3, r7, r1
 8007e18:	8819      	ldrh	r1, [r3, #0]
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	18cb      	adds	r3, r1, r3
 8007e20:	429a      	cmp	r2, r3
 8007e22:	dc30      	bgt.n	8007e86 <eMBRegInputCB+0xce>
    {
        iRegIndex = usAddress - usRegInStart;
 8007e24:	2314      	movs	r3, #20
 8007e26:	18fb      	adds	r3, r7, r3
 8007e28:	1cb9      	adds	r1, r7, #2
 8007e2a:	193a      	adds	r2, r7, r4
 8007e2c:	8809      	ldrh	r1, [r1, #0]
 8007e2e:	8812      	ldrh	r2, [r2, #0]
 8007e30:	1a8a      	subs	r2, r1, r2
 8007e32:	801a      	strh	r2, [r3, #0]
        while (usNRegs > 0)
 8007e34:	e022      	b.n	8007e7c <eMBRegInputCB+0xc4>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 8007e36:	2014      	movs	r0, #20
 8007e38:	183b      	adds	r3, r7, r0
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	18d3      	adds	r3, r2, r3
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	b299      	uxth	r1, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	b2ca      	uxtb	r2, r1
 8007e50:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 8007e52:	183b      	adds	r3, r7, r0
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	8819      	ldrh	r1, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	b2ca      	uxtb	r2, r1
 8007e66:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8007e68:	183b      	adds	r3, r7, r0
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	183b      	adds	r3, r7, r0
 8007e6e:	3201      	adds	r2, #1
 8007e70:	801a      	strh	r2, [r3, #0]
            usNRegs--;
 8007e72:	003b      	movs	r3, r7
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	003b      	movs	r3, r7
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	801a      	strh	r2, [r3, #0]
        while (usNRegs > 0)
 8007e7c:	003b      	movs	r3, r7
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1d8      	bne.n	8007e36 <eMBRegInputCB+0x7e>
    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8007e84:	e003      	b.n	8007e8e <eMBRegInputCB+0xd6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8007e86:	2317      	movs	r3, #23
 8007e88:	18fb      	adds	r3, r7, r3
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 8007e8e:	2317      	movs	r3, #23
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	781b      	ldrb	r3, [r3, #0]
#else
	return MB_ENOREG;
#endif
}
 8007e94:	0018      	movs	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b007      	add	sp, #28
 8007e9a:	bd90      	pop	{r4, r7, pc}
 8007e9c:	2000048c 	.word	0x2000048c
 8007ea0:	20000488 	.word	0x20000488

08007ea4 <eMBRegHoldingCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8007ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	000c      	movs	r4, r1
 8007eae:	0010      	movs	r0, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	250a      	movs	r5, #10
 8007eb4:	197b      	adds	r3, r7, r5
 8007eb6:	1c22      	adds	r2, r4, #0
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	2408      	movs	r4, #8
 8007ebc:	193b      	adds	r3, r7, r4
 8007ebe:	1c02      	adds	r2, r0, #0
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	1dfb      	adds	r3, r7, #7
 8007ec4:	1c0a      	adds	r2, r1, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
#if S_REG_HOLDING_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8007ec8:	231f      	movs	r3, #31
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 8007ed0:	4b50      	ldr	r3, [pc, #320]	; (8008014 <eMBRegHoldingCB+0x170>)
 8007ed2:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8007ed4:	2116      	movs	r1, #22
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	2200      	movs	r2, #0
 8007eda:	801a      	strh	r2, [r3, #0]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8007edc:	2614      	movs	r6, #20
 8007ede:	19bb      	adds	r3, r7, r6
 8007ee0:	2264      	movs	r2, #100	; 0x64
 8007ee2:	801a      	strh	r2, [r3, #0]
    usRegHoldStart = usSRegHoldStart;
 8007ee4:	2312      	movs	r3, #18
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	4a4b      	ldr	r2, [pc, #300]	; (8008018 <eMBRegHoldingCB+0x174>)
 8007eea:	8812      	ldrh	r2, [r2, #0]
 8007eec:	801a      	strh	r2, [r3, #0]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007eee:	0028      	movs	r0, r5
 8007ef0:	183b      	adds	r3, r7, r0
 8007ef2:	881a      	ldrh	r2, [r3, #0]
 8007ef4:	183b      	adds	r3, r7, r0
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	801a      	strh	r2, [r3, #0]

    if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8007efa:	183a      	adds	r2, r7, r0
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	8812      	ldrh	r2, [r2, #0]
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d200      	bcs.n	8007f08 <eMBRegHoldingCB+0x64>
 8007f06:	e079      	b.n	8007ffc <eMBRegHoldingCB+0x158>
 8007f08:	183b      	adds	r3, r7, r0
 8007f0a:	881a      	ldrh	r2, [r3, #0]
 8007f0c:	193b      	adds	r3, r7, r4
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	18d2      	adds	r2, r2, r3
 8007f12:	187b      	adds	r3, r7, r1
 8007f14:	8819      	ldrh	r1, [r3, #0]
 8007f16:	19bb      	adds	r3, r7, r6
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	18cb      	adds	r3, r1, r3
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	dd00      	ble.n	8007f22 <eMBRegHoldingCB+0x7e>
 8007f20:	e06c      	b.n	8007ffc <eMBRegHoldingCB+0x158>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8007f22:	211c      	movs	r1, #28
 8007f24:	187b      	adds	r3, r7, r1
 8007f26:	1839      	adds	r1, r7, r0
 8007f28:	2212      	movs	r2, #18
 8007f2a:	18ba      	adds	r2, r7, r2
 8007f2c:	8809      	ldrh	r1, [r1, #0]
 8007f2e:	8812      	ldrh	r2, [r2, #0]
 8007f30:	1a8a      	subs	r2, r1, r2
 8007f32:	801a      	strh	r2, [r3, #0]
        switch (eMode)
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d026      	beq.n	8007f8a <eMBRegHoldingCB+0xe6>
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d056      	beq.n	8007fee <eMBRegHoldingCB+0x14a>
 8007f40:	e060      	b.n	8008004 <eMBRegHoldingCB+0x160>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8007f42:	201c      	movs	r0, #28
 8007f44:	183b      	adds	r3, r7, r0
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	18d3      	adds	r3, r2, r3
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	b299      	uxth	r1, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	60fa      	str	r2, [r7, #12]
 8007f5a:	b2ca      	uxtb	r2, r1
 8007f5c:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8007f5e:	183b      	adds	r3, r7, r0
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	18d3      	adds	r3, r2, r3
 8007f68:	8819      	ldrh	r1, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	60fa      	str	r2, [r7, #12]
 8007f70:	b2ca      	uxtb	r2, r1
 8007f72:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8007f74:	183b      	adds	r3, r7, r0
 8007f76:	881a      	ldrh	r2, [r3, #0]
 8007f78:	183b      	adds	r3, r7, r0
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	801a      	strh	r2, [r3, #0]
                usNRegs--;
 8007f7e:	2108      	movs	r1, #8
 8007f80:	187b      	adds	r3, r7, r1
 8007f82:	881a      	ldrh	r2, [r3, #0]
 8007f84:	187b      	adds	r3, r7, r1
 8007f86:	3a01      	subs	r2, #1
 8007f88:	801a      	strh	r2, [r3, #0]
            while (usNRegs > 0)
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1d6      	bne.n	8007f42 <eMBRegHoldingCB+0x9e>
            }
            break;
 8007f94:	e031      	b.n	8007ffa <eMBRegHoldingCB+0x156>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	60fa      	str	r2, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	241c      	movs	r4, #28
 8007fa2:	193b      	adds	r3, r7, r4
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	18cb      	adds	r3, r1, r3
 8007fac:	0212      	lsls	r2, r2, #8
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	60fa      	str	r2, [r7, #12]
 8007fb8:	7818      	ldrb	r0, [r3, #0]
 8007fba:	193b      	adds	r3, r7, r4
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	8819      	ldrh	r1, [r3, #0]
 8007fc6:	b282      	uxth	r2, r0
 8007fc8:	193b      	adds	r3, r7, r4
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	69b8      	ldr	r0, [r7, #24]
 8007fd0:	18c3      	adds	r3, r0, r3
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	b292      	uxth	r2, r2
 8007fd6:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8007fd8:	193b      	adds	r3, r7, r4
 8007fda:	881a      	ldrh	r2, [r3, #0]
 8007fdc:	193b      	adds	r3, r7, r4
 8007fde:	3201      	adds	r2, #1
 8007fe0:	801a      	strh	r2, [r3, #0]
                usNRegs--;
 8007fe2:	2108      	movs	r1, #8
 8007fe4:	187b      	adds	r3, r7, r1
 8007fe6:	881a      	ldrh	r2, [r3, #0]
 8007fe8:	187b      	adds	r3, r7, r1
 8007fea:	3a01      	subs	r2, #1
 8007fec:	801a      	strh	r2, [r3, #0]
            while (usNRegs > 0)
 8007fee:	2308      	movs	r3, #8
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1ce      	bne.n	8007f96 <eMBRegHoldingCB+0xf2>
            }
            break;
 8007ff8:	46c0      	nop			; (mov r8, r8)
        switch (eMode)
 8007ffa:	e003      	b.n	8008004 <eMBRegHoldingCB+0x160>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8007ffc:	231f      	movs	r3, #31
 8007ffe:	18fb      	adds	r3, r7, r3
 8008000:	2201      	movs	r2, #1
 8008002:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8008004:	231f      	movs	r3, #31
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	781b      	ldrb	r3, [r3, #0]
#else
	return MB_ENOREG;
#endif
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b009      	add	sp, #36	; 0x24
 8008010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	20000558 	.word	0x20000558
 8008018:	20000554 	.word	0x20000554

0800801c <eMBRegCoilsCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 800801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	000c      	movs	r4, r1
 8008026:	0010      	movs	r0, r2
 8008028:	0019      	movs	r1, r3
 800802a:	250a      	movs	r5, #10
 800802c:	197b      	adds	r3, r7, r5
 800802e:	1c22      	adds	r2, r4, #0
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	2408      	movs	r4, #8
 8008034:	193b      	adds	r3, r7, r4
 8008036:	1c02      	adds	r2, r0, #0
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	1dfb      	adds	r3, r7, #7
 800803c:	1c0a      	adds	r2, r1, #0
 800803e:	701a      	strb	r2, [r3, #0]
#if S_COIL_NCOILS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8008040:	2327      	movs	r3, #39	; 0x27
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8008048:	0021      	movs	r1, r4
 800804a:	187b      	adds	r3, r7, r1
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	08db      	lsrs	r3, r3, #3
 8008050:	b29a      	uxth	r2, r3
 8008052:	2322      	movs	r3, #34	; 0x22
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	3201      	adds	r2, #1
 8008058:	801a      	strh	r2, [r3, #0]

    pucCoilBuf = ucSCoilBuf;
 800805a:	4b6b      	ldr	r3, [pc, #428]	; (8008208 <eMBRegCoilsCB+0x1ec>)
 800805c:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 800805e:	241a      	movs	r4, #26
 8008060:	193b      	adds	r3, r7, r4
 8008062:	2200      	movs	r2, #0
 8008064:	801a      	strh	r2, [r3, #0]
    COIL_NCOILS = S_COIL_NCOILS;
 8008066:	2318      	movs	r3, #24
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	2240      	movs	r2, #64	; 0x40
 800806c:	801a      	strh	r2, [r3, #0]
    usCoilStart = usSCoilStart;
 800806e:	2616      	movs	r6, #22
 8008070:	19bb      	adds	r3, r7, r6
 8008072:	4a66      	ldr	r2, [pc, #408]	; (800820c <eMBRegCoilsCB+0x1f0>)
 8008074:	8812      	ldrh	r2, [r2, #0]
 8008076:	801a      	strh	r2, [r3, #0]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008078:	0028      	movs	r0, r5
 800807a:	183b      	adds	r3, r7, r0
 800807c:	881a      	ldrh	r2, [r3, #0]
 800807e:	183b      	adds	r3, r7, r0
 8008080:	3a01      	subs	r2, #1
 8008082:	801a      	strh	r2, [r3, #0]

    if( ( usAddress >= COIL_START ) && ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8008084:	183a      	adds	r2, r7, r0
 8008086:	193b      	adds	r3, r7, r4
 8008088:	8812      	ldrh	r2, [r2, #0]
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d200      	bcs.n	8008092 <eMBRegCoilsCB+0x76>
 8008090:	e0af      	b.n	80081f2 <eMBRegCoilsCB+0x1d6>
 8008092:	183b      	adds	r3, r7, r0
 8008094:	881a      	ldrh	r2, [r3, #0]
 8008096:	187b      	adds	r3, r7, r1
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	18d2      	adds	r2, r2, r3
 800809c:	193b      	adds	r3, r7, r4
 800809e:	8819      	ldrh	r1, [r3, #0]
 80080a0:	2318      	movs	r3, #24
 80080a2:	18fb      	adds	r3, r7, r3
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	18cb      	adds	r3, r1, r3
 80080a8:	429a      	cmp	r2, r3
 80080aa:	dd00      	ble.n	80080ae <eMBRegCoilsCB+0x92>
 80080ac:	e0a1      	b.n	80081f2 <eMBRegCoilsCB+0x1d6>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 80080ae:	183a      	adds	r2, r7, r0
 80080b0:	19bb      	adds	r3, r7, r6
 80080b2:	8812      	ldrh	r2, [r2, #0]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	2324      	movs	r3, #36	; 0x24
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	08d2      	lsrs	r2, r2, #3
 80080c0:	801a      	strh	r2, [r3, #0]
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 80080c2:	183a      	adds	r2, r7, r0
 80080c4:	19bb      	adds	r3, r7, r6
 80080c6:	8812      	ldrh	r2, [r2, #0]
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	2314      	movs	r3, #20
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	2107      	movs	r1, #7
 80080d4:	400a      	ands	r2, r1
 80080d6:	801a      	strh	r2, [r3, #0]
        switch ( eMode )
 80080d8:	1dfb      	adds	r3, r7, #7
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01d      	beq.n	800811c <eMBRegCoilsCB+0x100>
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d05d      	beq.n	80081a0 <eMBRegCoilsCB+0x184>
 80080e4:	e089      	b.n	80081fa <eMBRegCoilsCB+0x1de>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 80080e6:	2224      	movs	r2, #36	; 0x24
 80080e8:	18bb      	adds	r3, r7, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	18ba      	adds	r2, r7, r2
 80080ee:	1c59      	adds	r1, r3, #1
 80080f0:	8011      	strh	r1, [r2, #0]
 80080f2:	001a      	movs	r2, r3
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	1898      	adds	r0, r3, r2
 80080f8:	68fc      	ldr	r4, [r7, #12]
 80080fa:	1c63      	adds	r3, r4, #1
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	2314      	movs	r3, #20
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	2208      	movs	r2, #8
 8008106:	0019      	movs	r1, r3
 8008108:	f000 fefe 	bl	8008f08 <xMBUtilGetBits>
 800810c:	0003      	movs	r3, r0
 800810e:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8008110:	2122      	movs	r1, #34	; 0x22
 8008112:	187b      	adds	r3, r7, r1
 8008114:	881a      	ldrh	r2, [r3, #0]
 8008116:	187b      	adds	r3, r7, r1
 8008118:	3a01      	subs	r2, #1
 800811a:	801a      	strh	r2, [r3, #0]
            while (iNReg > 0)
 800811c:	2322      	movs	r3, #34	; 0x22
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1df      	bne.n	80080e6 <eMBRegCoilsCB+0xca>
            }
            pucRegBuffer--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b01      	subs	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 800812c:	2008      	movs	r0, #8
 800812e:	183b      	adds	r3, r7, r0
 8008130:	183a      	adds	r2, r7, r0
 8008132:	8812      	ldrh	r2, [r2, #0]
 8008134:	2107      	movs	r1, #7
 8008136:	400a      	ands	r2, r1
 8008138:	801a      	strh	r2, [r3, #0]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	0019      	movs	r1, r3
 8008140:	183b      	adds	r3, r7, r0
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	2208      	movs	r2, #8
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	4099      	lsls	r1, r3
 800814a:	000b      	movs	r3, r1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	0019      	movs	r1, r3
 8008158:	183b      	adds	r3, r7, r0
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	2208      	movs	r2, #8
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	4119      	asrs	r1, r3
 8008162:	000b      	movs	r3, r1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	701a      	strb	r2, [r3, #0]
            break;
 800816a:	e041      	b.n	80081f0 <eMBRegCoilsCB+0x1d4>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800816c:	2224      	movs	r2, #36	; 0x24
 800816e:	18bb      	adds	r3, r7, r2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	18ba      	adds	r2, r7, r2
 8008174:	1c59      	adds	r1, r3, #1
 8008176:	8011      	strh	r1, [r2, #0]
 8008178:	001a      	movs	r2, r3
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	2314      	movs	r3, #20
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	8819      	ldrh	r1, [r3, #0]
 800818c:	0013      	movs	r3, r2
 800818e:	2208      	movs	r2, #8
 8008190:	f000 fe26 	bl	8008de0 <xMBUtilSetBits>
                iNReg--;
 8008194:	2122      	movs	r1, #34	; 0x22
 8008196:	187b      	adds	r3, r7, r1
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	187b      	adds	r3, r7, r1
 800819c:	3a01      	subs	r2, #1
 800819e:	801a      	strh	r2, [r3, #0]
            while (iNReg > 1)
 80081a0:	2322      	movs	r3, #34	; 0x22
 80081a2:	18fb      	adds	r3, r7, r3
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d8e0      	bhi.n	800816c <eMBRegCoilsCB+0x150>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 80081aa:	2408      	movs	r4, #8
 80081ac:	193b      	adds	r3, r7, r4
 80081ae:	193a      	adds	r2, r7, r4
 80081b0:	8812      	ldrh	r2, [r2, #0]
 80081b2:	2107      	movs	r1, #7
 80081b4:	400a      	ands	r2, r1
 80081b6:	801a      	strh	r2, [r3, #0]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 80081b8:	193b      	adds	r3, r7, r4
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d016      	beq.n	80081ee <eMBRegCoilsCB+0x1d2>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 80081c0:	2224      	movs	r2, #36	; 0x24
 80081c2:	18bb      	adds	r3, r7, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	18ba      	adds	r2, r7, r2
 80081c8:	1c59      	adds	r1, r3, #1
 80081ca:	8011      	strh	r1, [r2, #0]
 80081cc:	001a      	movs	r2, r3
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	1898      	adds	r0, r3, r2
 80081d2:	193b      	adds	r3, r7, r4
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	2314      	movs	r3, #20
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	8819      	ldrh	r1, [r3, #0]
 80081e6:	0013      	movs	r3, r2
 80081e8:	0022      	movs	r2, r4
 80081ea:	f000 fdf9 	bl	8008de0 <xMBUtilSetBits>
            }
            break;
 80081ee:	46c0      	nop			; (mov r8, r8)
        switch ( eMode )
 80081f0:	e003      	b.n	80081fa <eMBRegCoilsCB+0x1de>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80081f2:	2327      	movs	r3, #39	; 0x27
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80081fa:	2327      	movs	r3, #39	; 0x27
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	781b      	ldrb	r3, [r3, #0]
#else
	return MB_ENOREG;
#endif
}
 8008200:	0018      	movs	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	b00b      	add	sp, #44	; 0x2c
 8008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008208:	20000480 	.word	0x20000480
 800820c:	2000047e 	.word	0x2000047e

08008210 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b089      	sub	sp, #36	; 0x24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	0008      	movs	r0, r1
 800821a:	0011      	movs	r1, r2
 800821c:	1cbb      	adds	r3, r7, #2
 800821e:	1c02      	adds	r2, r0, #0
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	003b      	movs	r3, r7
 8008224:	1c0a      	adds	r2, r1, #0
 8008226:	801a      	strh	r2, [r3, #0]
#if S_DISCRETE_INPUT_NDISCRETES > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8008228:	231f      	movs	r3, #31
 800822a:	18fb      	adds	r3, r7, r3
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8008230:	003b      	movs	r3, r7
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	b29a      	uxth	r2, r3
 8008238:	231a      	movs	r3, #26
 800823a:	18fb      	adds	r3, r7, r3
 800823c:	3201      	adds	r2, #1
 800823e:	801a      	strh	r2, [r3, #0]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8008240:	4b44      	ldr	r3, [pc, #272]	; (8008354 <eMBRegDiscreteCB+0x144>)
 8008242:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8008244:	2112      	movs	r1, #18
 8008246:	187b      	adds	r3, r7, r1
 8008248:	2200      	movs	r2, #0
 800824a:	801a      	strh	r2, [r3, #0]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 800824c:	2410      	movs	r4, #16
 800824e:	193b      	adds	r3, r7, r4
 8008250:	2201      	movs	r2, #1
 8008252:	801a      	strh	r2, [r3, #0]
    usDiscreteInputStart = usSDiscInStart;
 8008254:	200e      	movs	r0, #14
 8008256:	183b      	adds	r3, r7, r0
 8008258:	4a3f      	ldr	r2, [pc, #252]	; (8008358 <eMBRegDiscreteCB+0x148>)
 800825a:	8812      	ldrh	r2, [r2, #0]
 800825c:	801a      	strh	r2, [r3, #0]

    /* it already plus one in modbus function method. */
    usAddress--;
 800825e:	1cbb      	adds	r3, r7, #2
 8008260:	881a      	ldrh	r2, [r3, #0]
 8008262:	1cbb      	adds	r3, r7, #2
 8008264:	3a01      	subs	r2, #1
 8008266:	801a      	strh	r2, [r3, #0]

    if ((usAddress >= DISCRETE_INPUT_START) && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8008268:	1cba      	adds	r2, r7, #2
 800826a:	187b      	adds	r3, r7, r1
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d363      	bcc.n	800833c <eMBRegDiscreteCB+0x12c>
 8008274:	1cbb      	adds	r3, r7, #2
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	003b      	movs	r3, r7
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	18d2      	adds	r2, r2, r3
 800827e:	187b      	adds	r3, r7, r1
 8008280:	8819      	ldrh	r1, [r3, #0]
 8008282:	193b      	adds	r3, r7, r4
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	18cb      	adds	r3, r1, r3
 8008288:	429a      	cmp	r2, r3
 800828a:	dc57      	bgt.n	800833c <eMBRegDiscreteCB+0x12c>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 800828c:	1cba      	adds	r2, r7, #2
 800828e:	183b      	adds	r3, r7, r0
 8008290:	8812      	ldrh	r2, [r2, #0]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	b29a      	uxth	r2, r3
 8008298:	231c      	movs	r3, #28
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	08d2      	lsrs	r2, r2, #3
 800829e:	801a      	strh	r2, [r3, #0]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80082a0:	1cba      	adds	r2, r7, #2
 80082a2:	183b      	adds	r3, r7, r0
 80082a4:	8812      	ldrh	r2, [r2, #0]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	230c      	movs	r3, #12
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	2107      	movs	r1, #7
 80082b2:	400a      	ands	r2, r1
 80082b4:	801a      	strh	r2, [r3, #0]

        while (iNReg > 0)
 80082b6:	e01a      	b.n	80082ee <eMBRegDiscreteCB+0xde>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80082b8:	221c      	movs	r2, #28
 80082ba:	18bb      	adds	r3, r7, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	18ba      	adds	r2, r7, r2
 80082c0:	1c59      	adds	r1, r3, #1
 80082c2:	8011      	strh	r1, [r2, #0]
 80082c4:	001a      	movs	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	1898      	adds	r0, r3, r2
 80082ca:	687c      	ldr	r4, [r7, #4]
 80082cc:	1c63      	adds	r3, r4, #1
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	230c      	movs	r3, #12
 80082d2:	18fb      	adds	r3, r7, r3
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	2208      	movs	r2, #8
 80082d8:	0019      	movs	r1, r3
 80082da:	f000 fe15 	bl	8008f08 <xMBUtilGetBits>
 80082de:	0003      	movs	r3, r0
 80082e0:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 80082e2:	211a      	movs	r1, #26
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	881a      	ldrh	r2, [r3, #0]
 80082e8:	187b      	adds	r3, r7, r1
 80082ea:	3a01      	subs	r2, #1
 80082ec:	801a      	strh	r2, [r3, #0]
        while (iNReg > 0)
 80082ee:	231a      	movs	r3, #26
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1df      	bne.n	80082b8 <eMBRegDiscreteCB+0xa8>
        }
        pucRegBuffer--;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 80082fe:	003b      	movs	r3, r7
 8008300:	003a      	movs	r2, r7
 8008302:	8812      	ldrh	r2, [r2, #0]
 8008304:	2107      	movs	r1, #7
 8008306:	400a      	ands	r2, r1
 8008308:	801a      	strh	r2, [r3, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	0019      	movs	r1, r3
 8008310:	003b      	movs	r3, r7
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	2208      	movs	r2, #8
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	4099      	lsls	r1, r3
 800831a:	000b      	movs	r3, r1
 800831c:	b2da      	uxtb	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	0019      	movs	r1, r3
 8008328:	003b      	movs	r3, r7
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	2208      	movs	r2, #8
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	4119      	asrs	r1, r3
 8008332:	000b      	movs	r3, r1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e003      	b.n	8008344 <eMBRegDiscreteCB+0x134>
    }
    else
    {
        eStatus = MB_ENOREG;
 800833c:	231f      	movs	r3, #31
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	2201      	movs	r2, #1
 8008342:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 8008344:	231f      	movs	r3, #31
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	781b      	ldrb	r3, [r3, #0]
#else
	return MB_ENOREG;
#endif
}
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b009      	add	sp, #36	; 0x24
 8008350:	bd90      	pop	{r4, r7, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	2000047c 	.word	0x2000047c
 8008358:	20000478 	.word	0x20000478

0800835c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800835c:	b5b0      	push	{r4, r5, r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8008366:	2316      	movs	r3, #22
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	2b05      	cmp	r3, #5
 8008374:	d000      	beq.n	8008378 <eMBFuncReadCoils+0x1c>
 8008376:	e091      	b.n	800849c <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3301      	adds	r3, #1
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b29a      	uxth	r2, r3
 8008380:	2014      	movs	r0, #20
 8008382:	183b      	adds	r3, r7, r0
 8008384:	0212      	lsls	r2, r2, #8
 8008386:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3302      	adds	r3, #2
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b299      	uxth	r1, r3
 8008390:	183b      	adds	r3, r7, r0
 8008392:	183a      	adds	r2, r7, r0
 8008394:	8812      	ldrh	r2, [r2, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800839a:	183b      	adds	r3, r7, r0
 800839c:	881a      	ldrh	r2, [r3, #0]
 800839e:	183b      	adds	r3, r7, r0
 80083a0:	3201      	adds	r2, #1
 80083a2:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3303      	adds	r3, #3
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	2012      	movs	r0, #18
 80083ae:	183b      	adds	r3, r7, r0
 80083b0:	0212      	lsls	r2, r2, #8
 80083b2:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b299      	uxth	r1, r3
 80083bc:	183b      	adds	r3, r7, r0
 80083be:	183a      	adds	r2, r7, r0
 80083c0:	8812      	ldrh	r2, [r2, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80083c6:	183b      	adds	r3, r7, r0
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d061      	beq.n	8008492 <eMBFuncReadCoils+0x136>
 80083ce:	0001      	movs	r1, r0
 80083d0:	183b      	adds	r3, r7, r0
 80083d2:	881a      	ldrh	r2, [r3, #0]
 80083d4:	23fa      	movs	r3, #250	; 0xfa
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	429a      	cmp	r2, r3
 80083da:	d25a      	bcs.n	8008492 <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2200      	movs	r2, #0
 80083e4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	60fa      	str	r2, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2207      	movs	r2, #7
 8008402:	4013      	ands	r3, r2
 8008404:	d009      	beq.n	800841a <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8008406:	187b      	adds	r3, r7, r1
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	08db      	lsrs	r3, r3, #3
 800840c:	b29b      	uxth	r3, r3
 800840e:	b2da      	uxtb	r2, r3
 8008410:	2317      	movs	r3, #23
 8008412:	18fb      	adds	r3, r7, r3
 8008414:	3201      	adds	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e007      	b.n	800842a <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800841a:	2312      	movs	r3, #18
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	b29a      	uxth	r2, r3
 8008424:	2317      	movs	r3, #23
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	60fa      	str	r2, [r7, #12]
 8008430:	2217      	movs	r2, #23
 8008432:	18ba      	adds	r2, r7, r2
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8008444:	250b      	movs	r5, #11
 8008446:	197c      	adds	r4, r7, r5
 8008448:	2312      	movs	r3, #18
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	881a      	ldrh	r2, [r3, #0]
 800844e:	2314      	movs	r3, #20
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	8819      	ldrh	r1, [r3, #0]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	2300      	movs	r3, #0
 8008458:	f7ff fde0 	bl	800801c <eMBRegCoilsCB>
 800845c:	0003      	movs	r3, r0
 800845e:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008460:	197b      	adds	r3, r7, r5
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008468:	2316      	movs	r3, #22
 800846a:	18fc      	adds	r4, r7, r3
 800846c:	197b      	adds	r3, r7, r5
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	0018      	movs	r0, r3
 8008472:	f000 fd9c 	bl	8008fae <prveMBError2Exception>
 8008476:	0003      	movs	r3, r0
 8008478:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800847a:	e013      	b.n	80084a4 <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	881a      	ldrh	r2, [r3, #0]
 8008480:	2317      	movs	r3, #23
 8008482:	18fb      	adds	r3, r7, r3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	18d3      	adds	r3, r2, r3
 800848a:	b29a      	uxth	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8008490:	e008      	b.n	80084a4 <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008492:	2316      	movs	r3, #22
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	2203      	movs	r2, #3
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	e003      	b.n	80084a4 <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800849c:	2316      	movs	r3, #22
 800849e:	18fb      	adds	r3, r7, r3
 80084a0:	2203      	movs	r2, #3
 80084a2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80084a4:	2316      	movs	r3, #22
 80084a6:	18fb      	adds	r3, r7, r3
 80084a8:	781b      	ldrb	r3, [r3, #0]
}
 80084aa:	0018      	movs	r0, r3
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b006      	add	sp, #24
 80084b0:	bdb0      	pop	{r4, r5, r7, pc}

080084b2 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80084b2:	b5b0      	push	{r4, r5, r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80084bc:	230f      	movs	r3, #15
 80084be:	18fb      	adds	r3, r7, r3
 80084c0:	2200      	movs	r2, #0
 80084c2:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d155      	bne.n	8008578 <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3301      	adds	r3, #1
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	200c      	movs	r0, #12
 80084d6:	183b      	adds	r3, r7, r0
 80084d8:	0212      	lsls	r2, r2, #8
 80084da:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3302      	adds	r3, #2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b299      	uxth	r1, r3
 80084e4:	183b      	adds	r3, r7, r0
 80084e6:	183a      	adds	r2, r7, r0
 80084e8:	8812      	ldrh	r2, [r2, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	881a      	ldrh	r2, [r3, #0]
 80084f2:	183b      	adds	r3, r7, r0
 80084f4:	3201      	adds	r2, #1
 80084f6:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d135      	bne.n	800856e <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3303      	adds	r3, #3
 8008506:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8008508:	2bff      	cmp	r3, #255	; 0xff
 800850a:	d004      	beq.n	8008516 <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3303      	adds	r3, #3
 8008510:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8008512:	2b00      	cmp	r3, #0
 8008514:	d12b      	bne.n	800856e <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8008516:	2108      	movs	r1, #8
 8008518:	187b      	adds	r3, r7, r1
 800851a:	2200      	movs	r2, #0
 800851c:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3303      	adds	r3, #3
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2bff      	cmp	r3, #255	; 0xff
 8008526:	d103      	bne.n	8008530 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8008528:	187b      	adds	r3, r7, r1
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e003      	b.n	8008538 <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8008530:	2308      	movs	r3, #8
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8008538:	250b      	movs	r5, #11
 800853a:	197c      	adds	r4, r7, r5
 800853c:	230c      	movs	r3, #12
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	8819      	ldrh	r1, [r3, #0]
 8008542:	2308      	movs	r3, #8
 8008544:	18f8      	adds	r0, r7, r3
 8008546:	2301      	movs	r3, #1
 8008548:	2201      	movs	r2, #1
 800854a:	f7ff fd67 	bl	800801c <eMBRegCoilsCB>
 800854e:	0003      	movs	r3, r0
 8008550:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008552:	197b      	adds	r3, r7, r5
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d012      	beq.n	8008580 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800855a:	230f      	movs	r3, #15
 800855c:	18fc      	adds	r4, r7, r3
 800855e:	197b      	adds	r3, r7, r5
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	0018      	movs	r0, r3
 8008564:	f000 fd23 	bl	8008fae <prveMBError2Exception>
 8008568:	0003      	movs	r3, r0
 800856a:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800856c:	e008      	b.n	8008580 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800856e:	230f      	movs	r3, #15
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	2203      	movs	r2, #3
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	e003      	b.n	8008580 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008578:	230f      	movs	r3, #15
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	2203      	movs	r2, #3
 800857e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8008580:	230f      	movs	r3, #15
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	781b      	ldrb	r3, [r3, #0]
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b004      	add	sp, #16
 800858c:	bdb0      	pop	{r4, r5, r7, pc}

0800858e <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800858e:	b5b0      	push	{r4, r5, r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8008598:	230e      	movs	r3, #14
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	2b05      	cmp	r3, #5
 80085a6:	d800      	bhi.n	80085aa <eMBFuncWriteMultipleCoils+0x1c>
 80085a8:	e07a      	b.n	80086a0 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3301      	adds	r3, #1
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	200c      	movs	r0, #12
 80085b4:	183b      	adds	r3, r7, r0
 80085b6:	0212      	lsls	r2, r2, #8
 80085b8:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3302      	adds	r3, #2
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	b299      	uxth	r1, r3
 80085c2:	183b      	adds	r3, r7, r0
 80085c4:	183a      	adds	r2, r7, r0
 80085c6:	8812      	ldrh	r2, [r2, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80085cc:	183b      	adds	r3, r7, r0
 80085ce:	881a      	ldrh	r2, [r3, #0]
 80085d0:	183b      	adds	r3, r7, r0
 80085d2:	3201      	adds	r2, #1
 80085d4:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3303      	adds	r3, #3
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	200a      	movs	r0, #10
 80085e0:	183b      	adds	r3, r7, r0
 80085e2:	0212      	lsls	r2, r2, #8
 80085e4:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b299      	uxth	r1, r3
 80085ee:	183b      	adds	r3, r7, r0
 80085f0:	183a      	adds	r2, r7, r0
 80085f2:	8812      	ldrh	r2, [r2, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80085f8:	2309      	movs	r3, #9
 80085fa:	18fb      	adds	r3, r7, r3
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7952      	ldrb	r2, [r2, #5]
 8008600:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8008602:	183b      	adds	r3, r7, r0
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	2207      	movs	r2, #7
 8008608:	4013      	ands	r3, r2
 800860a:	d009      	beq.n	8008620 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800860c:	183b      	adds	r3, r7, r0
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	b29b      	uxth	r3, r3
 8008614:	b2da      	uxtb	r2, r3
 8008616:	230f      	movs	r3, #15
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	3201      	adds	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e007      	b.n	8008630 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8008620:	230a      	movs	r3, #10
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	b29a      	uxth	r2, r3
 800862a:	230f      	movs	r3, #15
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8008630:	210a      	movs	r1, #10
 8008632:	187b      	adds	r3, r7, r1
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d02d      	beq.n	8008696 <eMBFuncWriteMultipleCoils+0x108>
 800863a:	187b      	adds	r3, r7, r1
 800863c:	881a      	ldrh	r2, [r3, #0]
 800863e:	23f6      	movs	r3, #246	; 0xf6
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	429a      	cmp	r2, r3
 8008644:	d827      	bhi.n	8008696 <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8008646:	230f      	movs	r3, #15
 8008648:	18fa      	adds	r2, r7, r3
 800864a:	2309      	movs	r3, #9
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	7812      	ldrb	r2, [r2, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d11f      	bne.n	8008696 <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	1d98      	adds	r0, r3, #6
 800865a:	2508      	movs	r5, #8
 800865c:	197c      	adds	r4, r7, r5
 800865e:	187b      	adds	r3, r7, r1
 8008660:	881a      	ldrh	r2, [r3, #0]
 8008662:	230c      	movs	r3, #12
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	8819      	ldrh	r1, [r3, #0]
 8008668:	2301      	movs	r3, #1
 800866a:	f7ff fcd7 	bl	800801c <eMBRegCoilsCB>
 800866e:	0003      	movs	r3, r0
 8008670:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008672:	197b      	adds	r3, r7, r5
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800867a:	230e      	movs	r3, #14
 800867c:	18fc      	adds	r4, r7, r3
 800867e:	197b      	adds	r3, r7, r5
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	0018      	movs	r0, r3
 8008684:	f000 fc93 	bl	8008fae <prveMBError2Exception>
 8008688:	0003      	movs	r3, r0
 800868a:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800868c:	e00c      	b.n	80086a8 <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2205      	movs	r2, #5
 8008692:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8008694:	e008      	b.n	80086a8 <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008696:	230e      	movs	r3, #14
 8008698:	18fb      	adds	r3, r7, r3
 800869a:	2203      	movs	r2, #3
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	e003      	b.n	80086a8 <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80086a0:	230e      	movs	r3, #14
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	2203      	movs	r2, #3
 80086a6:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80086a8:	230e      	movs	r3, #14
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	781b      	ldrb	r3, [r3, #0]
}
 80086ae:	0018      	movs	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b004      	add	sp, #16
 80086b4:	bdb0      	pop	{r4, r5, r7, pc}

080086b6 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80086b6:	b5b0      	push	{r4, r5, r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80086c0:	2316      	movs	r3, #22
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	2b05      	cmp	r3, #5
 80086ce:	d000      	beq.n	80086d2 <eMBFuncReadDiscreteInputs+0x1c>
 80086d0:	e091      	b.n	80087f6 <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3301      	adds	r3, #1
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	2014      	movs	r0, #20
 80086dc:	183b      	adds	r3, r7, r0
 80086de:	0212      	lsls	r2, r2, #8
 80086e0:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3302      	adds	r3, #2
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b299      	uxth	r1, r3
 80086ea:	183b      	adds	r3, r7, r0
 80086ec:	183a      	adds	r2, r7, r0
 80086ee:	8812      	ldrh	r2, [r2, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80086f4:	183b      	adds	r3, r7, r0
 80086f6:	881a      	ldrh	r2, [r3, #0]
 80086f8:	183b      	adds	r3, r7, r0
 80086fa:	3201      	adds	r2, #1
 80086fc:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3303      	adds	r3, #3
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b29a      	uxth	r2, r3
 8008706:	2012      	movs	r0, #18
 8008708:	183b      	adds	r3, r7, r0
 800870a:	0212      	lsls	r2, r2, #8
 800870c:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3304      	adds	r3, #4
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b299      	uxth	r1, r3
 8008716:	183b      	adds	r3, r7, r0
 8008718:	183a      	adds	r2, r7, r0
 800871a:	8812      	ldrh	r2, [r2, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8008720:	183b      	adds	r3, r7, r0
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d061      	beq.n	80087ec <eMBFuncReadDiscreteInputs+0x136>
 8008728:	0001      	movs	r1, r0
 800872a:	183b      	adds	r3, r7, r0
 800872c:	881a      	ldrh	r2, [r3, #0]
 800872e:	23fa      	movs	r3, #250	; 0xfa
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	429a      	cmp	r2, r3
 8008734:	d25a      	bcs.n	80087ec <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	60fa      	str	r2, [r7, #12]
 8008746:	2202      	movs	r2, #2
 8008748:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8008756:	187b      	adds	r3, r7, r1
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	2207      	movs	r2, #7
 800875c:	4013      	ands	r3, r2
 800875e:	d009      	beq.n	8008774 <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8008760:	187b      	adds	r3, r7, r1
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	b29b      	uxth	r3, r3
 8008768:	b2da      	uxtb	r2, r3
 800876a:	2317      	movs	r3, #23
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	3201      	adds	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e007      	b.n	8008784 <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8008774:	2312      	movs	r3, #18
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	b29a      	uxth	r2, r3
 800877e:	2317      	movs	r3, #23
 8008780:	18fb      	adds	r3, r7, r3
 8008782:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	60fa      	str	r2, [r7, #12]
 800878a:	2217      	movs	r2, #23
 800878c:	18ba      	adds	r2, r7, r2
 800878e:	7812      	ldrb	r2, [r2, #0]
 8008790:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 800879e:	250b      	movs	r5, #11
 80087a0:	197c      	adds	r4, r7, r5
 80087a2:	2312      	movs	r3, #18
 80087a4:	18fb      	adds	r3, r7, r3
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	2314      	movs	r3, #20
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	8819      	ldrh	r1, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7ff fd2d 	bl	8008210 <eMBRegDiscreteCB>
 80087b6:	0003      	movs	r3, r0
 80087b8:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80087ba:	197b      	adds	r3, r7, r5
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80087c2:	2316      	movs	r3, #22
 80087c4:	18fc      	adds	r4, r7, r3
 80087c6:	197b      	adds	r3, r7, r5
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	0018      	movs	r0, r3
 80087cc:	f000 fbef 	bl	8008fae <prveMBError2Exception>
 80087d0:	0003      	movs	r3, r0
 80087d2:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80087d4:	e013      	b.n	80087fe <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	881a      	ldrh	r2, [r3, #0]
 80087da:	2317      	movs	r3, #23
 80087dc:	18fb      	adds	r3, r7, r3
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	18d3      	adds	r3, r2, r3
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80087ea:	e008      	b.n	80087fe <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80087ec:	2316      	movs	r3, #22
 80087ee:	18fb      	adds	r3, r7, r3
 80087f0:	2203      	movs	r2, #3
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e003      	b.n	80087fe <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80087f6:	2316      	movs	r3, #22
 80087f8:	18fb      	adds	r3, r7, r3
 80087fa:	2203      	movs	r2, #3
 80087fc:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80087fe:	2316      	movs	r3, #22
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	781b      	ldrb	r3, [r3, #0]
}
 8008804:	0018      	movs	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	b006      	add	sp, #24
 800880a:	bdb0      	pop	{r4, r5, r7, pc}

0800880c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800880c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8008816:	260f      	movs	r6, #15
 8008818:	19bb      	adds	r3, r7, r6
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	2b05      	cmp	r3, #5
 8008824:	d12f      	bne.n	8008886 <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3301      	adds	r3, #1
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	200c      	movs	r0, #12
 8008830:	183b      	adds	r3, r7, r0
 8008832:	0212      	lsls	r2, r2, #8
 8008834:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3302      	adds	r3, #2
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b299      	uxth	r1, r3
 800883e:	183b      	adds	r3, r7, r0
 8008840:	183a      	adds	r2, r7, r0
 8008842:	8812      	ldrh	r2, [r2, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8008848:	183b      	adds	r3, r7, r0
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	0001      	movs	r1, r0
 800884e:	183b      	adds	r3, r7, r0
 8008850:	3201      	adds	r2, #1
 8008852:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1cd8      	adds	r0, r3, #3
 8008858:	250b      	movs	r5, #11
 800885a:	197c      	adds	r4, r7, r5
 800885c:	187b      	adds	r3, r7, r1
 800885e:	8819      	ldrh	r1, [r3, #0]
 8008860:	2301      	movs	r3, #1
 8008862:	2201      	movs	r2, #1
 8008864:	f7ff fb1e 	bl	8007ea4 <eMBRegHoldingCB>
 8008868:	0003      	movs	r3, r0
 800886a:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800886c:	197b      	adds	r3, r7, r5
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8008874:	19bc      	adds	r4, r7, r6
 8008876:	197b      	adds	r3, r7, r5
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	0018      	movs	r0, r3
 800887c:	f000 fb97 	bl	8008fae <prveMBError2Exception>
 8008880:	0003      	movs	r3, r0
 8008882:	7023      	strb	r3, [r4, #0]
 8008884:	e003      	b.n	800888e <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008886:	230f      	movs	r3, #15
 8008888:	18fb      	adds	r3, r7, r3
 800888a:	2203      	movs	r2, #3
 800888c:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800888e:	230f      	movs	r3, #15
 8008890:	18fb      	adds	r3, r7, r3
 8008892:	781b      	ldrb	r3, [r3, #0]
}
 8008894:	0018      	movs	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	b005      	add	sp, #20
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800889c <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80088a6:	230f      	movs	r3, #15
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d962      	bls.n	800897c <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3301      	adds	r3, #1
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	200c      	movs	r0, #12
 80088c0:	183b      	adds	r3, r7, r0
 80088c2:	0212      	lsls	r2, r2, #8
 80088c4:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3302      	adds	r3, #2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	b299      	uxth	r1, r3
 80088ce:	183b      	adds	r3, r7, r0
 80088d0:	183a      	adds	r2, r7, r0
 80088d2:	8812      	ldrh	r2, [r2, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80088d8:	183b      	adds	r3, r7, r0
 80088da:	881a      	ldrh	r2, [r3, #0]
 80088dc:	0005      	movs	r5, r0
 80088de:	183b      	adds	r3, r7, r0
 80088e0:	3201      	adds	r2, #1
 80088e2:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3303      	adds	r3, #3
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	200a      	movs	r0, #10
 80088ee:	183b      	adds	r3, r7, r0
 80088f0:	0212      	lsls	r2, r2, #8
 80088f2:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3304      	adds	r3, #4
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	b299      	uxth	r1, r3
 80088fc:	183b      	adds	r3, r7, r0
 80088fe:	183a      	adds	r2, r7, r0
 8008900:	8812      	ldrh	r2, [r2, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8008906:	2409      	movs	r4, #9
 8008908:	193b      	adds	r3, r7, r4
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	7952      	ldrb	r2, [r2, #5]
 800890e:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8008910:	0001      	movs	r1, r0
 8008912:	187b      	adds	r3, r7, r1
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02b      	beq.n	8008972 <eMBFuncWriteMultipleHoldingRegister+0xd6>
 800891a:	187b      	adds	r3, r7, r1
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	2b78      	cmp	r3, #120	; 0x78
 8008920:	d827      	bhi.n	8008972 <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8008922:	187b      	adds	r3, r7, r1
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	18db      	adds	r3, r3, r3
 800892a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800892c:	193a      	adds	r2, r7, r4
 800892e:	7812      	ldrb	r2, [r2, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d11e      	bne.n	8008972 <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	1d98      	adds	r0, r3, #6
 8008938:	2608      	movs	r6, #8
 800893a:	19bc      	adds	r4, r7, r6
 800893c:	187b      	adds	r3, r7, r1
 800893e:	881a      	ldrh	r2, [r3, #0]
 8008940:	197b      	adds	r3, r7, r5
 8008942:	8819      	ldrh	r1, [r3, #0]
 8008944:	2301      	movs	r3, #1
 8008946:	f7ff faad 	bl	8007ea4 <eMBRegHoldingCB>
 800894a:	0003      	movs	r3, r0
 800894c:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800894e:	19bb      	adds	r3, r7, r6
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008956:	230f      	movs	r3, #15
 8008958:	18fc      	adds	r4, r7, r3
 800895a:	19bb      	adds	r3, r7, r6
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	0018      	movs	r0, r3
 8008960:	f000 fb25 	bl	8008fae <prveMBError2Exception>
 8008964:	0003      	movs	r3, r0
 8008966:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8008968:	e00c      	b.n	8008984 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2205      	movs	r2, #5
 800896e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8008970:	e008      	b.n	8008984 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008972:	230f      	movs	r3, #15
 8008974:	18fb      	adds	r3, r7, r3
 8008976:	2203      	movs	r2, #3
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	e003      	b.n	8008984 <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800897c:	230f      	movs	r3, #15
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	2203      	movs	r2, #3
 8008982:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8008984:	230f      	movs	r3, #15
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	781b      	ldrb	r3, [r3, #0]
}
 800898a:	0018      	movs	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	b005      	add	sp, #20
 8008990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008992 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800899c:	2317      	movs	r3, #23
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	2b05      	cmp	r3, #5
 80089aa:	d000      	beq.n	80089ae <eMBFuncReadHoldingRegister+0x1c>
 80089ac:	e075      	b.n	8008a9a <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3301      	adds	r3, #1
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	2014      	movs	r0, #20
 80089b8:	183b      	adds	r3, r7, r0
 80089ba:	0212      	lsls	r2, r2, #8
 80089bc:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3302      	adds	r3, #2
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	b299      	uxth	r1, r3
 80089c6:	183b      	adds	r3, r7, r0
 80089c8:	183a      	adds	r2, r7, r0
 80089ca:	8812      	ldrh	r2, [r2, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80089d0:	183b      	adds	r3, r7, r0
 80089d2:	881a      	ldrh	r2, [r3, #0]
 80089d4:	183b      	adds	r3, r7, r0
 80089d6:	3201      	adds	r2, #1
 80089d8:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3303      	adds	r3, #3
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	2512      	movs	r5, #18
 80089e4:	197b      	adds	r3, r7, r5
 80089e6:	0212      	lsls	r2, r2, #8
 80089e8:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3304      	adds	r3, #4
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	197b      	adds	r3, r7, r5
 80089f2:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80089f4:	197b      	adds	r3, r7, r5
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d049      	beq.n	8008a90 <eMBFuncReadHoldingRegister+0xfe>
 80089fc:	197b      	adds	r3, r7, r5
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	2b7d      	cmp	r3, #125	; 0x7d
 8008a02:	d845      	bhi.n	8008a90 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	60fa      	str	r2, [r7, #12]
 8008a14:	2203      	movs	r2, #3
 8008a16:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8008a24:	197b      	adds	r3, r7, r5
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b2d9      	uxtb	r1, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	60fa      	str	r2, [r7, #12]
 8008a30:	1c0a      	adds	r2, r1, #0
 8008a32:	1892      	adds	r2, r2, r2
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8008a44:	260b      	movs	r6, #11
 8008a46:	19bc      	adds	r4, r7, r6
 8008a48:	197b      	adds	r3, r7, r5
 8008a4a:	881a      	ldrh	r2, [r3, #0]
 8008a4c:	183b      	adds	r3, r7, r0
 8008a4e:	8819      	ldrh	r1, [r3, #0]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	2300      	movs	r3, #0
 8008a54:	f7ff fa26 	bl	8007ea4 <eMBRegHoldingCB>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008a5c:	19bb      	adds	r3, r7, r6
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008a64:	2317      	movs	r3, #23
 8008a66:	18fc      	adds	r4, r7, r3
 8008a68:	19bb      	adds	r3, r7, r6
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f000 fa9e 	bl	8008fae <prveMBError2Exception>
 8008a72:	0003      	movs	r3, r0
 8008a74:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8008a76:	e014      	b.n	8008aa2 <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	881a      	ldrh	r2, [r3, #0]
 8008a7c:	2312      	movs	r3, #18
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	18db      	adds	r3, r3, r3
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	18d3      	adds	r3, r2, r3
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8008a8e:	e008      	b.n	8008aa2 <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008a90:	2317      	movs	r3, #23
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	2203      	movs	r2, #3
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	e003      	b.n	8008aa2 <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008a9a:	2317      	movs	r3, #23
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8008aa2:	2317      	movs	r3, #23
 8008aa4:	18fb      	adds	r3, r7, r3
 8008aa6:	781b      	ldrb	r3, [r3, #0]
}
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b007      	add	sp, #28
 8008aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ab0 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8008aba:	2317      	movs	r3, #23
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d800      	bhi.n	8008acc <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 8008aca:	e0d0      	b.n	8008c6e <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	2014      	movs	r0, #20
 8008ad6:	183b      	adds	r3, r7, r0
 8008ad8:	0212      	lsls	r2, r2, #8
 8008ada:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3302      	adds	r3, #2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b299      	uxth	r1, r3
 8008ae4:	183b      	adds	r3, r7, r0
 8008ae6:	183a      	adds	r2, r7, r0
 8008ae8:	8812      	ldrh	r2, [r2, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 8008aee:	183b      	adds	r3, r7, r0
 8008af0:	881a      	ldrh	r2, [r3, #0]
 8008af2:	0006      	movs	r6, r0
 8008af4:	183b      	adds	r3, r7, r0
 8008af6:	3201      	adds	r2, #1
 8008af8:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3303      	adds	r3, #3
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	2012      	movs	r0, #18
 8008b04:	183b      	adds	r3, r7, r0
 8008b06:	0212      	lsls	r2, r2, #8
 8008b08:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b299      	uxth	r1, r3
 8008b12:	183b      	adds	r3, r7, r0
 8008b14:	183a      	adds	r2, r7, r0
 8008b16:	8812      	ldrh	r2, [r2, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3305      	adds	r3, #5
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	2410      	movs	r4, #16
 8008b26:	193b      	adds	r3, r7, r4
 8008b28:	0212      	lsls	r2, r2, #8
 8008b2a:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3306      	adds	r3, #6
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b299      	uxth	r1, r3
 8008b34:	193b      	adds	r3, r7, r4
 8008b36:	193a      	adds	r2, r7, r4
 8008b38:	8812      	ldrh	r2, [r2, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 8008b3e:	193b      	adds	r3, r7, r4
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	193b      	adds	r3, r7, r4
 8008b44:	3201      	adds	r2, #1
 8008b46:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3307      	adds	r3, #7
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	240e      	movs	r4, #14
 8008b52:	193b      	adds	r3, r7, r4
 8008b54:	0212      	lsls	r2, r2, #8
 8008b56:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b299      	uxth	r1, r3
 8008b60:	193b      	adds	r3, r7, r4
 8008b62:	193a      	adds	r2, r7, r4
 8008b64:	8812      	ldrh	r2, [r2, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8008b6a:	220d      	movs	r2, #13
 8008b6c:	18bb      	adds	r3, r7, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	7a52      	ldrb	r2, [r2, #9]
 8008b72:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8008b74:	183b      	adds	r3, r7, r0
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d100      	bne.n	8008b7e <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 8008b7c:	e073      	b.n	8008c66 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8008b7e:	0005      	movs	r5, r0
 8008b80:	183b      	adds	r3, r7, r0
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2b7d      	cmp	r3, #125	; 0x7d
 8008b86:	d900      	bls.n	8008b8a <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 8008b88:	e06d      	b.n	8008c66 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8008b8a:	0021      	movs	r1, r4
 8008b8c:	187b      	adds	r3, r7, r1
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d068      	beq.n	8008c66 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8008b94:	187b      	adds	r3, r7, r1
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	2b79      	cmp	r3, #121	; 0x79
 8008b9a:	d864      	bhi.n	8008c66 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	005a      	lsls	r2, r3, #1
 8008ba2:	200d      	movs	r0, #13
 8008ba4:	183b      	adds	r3, r7, r0
 8008ba6:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d15c      	bne.n	8008c66 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	300a      	adds	r0, #10
 8008bb2:	2216      	movs	r2, #22
 8008bb4:	18bc      	adds	r4, r7, r2
 8008bb6:	187b      	adds	r3, r7, r1
 8008bb8:	881a      	ldrh	r2, [r3, #0]
 8008bba:	2310      	movs	r3, #16
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	8819      	ldrh	r1, [r3, #0]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f7ff f96f 	bl	8007ea4 <eMBRegHoldingCB>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8008bca:	2016      	movs	r0, #22
 8008bcc:	183b      	adds	r3, r7, r0
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d139      	bne.n	8008c48 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	60ba      	str	r2, [r7, #8]
 8008be4:	2217      	movs	r2, #23
 8008be6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8008bf4:	197b      	adds	r3, r7, r5
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b2d9      	uxtb	r1, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	60ba      	str	r2, [r7, #8]
 8008c00:	1c0a      	adds	r2, r1, #0
 8008c02:	1892      	adds	r2, r2, r2
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8008c14:	183c      	adds	r4, r7, r0
 8008c16:	197b      	adds	r3, r7, r5
 8008c18:	881a      	ldrh	r2, [r3, #0]
 8008c1a:	19bb      	adds	r3, r7, r6
 8008c1c:	8819      	ldrh	r1, [r3, #0]
 8008c1e:	68b8      	ldr	r0, [r7, #8]
 8008c20:	2300      	movs	r3, #0
 8008c22:	f7ff f93f 	bl	8007ea4 <eMBRegHoldingCB>
 8008c26:	0003      	movs	r3, r0
 8008c28:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 8008c2a:	2016      	movs	r0, #22
 8008c2c:	183b      	adds	r3, r7, r0
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	881a      	ldrh	r2, [r3, #0]
 8008c38:	197b      	adds	r3, r7, r5
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	18db      	adds	r3, r3, r3
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8008c48:	2216      	movs	r2, #22
 8008c4a:	18bb      	adds	r3, r7, r2
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008c52:	2317      	movs	r3, #23
 8008c54:	18fc      	adds	r4, r7, r3
 8008c56:	18bb      	adds	r3, r7, r2
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	f000 f9a7 	bl	8008fae <prveMBError2Exception>
 8008c60:	0003      	movs	r3, r0
 8008c62:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8008c64:	e003      	b.n	8008c6e <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008c66:	2317      	movs	r3, #23
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 8008c6e:	2317      	movs	r3, #23
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	781b      	ldrb	r3, [r3, #0]
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b007      	add	sp, #28
 8008c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c7c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8008c86:	2317      	movs	r3, #23
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d000      	beq.n	8008c98 <eMBFuncReadInputRegister+0x1c>
 8008c96:	e07a      	b.n	8008d8e <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	2014      	movs	r0, #20
 8008ca2:	183b      	adds	r3, r7, r0
 8008ca4:	0212      	lsls	r2, r2, #8
 8008ca6:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3302      	adds	r3, #2
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b299      	uxth	r1, r3
 8008cb0:	183b      	adds	r3, r7, r0
 8008cb2:	183a      	adds	r2, r7, r0
 8008cb4:	8812      	ldrh	r2, [r2, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8008cba:	183b      	adds	r3, r7, r0
 8008cbc:	881a      	ldrh	r2, [r3, #0]
 8008cbe:	0005      	movs	r5, r0
 8008cc0:	183b      	adds	r3, r7, r0
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3303      	adds	r3, #3
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	2012      	movs	r0, #18
 8008cd0:	183b      	adds	r3, r7, r0
 8008cd2:	0212      	lsls	r2, r2, #8
 8008cd4:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b299      	uxth	r1, r3
 8008cde:	183b      	adds	r3, r7, r0
 8008ce0:	183a      	adds	r2, r7, r0
 8008ce2:	8812      	ldrh	r2, [r2, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8008ce8:	183b      	adds	r3, r7, r0
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d049      	beq.n	8008d84 <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8008cf0:	183b      	adds	r3, r7, r0
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	2b7c      	cmp	r3, #124	; 0x7c
 8008cf6:	d845      	bhi.n	8008d84 <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	60fa      	str	r2, [r7, #12]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8008d18:	183b      	adds	r3, r7, r0
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b2d9      	uxtb	r1, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	60fa      	str	r2, [r7, #12]
 8008d24:	1c0a      	adds	r2, r1, #0
 8008d26:	1892      	adds	r2, r2, r2
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8008d38:	260b      	movs	r6, #11
 8008d3a:	19bc      	adds	r4, r7, r6
 8008d3c:	183b      	adds	r3, r7, r0
 8008d3e:	881a      	ldrh	r2, [r3, #0]
 8008d40:	197b      	adds	r3, r7, r5
 8008d42:	8819      	ldrh	r1, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff f836 	bl	8007db8 <eMBRegInputCB>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008d50:	19bb      	adds	r3, r7, r6
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d009      	beq.n	8008d6c <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008d58:	2317      	movs	r3, #23
 8008d5a:	18fc      	adds	r4, r7, r3
 8008d5c:	19bb      	adds	r3, r7, r6
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	0018      	movs	r0, r3
 8008d62:	f000 f924 	bl	8008fae <prveMBError2Exception>
 8008d66:	0003      	movs	r3, r0
 8008d68:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8008d6a:	e014      	b.n	8008d96 <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	881a      	ldrh	r2, [r3, #0]
 8008d70:	2312      	movs	r3, #18
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	18db      	adds	r3, r3, r3
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	18d3      	adds	r3, r2, r3
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8008d82:	e008      	b.n	8008d96 <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008d84:	2317      	movs	r3, #23
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	2203      	movs	r2, #3
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e003      	b.n	8008d96 <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008d8e:	2317      	movs	r3, #23
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	2203      	movs	r2, #3
 8008d94:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8008d96:	2317      	movs	r3, #23
 8008d98:	18fb      	adds	r3, r7, r3
 8008d9a:	781b      	ldrb	r3, [r3, #0]
}
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	b007      	add	sp, #28
 8008da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008da4 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	1c58      	adds	r0, r3, #1
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <eMBFuncReportSlaveID+0x34>)
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	001a      	movs	r2, r3
 8008db8:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <eMBFuncReportSlaveID+0x38>)
 8008dba:	0019      	movs	r1, r3
 8008dbc:	f001 f8a0 	bl	8009f00 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <eMBFuncReportSlaveID+0x34>)
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	0018      	movs	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	b002      	add	sp, #8
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	20000640 	.word	0x20000640
 8008ddc:	20000620 	.word	0x20000620

08008de0 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8008de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	000c      	movs	r4, r1
 8008dea:	0010      	movs	r0, r2
 8008dec:	0019      	movs	r1, r3
 8008dee:	1cbb      	adds	r3, r7, #2
 8008df0:	1c22      	adds	r2, r4, #0
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	1c7b      	adds	r3, r7, #1
 8008df6:	1c02      	adds	r2, r0, #0
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	003b      	movs	r3, r7
 8008dfc:	1c0a      	adds	r2, r1, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8008e00:	2316      	movs	r3, #22
 8008e02:	18fb      	adds	r3, r7, r3
 8008e04:	003a      	movs	r2, r7
 8008e06:	7812      	ldrb	r2, [r2, #0]
 8008e08:	801a      	strh	r2, [r3, #0]

    assert( ucNBits <= 8 );
 8008e0a:	1c7b      	adds	r3, r7, #1
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d905      	bls.n	8008e1e <xMBUtilSetBits+0x3e>
 8008e12:	4b3a      	ldr	r3, [pc, #232]	; (8008efc <xMBUtilSetBits+0x11c>)
 8008e14:	4a3a      	ldr	r2, [pc, #232]	; (8008f00 <xMBUtilSetBits+0x120>)
 8008e16:	483b      	ldr	r0, [pc, #236]	; (8008f04 <xMBUtilSetBits+0x124>)
 8008e18:	2137      	movs	r1, #55	; 0x37
 8008e1a:	f001 f819 	bl	8009e50 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8008e1e:	2014      	movs	r0, #20
 8008e20:	183b      	adds	r3, r7, r0
 8008e22:	1cba      	adds	r2, r7, #2
 8008e24:	8812      	ldrh	r2, [r2, #0]
 8008e26:	08d2      	lsrs	r2, r2, #3
 8008e28:	801a      	strh	r2, [r3, #0]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8008e2a:	183b      	adds	r3, r7, r0
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	2412      	movs	r4, #18
 8008e34:	193b      	adds	r3, r7, r4
 8008e36:	1cb9      	adds	r1, r7, #2
 8008e38:	8809      	ldrh	r1, [r1, #0]
 8008e3a:	1a8a      	subs	r2, r1, r2
 8008e3c:	801a      	strh	r2, [r3, #0]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8008e3e:	2616      	movs	r6, #22
 8008e40:	19bb      	adds	r3, r7, r6
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	193b      	adds	r3, r7, r4
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	409a      	lsls	r2, r3
 8008e4a:	19bb      	adds	r3, r7, r6
 8008e4c:	801a      	strh	r2, [r3, #0]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8008e4e:	1c7b      	adds	r3, r7, #1
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2201      	movs	r2, #1
 8008e54:	409a      	lsls	r2, r3
 8008e56:	0013      	movs	r3, r2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	2510      	movs	r5, #16
 8008e5c:	197b      	adds	r3, r7, r5
 8008e5e:	3a01      	subs	r2, #1
 8008e60:	801a      	strh	r2, [r3, #0]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8008e62:	197b      	adds	r3, r7, r5
 8008e64:	881a      	ldrh	r2, [r3, #0]
 8008e66:	1cbb      	adds	r3, r7, #2
 8008e68:	8819      	ldrh	r1, [r3, #0]
 8008e6a:	183b      	adds	r3, r7, r0
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	1acb      	subs	r3, r1, r3
 8008e72:	409a      	lsls	r2, r3
 8008e74:	197b      	adds	r3, r7, r5
 8008e76:	801a      	strh	r2, [r3, #0]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8008e78:	183b      	adds	r3, r7, r0
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	18d3      	adds	r3, r2, r3
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	240e      	movs	r4, #14
 8008e84:	193b      	adds	r3, r7, r4
 8008e86:	801a      	strh	r2, [r3, #0]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8008e88:	0001      	movs	r1, r0
 8008e8a:	183b      	adds	r3, r7, r0
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	18d3      	adds	r3, r2, r3
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	193b      	adds	r3, r7, r4
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	5e1b      	ldrsh	r3, [r3, r0]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	193b      	adds	r3, r7, r4
 8008ea6:	801a      	strh	r2, [r3, #0]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8008ea8:	197b      	adds	r3, r7, r5
 8008eaa:	2200      	movs	r2, #0
 8008eac:	5e9b      	ldrsh	r3, [r3, r2]
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	b21b      	sxth	r3, r3
 8008eb2:	193a      	adds	r2, r7, r4
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	5e12      	ldrsh	r2, [r2, r0]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	b21a      	sxth	r2, r3
 8008ebc:	19bb      	adds	r3, r7, r6
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	5e1b      	ldrsh	r3, [r3, r0]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	b21a      	sxth	r2, r3
 8008ec6:	193b      	adds	r3, r7, r4
 8008ec8:	801a      	strh	r2, [r3, #0]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8008eca:	0008      	movs	r0, r1
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	18d3      	adds	r3, r2, r3
 8008ed4:	193a      	adds	r2, r7, r4
 8008ed6:	8812      	ldrh	r2, [r2, #0]
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8008edc:	193b      	adds	r3, r7, r4
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	b299      	uxth	r1, r3
 8008ee4:	183b      	adds	r3, r7, r0
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	18d3      	adds	r3, r2, r3
 8008eee:	b2ca      	uxtb	r2, r1
 8008ef0:	701a      	strb	r2, [r3, #0]
}
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b007      	add	sp, #28
 8008ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	0800ca68 	.word	0x0800ca68
 8008f00:	0800cd48 	.word	0x0800cd48
 8008f04:	0800ca78 	.word	0x0800ca78

08008f08 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8008f08:	b5b0      	push	{r4, r5, r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	0008      	movs	r0, r1
 8008f12:	0011      	movs	r1, r2
 8008f14:	1cbb      	adds	r3, r7, #2
 8008f16:	1c02      	adds	r2, r0, #0
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	1c7b      	adds	r3, r7, #1
 8008f1c:	1c0a      	adds	r2, r1, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8008f20:	200e      	movs	r0, #14
 8008f22:	183b      	adds	r3, r7, r0
 8008f24:	1cba      	adds	r2, r7, #2
 8008f26:	8812      	ldrh	r2, [r2, #0]
 8008f28:	08d2      	lsrs	r2, r2, #3
 8008f2a:	801a      	strh	r2, [r3, #0]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8008f2c:	183b      	adds	r3, r7, r0
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	240c      	movs	r4, #12
 8008f36:	193b      	adds	r3, r7, r4
 8008f38:	1cb9      	adds	r1, r7, #2
 8008f3a:	8809      	ldrh	r1, [r1, #0]
 8008f3c:	1a8a      	subs	r2, r1, r2
 8008f3e:	801a      	strh	r2, [r3, #0]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8008f40:	1c7b      	adds	r3, r7, #1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2201      	movs	r2, #1
 8008f46:	409a      	lsls	r2, r3
 8008f48:	0013      	movs	r3, r2
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	250a      	movs	r5, #10
 8008f4e:	197b      	adds	r3, r7, r5
 8008f50:	3a01      	subs	r2, #1
 8008f52:	801a      	strh	r2, [r3, #0]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8008f54:	183b      	adds	r3, r7, r0
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	18d3      	adds	r3, r2, r3
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	2108      	movs	r1, #8
 8008f60:	187b      	adds	r3, r7, r1
 8008f62:	801a      	strh	r2, [r3, #0]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8008f64:	183b      	adds	r3, r7, r0
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	18d3      	adds	r3, r2, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	b21a      	sxth	r2, r3
 8008f74:	187b      	adds	r3, r7, r1
 8008f76:	2000      	movs	r0, #0
 8008f78:	5e1b      	ldrsh	r3, [r3, r0]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b21a      	sxth	r2, r3
 8008f7e:	187b      	adds	r3, r7, r1
 8008f80:	801a      	strh	r2, [r3, #0]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8008f82:	187b      	adds	r3, r7, r1
 8008f84:	881a      	ldrh	r2, [r3, #0]
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	411a      	asrs	r2, r3
 8008f8c:	187b      	adds	r3, r7, r1
 8008f8e:	801a      	strh	r2, [r3, #0]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	0008      	movs	r0, r1
 8008f94:	187a      	adds	r2, r7, r1
 8008f96:	1979      	adds	r1, r7, r5
 8008f98:	8812      	ldrh	r2, [r2, #0]
 8008f9a:	8809      	ldrh	r1, [r1, #0]
 8008f9c:	400a      	ands	r2, r1
 8008f9e:	801a      	strh	r2, [r3, #0]

    return ( UCHAR ) usWordBuf;
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b2db      	uxtb	r3, r3
}
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b004      	add	sp, #16
 8008fac:	bdb0      	pop	{r4, r5, r7, pc}

08008fae <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	0002      	movs	r2, r0
 8008fb6:	1dfb      	adds	r3, r7, #7
 8008fb8:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 8008fba:	1dfb      	adds	r3, r7, #7
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b07      	cmp	r3, #7
 8008fc0:	d00f      	beq.n	8008fe2 <prveMBError2Exception+0x34>
 8008fc2:	dc13      	bgt.n	8008fec <prveMBError2Exception+0x3e>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <prveMBError2Exception+0x20>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d005      	beq.n	8008fd8 <prveMBError2Exception+0x2a>
 8008fcc:	e00e      	b.n	8008fec <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8008fce:	230f      	movs	r3, #15
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
            break;
 8008fd6:	e00e      	b.n	8008ff6 <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8008fd8:	230f      	movs	r3, #15
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	2202      	movs	r2, #2
 8008fde:	701a      	strb	r2, [r3, #0]
            break;
 8008fe0:	e009      	b.n	8008ff6 <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8008fe2:	230f      	movs	r3, #15
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	2206      	movs	r2, #6
 8008fe8:	701a      	strb	r2, [r3, #0]
            break;
 8008fea:	e004      	b.n	8008ff6 <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8008fec:	230f      	movs	r3, #15
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	701a      	strb	r2, [r3, #0]
            break;
 8008ff4:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 8008ff6:	230f      	movs	r3, #15
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	781b      	ldrb	r3, [r3, #0]
}
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b004      	add	sp, #16
 8009002:	bd80      	pop	{r7, pc}

08009004 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8009004:	b5b0      	push	{r4, r5, r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	0004      	movs	r4, r0
 800900c:	0008      	movs	r0, r1
 800900e:	0011      	movs	r1, r2
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	1dfb      	adds	r3, r7, #7
 8009014:	1c22      	adds	r2, r4, #0
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	1dbb      	adds	r3, r7, #6
 800901a:	1c02      	adds	r2, r0, #0
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	1d7b      	adds	r3, r7, #5
 8009020:	1c0a      	adds	r2, r1, #0
 8009022:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009024:	230f      	movs	r3, #15
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 800902c:	1dbb      	adds	r3, r7, #6
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <eMBInit+0x40>
 8009034:	1dbb      	adds	r3, r7, #6
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800903c:	1dbb      	adds	r3, r7, #6
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2bf7      	cmp	r3, #247	; 0xf7
 8009042:	d904      	bls.n	800904e <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 8009044:	230f      	movs	r3, #15
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	2202      	movs	r2, #2
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	e047      	b.n	80090de <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800904e:	4b27      	ldr	r3, [pc, #156]	; (80090ec <eMBInit+0xe8>)
 8009050:	1dba      	adds	r2, r7, #6
 8009052:	7812      	ldrb	r2, [r2, #0]
 8009054:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 8009056:	1dfb      	adds	r3, r7, #7
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d127      	bne.n	80090ae <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800905e:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <eMBInit+0xec>)
 8009060:	4a24      	ldr	r2, [pc, #144]	; (80090f4 <eMBInit+0xf0>)
 8009062:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8009064:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <eMBInit+0xf4>)
 8009066:	4a25      	ldr	r2, [pc, #148]	; (80090fc <eMBInit+0xf8>)
 8009068:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800906a:	4b25      	ldr	r3, [pc, #148]	; (8009100 <eMBInit+0xfc>)
 800906c:	4a25      	ldr	r2, [pc, #148]	; (8009104 <eMBInit+0x100>)
 800906e:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <eMBInit+0x104>)
 8009072:	4a26      	ldr	r2, [pc, #152]	; (800910c <eMBInit+0x108>)
 8009074:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8009076:	4b26      	ldr	r3, [pc, #152]	; (8009110 <eMBInit+0x10c>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800907c:	4b25      	ldr	r3, [pc, #148]	; (8009114 <eMBInit+0x110>)
 800907e:	4a26      	ldr	r2, [pc, #152]	; (8009118 <eMBInit+0x114>)
 8009080:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8009082:	4b26      	ldr	r3, [pc, #152]	; (800911c <eMBInit+0x118>)
 8009084:	4a26      	ldr	r2, [pc, #152]	; (8009120 <eMBInit+0x11c>)
 8009086:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8009088:	4b26      	ldr	r3, [pc, #152]	; (8009124 <eMBInit+0x120>)
 800908a:	4a27      	ldr	r2, [pc, #156]	; (8009128 <eMBInit+0x124>)
 800908c:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800908e:	4b17      	ldr	r3, [pc, #92]	; (80090ec <eMBInit+0xe8>)
 8009090:	7818      	ldrb	r0, [r3, #0]
 8009092:	230f      	movs	r3, #15
 8009094:	18fc      	adds	r4, r7, r3
 8009096:	2320      	movs	r3, #32
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	781d      	ldrb	r5, [r3, #0]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	1d7b      	adds	r3, r7, #5
 80090a0:	7819      	ldrb	r1, [r3, #0]
 80090a2:	002b      	movs	r3, r5
 80090a4:	f000 f974 	bl	8009390 <eMBRTUInit>
 80090a8:	0003      	movs	r3, r0
 80090aa:	7023      	strb	r3, [r4, #0]
            break;
 80090ac:	e003      	b.n	80090b6 <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80090ae:	230f      	movs	r3, #15
 80090b0:	18fb      	adds	r3, r7, r3
 80090b2:	2202      	movs	r2, #2
 80090b4:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 80090b6:	240f      	movs	r4, #15
 80090b8:	193b      	adds	r3, r7, r4
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10e      	bne.n	80090de <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 80090c0:	f000 fbd2 	bl	8009868 <xMBPortEventInit>
 80090c4:	1e03      	subs	r3, r0, #0
 80090c6:	d103      	bne.n	80090d0 <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80090c8:	193b      	adds	r3, r7, r4
 80090ca:	2203      	movs	r2, #3
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e006      	b.n	80090de <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 80090d0:	4b16      	ldr	r3, [pc, #88]	; (800912c <eMBInit+0x128>)
 80090d2:	1dfa      	adds	r2, r7, #7
 80090d4:	7812      	ldrb	r2, [r2, #0]
 80090d6:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <eMBInit+0x12c>)
 80090da:	2201      	movs	r2, #1
 80090dc:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80090de:	230f      	movs	r3, #15
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	781b      	ldrb	r3, [r3, #0]
}
 80090e4:	0018      	movs	r0, r3
 80090e6:	46bd      	mov	sp, r7
 80090e8:	b004      	add	sp, #16
 80090ea:	bdb0      	pop	{r4, r5, r7, pc}
 80090ec:	20000642 	.word	0x20000642
 80090f0:	20000648 	.word	0x20000648
 80090f4:	0800942d 	.word	0x0800942d
 80090f8:	2000064c 	.word	0x2000064c
 80090fc:	08009455 	.word	0x08009455
 8009100:	20000644 	.word	0x20000644
 8009104:	08009525 	.word	0x08009525
 8009108:	20000650 	.word	0x20000650
 800910c:	08009475 	.word	0x08009475
 8009110:	20000654 	.word	0x20000654
 8009114:	20000658 	.word	0x20000658
 8009118:	0800960d 	.word	0x0800960d
 800911c:	2000065c 	.word	0x2000065c
 8009120:	080096e1 	.word	0x080096e1
 8009124:	20000660 	.word	0x20000660
 8009128:	08009795 	.word	0x08009795
 800912c:	20000643 	.word	0x20000643
 8009130:	20000009 	.word	0x20000009

08009134 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800913a:	1dfb      	adds	r3, r7, #7
 800913c:	2200      	movs	r2, #0
 800913e:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 8009140:	4b09      	ldr	r3, [pc, #36]	; (8009168 <eMBEnable+0x34>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d106      	bne.n	8009156 <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8009148:	4b08      	ldr	r3, [pc, #32]	; (800916c <eMBEnable+0x38>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <eMBEnable+0x34>)
 8009150:	2200      	movs	r2, #0
 8009152:	701a      	strb	r2, [r3, #0]
 8009154:	e002      	b.n	800915c <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8009156:	1dfb      	adds	r3, r7, #7
 8009158:	2206      	movs	r2, #6
 800915a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800915c:	1dfb      	adds	r3, r7, #7
 800915e:	781b      	ldrb	r3, [r3, #0]
}
 8009160:	0018      	movs	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	b002      	add	sp, #8
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000009 	.word	0x20000009
 800916c:	20000648 	.word	0x20000648

08009170 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8009170:	b5b0      	push	{r4, r5, r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8009176:	1cfb      	adds	r3, r7, #3
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800917c:	4b57      	ldr	r3, [pc, #348]	; (80092dc <eMBPoll+0x16c>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 8009184:	2306      	movs	r3, #6
 8009186:	e0a5      	b.n	80092d4 <eMBPoll+0x164>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8009188:	1cbb      	adds	r3, r7, #2
 800918a:	0018      	movs	r0, r3
 800918c:	f000 fb8e 	bl	80098ac <xMBPortEventGet>
 8009190:	0003      	movs	r3, r0
 8009192:	2b01      	cmp	r3, #1
 8009194:	d000      	beq.n	8009198 <eMBPoll+0x28>
 8009196:	e093      	b.n	80092c0 <eMBPoll+0x150>
    {
        switch ( eEvent )
 8009198:	1cbb      	adds	r3, r7, #2
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d100      	bne.n	80091a2 <eMBPoll+0x32>
 80091a0:	e090      	b.n	80092c4 <eMBPoll+0x154>
 80091a2:	dd00      	ble.n	80091a6 <eMBPoll+0x36>
 80091a4:	e095      	b.n	80092d2 <eMBPoll+0x162>
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d024      	beq.n	80091f4 <eMBPoll+0x84>
 80091aa:	dd00      	ble.n	80091ae <eMBPoll+0x3e>
 80091ac:	e091      	b.n	80092d2 <eMBPoll+0x162>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d100      	bne.n	80091b4 <eMBPoll+0x44>
 80091b2:	e089      	b.n	80092c8 <eMBPoll+0x158>
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d000      	beq.n	80091ba <eMBPoll+0x4a>
 80091b8:	e08b      	b.n	80092d2 <eMBPoll+0x162>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80091ba:	4b49      	ldr	r3, [pc, #292]	; (80092e0 <eMBPoll+0x170>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	1cfc      	adds	r4, r7, #3
 80091c0:	4a48      	ldr	r2, [pc, #288]	; (80092e4 <eMBPoll+0x174>)
 80091c2:	4949      	ldr	r1, [pc, #292]	; (80092e8 <eMBPoll+0x178>)
 80091c4:	4849      	ldr	r0, [pc, #292]	; (80092ec <eMBPoll+0x17c>)
 80091c6:	4798      	blx	r3
 80091c8:	0003      	movs	r3, r0
 80091ca:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 80091cc:	1cfb      	adds	r3, r7, #3
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d000      	beq.n	80091d6 <eMBPoll+0x66>
 80091d4:	e07a      	b.n	80092cc <eMBPoll+0x15c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80091d6:	4b45      	ldr	r3, [pc, #276]	; (80092ec <eMBPoll+0x17c>)
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <eMBPoll+0x180>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d004      	beq.n	80091ec <eMBPoll+0x7c>
 80091e2:	4b42      	ldr	r3, [pc, #264]	; (80092ec <eMBPoll+0x17c>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d000      	beq.n	80091ec <eMBPoll+0x7c>
 80091ea:	e06f      	b.n	80092cc <eMBPoll+0x15c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80091ec:	2002      	movs	r0, #2
 80091ee:	f000 fb47 	bl	8009880 <xMBPortEventPost>
                }
            }
            break;
 80091f2:	e06b      	b.n	80092cc <eMBPoll+0x15c>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80091f4:	4b3c      	ldr	r3, [pc, #240]	; (80092e8 <eMBPoll+0x178>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781a      	ldrb	r2, [r3, #0]
 80091fa:	4b3e      	ldr	r3, [pc, #248]	; (80092f4 <eMBPoll+0x184>)
 80091fc:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80091fe:	4b3e      	ldr	r3, [pc, #248]	; (80092f8 <eMBPoll+0x188>)
 8009200:	2201      	movs	r2, #1
 8009202:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8009204:	2300      	movs	r3, #0
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	e020      	b.n	800924c <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800920a:	4b3c      	ldr	r3, [pc, #240]	; (80092fc <eMBPoll+0x18c>)
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	00d2      	lsls	r2, r2, #3
 8009210:	5cd3      	ldrb	r3, [r2, r3]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01e      	beq.n	8009254 <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8009216:	4b39      	ldr	r3, [pc, #228]	; (80092fc <eMBPoll+0x18c>)
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	00d2      	lsls	r2, r2, #3
 800921c:	5cd2      	ldrb	r2, [r2, r3]
 800921e:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <eMBPoll+0x184>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d10f      	bne.n	8009246 <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8009226:	4a35      	ldr	r2, [pc, #212]	; (80092fc <eMBPoll+0x18c>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	18d3      	adds	r3, r2, r3
 800922e:	3304      	adds	r3, #4
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <eMBPoll+0x178>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	492b      	ldr	r1, [pc, #172]	; (80092e4 <eMBPoll+0x174>)
 8009238:	0018      	movs	r0, r3
 800923a:	4790      	blx	r2
 800923c:	0003      	movs	r3, r0
 800923e:	001a      	movs	r2, r3
 8009240:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <eMBPoll+0x188>)
 8009242:	701a      	strb	r2, [r3, #0]
                    break;
 8009244:	e007      	b.n	8009256 <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3301      	adds	r3, #1
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b0f      	cmp	r3, #15
 8009250:	dddb      	ble.n	800920a <eMBPoll+0x9a>
 8009252:	e000      	b.n	8009256 <eMBPoll+0xe6>
                    break;
 8009254:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8009256:	4b25      	ldr	r3, [pc, #148]	; (80092ec <eMBPoll+0x17c>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d038      	beq.n	80092d0 <eMBPoll+0x160>
            {
                if( eException != MB_EX_NONE )
 800925e:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <eMBPoll+0x188>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d01e      	beq.n	80092a4 <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8009266:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <eMBPoll+0x174>)
 8009268:	2200      	movs	r2, #0
 800926a:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <eMBPoll+0x184>)
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <eMBPoll+0x178>)
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <eMBPoll+0x174>)
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	1c58      	adds	r0, r3, #1
 800927a:	b284      	uxth	r4, r0
 800927c:	4819      	ldr	r0, [pc, #100]	; (80092e4 <eMBPoll+0x174>)
 800927e:	8004      	strh	r4, [r0, #0]
 8009280:	18cb      	adds	r3, r1, r3
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	4249      	negs	r1, r1
 8009286:	430a      	orrs	r2, r1
 8009288:	b2d2      	uxtb	r2, r2
 800928a:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800928c:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <eMBPoll+0x178>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <eMBPoll+0x174>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	b288      	uxth	r0, r1
 8009298:	4912      	ldr	r1, [pc, #72]	; (80092e4 <eMBPoll+0x174>)
 800929a:	8008      	strh	r0, [r1, #0]
 800929c:	18d3      	adds	r3, r2, r3
 800929e:	4a16      	ldr	r2, [pc, #88]	; (80092f8 <eMBPoll+0x188>)
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80092a4:	4b16      	ldr	r3, [pc, #88]	; (8009300 <eMBPoll+0x190>)
 80092a6:	681d      	ldr	r5, [r3, #0]
 80092a8:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <eMBPoll+0x180>)
 80092aa:	7818      	ldrb	r0, [r3, #0]
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <eMBPoll+0x178>)
 80092ae:	6819      	ldr	r1, [r3, #0]
 80092b0:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <eMBPoll+0x174>)
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	1cfc      	adds	r4, r7, #3
 80092b6:	001a      	movs	r2, r3
 80092b8:	47a8      	blx	r5
 80092ba:	0003      	movs	r3, r0
 80092bc:	7023      	strb	r3, [r4, #0]
            }
            break;
 80092be:	e007      	b.n	80092d0 <eMBPoll+0x160>

        case EV_FRAME_SENT:
            break;
        }
    }
 80092c0:	46c0      	nop			; (mov r8, r8)
 80092c2:	e006      	b.n	80092d2 <eMBPoll+0x162>
            break;
 80092c4:	46c0      	nop			; (mov r8, r8)
 80092c6:	e004      	b.n	80092d2 <eMBPoll+0x162>
            break;
 80092c8:	46c0      	nop			; (mov r8, r8)
 80092ca:	e002      	b.n	80092d2 <eMBPoll+0x162>
            break;
 80092cc:	46c0      	nop			; (mov r8, r8)
 80092ce:	e000      	b.n	80092d2 <eMBPoll+0x162>
            break;
 80092d0:	46c0      	nop			; (mov r8, r8)
    return MB_ENOERR;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	0018      	movs	r0, r3
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b002      	add	sp, #8
 80092da:	bdb0      	pop	{r4, r5, r7, pc}
 80092dc:	20000009 	.word	0x20000009
 80092e0:	20000650 	.word	0x20000650
 80092e4:	2000066c 	.word	0x2000066c
 80092e8:	20000668 	.word	0x20000668
 80092ec:	20000664 	.word	0x20000664
 80092f0:	20000642 	.word	0x20000642
 80092f4:	2000066e 	.word	0x2000066e
 80092f8:	2000066f 	.word	0x2000066f
 80092fc:	2000000c 	.word	0x2000000c
 8009300:	20000644 	.word	0x20000644

08009304 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	000a      	movs	r2, r1
 800930e:	1cbb      	adds	r3, r7, #2
 8009310:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8009312:	230f      	movs	r3, #15
 8009314:	18fb      	adds	r3, r7, r3
 8009316:	22ff      	movs	r2, #255	; 0xff
 8009318:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 800931a:	230e      	movs	r3, #14
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	22ff      	movs	r2, #255	; 0xff
 8009320:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8009322:	e019      	b.n	8009358 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	200e      	movs	r0, #14
 800932e:	183b      	adds	r3, r7, r0
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4053      	eors	r3, r2
 8009334:	b2db      	uxtb	r3, r3
 8009336:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8009338:	4a13      	ldr	r2, [pc, #76]	; (8009388 <usMBCRC16+0x84>)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	18d3      	adds	r3, r2, r3
 800933e:	7819      	ldrb	r1, [r3, #0]
 8009340:	183b      	adds	r3, r7, r0
 8009342:	200f      	movs	r0, #15
 8009344:	183a      	adds	r2, r7, r0
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	404a      	eors	r2, r1
 800934a:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 800934c:	183b      	adds	r3, r7, r0
 800934e:	490f      	ldr	r1, [pc, #60]	; (800938c <usMBCRC16+0x88>)
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	188a      	adds	r2, r1, r2
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8009358:	1cbb      	adds	r3, r7, #2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	1cba      	adds	r2, r7, #2
 800935e:	1e59      	subs	r1, r3, #1
 8009360:	8011      	strh	r1, [r2, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1de      	bne.n	8009324 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8009366:	230f      	movs	r3, #15
 8009368:	18fb      	adds	r3, r7, r3
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	b21a      	sxth	r2, r3
 8009370:	230e      	movs	r3, #14
 8009372:	18fb      	adds	r3, r7, r3
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	b21b      	sxth	r3, r3
 8009378:	4313      	orrs	r3, r2
 800937a:	b21b      	sxth	r3, r3
 800937c:	b29b      	uxth	r3, r3
}
 800937e:	0018      	movs	r0, r3
 8009380:	46bd      	mov	sp, r7
 8009382:	b004      	add	sp, #16
 8009384:	bd80      	pop	{r7, pc}
 8009386:	46c0      	nop			; (mov r8, r8)
 8009388:	0800cd58 	.word	0x0800cd58
 800938c:	0800ce58 	.word	0x0800ce58

08009390 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	0004      	movs	r4, r0
 8009398:	0008      	movs	r0, r1
 800939a:	603a      	str	r2, [r7, #0]
 800939c:	0019      	movs	r1, r3
 800939e:	1dfb      	adds	r3, r7, #7
 80093a0:	1c22      	adds	r2, r4, #0
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	1dbb      	adds	r3, r7, #6
 80093a6:	1c02      	adds	r2, r0, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	1d7b      	adds	r3, r7, #5
 80093ac:	1c0a      	adds	r2, r1, #0
 80093ae:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80093b0:	240f      	movs	r4, #15
 80093b2:	193b      	adds	r3, r7, r4
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 80093b8:	f000 fa36 	bl	8009828 <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80093bc:	1d7b      	adds	r3, r7, #5
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	1dbb      	adds	r3, r7, #6
 80093c4:	7818      	ldrb	r0, [r3, #0]
 80093c6:	0013      	movs	r3, r2
 80093c8:	2208      	movs	r2, #8
 80093ca:	f000 fac3 	bl	8009954 <xMBPortSerialInit>
 80093ce:	0003      	movs	r3, r0
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d003      	beq.n	80093dc <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 80093d4:	193b      	adds	r3, r7, r4
 80093d6:	2203      	movs	r2, #3
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	e01b      	b.n	8009414 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	2396      	movs	r3, #150	; 0x96
 80093e0:	01db      	lsls	r3, r3, #7
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d902      	bls.n	80093ec <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80093e6:	2323      	movs	r3, #35	; 0x23
 80093e8:	60bb      	str	r3, [r7, #8]
 80093ea:	e007      	b.n	80093fc <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	0019      	movs	r1, r3
 80093f2:	480d      	ldr	r0, [pc, #52]	; (8009428 <eMBRTUInit+0x98>)
 80093f4:	f7f6 fea4 	bl	8000140 <__udivsi3>
 80093f8:	0003      	movs	r3, r0
 80093fa:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	0018      	movs	r0, r3
 8009402:	f000 fb55 	bl	8009ab0 <xMBPortTimersInit>
 8009406:	0003      	movs	r3, r0
 8009408:	2b01      	cmp	r3, #1
 800940a:	d003      	beq.n	8009414 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 800940c:	230f      	movs	r3, #15
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	2203      	movs	r2, #3
 8009412:	701a      	strb	r2, [r3, #0]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8009414:	f000 fa16 	bl	8009844 <__critical_exit>

    return eStatus;
 8009418:	230f      	movs	r3, #15
 800941a:	18fb      	adds	r3, r7, r3
 800941c:	781b      	ldrb	r3, [r3, #0]
}
 800941e:	0018      	movs	r0, r3
 8009420:	46bd      	mov	sp, r7
 8009422:	b005      	add	sp, #20
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	00177fa0 	.word	0x00177fa0

0800942c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8009430:	f000 f9fa 	bl	8009828 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <eMBRTUStart+0x24>)
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800943a:	2100      	movs	r1, #0
 800943c:	2001      	movs	r0, #1
 800943e:	f000 fa57 	bl	80098f0 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8009442:	f000 fb4d 	bl	8009ae0 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8009446:	f000 f9fd 	bl	8009844 <__critical_exit>
}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20000671 	.word	0x20000671

08009454 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8009458:	f000 f9e6 	bl	8009828 <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 800945c:	2100      	movs	r1, #0
 800945e:	2000      	movs	r0, #0
 8009460:	f000 fa46 	bl	80098f0 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8009464:	f000 fb4e 	bl	8009b04 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8009468:	f000 f9ec 	bl	8009844 <__critical_exit>
}
 800946c:	46c0      	nop			; (mov r8, r8)
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8009480:	2316      	movs	r3, #22
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2200      	movs	r2, #0
 8009486:	701a      	strb	r2, [r3, #0]
    (void)xFrameReceived;
    eMBErrorCode    eStatus = MB_ENOERR;
 8009488:	2317      	movs	r3, #23
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]

    ENTER_CRITICAL_SECTION(  );
 8009490:	f000 f9ca 	bl	8009828 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8009494:	4b1d      	ldr	r3, [pc, #116]	; (800950c <eMBRTUReceive+0x98>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	2bff      	cmp	r3, #255	; 0xff
 800949c:	d905      	bls.n	80094aa <eMBRTUReceive+0x36>
 800949e:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <eMBRTUReceive+0x9c>)
 80094a0:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <eMBRTUReceive+0xa0>)
 80094a2:	481d      	ldr	r0, [pc, #116]	; (8009518 <eMBRTUReceive+0xa4>)
 80094a4:	219d      	movs	r1, #157	; 0x9d
 80094a6:	f000 fcd3 	bl	8009e50 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80094aa:	4b18      	ldr	r3, [pc, #96]	; (800950c <eMBRTUReceive+0x98>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d91d      	bls.n	80094f0 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80094b4:	4b15      	ldr	r3, [pc, #84]	; (800950c <eMBRTUReceive+0x98>)
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	4b18      	ldr	r3, [pc, #96]	; (800951c <eMBRTUReceive+0xa8>)
 80094bc:	0011      	movs	r1, r2
 80094be:	0018      	movs	r0, r3
 80094c0:	f7ff ff20 	bl	8009304 <usMBCRC16>
 80094c4:	1e03      	subs	r3, r0, #0
 80094c6:	d113      	bne.n	80094f0 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80094c8:	4b14      	ldr	r3, [pc, #80]	; (800951c <eMBRTUReceive+0xa8>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80094d2:	4b0e      	ldr	r3, [pc, #56]	; (800950c <eMBRTUReceive+0x98>)
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b03      	subs	r3, #3
 80094da:	b29a      	uxth	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4a0f      	ldr	r2, [pc, #60]	; (8009520 <eMBRTUReceive+0xac>)
 80094e4:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 80094e6:	2316      	movs	r3, #22
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	e003      	b.n	80094f8 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 80094f0:	2317      	movs	r3, #23
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	2205      	movs	r2, #5
 80094f6:	701a      	strb	r2, [r3, #0]
    }

    EXIT_CRITICAL_SECTION(  );
 80094f8:	f000 f9a4 	bl	8009844 <__critical_exit>
    return eStatus;
 80094fc:	2317      	movs	r3, #23
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	781b      	ldrb	r3, [r3, #0]
}
 8009502:	0018      	movs	r0, r3
 8009504:	46bd      	mov	sp, r7
 8009506:	b006      	add	sp, #24
 8009508:	bd80      	pop	{r7, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	2000077a 	.word	0x2000077a
 8009510:	0800caac 	.word	0x0800caac
 8009514:	0800cf58 	.word	0x0800cf58
 8009518:	0800cad4 	.word	0x0800cad4
 800951c:	20000674 	.word	0x20000674
 8009520:	20000675 	.word	0x20000675

08009524 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8009524:	b5b0      	push	{r4, r5, r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6039      	str	r1, [r7, #0]
 800952c:	0011      	movs	r1, r2
 800952e:	1dfb      	adds	r3, r7, #7
 8009530:	1c02      	adds	r2, r0, #0
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	1d3b      	adds	r3, r7, #4
 8009536:	1c0a      	adds	r2, r1, #0
 8009538:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800953a:	230f      	movs	r3, #15
 800953c:	18fb      	adds	r3, r7, r3
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8009542:	f000 f971 	bl	8009828 <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8009546:	4b2c      	ldr	r3, [pc, #176]	; (80095f8 <eMBRTUSend+0xd4>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b01      	cmp	r3, #1
 800954e:	d145      	bne.n	80095dc <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1e5a      	subs	r2, r3, #1
 8009554:	4b29      	ldr	r3, [pc, #164]	; (80095fc <eMBRTUSend+0xd8>)
 8009556:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8009558:	4b29      	ldr	r3, [pc, #164]	; (8009600 <eMBRTUSend+0xdc>)
 800955a:	2201      	movs	r2, #1
 800955c:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800955e:	4b27      	ldr	r3, [pc, #156]	; (80095fc <eMBRTUSend+0xd8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	1dfa      	adds	r2, r7, #7
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <eMBRTUSend+0xdc>)
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29a      	uxth	r2, r3
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	18d3      	adds	r3, r2, r3
 8009574:	b29a      	uxth	r2, r3
 8009576:	4b22      	ldr	r3, [pc, #136]	; (8009600 <eMBRTUSend+0xdc>)
 8009578:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <eMBRTUSend+0xd8>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <eMBRTUSend+0xdc>)
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	250c      	movs	r5, #12
 8009586:	197c      	adds	r4, r7, r5
 8009588:	0019      	movs	r1, r3
 800958a:	0010      	movs	r0, r2
 800958c:	f7ff feba 	bl	8009304 <usMBCRC16>
 8009590:	0003      	movs	r3, r0
 8009592:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8009594:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <eMBRTUSend+0xdc>)
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	b291      	uxth	r1, r2
 800959e:	4a18      	ldr	r2, [pc, #96]	; (8009600 <eMBRTUSend+0xdc>)
 80095a0:	8011      	strh	r1, [r2, #0]
 80095a2:	001a      	movs	r2, r3
 80095a4:	197b      	adds	r3, r7, r5
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b2d9      	uxtb	r1, r3
 80095aa:	4b16      	ldr	r3, [pc, #88]	; (8009604 <eMBRTUSend+0xe0>)
 80095ac:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80095ae:	197b      	adds	r3, r7, r5
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	b299      	uxth	r1, r3
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <eMBRTUSend+0xdc>)
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	b290      	uxth	r0, r2
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <eMBRTUSend+0xdc>)
 80095c2:	8010      	strh	r0, [r2, #0]
 80095c4:	001a      	movs	r2, r3
 80095c6:	b2c9      	uxtb	r1, r1
 80095c8:	4b0e      	ldr	r3, [pc, #56]	; (8009604 <eMBRTUSend+0xe0>)
 80095ca:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <eMBRTUSend+0xe4>)
 80095ce:	2201      	movs	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 80095d2:	2101      	movs	r1, #1
 80095d4:	2000      	movs	r0, #0
 80095d6:	f000 f98b 	bl	80098f0 <vMBPortSerialEnable>
 80095da:	e003      	b.n	80095e4 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 80095dc:	230f      	movs	r3, #15
 80095de:	18fb      	adds	r3, r7, r3
 80095e0:	2205      	movs	r2, #5
 80095e2:	701a      	strb	r2, [r3, #0]
    }
    EXIT_CRITICAL_SECTION(  );
 80095e4:	f000 f92e 	bl	8009844 <__critical_exit>
    return eStatus;
 80095e8:	230f      	movs	r3, #15
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	781b      	ldrb	r3, [r3, #0]
}
 80095ee:	0018      	movs	r0, r3
 80095f0:	46bd      	mov	sp, r7
 80095f2:	b004      	add	sp, #16
 80095f4:	bdb0      	pop	{r4, r5, r7, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	20000671 	.word	0x20000671
 80095fc:	20000774 	.word	0x20000774
 8009600:	20000778 	.word	0x20000778
 8009604:	20000674 	.word	0x20000674
 8009608:	20000670 	.word	0x20000670

0800960c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8009612:	1dfb      	adds	r3, r7, #7
 8009614:	2200      	movs	r2, #0
 8009616:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8009618:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <xMBRTUReceiveFSM+0xb8>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <xMBRTUReceiveFSM+0x22>
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <xMBRTUReceiveFSM+0xbc>)
 8009624:	4a29      	ldr	r2, [pc, #164]	; (80096cc <xMBRTUReceiveFSM+0xc0>)
 8009626:	482a      	ldr	r0, [pc, #168]	; (80096d0 <xMBRTUReceiveFSM+0xc4>)
 8009628:	21e7      	movs	r1, #231	; 0xe7
 800962a:	f000 fc11 	bl	8009e50 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800962e:	1dbb      	adds	r3, r7, #6
 8009630:	0018      	movs	r0, r3
 8009632:	f000 fa03 	bl	8009a3c <xMBPortSerialGetByte>

    switch ( eRcvState )
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <xMBRTUReceiveFSM+0xc8>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b03      	cmp	r3, #3
 800963e:	d00b      	beq.n	8009658 <xMBRTUReceiveFSM+0x4c>
 8009640:	dc3a      	bgt.n	80096b8 <xMBRTUReceiveFSM+0xac>
 8009642:	2b02      	cmp	r3, #2
 8009644:	d020      	beq.n	8009688 <xMBRTUReceiveFSM+0x7c>
 8009646:	dc37      	bgt.n	80096b8 <xMBRTUReceiveFSM+0xac>
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <xMBRTUReceiveFSM+0x46>
 800964c:	2b01      	cmp	r3, #1
 800964e:	d006      	beq.n	800965e <xMBRTUReceiveFSM+0x52>
 8009650:	e032      	b.n	80096b8 <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8009652:	f000 fa45 	bl	8009ae0 <vMBPortTimersEnable>
        break;
 8009656:	e02f      	b.n	80096b8 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8009658:	f000 fa42 	bl	8009ae0 <vMBPortTimersEnable>
        break;
 800965c:	e02c      	b.n	80096b8 <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800965e:	4b1e      	ldr	r3, [pc, #120]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 8009660:	2200      	movs	r2, #0
 8009662:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8009664:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	b291      	uxth	r1, r2
 800966e:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 8009670:	8011      	strh	r1, [r2, #0]
 8009672:	001a      	movs	r2, r3
 8009674:	1dbb      	adds	r3, r7, #6
 8009676:	7819      	ldrb	r1, [r3, #0]
 8009678:	4b18      	ldr	r3, [pc, #96]	; (80096dc <xMBRTUReceiveFSM+0xd0>)
 800967a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800967c:	4b15      	ldr	r3, [pc, #84]	; (80096d4 <xMBRTUReceiveFSM+0xc8>)
 800967e:	2202      	movs	r2, #2
 8009680:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8009682:	f000 fa2d 	bl	8009ae0 <vMBPortTimersEnable>
        break;
 8009686:	e017      	b.n	80096b8 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8009688:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	2bff      	cmp	r3, #255	; 0xff
 8009690:	d80c      	bhi.n	80096ac <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	b291      	uxth	r1, r2
 800969c:	4a0e      	ldr	r2, [pc, #56]	; (80096d8 <xMBRTUReceiveFSM+0xcc>)
 800969e:	8011      	strh	r1, [r2, #0]
 80096a0:	001a      	movs	r2, r3
 80096a2:	1dbb      	adds	r3, r7, #6
 80096a4:	7819      	ldrb	r1, [r3, #0]
 80096a6:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <xMBRTUReceiveFSM+0xd0>)
 80096a8:	5499      	strb	r1, [r3, r2]
 80096aa:	e002      	b.n	80096b2 <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80096ac:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <xMBRTUReceiveFSM+0xc8>)
 80096ae:	2203      	movs	r2, #3
 80096b0:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80096b2:	f000 fa15 	bl	8009ae0 <vMBPortTimersEnable>
        break;
 80096b6:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 80096b8:	1dfb      	adds	r3, r7, #7
 80096ba:	781b      	ldrb	r3, [r3, #0]
}
 80096bc:	0018      	movs	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	b002      	add	sp, #8
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000670 	.word	0x20000670
 80096c8:	0800cb00 	.word	0x0800cb00
 80096cc:	0800cf68 	.word	0x0800cf68
 80096d0:	0800cad4 	.word	0x0800cad4
 80096d4:	20000671 	.word	0x20000671
 80096d8:	2000077a 	.word	0x2000077a
 80096dc:	20000674 	.word	0x20000674

080096e0 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80096e6:	1dfb      	adds	r3, r7, #7
 80096e8:	2200      	movs	r2, #0
 80096ea:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <xMBRTUTransmitFSM+0x98>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d006      	beq.n	8009704 <xMBRTUTransmitFSM+0x24>
 80096f6:	4b21      	ldr	r3, [pc, #132]	; (800977c <xMBRTUTransmitFSM+0x9c>)
 80096f8:	4a21      	ldr	r2, [pc, #132]	; (8009780 <xMBRTUTransmitFSM+0xa0>)
 80096fa:	2191      	movs	r1, #145	; 0x91
 80096fc:	0049      	lsls	r1, r1, #1
 80096fe:	4821      	ldr	r0, [pc, #132]	; (8009784 <xMBRTUTransmitFSM+0xa4>)
 8009700:	f000 fba6 	bl	8009e50 <__assert_func>

    switch ( eSndState )
 8009704:	4b20      	ldr	r3, [pc, #128]	; (8009788 <xMBRTUTransmitFSM+0xa8>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <xMBRTUTransmitFSM+0x34>
 800970e:	2b01      	cmp	r3, #1
 8009710:	d005      	beq.n	800971e <xMBRTUTransmitFSM+0x3e>
 8009712:	e02b      	b.n	800976c <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8009714:	2100      	movs	r1, #0
 8009716:	2001      	movs	r0, #1
 8009718:	f000 f8ea 	bl	80098f0 <vMBPortSerialEnable>
        break;
 800971c:	e026      	b.n	800976c <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800971e:	4b1b      	ldr	r3, [pc, #108]	; (800978c <xMBRTUTransmitFSM+0xac>)
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d013      	beq.n	8009750 <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <xMBRTUTransmitFSM+0xb0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	0018      	movs	r0, r3
 8009732:	f000 f973 	bl	8009a1c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <xMBRTUTransmitFSM+0xb0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	4b14      	ldr	r3, [pc, #80]	; (8009790 <xMBRTUTransmitFSM+0xb0>)
 800973e:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 8009740:	4b12      	ldr	r3, [pc, #72]	; (800978c <xMBRTUTransmitFSM+0xac>)
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <xMBRTUTransmitFSM+0xac>)
 800974c:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800974e:	e00c      	b.n	800976a <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8009750:	1dfc      	adds	r4, r7, #7
 8009752:	2003      	movs	r0, #3
 8009754:	f000 f894 	bl	8009880 <xMBPortEventPost>
 8009758:	0003      	movs	r3, r0
 800975a:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 800975c:	2100      	movs	r1, #0
 800975e:	2001      	movs	r0, #1
 8009760:	f000 f8c6 	bl	80098f0 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8009764:	4b08      	ldr	r3, [pc, #32]	; (8009788 <xMBRTUTransmitFSM+0xa8>)
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
        break;
 800976a:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	781b      	ldrb	r3, [r3, #0]
}
 8009770:	0018      	movs	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	b003      	add	sp, #12
 8009776:	bd90      	pop	{r4, r7, pc}
 8009778:	20000671 	.word	0x20000671
 800977c:	0800cb1c 	.word	0x0800cb1c
 8009780:	0800cf7c 	.word	0x0800cf7c
 8009784:	0800cad4 	.word	0x0800cad4
 8009788:	20000670 	.word	0x20000670
 800978c:	20000778 	.word	0x20000778
 8009790:	20000774 	.word	0x20000774

08009794 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800979a:	1dfb      	adds	r3, r7, #7
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 80097a0:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <xMBRTUTimerT35Expired+0x84>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d029      	beq.n	80097fe <xMBRTUTimerT35Expired+0x6a>
 80097aa:	dc12      	bgt.n	80097d2 <xMBRTUTimerT35Expired+0x3e>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <xMBRTUTimerT35Expired+0x22>
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d007      	beq.n	80097c4 <xMBRTUTimerT35Expired+0x30>
 80097b4:	e00d      	b.n	80097d2 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80097b6:	1dfc      	adds	r4, r7, #7
 80097b8:	2000      	movs	r0, #0
 80097ba:	f000 f861 	bl	8009880 <xMBPortEventPost>
 80097be:	0003      	movs	r3, r0
 80097c0:	7023      	strb	r3, [r4, #0]
        break;
 80097c2:	e01d      	b.n	8009800 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80097c4:	1dfc      	adds	r4, r7, #7
 80097c6:	2001      	movs	r0, #1
 80097c8:	f000 f85a 	bl	8009880 <xMBPortEventPost>
 80097cc:	0003      	movs	r3, r0
 80097ce:	7023      	strb	r3, [r4, #0]
        break;
 80097d0:	e016      	b.n	8009800 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80097d2:	4b11      	ldr	r3, [pc, #68]	; (8009818 <xMBRTUTimerT35Expired+0x84>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <xMBRTUTimerT35Expired+0x6c>
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <xMBRTUTimerT35Expired+0x84>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d00c      	beq.n	8009800 <xMBRTUTimerT35Expired+0x6c>
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <xMBRTUTimerT35Expired+0x84>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d007      	beq.n	8009800 <xMBRTUTimerT35Expired+0x6c>
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <xMBRTUTimerT35Expired+0x88>)
 80097f2:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <xMBRTUTimerT35Expired+0x8c>)
 80097f4:	215c      	movs	r1, #92	; 0x5c
 80097f6:	31ff      	adds	r1, #255	; 0xff
 80097f8:	480a      	ldr	r0, [pc, #40]	; (8009824 <xMBRTUTimerT35Expired+0x90>)
 80097fa:	f000 fb29 	bl	8009e50 <__assert_func>
        break;
 80097fe:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8009800:	f000 f980 	bl	8009b04 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8009804:	4b04      	ldr	r3, [pc, #16]	; (8009818 <xMBRTUTimerT35Expired+0x84>)
 8009806:	2201      	movs	r2, #1
 8009808:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800980a:	1dfb      	adds	r3, r7, #7
 800980c:	781b      	ldrb	r3, [r3, #0]
}
 800980e:	0018      	movs	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	b003      	add	sp, #12
 8009814:	bd90      	pop	{r4, r7, pc}
 8009816:	46c0      	nop			; (mov r8, r8)
 8009818:	20000671 	.word	0x20000671
 800981c:	0800cb38 	.word	0x0800cb38
 8009820:	0800cf90 	.word	0x0800cf90
 8009824:	0800cad4 	.word	0x0800cad4

08009828 <__critical_enter>:
#include "cmsis_gcc.h"

static uint32_t lock_count = 0;

void __critical_enter(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800982c:	b672      	cpsid	i
}
 800982e:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	lock_count++;
 8009830:	4b03      	ldr	r3, [pc, #12]	; (8009840 <__critical_enter+0x18>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	4b02      	ldr	r3, [pc, #8]	; (8009840 <__critical_enter+0x18>)
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	2000077c 	.word	0x2000077c

08009844 <__critical_exit>:

void __critical_exit(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
	lock_count--;
 8009848:	4b06      	ldr	r3, [pc, #24]	; (8009864 <__critical_exit+0x20>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	1e5a      	subs	r2, r3, #1
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <__critical_exit+0x20>)
 8009850:	601a      	str	r2, [r3, #0]
	if (lock_count == 0)
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <__critical_exit+0x20>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800985a:	b662      	cpsie	i
}
 800985c:	46c0      	nop			; (mov r8, r8)
		__enable_irq();
}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	2000077c 	.word	0x2000077c

08009868 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800986c:	4b03      	ldr	r3, [pc, #12]	; (800987c <xMBPortEventInit+0x14>)
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8009872:	2301      	movs	r3, #1
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	20000781 	.word	0x20000781

08009880 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	0002      	movs	r2, r0
 8009888:	1dfb      	adds	r3, r7, #7
 800988a:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <xMBPortEventPost+0x24>)
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <xMBPortEventPost+0x28>)
 8009894:	1dfa      	adds	r2, r7, #7
 8009896:	7812      	ldrb	r2, [r2, #0]
 8009898:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800989a:	2301      	movs	r3, #1
}
 800989c:	0018      	movs	r0, r3
 800989e:	46bd      	mov	sp, r7
 80098a0:	b002      	add	sp, #8
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000781 	.word	0x20000781
 80098a8:	20000780 	.word	0x20000780

080098ac <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 80098b4:	210f      	movs	r1, #15
 80098b6:	187b      	adds	r3, r7, r1
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <xMBPortEventGet+0x3c>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <xMBPortEventGet+0x40>)
 80098c6:	781a      	ldrb	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <xMBPortEventGet+0x3c>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80098d2:	187b      	adds	r3, r7, r1
 80098d4:	2201      	movs	r2, #1
 80098d6:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 80098d8:	230f      	movs	r3, #15
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	781b      	ldrb	r3, [r3, #0]
}
 80098de:	0018      	movs	r0, r3
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b004      	add	sp, #16
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	20000781 	.word	0x20000781
 80098ec:	20000780 	.word	0x20000780

080098f0 <vMBPortSerialEnable>:
static void Modbus_Send(uint8_t c);
#define Modbus_Revice HAL_UART_Receive_IT(uart, &singlechar, 1)
#define Modbus_AbortTransmit HAL_UART_AbortTransmit_IT(uart)
#define Modbus_AbortReceive HAL_UART_AbortReceive_IT(uart)
/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	0002      	movs	r2, r0
 80098f8:	1dfb      	adds	r3, r7, #7
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	1dbb      	adds	r3, r7, #6
 80098fe:	1c0a      	adds	r2, r1, #0
 8009900:	701a      	strb	r2, [r3, #0]
	/* If xRXEnable enable serial receive interrupts. If xTxENable enable
	 * transmitter empty interrupts.
	 */
	if(xRxEnable)
 8009902:	1dfb      	adds	r3, r7, #7
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <vMBPortSerialEnable+0x2a>
	{
		Modbus_Revice;
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <vMBPortSerialEnable+0x58>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	490f      	ldr	r1, [pc, #60]	; (800994c <vMBPortSerialEnable+0x5c>)
 8009910:	2201      	movs	r2, #1
 8009912:	0018      	movs	r0, r3
 8009914:	f7fc fd8e 	bl	8006434 <HAL_UART_Receive_IT>
 8009918:	e004      	b.n	8009924 <vMBPortSerialEnable+0x34>
	}
	else
	{
		Modbus_AbortReceive;
 800991a:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <vMBPortSerialEnable+0x58>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	0018      	movs	r0, r3
 8009920:	f7fc fe68 	bl	80065f4 <HAL_UART_AbortReceive_IT>
	}

	if(xTxEnable)
 8009924:	1dbb      	adds	r3, r7, #6
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <vMBPortSerialEnable+0x44>
	{
		pxMBFrameCBTransmitterEmpty();
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <vMBPortSerialEnable+0x60>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4798      	blx	r3
	}
	else
	{
		Modbus_AbortTransmit;
	}
}
 8009932:	e004      	b.n	800993e <vMBPortSerialEnable+0x4e>
		Modbus_AbortTransmit;
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <vMBPortSerialEnable+0x58>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	0018      	movs	r0, r3
 800993a:	f7fc fde3 	bl	8006504 <HAL_UART_AbortTransmit_IT>
}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	46bd      	mov	sp, r7
 8009942:	b002      	add	sp, #8
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	20000784 	.word	0x20000784
 800994c:	20000788 	.word	0x20000788
 8009950:	2000065c 	.word	0x2000065c

08009954 <xMBPortSerialInit>:

BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
		eMBParity eParity) {
 8009954:	b590      	push	{r4, r7, lr}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	0004      	movs	r4, r0
 800995c:	6039      	str	r1, [r7, #0]
 800995e:	0010      	movs	r0, r2
 8009960:	0019      	movs	r1, r3
 8009962:	1dfb      	adds	r3, r7, #7
 8009964:	1c22      	adds	r2, r4, #0
 8009966:	701a      	strb	r2, [r3, #0]
 8009968:	1dbb      	adds	r3, r7, #6
 800996a:	1c02      	adds	r2, r0, #0
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	1d7b      	adds	r3, r7, #5
 8009970:	1c0a      	adds	r2, r1, #0
 8009972:	701a      	strb	r2, [r3, #0]
	switch (ucPORT) {
 8009974:	1dfb      	adds	r3, r7, #7
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <xMBPortSerialInit+0x30>
		case 0:
			uart = &hlpuart1;
 800997c:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <xMBPortSerialInit+0xbc>)
 800997e:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <xMBPortSerialInit+0xc0>)
 8009980:	601a      	str	r2, [r3, #0]
			break;
 8009982:	e003      	b.n	800998c <xMBPortSerialInit+0x38>
		default:
			uart = &huart1;
 8009984:	4b22      	ldr	r3, [pc, #136]	; (8009a10 <xMBPortSerialInit+0xbc>)
 8009986:	4a24      	ldr	r2, [pc, #144]	; (8009a18 <xMBPortSerialInit+0xc4>)
 8009988:	601a      	str	r2, [r3, #0]
			break;
 800998a:	46c0      	nop			; (mov r8, r8)
	}
	uart->Init.BaudRate = ulBaudRate;
 800998c:	4b20      	ldr	r3, [pc, #128]	; (8009a10 <xMBPortSerialInit+0xbc>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	switch (ucDataBits) {
 8009994:	1dbb      	adds	r3, r7, #6
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b07      	cmp	r3, #7
 800999a:	d002      	beq.n	80099a2 <xMBPortSerialInit+0x4e>
 800999c:	2b08      	cmp	r3, #8
 800999e:	d006      	beq.n	80099ae <xMBPortSerialInit+0x5a>
 80099a0:	e00a      	b.n	80099b8 <xMBPortSerialInit+0x64>
		case 7:
			uart->Init.WordLength = UART_WORDLENGTH_7B;
 80099a2:	4b1b      	ldr	r3, [pc, #108]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2280      	movs	r2, #128	; 0x80
 80099a8:	0552      	lsls	r2, r2, #21
 80099aa:	609a      	str	r2, [r3, #8]
			break;
 80099ac:	e00a      	b.n	80099c4 <xMBPortSerialInit+0x70>
		case 8:
			uart->Init.WordLength = UART_WORDLENGTH_8B;
 80099ae:	4b18      	ldr	r3, [pc, #96]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	609a      	str	r2, [r3, #8]
			break;
 80099b6:	e005      	b.n	80099c4 <xMBPortSerialInit+0x70>
		default:
			uart->Init.WordLength = UART_WORDLENGTH_9B;
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2280      	movs	r2, #128	; 0x80
 80099be:	0152      	lsls	r2, r2, #5
 80099c0:	609a      	str	r2, [r3, #8]
			break;
 80099c2:	46c0      	nop			; (mov r8, r8)
	}
	switch (eParity) {
 80099c4:	1d7b      	adds	r3, r7, #5
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <xMBPortSerialInit+0x7e>
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d005      	beq.n	80099dc <xMBPortSerialInit+0x88>
 80099d0:	e00a      	b.n	80099e8 <xMBPortSerialInit+0x94>
		case MB_PAR_NONE:
			uart->Init.Parity = UART_PARITY_NONE;
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	611a      	str	r2, [r3, #16]
			break;
 80099da:	e00b      	b.n	80099f4 <xMBPortSerialInit+0xa0>
		case MB_PAR_EVEN:
			uart->Init.Parity = UART_PARITY_EVEN;
 80099dc:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2280      	movs	r2, #128	; 0x80
 80099e2:	00d2      	lsls	r2, r2, #3
 80099e4:	611a      	str	r2, [r3, #16]
			break;
 80099e6:	e005      	b.n	80099f4 <xMBPortSerialInit+0xa0>
		default:
			uart->Init.Parity = UART_PARITY_ODD;
 80099e8:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	22c0      	movs	r2, #192	; 0xc0
 80099ee:	00d2      	lsls	r2, r2, #3
 80099f0:	611a      	str	r2, [r3, #16]
			break;
 80099f2:	46c0      	nop			; (mov r8, r8)
	}
	if (HAL_UART_Init(uart) != HAL_OK) {
 80099f4:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <xMBPortSerialInit+0xbc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7fc fc47 	bl	800628c <HAL_UART_Init>
 80099fe:	1e03      	subs	r3, r0, #0
 8009a00:	d001      	beq.n	8009a06 <xMBPortSerialInit+0xb2>
		return FALSE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e000      	b.n	8009a08 <xMBPortSerialInit+0xb4>
	}
	return TRUE;
 8009a06:	2301      	movs	r3, #1
}
 8009a08:	0018      	movs	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	b003      	add	sp, #12
 8009a0e:	bd90      	pop	{r4, r7, pc}
 8009a10:	20000784 	.word	0x20000784
 8009a14:	2000036c 	.word	0x2000036c
 8009a18:	200003f0 	.word	0x200003f0

08009a1c <xMBPortSerialPutByte>:
void vMBPortClose(void)
{
	Modbus_AbortTransmit;
	Modbus_AbortReceive;
}
BOOL xMBPortSerialPutByte(CHAR ucByte) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	0002      	movs	r2, r0
 8009a24:	1dfb      	adds	r3, r7, #7
 8009a26:	701a      	strb	r2, [r3, #0]
	/* Put a byte in the UARTs transmit buffer. This function is called
	 * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
	 * called. */
	Modbus_Send((uint8_t)ucByte);
 8009a28:	1dfb      	adds	r3, r7, #7
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f000 f82b 	bl	8009a88 <Modbus_Send>
	return TRUE;
 8009a32:	2301      	movs	r3, #1
}
 8009a34:	0018      	movs	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	b002      	add	sp, #8
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR *pucByte) {
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	/* Return the byte in the UARTs receive buffer. This function is called
	 * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
	 */
	*pucByte = (uint8_t)(singlechar);
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <xMBPortSerialGetByte+0x1c>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8009a4c:	2301      	movs	r3, #1
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20000788 	.word	0x20000788

08009a5c <prvvUARTRxISR>:
/* Create an interrupt handler for the receive interrupt for your target
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
void prvvUARTRxISR(void) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
	pxMBFrameCBByteReceived();
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <prvvUARTRxISR+0x20>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4798      	blx	r3
	Modbus_Revice;
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <prvvUARTRxISR+0x24>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4906      	ldr	r1, [pc, #24]	; (8009a84 <prvvUARTRxISR+0x28>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7fc fce0 	bl	8006434 <HAL_UART_Receive_IT>
}
 8009a74:	46c0      	nop			; (mov r8, r8)
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	20000658 	.word	0x20000658
 8009a80:	20000784 	.word	0x20000784
 8009a84:	20000788 	.word	0x20000788

08009a88 <Modbus_Send>:
static void Modbus_Send(uint8_t c){
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	0002      	movs	r2, r0
 8009a90:	1dfb      	adds	r3, r7, #7
 8009a92:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(uart, &c, 1);
 8009a94:	4b05      	ldr	r3, [pc, #20]	; (8009aac <Modbus_Send+0x24>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	1df9      	adds	r1, r7, #7
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f7fc fc49 	bl	8006334 <HAL_UART_Transmit_IT>
}
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	b002      	add	sp, #8
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	20000784 	.word	0x20000784

08009ab0 <xMBPortTimersInit>:
TIM_HandleTypeDef *tim;
static uint16_t timeout = 0;
volatile uint16_t counter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	0002      	movs	r2, r0
 8009ab8:	1dbb      	adds	r3, r7, #6
 8009aba:	801a      	strh	r2, [r3, #0]
	tim = &htim2;
 8009abc:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <xMBPortTimersInit+0x24>)
 8009abe:	4a06      	ldr	r2, [pc, #24]	; (8009ad8 <xMBPortTimersInit+0x28>)
 8009ac0:	601a      	str	r2, [r3, #0]
	timeout = usTim1Timerout50us;
 8009ac2:	4b06      	ldr	r3, [pc, #24]	; (8009adc <xMBPortTimersInit+0x2c>)
 8009ac4:	1dba      	adds	r2, r7, #6
 8009ac6:	8812      	ldrh	r2, [r2, #0]
 8009ac8:	801a      	strh	r2, [r3, #0]
	return FALSE;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	2000078c 	.word	0x2000078c
 8009ad8:	200002ec 	.word	0x200002ec
 8009adc:	20000790 	.word	0x20000790

08009ae0 <vMBPortTimersEnable>:

inline void vMBPortTimersEnable() {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
	/* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	counter = 0;
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <vMBPortTimersEnable+0x1c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim);
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <vMBPortTimersEnable+0x20>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	0018      	movs	r0, r3
 8009af0:	f7fc f822 	bl	8005b38 <HAL_TIM_Base_Start_IT>
}
 8009af4:	46c0      	nop			; (mov r8, r8)
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	20000792 	.word	0x20000792
 8009b00:	2000078c 	.word	0x2000078c

08009b04 <vMBPortTimersDisable>:

inline void vMBPortTimersDisable() {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
	/* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(tim);
 8009b08:	4b03      	ldr	r3, [pc, #12]	; (8009b18 <vMBPortTimersDisable+0x14>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7fc f865 	bl	8005bdc <HAL_TIM_Base_Stop_IT>
}
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	2000078c 	.word	0x2000078c

08009b1c <prvvTIMERExpiredISR>:

/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
void prvvTIMERExpiredISR(void) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
	if ((++counter) >= timeout)
 8009b20:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <prvvTIMERExpiredISR+0x28>)
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3301      	adds	r3, #1
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	4a06      	ldr	r2, [pc, #24]	; (8009b44 <prvvTIMERExpiredISR+0x28>)
 8009b2c:	1c19      	adds	r1, r3, #0
 8009b2e:	8011      	strh	r1, [r2, #0]
 8009b30:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <prvvTIMERExpiredISR+0x2c>)
 8009b32:	8812      	ldrh	r2, [r2, #0]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d302      	bcc.n	8009b3e <prvvTIMERExpiredISR+0x22>
		(void) pxMBPortCBTimerExpired();
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <prvvTIMERExpiredISR+0x30>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4798      	blx	r3
}
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20000792 	.word	0x20000792
 8009b48:	20000790 	.word	0x20000790
 8009b4c:	20000660 	.word	0x20000660

08009b50 <i2c_init>:
#include "i2c_bsp.h"
#include "i2c.h"

#define i2c_master hi2c1

void i2c_init(void){
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0

}
 8009b54:	46c0      	nop			; (mov r8, r8)
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <i2c_read>:
void i2c_read(uint16_t addr,uint8_t *data,uint16_t length){
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	6039      	str	r1, [r7, #0]
 8009b64:	0011      	movs	r1, r2
 8009b66:	1dbb      	adds	r3, r7, #6
 8009b68:	1c02      	adds	r2, r0, #0
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	1c0a      	adds	r2, r1, #0
 8009b70:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&i2c_master,addr, data, length,0xffff);
 8009b72:	1d3b      	adds	r3, r7, #4
 8009b74:	881c      	ldrh	r4, [r3, #0]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	1dbb      	adds	r3, r7, #6
 8009b7a:	8819      	ldrh	r1, [r3, #0]
 8009b7c:	4804      	ldr	r0, [pc, #16]	; (8009b90 <i2c_read+0x34>)
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <i2c_read+0x38>)
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	0023      	movs	r3, r4
 8009b84:	f7fa fbb4 	bl	80042f0 <HAL_I2C_Master_Receive>
}
 8009b88:	46c0      	nop			; (mov r8, r8)
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bd90      	pop	{r4, r7, pc}
 8009b90:	20000278 	.word	0x20000278
 8009b94:	0000ffff 	.word	0x0000ffff

08009b98 <i2c_write>:
void i2c_write(uint16_t addr, uint8_t *pData,uint16_t Size){
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	6039      	str	r1, [r7, #0]
 8009ba0:	0011      	movs	r1, r2
 8009ba2:	1dbb      	adds	r3, r7, #6
 8009ba4:	1c02      	adds	r2, r0, #0
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	1d3b      	adds	r3, r7, #4
 8009baa:	1c0a      	adds	r2, r1, #0
 8009bac:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&i2c_master,addr, pData, Size, 0xffff);
 8009bae:	1d3b      	adds	r3, r7, #4
 8009bb0:	881c      	ldrh	r4, [r3, #0]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	1dbb      	adds	r3, r7, #6
 8009bb6:	8819      	ldrh	r1, [r3, #0]
 8009bb8:	4804      	ldr	r0, [pc, #16]	; (8009bcc <i2c_write+0x34>)
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <i2c_write+0x38>)
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	0023      	movs	r3, r4
 8009bc0:	f7fa fa8e 	bl	80040e0 <HAL_I2C_Master_Transmit>
}
 8009bc4:	46c0      	nop			; (mov r8, r8)
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	b003      	add	sp, #12
 8009bca:	bd90      	pop	{r4, r7, pc}
 8009bcc:	20000278 	.word	0x20000278
 8009bd0:	0000ffff 	.word	0x0000ffff

08009bd4 <SHT_begin>:
static bool read_temp_humi_imlp(SHT3x *p_sht);
static bool write_command(SHT3x *p_sht, uint16_t cmd);
static void read_bytes_imlp(SHT3x *p_sht, uint8_t *buff, uint16_t length);
static uint8_t crc8(const uint8_t *data, int len);

bool SHT_begin(SHT3x *p_sht) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	p_sht->addr = SHT31_DEFAULT_ADDR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2244      	movs	r2, #68	; 0x44
 8009be0:	701a      	strb	r2, [r3, #0]
	p_sht->humidity = 0;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]
	p_sht->temperature = 0;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
	p_sht->readTempHum = read_temp_humi_imlp;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a06      	ldr	r2, [pc, #24]	; (8009c0c <SHT_begin+0x38>)
 8009bf2:	60da      	str	r2, [r3, #12]
	p_sht->writeCommand = write_command;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a06      	ldr	r2, [pc, #24]	; (8009c10 <SHT_begin+0x3c>)
 8009bf8:	611a      	str	r2, [r3, #16]
	p_sht->readbytes = read_bytes_imlp;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <SHT_begin+0x40>)
 8009bfe:	615a      	str	r2, [r3, #20]
	return true;
 8009c00:	2301      	movs	r3, #1
}
 8009c02:	0018      	movs	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b002      	add	sp, #8
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	08009c7d 	.word	0x08009c7d
 8009c10:	08009d59 	.word	0x08009d59
 8009c14:	08009d93 	.word	0x08009d93

08009c18 <SHT_read_temp>:
float SHT_read_temp(SHT3x *p_sht) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	return p_sht->temperature;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
}
 8009c24:	1c18      	adds	r0, r3, #0
 8009c26:	46bd      	mov	sp, r7
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <SHT_read_humi>:
float SHT_read_humi(SHT3x *p_sht) {
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	return p_sht->humidity;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
}
 8009c38:	1c18      	adds	r0, r3, #0
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	b002      	add	sp, #8
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <SHT_reset>:
	uint16_t stat = data[0];
	stat <<= 8;
	stat |= data[1];
	return stat;
}
void SHT_reset(SHT3x *p_sht) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	p_sht->writeCommand(p_sht, SHT31_SOFTRESET);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	4903      	ldr	r1, [pc, #12]	; (8009c5c <SHT_reset+0x1c>)
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	0010      	movs	r0, r2
 8009c52:	4798      	blx	r3
}
 8009c54:	46c0      	nop			; (mov r8, r8)
 8009c56:	46bd      	mov	sp, r7
 8009c58:	b002      	add	sp, #8
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	000030a2 	.word	0x000030a2

08009c60 <SHT_mesure>:
	}
}
bool SHT_isHeaterEnabled(SHT3x *p_sht) {
	return true;
}
void SHT_mesure(SHT3x *p_sht){
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	p_sht->readTempHum(p_sht);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	0010      	movs	r0, r2
 8009c70:	4798      	blx	r3
}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	46bd      	mov	sp, r7
 8009c76:	b002      	add	sp, #8
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <read_temp_humi_imlp>:
static bool read_temp_humi_imlp(SHT3x *p_sht) {
 8009c7c:	b5b0      	push	{r4, r5, r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	uint8_t readbuffer[6];
	p_sht->writeCommand(p_sht, SHT31_MEAS_HIGHREP);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	2290      	movs	r2, #144	; 0x90
 8009c8a:	0191      	lsls	r1, r2, #6
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	0010      	movs	r0, r2
 8009c90:	4798      	blx	r3
	p_sht->readbytes(p_sht, readbuffer, sizeof(readbuffer));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2508      	movs	r5, #8
 8009c98:	1979      	adds	r1, r7, r5
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	2206      	movs	r2, #6
 8009c9e:	4798      	blx	r3
	if (readbuffer[2] != crc8(readbuffer, 2)
 8009ca0:	197b      	adds	r3, r7, r5
 8009ca2:	789c      	ldrb	r4, [r3, #2]
 8009ca4:	197b      	adds	r3, r7, r5
 8009ca6:	2102      	movs	r1, #2
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f000 f886 	bl	8009dba <crc8>
 8009cae:	0003      	movs	r3, r0
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d10a      	bne.n	8009cca <read_temp_humi_imlp+0x4e>
			|| readbuffer[5] != crc8(readbuffer + 3, 2))
 8009cb4:	197b      	adds	r3, r7, r5
 8009cb6:	795c      	ldrb	r4, [r3, #5]
 8009cb8:	197b      	adds	r3, r7, r5
 8009cba:	3303      	adds	r3, #3
 8009cbc:	2102      	movs	r1, #2
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f000 f87b 	bl	8009dba <crc8>
 8009cc4:	0003      	movs	r3, r0
 8009cc6:	429c      	cmp	r4, r3
 8009cc8:	d001      	beq.n	8009cce <read_temp_humi_imlp+0x52>
		return false;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e039      	b.n	8009d42 <read_temp_humi_imlp+0xc6>
	int32_t stemp = (int32_t) (((uint32_t) readbuffer[0] << 8) | readbuffer[1]);
 8009cce:	2408      	movs	r4, #8
 8009cd0:	193b      	adds	r3, r7, r4
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	193a      	adds	r2, r7, r4
 8009cd8:	7852      	ldrb	r2, [r2, #1]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]
	// simplified (65536 instead of 65535) integer version of:
	// temp = (stemp * 175.0f) / 65535.0f - 45.0f;
	stemp = ((4375 * stemp) >> 14) - 4500;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	4a1a      	ldr	r2, [pc, #104]	; (8009d4c <read_temp_humi_imlp+0xd0>)
 8009ce2:	4353      	muls	r3, r2
 8009ce4:	139b      	asrs	r3, r3, #14
 8009ce6:	4a1a      	ldr	r2, [pc, #104]	; (8009d50 <read_temp_humi_imlp+0xd4>)
 8009ce8:	4694      	mov	ip, r2
 8009cea:	4463      	add	r3, ip
 8009cec:	617b      	str	r3, [r7, #20]
	p_sht->temperature = (float) stemp / 100.0f;
 8009cee:	6978      	ldr	r0, [r7, #20]
 8009cf0:	f7f7 f918 	bl	8000f24 <__aeabi_i2f>
 8009cf4:	1c03      	adds	r3, r0, #0
 8009cf6:	4917      	ldr	r1, [pc, #92]	; (8009d54 <read_temp_humi_imlp+0xd8>)
 8009cf8:	1c18      	adds	r0, r3, #0
 8009cfa:	f7f6 fd07 	bl	800070c <__aeabi_fdiv>
 8009cfe:	1c03      	adds	r3, r0, #0
 8009d00:	1c1a      	adds	r2, r3, #0
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	609a      	str	r2, [r3, #8]

	uint32_t shum = ((uint32_t) readbuffer[3] << 8) | readbuffer[4];
 8009d06:	193b      	adds	r3, r7, r4
 8009d08:	78db      	ldrb	r3, [r3, #3]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	193a      	adds	r2, r7, r4
 8009d0e:	7912      	ldrb	r2, [r2, #4]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]
	// simplified (65536 instead of 65535) integer version of:
	// humidity = (shum * 100.0f) / 65535.0f;
	shum = (625 * shum) >> 12;
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	0013      	movs	r3, r2
 8009d18:	015b      	lsls	r3, r3, #5
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	009a      	lsls	r2, r3, #2
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	0b1b      	lsrs	r3, r3, #12
 8009d26:	613b      	str	r3, [r7, #16]
	p_sht->humidity = (float) shum / 100.0f;
 8009d28:	6938      	ldr	r0, [r7, #16]
 8009d2a:	f7f7 f949 	bl	8000fc0 <__aeabi_ui2f>
 8009d2e:	1c03      	adds	r3, r0, #0
 8009d30:	4908      	ldr	r1, [pc, #32]	; (8009d54 <read_temp_humi_imlp+0xd8>)
 8009d32:	1c18      	adds	r0, r3, #0
 8009d34:	f7f6 fcea 	bl	800070c <__aeabi_fdiv>
 8009d38:	1c03      	adds	r3, r0, #0
 8009d3a:	1c1a      	adds	r2, r3, #0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	605a      	str	r2, [r3, #4]

	return true;
 8009d40:	2301      	movs	r3, #1
}
 8009d42:	0018      	movs	r0, r3
 8009d44:	46bd      	mov	sp, r7
 8009d46:	b006      	add	sp, #24
 8009d48:	bdb0      	pop	{r4, r5, r7, pc}
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	00001117 	.word	0x00001117
 8009d50:	ffffee6c 	.word	0xffffee6c
 8009d54:	42c80000 	.word	0x42c80000

08009d58 <write_command>:
static bool write_command(SHT3x *p_sht, uint16_t cmd) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	000a      	movs	r2, r1
 8009d62:	1cbb      	adds	r3, r7, #2
 8009d64:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	data[0] = (uint8_t)(cmd & 0xff00)>>8;
 8009d66:	210c      	movs	r1, #12
 8009d68:	187b      	adds	r3, r7, r1
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(cmd & 0x00ff);
 8009d6e:	1cbb      	adds	r3, r7, #2
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	187b      	adds	r3, r7, r1
 8009d76:	705a      	strb	r2, [r3, #1]
	i2c_write(p_sht->addr,(uint8_t*)data, sizeof(data));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	1879      	adds	r1, r7, r1
 8009d80:	2202      	movs	r2, #2
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7ff ff08 	bl	8009b98 <i2c_write>
	return true;
 8009d88:	2301      	movs	r3, #1
}
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	b004      	add	sp, #16
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <read_bytes_imlp>:
static void read_bytes_imlp(SHT3x *p_sht, uint8_t *buff, uint16_t length) {
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	1dbb      	adds	r3, r7, #6
 8009d9e:	801a      	strh	r2, [r3, #0]
	i2c_read(p_sht->addr, buff, length);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	b298      	uxth	r0, r3
 8009da6:	1dbb      	adds	r3, r7, #6
 8009da8:	881a      	ldrh	r2, [r3, #0]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	0019      	movs	r1, r3
 8009dae:	f7ff fed5 	bl	8009b5c <i2c_read>
}
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	46bd      	mov	sp, r7
 8009db6:	b004      	add	sp, #16
 8009db8:	bd80      	pop	{r7, pc}

08009dba <crc8>:
static uint8_t crc8(const uint8_t *data, int len) {
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
   * Initialization data 0xFF
   * Polynomial 0x31 (x8 + x5 +x4 +1)
   * Final XOR 0x00
   */

  const uint8_t POLYNOMIAL = 0x31;
 8009dc4:	230b      	movs	r3, #11
 8009dc6:	18fb      	adds	r3, r7, r3
 8009dc8:	2231      	movs	r2, #49	; 0x31
 8009dca:	701a      	strb	r2, [r3, #0]
  uint8_t crc = 0xFF;
 8009dcc:	2317      	movs	r3, #23
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	22ff      	movs	r2, #255	; 0xff
 8009dd2:	701a      	strb	r2, [r3, #0]

  for (int j = len; j; --j) {
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	613b      	str	r3, [r7, #16]
 8009dd8:	e02f      	b.n	8009e3a <crc8+0x80>
    crc ^= *data++;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	7819      	ldrb	r1, [r3, #0]
 8009de2:	2217      	movs	r2, #23
 8009de4:	18bb      	adds	r3, r7, r2
 8009de6:	18ba      	adds	r2, r7, r2
 8009de8:	7812      	ldrb	r2, [r2, #0]
 8009dea:	404a      	eors	r2, r1
 8009dec:	701a      	strb	r2, [r3, #0]

    for (int i = 8; i; --i) {
 8009dee:	2308      	movs	r3, #8
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e01c      	b.n	8009e2e <crc8+0x74>
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 8009df4:	2217      	movs	r2, #23
 8009df6:	18bb      	adds	r3, r7, r2
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	da0b      	bge.n	8009e18 <crc8+0x5e>
 8009e00:	18bb      	adds	r3, r7, r2
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b25a      	sxtb	r2, r3
 8009e08:	230b      	movs	r3, #11
 8009e0a:	18fb      	adds	r3, r7, r3
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	b25b      	sxtb	r3, r3
 8009e10:	4053      	eors	r3, r2
 8009e12:	b25b      	sxtb	r3, r3
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	e004      	b.n	8009e22 <crc8+0x68>
 8009e18:	2317      	movs	r3, #23
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	18db      	adds	r3, r3, r3
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2217      	movs	r2, #23
 8009e24:	18ba      	adds	r2, r7, r2
 8009e26:	7013      	strb	r3, [r2, #0]
    for (int i = 8; i; --i) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1df      	bne.n	8009df4 <crc8+0x3a>
  for (int j = len; j; --j) {
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1cc      	bne.n	8009dda <crc8+0x20>
    }
  }
  return crc;
 8009e40:	2317      	movs	r3, #23
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	781b      	ldrb	r3, [r3, #0]
}
 8009e46:	0018      	movs	r0, r3
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b006      	add	sp, #24
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <__assert_func>:
 8009e50:	b530      	push	{r4, r5, lr}
 8009e52:	0014      	movs	r4, r2
 8009e54:	001a      	movs	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <__assert_func+0x2c>)
 8009e58:	0005      	movs	r5, r0
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	68d8      	ldr	r0, [r3, #12]
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <__assert_func+0x30>)
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	d101      	bne.n	8009e6a <__assert_func+0x1a>
 8009e66:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <__assert_func+0x34>)
 8009e68:	001c      	movs	r4, r3
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	9100      	str	r1, [sp, #0]
 8009e6e:	002b      	movs	r3, r5
 8009e70:	4905      	ldr	r1, [pc, #20]	; (8009e88 <__assert_func+0x38>)
 8009e72:	9402      	str	r4, [sp, #8]
 8009e74:	f000 f810 	bl	8009e98 <fiprintf>
 8009e78:	f000 fef0 	bl	800ac5c <abort>
 8009e7c:	2000008c 	.word	0x2000008c
 8009e80:	0800cfa6 	.word	0x0800cfa6
 8009e84:	0800cfe1 	.word	0x0800cfe1
 8009e88:	0800cfb3 	.word	0x0800cfb3

08009e8c <__errno>:
 8009e8c:	4b01      	ldr	r3, [pc, #4]	; (8009e94 <__errno+0x8>)
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	4770      	bx	lr
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	2000008c 	.word	0x2000008c

08009e98 <fiprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b503      	push	{r0, r1, lr}
 8009e9c:	0001      	movs	r1, r0
 8009e9e:	ab03      	add	r3, sp, #12
 8009ea0:	4804      	ldr	r0, [pc, #16]	; (8009eb4 <fiprintf+0x1c>)
 8009ea2:	cb04      	ldmia	r3!, {r2}
 8009ea4:	6800      	ldr	r0, [r0, #0]
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	f000 f862 	bl	8009f70 <_vfiprintf_r>
 8009eac:	b002      	add	sp, #8
 8009eae:	bc08      	pop	{r3}
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4718      	bx	r3
 8009eb4:	2000008c 	.word	0x2000008c

08009eb8 <__libc_init_array>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	2600      	movs	r6, #0
 8009ebc:	4d0c      	ldr	r5, [pc, #48]	; (8009ef0 <__libc_init_array+0x38>)
 8009ebe:	4c0d      	ldr	r4, [pc, #52]	; (8009ef4 <__libc_init_array+0x3c>)
 8009ec0:	1b64      	subs	r4, r4, r5
 8009ec2:	10a4      	asrs	r4, r4, #2
 8009ec4:	42a6      	cmp	r6, r4
 8009ec6:	d109      	bne.n	8009edc <__libc_init_array+0x24>
 8009ec8:	2600      	movs	r6, #0
 8009eca:	f002 fdbf 	bl	800ca4c <_init>
 8009ece:	4d0a      	ldr	r5, [pc, #40]	; (8009ef8 <__libc_init_array+0x40>)
 8009ed0:	4c0a      	ldr	r4, [pc, #40]	; (8009efc <__libc_init_array+0x44>)
 8009ed2:	1b64      	subs	r4, r4, r5
 8009ed4:	10a4      	asrs	r4, r4, #2
 8009ed6:	42a6      	cmp	r6, r4
 8009ed8:	d105      	bne.n	8009ee6 <__libc_init_array+0x2e>
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	00b3      	lsls	r3, r6, #2
 8009ede:	58eb      	ldr	r3, [r5, r3]
 8009ee0:	4798      	blx	r3
 8009ee2:	3601      	adds	r6, #1
 8009ee4:	e7ee      	b.n	8009ec4 <__libc_init_array+0xc>
 8009ee6:	00b3      	lsls	r3, r6, #2
 8009ee8:	58eb      	ldr	r3, [r5, r3]
 8009eea:	4798      	blx	r3
 8009eec:	3601      	adds	r6, #1
 8009eee:	e7f2      	b.n	8009ed6 <__libc_init_array+0x1e>
 8009ef0:	0800d390 	.word	0x0800d390
 8009ef4:	0800d390 	.word	0x0800d390
 8009ef8:	0800d390 	.word	0x0800d390
 8009efc:	0800d394 	.word	0x0800d394

08009f00 <memcpy>:
 8009f00:	2300      	movs	r3, #0
 8009f02:	b510      	push	{r4, lr}
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d100      	bne.n	8009f0a <memcpy+0xa>
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	5ccc      	ldrb	r4, [r1, r3]
 8009f0c:	54c4      	strb	r4, [r0, r3]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7f8      	b.n	8009f04 <memcpy+0x4>

08009f12 <memset>:
 8009f12:	0003      	movs	r3, r0
 8009f14:	1882      	adds	r2, r0, r2
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d100      	bne.n	8009f1c <memset+0xa>
 8009f1a:	4770      	bx	lr
 8009f1c:	7019      	strb	r1, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	e7f9      	b.n	8009f16 <memset+0x4>

08009f22 <__sfputc_r>:
 8009f22:	6893      	ldr	r3, [r2, #8]
 8009f24:	b510      	push	{r4, lr}
 8009f26:	3b01      	subs	r3, #1
 8009f28:	6093      	str	r3, [r2, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	da04      	bge.n	8009f38 <__sfputc_r+0x16>
 8009f2e:	6994      	ldr	r4, [r2, #24]
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	db07      	blt.n	8009f44 <__sfputc_r+0x22>
 8009f34:	290a      	cmp	r1, #10
 8009f36:	d005      	beq.n	8009f44 <__sfputc_r+0x22>
 8009f38:	6813      	ldr	r3, [r2, #0]
 8009f3a:	1c58      	adds	r0, r3, #1
 8009f3c:	6010      	str	r0, [r2, #0]
 8009f3e:	7019      	strb	r1, [r3, #0]
 8009f40:	0008      	movs	r0, r1
 8009f42:	bd10      	pop	{r4, pc}
 8009f44:	f000 fdbc 	bl	800aac0 <__swbuf_r>
 8009f48:	0001      	movs	r1, r0
 8009f4a:	e7f9      	b.n	8009f40 <__sfputc_r+0x1e>

08009f4c <__sfputs_r>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	0006      	movs	r6, r0
 8009f50:	000f      	movs	r7, r1
 8009f52:	0014      	movs	r4, r2
 8009f54:	18d5      	adds	r5, r2, r3
 8009f56:	42ac      	cmp	r4, r5
 8009f58:	d101      	bne.n	8009f5e <__sfputs_r+0x12>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e007      	b.n	8009f6e <__sfputs_r+0x22>
 8009f5e:	7821      	ldrb	r1, [r4, #0]
 8009f60:	003a      	movs	r2, r7
 8009f62:	0030      	movs	r0, r6
 8009f64:	f7ff ffdd 	bl	8009f22 <__sfputc_r>
 8009f68:	3401      	adds	r4, #1
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d1f3      	bne.n	8009f56 <__sfputs_r+0xa>
 8009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f70 <_vfiprintf_r>:
 8009f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f72:	b0a1      	sub	sp, #132	; 0x84
 8009f74:	0006      	movs	r6, r0
 8009f76:	000c      	movs	r4, r1
 8009f78:	001f      	movs	r7, r3
 8009f7a:	9203      	str	r2, [sp, #12]
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d004      	beq.n	8009f8a <_vfiprintf_r+0x1a>
 8009f80:	6983      	ldr	r3, [r0, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <_vfiprintf_r+0x1a>
 8009f86:	f001 fe43 	bl	800bc10 <__sinit>
 8009f8a:	4b8e      	ldr	r3, [pc, #568]	; (800a1c4 <_vfiprintf_r+0x254>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d11c      	bne.n	8009fca <_vfiprintf_r+0x5a>
 8009f90:	6874      	ldr	r4, [r6, #4]
 8009f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f94:	07db      	lsls	r3, r3, #31
 8009f96:	d405      	bmi.n	8009fa4 <_vfiprintf_r+0x34>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	059b      	lsls	r3, r3, #22
 8009f9c:	d402      	bmi.n	8009fa4 <_vfiprintf_r+0x34>
 8009f9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa0:	f001 fedb 	bl	800bd5a <__retarget_lock_acquire_recursive>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	071b      	lsls	r3, r3, #28
 8009fa8:	d502      	bpl.n	8009fb0 <_vfiprintf_r+0x40>
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11d      	bne.n	8009fec <_vfiprintf_r+0x7c>
 8009fb0:	0021      	movs	r1, r4
 8009fb2:	0030      	movs	r0, r6
 8009fb4:	f000 fdda 	bl	800ab6c <__swsetup_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d017      	beq.n	8009fec <_vfiprintf_r+0x7c>
 8009fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fbe:	07db      	lsls	r3, r3, #31
 8009fc0:	d50d      	bpl.n	8009fde <_vfiprintf_r+0x6e>
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	4240      	negs	r0, r0
 8009fc6:	b021      	add	sp, #132	; 0x84
 8009fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fca:	4b7f      	ldr	r3, [pc, #508]	; (800a1c8 <_vfiprintf_r+0x258>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d101      	bne.n	8009fd4 <_vfiprintf_r+0x64>
 8009fd0:	68b4      	ldr	r4, [r6, #8]
 8009fd2:	e7de      	b.n	8009f92 <_vfiprintf_r+0x22>
 8009fd4:	4b7d      	ldr	r3, [pc, #500]	; (800a1cc <_vfiprintf_r+0x25c>)
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	d1db      	bne.n	8009f92 <_vfiprintf_r+0x22>
 8009fda:	68f4      	ldr	r4, [r6, #12]
 8009fdc:	e7d9      	b.n	8009f92 <_vfiprintf_r+0x22>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	059b      	lsls	r3, r3, #22
 8009fe2:	d4ee      	bmi.n	8009fc2 <_vfiprintf_r+0x52>
 8009fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe6:	f001 feb9 	bl	800bd5c <__retarget_lock_release_recursive>
 8009fea:	e7ea      	b.n	8009fc2 <_vfiprintf_r+0x52>
 8009fec:	2300      	movs	r3, #0
 8009fee:	ad08      	add	r5, sp, #32
 8009ff0:	616b      	str	r3, [r5, #20]
 8009ff2:	3320      	adds	r3, #32
 8009ff4:	766b      	strb	r3, [r5, #25]
 8009ff6:	3310      	adds	r3, #16
 8009ff8:	76ab      	strb	r3, [r5, #26]
 8009ffa:	9707      	str	r7, [sp, #28]
 8009ffc:	9f03      	ldr	r7, [sp, #12]
 8009ffe:	783b      	ldrb	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <_vfiprintf_r+0x98>
 800a004:	2b25      	cmp	r3, #37	; 0x25
 800a006:	d14e      	bne.n	800a0a6 <_vfiprintf_r+0x136>
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	1afb      	subs	r3, r7, r3
 800a00c:	9305      	str	r3, [sp, #20]
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	429f      	cmp	r7, r3
 800a012:	d00d      	beq.n	800a030 <_vfiprintf_r+0xc0>
 800a014:	9b05      	ldr	r3, [sp, #20]
 800a016:	0021      	movs	r1, r4
 800a018:	0030      	movs	r0, r6
 800a01a:	9a03      	ldr	r2, [sp, #12]
 800a01c:	f7ff ff96 	bl	8009f4c <__sfputs_r>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d100      	bne.n	800a026 <_vfiprintf_r+0xb6>
 800a024:	e0b5      	b.n	800a192 <_vfiprintf_r+0x222>
 800a026:	696a      	ldr	r2, [r5, #20]
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	4694      	mov	ip, r2
 800a02c:	4463      	add	r3, ip
 800a02e:	616b      	str	r3, [r5, #20]
 800a030:	783b      	ldrb	r3, [r7, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d100      	bne.n	800a038 <_vfiprintf_r+0xc8>
 800a036:	e0ac      	b.n	800a192 <_vfiprintf_r+0x222>
 800a038:	2201      	movs	r2, #1
 800a03a:	1c7b      	adds	r3, r7, #1
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	2300      	movs	r3, #0
 800a040:	4252      	negs	r2, r2
 800a042:	606a      	str	r2, [r5, #4]
 800a044:	a904      	add	r1, sp, #16
 800a046:	3254      	adds	r2, #84	; 0x54
 800a048:	1852      	adds	r2, r2, r1
 800a04a:	602b      	str	r3, [r5, #0]
 800a04c:	60eb      	str	r3, [r5, #12]
 800a04e:	60ab      	str	r3, [r5, #8]
 800a050:	7013      	strb	r3, [r2, #0]
 800a052:	65ab      	str	r3, [r5, #88]	; 0x58
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	2205      	movs	r2, #5
 800a058:	7819      	ldrb	r1, [r3, #0]
 800a05a:	485d      	ldr	r0, [pc, #372]	; (800a1d0 <_vfiprintf_r+0x260>)
 800a05c:	f001 fef6 	bl	800be4c <memchr>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	1c5f      	adds	r7, r3, #1
 800a064:	2800      	cmp	r0, #0
 800a066:	d120      	bne.n	800a0aa <_vfiprintf_r+0x13a>
 800a068:	682a      	ldr	r2, [r5, #0]
 800a06a:	06d3      	lsls	r3, r2, #27
 800a06c:	d504      	bpl.n	800a078 <_vfiprintf_r+0x108>
 800a06e:	2353      	movs	r3, #83	; 0x53
 800a070:	a904      	add	r1, sp, #16
 800a072:	185b      	adds	r3, r3, r1
 800a074:	2120      	movs	r1, #32
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	0713      	lsls	r3, r2, #28
 800a07a:	d504      	bpl.n	800a086 <_vfiprintf_r+0x116>
 800a07c:	2353      	movs	r3, #83	; 0x53
 800a07e:	a904      	add	r1, sp, #16
 800a080:	185b      	adds	r3, r3, r1
 800a082:	212b      	movs	r1, #43	; 0x2b
 800a084:	7019      	strb	r1, [r3, #0]
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b2a      	cmp	r3, #42	; 0x2a
 800a08c:	d016      	beq.n	800a0bc <_vfiprintf_r+0x14c>
 800a08e:	2100      	movs	r1, #0
 800a090:	68eb      	ldr	r3, [r5, #12]
 800a092:	9f03      	ldr	r7, [sp, #12]
 800a094:	783a      	ldrb	r2, [r7, #0]
 800a096:	1c78      	adds	r0, r7, #1
 800a098:	3a30      	subs	r2, #48	; 0x30
 800a09a:	4684      	mov	ip, r0
 800a09c:	2a09      	cmp	r2, #9
 800a09e:	d94f      	bls.n	800a140 <_vfiprintf_r+0x1d0>
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d111      	bne.n	800a0c8 <_vfiprintf_r+0x158>
 800a0a4:	e017      	b.n	800a0d6 <_vfiprintf_r+0x166>
 800a0a6:	3701      	adds	r7, #1
 800a0a8:	e7a9      	b.n	8009ffe <_vfiprintf_r+0x8e>
 800a0aa:	4b49      	ldr	r3, [pc, #292]	; (800a1d0 <_vfiprintf_r+0x260>)
 800a0ac:	682a      	ldr	r2, [r5, #0]
 800a0ae:	1ac0      	subs	r0, r0, r3
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4083      	lsls	r3, r0
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	602b      	str	r3, [r5, #0]
 800a0b8:	9703      	str	r7, [sp, #12]
 800a0ba:	e7cb      	b.n	800a054 <_vfiprintf_r+0xe4>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	1d19      	adds	r1, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	9107      	str	r1, [sp, #28]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db01      	blt.n	800a0cc <_vfiprintf_r+0x15c>
 800a0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ca:	e004      	b.n	800a0d6 <_vfiprintf_r+0x166>
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	60eb      	str	r3, [r5, #12]
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	783b      	ldrb	r3, [r7, #0]
 800a0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0da:	d10a      	bne.n	800a0f2 <_vfiprintf_r+0x182>
 800a0dc:	787b      	ldrb	r3, [r7, #1]
 800a0de:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e0:	d137      	bne.n	800a152 <_vfiprintf_r+0x1e2>
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	3702      	adds	r7, #2
 800a0e6:	1d1a      	adds	r2, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	9207      	str	r2, [sp, #28]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	db2d      	blt.n	800a14c <_vfiprintf_r+0x1dc>
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	7839      	ldrb	r1, [r7, #0]
 800a0f6:	4837      	ldr	r0, [pc, #220]	; (800a1d4 <_vfiprintf_r+0x264>)
 800a0f8:	f001 fea8 	bl	800be4c <memchr>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d007      	beq.n	800a110 <_vfiprintf_r+0x1a0>
 800a100:	4b34      	ldr	r3, [pc, #208]	; (800a1d4 <_vfiprintf_r+0x264>)
 800a102:	682a      	ldr	r2, [r5, #0]
 800a104:	1ac0      	subs	r0, r0, r3
 800a106:	2340      	movs	r3, #64	; 0x40
 800a108:	4083      	lsls	r3, r0
 800a10a:	4313      	orrs	r3, r2
 800a10c:	3701      	adds	r7, #1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	7839      	ldrb	r1, [r7, #0]
 800a112:	1c7b      	adds	r3, r7, #1
 800a114:	2206      	movs	r2, #6
 800a116:	4830      	ldr	r0, [pc, #192]	; (800a1d8 <_vfiprintf_r+0x268>)
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	7629      	strb	r1, [r5, #24]
 800a11c:	f001 fe96 	bl	800be4c <memchr>
 800a120:	2800      	cmp	r0, #0
 800a122:	d045      	beq.n	800a1b0 <_vfiprintf_r+0x240>
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <_vfiprintf_r+0x26c>)
 800a126:	2b00      	cmp	r3, #0
 800a128:	d127      	bne.n	800a17a <_vfiprintf_r+0x20a>
 800a12a:	2207      	movs	r2, #7
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	3307      	adds	r3, #7
 800a130:	4393      	bics	r3, r2
 800a132:	3308      	adds	r3, #8
 800a134:	9307      	str	r3, [sp, #28]
 800a136:	696b      	ldr	r3, [r5, #20]
 800a138:	9a04      	ldr	r2, [sp, #16]
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	616b      	str	r3, [r5, #20]
 800a13e:	e75d      	b.n	8009ffc <_vfiprintf_r+0x8c>
 800a140:	210a      	movs	r1, #10
 800a142:	434b      	muls	r3, r1
 800a144:	4667      	mov	r7, ip
 800a146:	189b      	adds	r3, r3, r2
 800a148:	3909      	subs	r1, #9
 800a14a:	e7a3      	b.n	800a094 <_vfiprintf_r+0x124>
 800a14c:	2301      	movs	r3, #1
 800a14e:	425b      	negs	r3, r3
 800a150:	e7ce      	b.n	800a0f0 <_vfiprintf_r+0x180>
 800a152:	2300      	movs	r3, #0
 800a154:	001a      	movs	r2, r3
 800a156:	3701      	adds	r7, #1
 800a158:	606b      	str	r3, [r5, #4]
 800a15a:	7839      	ldrb	r1, [r7, #0]
 800a15c:	1c78      	adds	r0, r7, #1
 800a15e:	3930      	subs	r1, #48	; 0x30
 800a160:	4684      	mov	ip, r0
 800a162:	2909      	cmp	r1, #9
 800a164:	d903      	bls.n	800a16e <_vfiprintf_r+0x1fe>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0c3      	beq.n	800a0f2 <_vfiprintf_r+0x182>
 800a16a:	9209      	str	r2, [sp, #36]	; 0x24
 800a16c:	e7c1      	b.n	800a0f2 <_vfiprintf_r+0x182>
 800a16e:	230a      	movs	r3, #10
 800a170:	435a      	muls	r2, r3
 800a172:	4667      	mov	r7, ip
 800a174:	1852      	adds	r2, r2, r1
 800a176:	3b09      	subs	r3, #9
 800a178:	e7ef      	b.n	800a15a <_vfiprintf_r+0x1ea>
 800a17a:	ab07      	add	r3, sp, #28
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	0022      	movs	r2, r4
 800a180:	0029      	movs	r1, r5
 800a182:	0030      	movs	r0, r6
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <_vfiprintf_r+0x270>)
 800a186:	f000 f8d7 	bl	800a338 <_printf_float>
 800a18a:	9004      	str	r0, [sp, #16]
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	3301      	adds	r3, #1
 800a190:	d1d1      	bne.n	800a136 <_vfiprintf_r+0x1c6>
 800a192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a194:	07db      	lsls	r3, r3, #31
 800a196:	d405      	bmi.n	800a1a4 <_vfiprintf_r+0x234>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	059b      	lsls	r3, r3, #22
 800a19c:	d402      	bmi.n	800a1a4 <_vfiprintf_r+0x234>
 800a19e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a0:	f001 fddc 	bl	800bd5c <__retarget_lock_release_recursive>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	065b      	lsls	r3, r3, #25
 800a1a8:	d500      	bpl.n	800a1ac <_vfiprintf_r+0x23c>
 800a1aa:	e70a      	b.n	8009fc2 <_vfiprintf_r+0x52>
 800a1ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a1ae:	e70a      	b.n	8009fc6 <_vfiprintf_r+0x56>
 800a1b0:	ab07      	add	r3, sp, #28
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	0022      	movs	r2, r4
 800a1b6:	0029      	movs	r1, r5
 800a1b8:	0030      	movs	r0, r6
 800a1ba:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <_vfiprintf_r+0x270>)
 800a1bc:	f000 fb6e 	bl	800a89c <_printf_i>
 800a1c0:	e7e3      	b.n	800a18a <_vfiprintf_r+0x21a>
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	0800d0e0 	.word	0x0800d0e0
 800a1c8:	0800d100 	.word	0x0800d100
 800a1cc:	0800d0c0 	.word	0x0800d0c0
 800a1d0:	0800cfe8 	.word	0x0800cfe8
 800a1d4:	0800cfee 	.word	0x0800cfee
 800a1d8:	0800cff2 	.word	0x0800cff2
 800a1dc:	0800a339 	.word	0x0800a339
 800a1e0:	08009f4d 	.word	0x08009f4d

0800a1e4 <__cvt>:
 800a1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e6:	001e      	movs	r6, r3
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	0014      	movs	r4, r2
 800a1ec:	b08b      	sub	sp, #44	; 0x2c
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	da04      	bge.n	800a1fc <__cvt+0x18>
 800a1f2:	2180      	movs	r1, #128	; 0x80
 800a1f4:	0609      	lsls	r1, r1, #24
 800a1f6:	1873      	adds	r3, r6, r1
 800a1f8:	001e      	movs	r6, r3
 800a1fa:	232d      	movs	r3, #45	; 0x2d
 800a1fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	2320      	movs	r3, #32
 800a204:	2203      	movs	r2, #3
 800a206:	439f      	bics	r7, r3
 800a208:	2f46      	cmp	r7, #70	; 0x46
 800a20a:	d007      	beq.n	800a21c <__cvt+0x38>
 800a20c:	003b      	movs	r3, r7
 800a20e:	3b45      	subs	r3, #69	; 0x45
 800a210:	4259      	negs	r1, r3
 800a212:	414b      	adcs	r3, r1
 800a214:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a216:	3a01      	subs	r2, #1
 800a218:	18cb      	adds	r3, r1, r3
 800a21a:	9310      	str	r3, [sp, #64]	; 0x40
 800a21c:	ab09      	add	r3, sp, #36	; 0x24
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	ab08      	add	r3, sp, #32
 800a222:	9303      	str	r3, [sp, #12]
 800a224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a226:	9200      	str	r2, [sp, #0]
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a22c:	0022      	movs	r2, r4
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	0033      	movs	r3, r6
 800a232:	f000 fda5 	bl	800ad80 <_dtoa_r>
 800a236:	0005      	movs	r5, r0
 800a238:	2f47      	cmp	r7, #71	; 0x47
 800a23a:	d102      	bne.n	800a242 <__cvt+0x5e>
 800a23c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a23e:	07db      	lsls	r3, r3, #31
 800a240:	d528      	bpl.n	800a294 <__cvt+0xb0>
 800a242:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a244:	18eb      	adds	r3, r5, r3
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	2f46      	cmp	r7, #70	; 0x46
 800a24a:	d114      	bne.n	800a276 <__cvt+0x92>
 800a24c:	782b      	ldrb	r3, [r5, #0]
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	d10c      	bne.n	800a26c <__cvt+0x88>
 800a252:	2200      	movs	r2, #0
 800a254:	2300      	movs	r3, #0
 800a256:	0020      	movs	r0, r4
 800a258:	0031      	movs	r1, r6
 800a25a:	f7f6 f8f7 	bl	800044c <__aeabi_dcmpeq>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d104      	bne.n	800a26c <__cvt+0x88>
 800a262:	2301      	movs	r3, #1
 800a264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a26e:	9a07      	ldr	r2, [sp, #28]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	18d3      	adds	r3, r2, r3
 800a274:	9307      	str	r3, [sp, #28]
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	0020      	movs	r0, r4
 800a27c:	0031      	movs	r1, r6
 800a27e:	f7f6 f8e5 	bl	800044c <__aeabi_dcmpeq>
 800a282:	2800      	cmp	r0, #0
 800a284:	d001      	beq.n	800a28a <__cvt+0xa6>
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	9309      	str	r3, [sp, #36]	; 0x24
 800a28a:	2230      	movs	r2, #48	; 0x30
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	9907      	ldr	r1, [sp, #28]
 800a290:	428b      	cmp	r3, r1
 800a292:	d306      	bcc.n	800a2a2 <__cvt+0xbe>
 800a294:	0028      	movs	r0, r5
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a29a:	1b5b      	subs	r3, r3, r5
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	b00b      	add	sp, #44	; 0x2c
 800a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a2:	1c59      	adds	r1, r3, #1
 800a2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7f0      	b.n	800a28c <__cvt+0xa8>

0800a2aa <__exponent>:
 800a2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ac:	1c83      	adds	r3, r0, #2
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	0005      	movs	r5, r0
 800a2b4:	000c      	movs	r4, r1
 800a2b6:	232b      	movs	r3, #43	; 0x2b
 800a2b8:	7002      	strb	r2, [r0, #0]
 800a2ba:	2900      	cmp	r1, #0
 800a2bc:	da01      	bge.n	800a2c2 <__exponent+0x18>
 800a2be:	424c      	negs	r4, r1
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	706b      	strb	r3, [r5, #1]
 800a2c4:	2c09      	cmp	r4, #9
 800a2c6:	dd31      	ble.n	800a32c <__exponent+0x82>
 800a2c8:	270a      	movs	r7, #10
 800a2ca:	ab04      	add	r3, sp, #16
 800a2cc:	1dde      	adds	r6, r3, #7
 800a2ce:	0020      	movs	r0, r4
 800a2d0:	0039      	movs	r1, r7
 800a2d2:	9601      	str	r6, [sp, #4]
 800a2d4:	f7f6 f8a4 	bl	8000420 <__aeabi_idivmod>
 800a2d8:	3e01      	subs	r6, #1
 800a2da:	3130      	adds	r1, #48	; 0x30
 800a2dc:	0020      	movs	r0, r4
 800a2de:	7031      	strb	r1, [r6, #0]
 800a2e0:	0039      	movs	r1, r7
 800a2e2:	9402      	str	r4, [sp, #8]
 800a2e4:	f7f5 ffb6 	bl	8000254 <__divsi3>
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	0004      	movs	r4, r0
 800a2ec:	2b63      	cmp	r3, #99	; 0x63
 800a2ee:	dcee      	bgt.n	800a2ce <__exponent+0x24>
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	3430      	adds	r4, #48	; 0x30
 800a2f4:	1e9a      	subs	r2, r3, #2
 800a2f6:	0013      	movs	r3, r2
 800a2f8:	9903      	ldr	r1, [sp, #12]
 800a2fa:	7014      	strb	r4, [r2, #0]
 800a2fc:	a804      	add	r0, sp, #16
 800a2fe:	3007      	adds	r0, #7
 800a300:	4298      	cmp	r0, r3
 800a302:	d80e      	bhi.n	800a322 <__exponent+0x78>
 800a304:	ab04      	add	r3, sp, #16
 800a306:	3307      	adds	r3, #7
 800a308:	2000      	movs	r0, #0
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d804      	bhi.n	800a318 <__exponent+0x6e>
 800a30e:	ab04      	add	r3, sp, #16
 800a310:	3009      	adds	r0, #9
 800a312:	18c0      	adds	r0, r0, r3
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	1ac0      	subs	r0, r0, r3
 800a318:	9b03      	ldr	r3, [sp, #12]
 800a31a:	1818      	adds	r0, r3, r0
 800a31c:	1b40      	subs	r0, r0, r5
 800a31e:	b007      	add	sp, #28
 800a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	7008      	strb	r0, [r1, #0]
 800a328:	3101      	adds	r1, #1
 800a32a:	e7e7      	b.n	800a2fc <__exponent+0x52>
 800a32c:	2330      	movs	r3, #48	; 0x30
 800a32e:	18e4      	adds	r4, r4, r3
 800a330:	70ab      	strb	r3, [r5, #2]
 800a332:	1d28      	adds	r0, r5, #4
 800a334:	70ec      	strb	r4, [r5, #3]
 800a336:	e7f1      	b.n	800a31c <__exponent+0x72>

0800a338 <_printf_float>:
 800a338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33a:	b095      	sub	sp, #84	; 0x54
 800a33c:	000c      	movs	r4, r1
 800a33e:	9209      	str	r2, [sp, #36]	; 0x24
 800a340:	001e      	movs	r6, r3
 800a342:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a344:	0007      	movs	r7, r0
 800a346:	f001 fd03 	bl	800bd50 <_localeconv_r>
 800a34a:	6803      	ldr	r3, [r0, #0]
 800a34c:	0018      	movs	r0, r3
 800a34e:	930c      	str	r3, [sp, #48]	; 0x30
 800a350:	f7f5 feda 	bl	8000108 <strlen>
 800a354:	2300      	movs	r3, #0
 800a356:	9312      	str	r3, [sp, #72]	; 0x48
 800a358:	7e23      	ldrb	r3, [r4, #24]
 800a35a:	2207      	movs	r2, #7
 800a35c:	930a      	str	r3, [sp, #40]	; 0x28
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	900e      	str	r0, [sp, #56]	; 0x38
 800a362:	930d      	str	r3, [sp, #52]	; 0x34
 800a364:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	05c9      	lsls	r1, r1, #23
 800a36a:	d547      	bpl.n	800a3fc <_printf_float+0xc4>
 800a36c:	189b      	adds	r3, r3, r2
 800a36e:	4393      	bics	r3, r2
 800a370:	001a      	movs	r2, r3
 800a372:	3208      	adds	r2, #8
 800a374:	602a      	str	r2, [r5, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	64a2      	str	r2, [r4, #72]	; 0x48
 800a37c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a37e:	2201      	movs	r2, #1
 800a380:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a382:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a384:	930b      	str	r3, [sp, #44]	; 0x2c
 800a386:	006b      	lsls	r3, r5, #1
 800a388:	085b      	lsrs	r3, r3, #1
 800a38a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a38c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a38e:	4ba7      	ldr	r3, [pc, #668]	; (800a62c <_printf_float+0x2f4>)
 800a390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a392:	4252      	negs	r2, r2
 800a394:	f7f8 fb92 	bl	8002abc <__aeabi_dcmpun>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d131      	bne.n	800a400 <_printf_float+0xc8>
 800a39c:	2201      	movs	r2, #1
 800a39e:	4ba3      	ldr	r3, [pc, #652]	; (800a62c <_printf_float+0x2f4>)
 800a3a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a3a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3a4:	4252      	negs	r2, r2
 800a3a6:	f7f6 f861 	bl	800046c <__aeabi_dcmple>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d128      	bne.n	800a400 <_printf_float+0xc8>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	0029      	movs	r1, r5
 800a3b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a3b6:	f7f6 f84f 	bl	8000458 <__aeabi_dcmplt>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d003      	beq.n	800a3c6 <_printf_float+0x8e>
 800a3be:	0023      	movs	r3, r4
 800a3c0:	222d      	movs	r2, #45	; 0x2d
 800a3c2:	3343      	adds	r3, #67	; 0x43
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c8:	4d99      	ldr	r5, [pc, #612]	; (800a630 <_printf_float+0x2f8>)
 800a3ca:	2b47      	cmp	r3, #71	; 0x47
 800a3cc:	d900      	bls.n	800a3d0 <_printf_float+0x98>
 800a3ce:	4d99      	ldr	r5, [pc, #612]	; (800a634 <_printf_float+0x2fc>)
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	439a      	bics	r2, r3
 800a3da:	2300      	movs	r3, #0
 800a3dc:	6022      	str	r2, [r4, #0]
 800a3de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e2:	0021      	movs	r1, r4
 800a3e4:	0038      	movs	r0, r7
 800a3e6:	9600      	str	r6, [sp, #0]
 800a3e8:	aa13      	add	r2, sp, #76	; 0x4c
 800a3ea:	f000 f9e7 	bl	800a7bc <_printf_common>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d000      	beq.n	800a3f4 <_printf_float+0xbc>
 800a3f2:	e0a2      	b.n	800a53a <_printf_float+0x202>
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	4240      	negs	r0, r0
 800a3f8:	b015      	add	sp, #84	; 0x54
 800a3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	e7b6      	b.n	800a36e <_printf_float+0x36>
 800a400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a402:	002b      	movs	r3, r5
 800a404:	0010      	movs	r0, r2
 800a406:	0029      	movs	r1, r5
 800a408:	f7f8 fb58 	bl	8002abc <__aeabi_dcmpun>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d00b      	beq.n	800a428 <_printf_float+0xf0>
 800a410:	2d00      	cmp	r5, #0
 800a412:	da03      	bge.n	800a41c <_printf_float+0xe4>
 800a414:	0023      	movs	r3, r4
 800a416:	222d      	movs	r2, #45	; 0x2d
 800a418:	3343      	adds	r3, #67	; 0x43
 800a41a:	701a      	strb	r2, [r3, #0]
 800a41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41e:	4d86      	ldr	r5, [pc, #536]	; (800a638 <_printf_float+0x300>)
 800a420:	2b47      	cmp	r3, #71	; 0x47
 800a422:	d9d5      	bls.n	800a3d0 <_printf_float+0x98>
 800a424:	4d85      	ldr	r5, [pc, #532]	; (800a63c <_printf_float+0x304>)
 800a426:	e7d3      	b.n	800a3d0 <_printf_float+0x98>
 800a428:	2220      	movs	r2, #32
 800a42a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	4391      	bics	r1, r2
 800a430:	910f      	str	r1, [sp, #60]	; 0x3c
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	d149      	bne.n	800a4ca <_printf_float+0x192>
 800a436:	3307      	adds	r3, #7
 800a438:	6063      	str	r3, [r4, #4]
 800a43a:	2380      	movs	r3, #128	; 0x80
 800a43c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	4313      	orrs	r3, r2
 800a442:	2200      	movs	r2, #0
 800a444:	9206      	str	r2, [sp, #24]
 800a446:	aa12      	add	r2, sp, #72	; 0x48
 800a448:	9205      	str	r2, [sp, #20]
 800a44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a44c:	a908      	add	r1, sp, #32
 800a44e:	9204      	str	r2, [sp, #16]
 800a450:	aa11      	add	r2, sp, #68	; 0x44
 800a452:	9203      	str	r2, [sp, #12]
 800a454:	2223      	movs	r2, #35	; 0x23
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	6863      	ldr	r3, [r4, #4]
 800a45c:	1852      	adds	r2, r2, r1
 800a45e:	9202      	str	r2, [sp, #8]
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	0038      	movs	r0, r7
 800a464:	002b      	movs	r3, r5
 800a466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a468:	f7ff febc 	bl	800a1e4 <__cvt>
 800a46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a46e:	0005      	movs	r5, r0
 800a470:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a472:	2b47      	cmp	r3, #71	; 0x47
 800a474:	d108      	bne.n	800a488 <_printf_float+0x150>
 800a476:	1ccb      	adds	r3, r1, #3
 800a478:	db02      	blt.n	800a480 <_printf_float+0x148>
 800a47a:	6863      	ldr	r3, [r4, #4]
 800a47c:	4299      	cmp	r1, r3
 800a47e:	dd48      	ble.n	800a512 <_printf_float+0x1da>
 800a480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a482:	3b02      	subs	r3, #2
 800a484:	b2db      	uxtb	r3, r3
 800a486:	930a      	str	r3, [sp, #40]	; 0x28
 800a488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48a:	2b65      	cmp	r3, #101	; 0x65
 800a48c:	d824      	bhi.n	800a4d8 <_printf_float+0x1a0>
 800a48e:	0020      	movs	r0, r4
 800a490:	001a      	movs	r2, r3
 800a492:	3901      	subs	r1, #1
 800a494:	3050      	adds	r0, #80	; 0x50
 800a496:	9111      	str	r1, [sp, #68]	; 0x44
 800a498:	f7ff ff07 	bl	800a2aa <__exponent>
 800a49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a49e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4a0:	1813      	adds	r3, r2, r0
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	dc02      	bgt.n	800a4ae <_printf_float+0x176>
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	07d2      	lsls	r2, r2, #31
 800a4ac:	d501      	bpl.n	800a4b2 <_printf_float+0x17a>
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	2323      	movs	r3, #35	; 0x23
 800a4b4:	aa08      	add	r2, sp, #32
 800a4b6:	189b      	adds	r3, r3, r2
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d100      	bne.n	800a4c0 <_printf_float+0x188>
 800a4be:	e78f      	b.n	800a3e0 <_printf_float+0xa8>
 800a4c0:	0023      	movs	r3, r4
 800a4c2:	222d      	movs	r2, #45	; 0x2d
 800a4c4:	3343      	adds	r3, #67	; 0x43
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	e78a      	b.n	800a3e0 <_printf_float+0xa8>
 800a4ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4cc:	2a47      	cmp	r2, #71	; 0x47
 800a4ce:	d1b4      	bne.n	800a43a <_printf_float+0x102>
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1b2      	bne.n	800a43a <_printf_float+0x102>
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	e7af      	b.n	800a438 <_printf_float+0x100>
 800a4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4da:	2b66      	cmp	r3, #102	; 0x66
 800a4dc:	d11b      	bne.n	800a516 <_printf_float+0x1de>
 800a4de:	6863      	ldr	r3, [r4, #4]
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	dd0d      	ble.n	800a500 <_printf_float+0x1c8>
 800a4e4:	6121      	str	r1, [r4, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <_printf_float+0x1b8>
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	07d2      	lsls	r2, r2, #31
 800a4ee:	d502      	bpl.n	800a4f6 <_printf_float+0x1be>
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	1859      	adds	r1, r3, r1
 800a4f4:	6121      	str	r1, [r4, #16]
 800a4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4fe:	e7d8      	b.n	800a4b2 <_printf_float+0x17a>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <_printf_float+0x1d4>
 800a504:	2201      	movs	r2, #1
 800a506:	6821      	ldr	r1, [r4, #0]
 800a508:	4211      	tst	r1, r2
 800a50a:	d000      	beq.n	800a50e <_printf_float+0x1d6>
 800a50c:	1c9a      	adds	r2, r3, #2
 800a50e:	6122      	str	r2, [r4, #16]
 800a510:	e7f1      	b.n	800a4f6 <_printf_float+0x1be>
 800a512:	2367      	movs	r3, #103	; 0x67
 800a514:	930a      	str	r3, [sp, #40]	; 0x28
 800a516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a51a:	4293      	cmp	r3, r2
 800a51c:	db06      	blt.n	800a52c <_printf_float+0x1f4>
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	07d2      	lsls	r2, r2, #31
 800a524:	d5e7      	bpl.n	800a4f6 <_printf_float+0x1be>
 800a526:	3301      	adds	r3, #1
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	e7e4      	b.n	800a4f6 <_printf_float+0x1be>
 800a52c:	2101      	movs	r1, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	dc01      	bgt.n	800a536 <_printf_float+0x1fe>
 800a532:	1849      	adds	r1, r1, r1
 800a534:	1ac9      	subs	r1, r1, r3
 800a536:	1852      	adds	r2, r2, r1
 800a538:	e7e9      	b.n	800a50e <_printf_float+0x1d6>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	0553      	lsls	r3, r2, #21
 800a53e:	d407      	bmi.n	800a550 <_printf_float+0x218>
 800a540:	6923      	ldr	r3, [r4, #16]
 800a542:	002a      	movs	r2, r5
 800a544:	0038      	movs	r0, r7
 800a546:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a548:	47b0      	blx	r6
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	d128      	bne.n	800a5a0 <_printf_float+0x268>
 800a54e:	e751      	b.n	800a3f4 <_printf_float+0xbc>
 800a550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a552:	2b65      	cmp	r3, #101	; 0x65
 800a554:	d800      	bhi.n	800a558 <_printf_float+0x220>
 800a556:	e0e1      	b.n	800a71c <_printf_float+0x3e4>
 800a558:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a55a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	f7f5 ff74 	bl	800044c <__aeabi_dcmpeq>
 800a564:	2800      	cmp	r0, #0
 800a566:	d031      	beq.n	800a5cc <_printf_float+0x294>
 800a568:	2301      	movs	r3, #1
 800a56a:	0038      	movs	r0, r7
 800a56c:	4a34      	ldr	r2, [pc, #208]	; (800a640 <_printf_float+0x308>)
 800a56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a570:	47b0      	blx	r6
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d100      	bne.n	800a578 <_printf_float+0x240>
 800a576:	e73d      	b.n	800a3f4 <_printf_float+0xbc>
 800a578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a57a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a57c:	4293      	cmp	r3, r2
 800a57e:	db02      	blt.n	800a586 <_printf_float+0x24e>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	07db      	lsls	r3, r3, #31
 800a584:	d50c      	bpl.n	800a5a0 <_printf_float+0x268>
 800a586:	0038      	movs	r0, r7
 800a588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a58a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a58c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a58e:	47b0      	blx	r6
 800a590:	2500      	movs	r5, #0
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d100      	bne.n	800a598 <_printf_float+0x260>
 800a596:	e72d      	b.n	800a3f4 <_printf_float+0xbc>
 800a598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a59a:	3b01      	subs	r3, #1
 800a59c:	42ab      	cmp	r3, r5
 800a59e:	dc0a      	bgt.n	800a5b6 <_printf_float+0x27e>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	079b      	lsls	r3, r3, #30
 800a5a4:	d500      	bpl.n	800a5a8 <_printf_float+0x270>
 800a5a6:	e106      	b.n	800a7b6 <_printf_float+0x47e>
 800a5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5aa:	68e0      	ldr	r0, [r4, #12]
 800a5ac:	4298      	cmp	r0, r3
 800a5ae:	db00      	blt.n	800a5b2 <_printf_float+0x27a>
 800a5b0:	e722      	b.n	800a3f8 <_printf_float+0xc0>
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	e720      	b.n	800a3f8 <_printf_float+0xc0>
 800a5b6:	0022      	movs	r2, r4
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	0038      	movs	r0, r7
 800a5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5be:	321a      	adds	r2, #26
 800a5c0:	47b0      	blx	r6
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	d100      	bne.n	800a5c8 <_printf_float+0x290>
 800a5c6:	e715      	b.n	800a3f4 <_printf_float+0xbc>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	e7e5      	b.n	800a598 <_printf_float+0x260>
 800a5cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dc38      	bgt.n	800a644 <_printf_float+0x30c>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	0038      	movs	r0, r7
 800a5d6:	4a1a      	ldr	r2, [pc, #104]	; (800a640 <_printf_float+0x308>)
 800a5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5da:	47b0      	blx	r6
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d100      	bne.n	800a5e2 <_printf_float+0x2aa>
 800a5e0:	e708      	b.n	800a3f4 <_printf_float+0xbc>
 800a5e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	d102      	bne.n	800a5f0 <_printf_float+0x2b8>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	07db      	lsls	r3, r3, #31
 800a5ee:	d5d7      	bpl.n	800a5a0 <_printf_float+0x268>
 800a5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f2:	0038      	movs	r0, r7
 800a5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5f8:	47b0      	blx	r6
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d100      	bne.n	800a600 <_printf_float+0x2c8>
 800a5fe:	e6f9      	b.n	800a3f4 <_printf_float+0xbc>
 800a600:	2300      	movs	r3, #0
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a608:	425b      	negs	r3, r3
 800a60a:	4293      	cmp	r3, r2
 800a60c:	dc01      	bgt.n	800a612 <_printf_float+0x2da>
 800a60e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a610:	e797      	b.n	800a542 <_printf_float+0x20a>
 800a612:	0022      	movs	r2, r4
 800a614:	2301      	movs	r3, #1
 800a616:	0038      	movs	r0, r7
 800a618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a61a:	321a      	adds	r2, #26
 800a61c:	47b0      	blx	r6
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d100      	bne.n	800a624 <_printf_float+0x2ec>
 800a622:	e6e7      	b.n	800a3f4 <_printf_float+0xbc>
 800a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a626:	3301      	adds	r3, #1
 800a628:	e7eb      	b.n	800a602 <_printf_float+0x2ca>
 800a62a:	46c0      	nop			; (mov r8, r8)
 800a62c:	7fefffff 	.word	0x7fefffff
 800a630:	0800cff9 	.word	0x0800cff9
 800a634:	0800cffd 	.word	0x0800cffd
 800a638:	0800d001 	.word	0x0800d001
 800a63c:	0800d005 	.word	0x0800d005
 800a640:	0800d009 	.word	0x0800d009
 800a644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a648:	920a      	str	r2, [sp, #40]	; 0x28
 800a64a:	429a      	cmp	r2, r3
 800a64c:	dd00      	ble.n	800a650 <_printf_float+0x318>
 800a64e:	930a      	str	r3, [sp, #40]	; 0x28
 800a650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	dc3c      	bgt.n	800a6d0 <_printf_float+0x398>
 800a656:	2300      	movs	r3, #0
 800a658:	930d      	str	r3, [sp, #52]	; 0x34
 800a65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65c:	43db      	mvns	r3, r3
 800a65e:	17db      	asrs	r3, r3, #31
 800a660:	930f      	str	r3, [sp, #60]	; 0x3c
 800a662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a666:	930b      	str	r3, [sp, #44]	; 0x2c
 800a668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66a:	4013      	ands	r3, r2
 800a66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a672:	4293      	cmp	r3, r2
 800a674:	dc34      	bgt.n	800a6e0 <_printf_float+0x3a8>
 800a676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a67a:	4293      	cmp	r3, r2
 800a67c:	db3d      	blt.n	800a6fa <_printf_float+0x3c2>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	07db      	lsls	r3, r3, #31
 800a682:	d43a      	bmi.n	800a6fa <_printf_float+0x3c2>
 800a684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a688:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	1a52      	subs	r2, r2, r1
 800a68e:	920a      	str	r2, [sp, #40]	; 0x28
 800a690:	429a      	cmp	r2, r3
 800a692:	dd00      	ble.n	800a696 <_printf_float+0x35e>
 800a694:	930a      	str	r3, [sp, #40]	; 0x28
 800a696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc36      	bgt.n	800a70a <_printf_float+0x3d2>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	2500      	movs	r5, #0
 800a6a0:	43db      	mvns	r3, r3
 800a6a2:	17db      	asrs	r3, r3, #31
 800a6a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b0:	400a      	ands	r2, r1
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	42ab      	cmp	r3, r5
 800a6b6:	dc00      	bgt.n	800a6ba <_printf_float+0x382>
 800a6b8:	e772      	b.n	800a5a0 <_printf_float+0x268>
 800a6ba:	0022      	movs	r2, r4
 800a6bc:	2301      	movs	r3, #1
 800a6be:	0038      	movs	r0, r7
 800a6c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6c2:	321a      	adds	r2, #26
 800a6c4:	47b0      	blx	r6
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d100      	bne.n	800a6cc <_printf_float+0x394>
 800a6ca:	e693      	b.n	800a3f4 <_printf_float+0xbc>
 800a6cc:	3501      	adds	r5, #1
 800a6ce:	e7ea      	b.n	800a6a6 <_printf_float+0x36e>
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d2:	002a      	movs	r2, r5
 800a6d4:	0038      	movs	r0, r7
 800a6d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6d8:	47b0      	blx	r6
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d1bb      	bne.n	800a656 <_printf_float+0x31e>
 800a6de:	e689      	b.n	800a3f4 <_printf_float+0xbc>
 800a6e0:	0022      	movs	r2, r4
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	0038      	movs	r0, r7
 800a6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6e8:	321a      	adds	r2, #26
 800a6ea:	47b0      	blx	r6
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d100      	bne.n	800a6f2 <_printf_float+0x3ba>
 800a6f0:	e680      	b.n	800a3f4 <_printf_float+0xbc>
 800a6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6f8:	e7b3      	b.n	800a662 <_printf_float+0x32a>
 800a6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6fc:	0038      	movs	r0, r7
 800a6fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a700:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a702:	47b0      	blx	r6
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d1bd      	bne.n	800a684 <_printf_float+0x34c>
 800a708:	e674      	b.n	800a3f4 <_printf_float+0xbc>
 800a70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70c:	0038      	movs	r0, r7
 800a70e:	18ea      	adds	r2, r5, r3
 800a710:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	47b0      	blx	r6
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d1c0      	bne.n	800a69c <_printf_float+0x364>
 800a71a:	e66b      	b.n	800a3f4 <_printf_float+0xbc>
 800a71c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a71e:	2b01      	cmp	r3, #1
 800a720:	dc02      	bgt.n	800a728 <_printf_float+0x3f0>
 800a722:	2301      	movs	r3, #1
 800a724:	421a      	tst	r2, r3
 800a726:	d034      	beq.n	800a792 <_printf_float+0x45a>
 800a728:	2301      	movs	r3, #1
 800a72a:	002a      	movs	r2, r5
 800a72c:	0038      	movs	r0, r7
 800a72e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a730:	47b0      	blx	r6
 800a732:	1c43      	adds	r3, r0, #1
 800a734:	d100      	bne.n	800a738 <_printf_float+0x400>
 800a736:	e65d      	b.n	800a3f4 <_printf_float+0xbc>
 800a738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a73a:	0038      	movs	r0, r7
 800a73c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a73e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a740:	47b0      	blx	r6
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d100      	bne.n	800a748 <_printf_float+0x410>
 800a746:	e655      	b.n	800a3f4 <_printf_float+0xbc>
 800a748:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a74a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	f7f5 fe7c 	bl	800044c <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d11a      	bne.n	800a78e <_printf_float+0x456>
 800a758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a75a:	1c6a      	adds	r2, r5, #1
 800a75c:	3b01      	subs	r3, #1
 800a75e:	0038      	movs	r0, r7
 800a760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a762:	47b0      	blx	r6
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d10e      	bne.n	800a786 <_printf_float+0x44e>
 800a768:	e644      	b.n	800a3f4 <_printf_float+0xbc>
 800a76a:	0022      	movs	r2, r4
 800a76c:	2301      	movs	r3, #1
 800a76e:	0038      	movs	r0, r7
 800a770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a772:	321a      	adds	r2, #26
 800a774:	47b0      	blx	r6
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d100      	bne.n	800a77c <_printf_float+0x444>
 800a77a:	e63b      	b.n	800a3f4 <_printf_float+0xbc>
 800a77c:	3501      	adds	r5, #1
 800a77e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a780:	3b01      	subs	r3, #1
 800a782:	42ab      	cmp	r3, r5
 800a784:	dcf1      	bgt.n	800a76a <_printf_float+0x432>
 800a786:	0022      	movs	r2, r4
 800a788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a78a:	3250      	adds	r2, #80	; 0x50
 800a78c:	e6da      	b.n	800a544 <_printf_float+0x20c>
 800a78e:	2500      	movs	r5, #0
 800a790:	e7f5      	b.n	800a77e <_printf_float+0x446>
 800a792:	002a      	movs	r2, r5
 800a794:	e7e3      	b.n	800a75e <_printf_float+0x426>
 800a796:	0022      	movs	r2, r4
 800a798:	2301      	movs	r3, #1
 800a79a:	0038      	movs	r0, r7
 800a79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a79e:	3219      	adds	r2, #25
 800a7a0:	47b0      	blx	r6
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d100      	bne.n	800a7a8 <_printf_float+0x470>
 800a7a6:	e625      	b.n	800a3f4 <_printf_float+0xbc>
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	68e3      	ldr	r3, [r4, #12]
 800a7ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	dcf0      	bgt.n	800a796 <_printf_float+0x45e>
 800a7b4:	e6f8      	b.n	800a5a8 <_printf_float+0x270>
 800a7b6:	2500      	movs	r5, #0
 800a7b8:	e7f7      	b.n	800a7aa <_printf_float+0x472>
 800a7ba:	46c0      	nop			; (mov r8, r8)

0800a7bc <_printf_common>:
 800a7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7be:	0015      	movs	r5, r2
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	688a      	ldr	r2, [r1, #8]
 800a7c4:	690b      	ldr	r3, [r1, #16]
 800a7c6:	000c      	movs	r4, r1
 800a7c8:	9000      	str	r0, [sp, #0]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	da00      	bge.n	800a7d0 <_printf_common+0x14>
 800a7ce:	0013      	movs	r3, r2
 800a7d0:	0022      	movs	r2, r4
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	3243      	adds	r2, #67	; 0x43
 800a7d6:	7812      	ldrb	r2, [r2, #0]
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	d001      	beq.n	800a7e0 <_printf_common+0x24>
 800a7dc:	3301      	adds	r3, #1
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	069b      	lsls	r3, r3, #26
 800a7e4:	d502      	bpl.n	800a7ec <_printf_common+0x30>
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	6822      	ldr	r2, [r4, #0]
 800a7ee:	2306      	movs	r3, #6
 800a7f0:	0017      	movs	r7, r2
 800a7f2:	401f      	ands	r7, r3
 800a7f4:	421a      	tst	r2, r3
 800a7f6:	d027      	beq.n	800a848 <_printf_common+0x8c>
 800a7f8:	0023      	movs	r3, r4
 800a7fa:	3343      	adds	r3, #67	; 0x43
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	1e5a      	subs	r2, r3, #1
 800a800:	4193      	sbcs	r3, r2
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	0692      	lsls	r2, r2, #26
 800a806:	d430      	bmi.n	800a86a <_printf_common+0xae>
 800a808:	0022      	movs	r2, r4
 800a80a:	9901      	ldr	r1, [sp, #4]
 800a80c:	9800      	ldr	r0, [sp, #0]
 800a80e:	9e08      	ldr	r6, [sp, #32]
 800a810:	3243      	adds	r2, #67	; 0x43
 800a812:	47b0      	blx	r6
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d025      	beq.n	800a864 <_printf_common+0xa8>
 800a818:	2306      	movs	r3, #6
 800a81a:	6820      	ldr	r0, [r4, #0]
 800a81c:	682a      	ldr	r2, [r5, #0]
 800a81e:	68e1      	ldr	r1, [r4, #12]
 800a820:	2500      	movs	r5, #0
 800a822:	4003      	ands	r3, r0
 800a824:	2b04      	cmp	r3, #4
 800a826:	d103      	bne.n	800a830 <_printf_common+0x74>
 800a828:	1a8d      	subs	r5, r1, r2
 800a82a:	43eb      	mvns	r3, r5
 800a82c:	17db      	asrs	r3, r3, #31
 800a82e:	401d      	ands	r5, r3
 800a830:	68a3      	ldr	r3, [r4, #8]
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	4293      	cmp	r3, r2
 800a836:	dd01      	ble.n	800a83c <_printf_common+0x80>
 800a838:	1a9b      	subs	r3, r3, r2
 800a83a:	18ed      	adds	r5, r5, r3
 800a83c:	2700      	movs	r7, #0
 800a83e:	42bd      	cmp	r5, r7
 800a840:	d120      	bne.n	800a884 <_printf_common+0xc8>
 800a842:	2000      	movs	r0, #0
 800a844:	e010      	b.n	800a868 <_printf_common+0xac>
 800a846:	3701      	adds	r7, #1
 800a848:	68e3      	ldr	r3, [r4, #12]
 800a84a:	682a      	ldr	r2, [r5, #0]
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	42bb      	cmp	r3, r7
 800a850:	ddd2      	ble.n	800a7f8 <_printf_common+0x3c>
 800a852:	0022      	movs	r2, r4
 800a854:	2301      	movs	r3, #1
 800a856:	9901      	ldr	r1, [sp, #4]
 800a858:	9800      	ldr	r0, [sp, #0]
 800a85a:	9e08      	ldr	r6, [sp, #32]
 800a85c:	3219      	adds	r2, #25
 800a85e:	47b0      	blx	r6
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d1f0      	bne.n	800a846 <_printf_common+0x8a>
 800a864:	2001      	movs	r0, #1
 800a866:	4240      	negs	r0, r0
 800a868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a86a:	2030      	movs	r0, #48	; 0x30
 800a86c:	18e1      	adds	r1, r4, r3
 800a86e:	3143      	adds	r1, #67	; 0x43
 800a870:	7008      	strb	r0, [r1, #0]
 800a872:	0021      	movs	r1, r4
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	3145      	adds	r1, #69	; 0x45
 800a878:	7809      	ldrb	r1, [r1, #0]
 800a87a:	18a2      	adds	r2, r4, r2
 800a87c:	3243      	adds	r2, #67	; 0x43
 800a87e:	3302      	adds	r3, #2
 800a880:	7011      	strb	r1, [r2, #0]
 800a882:	e7c1      	b.n	800a808 <_printf_common+0x4c>
 800a884:	0022      	movs	r2, r4
 800a886:	2301      	movs	r3, #1
 800a888:	9901      	ldr	r1, [sp, #4]
 800a88a:	9800      	ldr	r0, [sp, #0]
 800a88c:	9e08      	ldr	r6, [sp, #32]
 800a88e:	321a      	adds	r2, #26
 800a890:	47b0      	blx	r6
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d0e6      	beq.n	800a864 <_printf_common+0xa8>
 800a896:	3701      	adds	r7, #1
 800a898:	e7d1      	b.n	800a83e <_printf_common+0x82>
	...

0800a89c <_printf_i>:
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b08b      	sub	sp, #44	; 0x2c
 800a8a0:	9206      	str	r2, [sp, #24]
 800a8a2:	000a      	movs	r2, r1
 800a8a4:	3243      	adds	r2, #67	; 0x43
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	9005      	str	r0, [sp, #20]
 800a8aa:	9204      	str	r2, [sp, #16]
 800a8ac:	7e0a      	ldrb	r2, [r1, #24]
 800a8ae:	000c      	movs	r4, r1
 800a8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b2:	2a78      	cmp	r2, #120	; 0x78
 800a8b4:	d807      	bhi.n	800a8c6 <_printf_i+0x2a>
 800a8b6:	2a62      	cmp	r2, #98	; 0x62
 800a8b8:	d809      	bhi.n	800a8ce <_printf_i+0x32>
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d100      	bne.n	800a8c0 <_printf_i+0x24>
 800a8be:	e0c1      	b.n	800aa44 <_printf_i+0x1a8>
 800a8c0:	2a58      	cmp	r2, #88	; 0x58
 800a8c2:	d100      	bne.n	800a8c6 <_printf_i+0x2a>
 800a8c4:	e08c      	b.n	800a9e0 <_printf_i+0x144>
 800a8c6:	0026      	movs	r6, r4
 800a8c8:	3642      	adds	r6, #66	; 0x42
 800a8ca:	7032      	strb	r2, [r6, #0]
 800a8cc:	e022      	b.n	800a914 <_printf_i+0x78>
 800a8ce:	0010      	movs	r0, r2
 800a8d0:	3863      	subs	r0, #99	; 0x63
 800a8d2:	2815      	cmp	r0, #21
 800a8d4:	d8f7      	bhi.n	800a8c6 <_printf_i+0x2a>
 800a8d6:	f7f5 fc29 	bl	800012c <__gnu_thumb1_case_shi>
 800a8da:	0016      	.short	0x0016
 800a8dc:	fff6001f 	.word	0xfff6001f
 800a8e0:	fff6fff6 	.word	0xfff6fff6
 800a8e4:	001ffff6 	.word	0x001ffff6
 800a8e8:	fff6fff6 	.word	0xfff6fff6
 800a8ec:	fff6fff6 	.word	0xfff6fff6
 800a8f0:	003600a8 	.word	0x003600a8
 800a8f4:	fff6009a 	.word	0xfff6009a
 800a8f8:	00b9fff6 	.word	0x00b9fff6
 800a8fc:	0036fff6 	.word	0x0036fff6
 800a900:	fff6fff6 	.word	0xfff6fff6
 800a904:	009e      	.short	0x009e
 800a906:	0026      	movs	r6, r4
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	3642      	adds	r6, #66	; 0x42
 800a90c:	1d11      	adds	r1, r2, #4
 800a90e:	6019      	str	r1, [r3, #0]
 800a910:	6813      	ldr	r3, [r2, #0]
 800a912:	7033      	strb	r3, [r6, #0]
 800a914:	2301      	movs	r3, #1
 800a916:	e0a7      	b.n	800aa68 <_printf_i+0x1cc>
 800a918:	6808      	ldr	r0, [r1, #0]
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	1d0a      	adds	r2, r1, #4
 800a91e:	0605      	lsls	r5, r0, #24
 800a920:	d50b      	bpl.n	800a93a <_printf_i+0x9e>
 800a922:	680d      	ldr	r5, [r1, #0]
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	2d00      	cmp	r5, #0
 800a928:	da03      	bge.n	800a932 <_printf_i+0x96>
 800a92a:	232d      	movs	r3, #45	; 0x2d
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	426d      	negs	r5, r5
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	4b61      	ldr	r3, [pc, #388]	; (800aab8 <_printf_i+0x21c>)
 800a934:	270a      	movs	r7, #10
 800a936:	9303      	str	r3, [sp, #12]
 800a938:	e01b      	b.n	800a972 <_printf_i+0xd6>
 800a93a:	680d      	ldr	r5, [r1, #0]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	0641      	lsls	r1, r0, #25
 800a940:	d5f1      	bpl.n	800a926 <_printf_i+0x8a>
 800a942:	b22d      	sxth	r5, r5
 800a944:	e7ef      	b.n	800a926 <_printf_i+0x8a>
 800a946:	680d      	ldr	r5, [r1, #0]
 800a948:	6819      	ldr	r1, [r3, #0]
 800a94a:	1d08      	adds	r0, r1, #4
 800a94c:	6018      	str	r0, [r3, #0]
 800a94e:	062e      	lsls	r6, r5, #24
 800a950:	d501      	bpl.n	800a956 <_printf_i+0xba>
 800a952:	680d      	ldr	r5, [r1, #0]
 800a954:	e003      	b.n	800a95e <_printf_i+0xc2>
 800a956:	066d      	lsls	r5, r5, #25
 800a958:	d5fb      	bpl.n	800a952 <_printf_i+0xb6>
 800a95a:	680d      	ldr	r5, [r1, #0]
 800a95c:	b2ad      	uxth	r5, r5
 800a95e:	4b56      	ldr	r3, [pc, #344]	; (800aab8 <_printf_i+0x21c>)
 800a960:	2708      	movs	r7, #8
 800a962:	9303      	str	r3, [sp, #12]
 800a964:	2a6f      	cmp	r2, #111	; 0x6f
 800a966:	d000      	beq.n	800a96a <_printf_i+0xce>
 800a968:	3702      	adds	r7, #2
 800a96a:	0023      	movs	r3, r4
 800a96c:	2200      	movs	r2, #0
 800a96e:	3343      	adds	r3, #67	; 0x43
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	60a3      	str	r3, [r4, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	db03      	blt.n	800a982 <_printf_i+0xe6>
 800a97a:	2204      	movs	r2, #4
 800a97c:	6821      	ldr	r1, [r4, #0]
 800a97e:	4391      	bics	r1, r2
 800a980:	6021      	str	r1, [r4, #0]
 800a982:	2d00      	cmp	r5, #0
 800a984:	d102      	bne.n	800a98c <_printf_i+0xf0>
 800a986:	9e04      	ldr	r6, [sp, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <_printf_i+0x10a>
 800a98c:	9e04      	ldr	r6, [sp, #16]
 800a98e:	0028      	movs	r0, r5
 800a990:	0039      	movs	r1, r7
 800a992:	f7f5 fc5b 	bl	800024c <__aeabi_uidivmod>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	3e01      	subs	r6, #1
 800a99a:	5c5b      	ldrb	r3, [r3, r1]
 800a99c:	7033      	strb	r3, [r6, #0]
 800a99e:	002b      	movs	r3, r5
 800a9a0:	0005      	movs	r5, r0
 800a9a2:	429f      	cmp	r7, r3
 800a9a4:	d9f3      	bls.n	800a98e <_printf_i+0xf2>
 800a9a6:	2f08      	cmp	r7, #8
 800a9a8:	d109      	bne.n	800a9be <_printf_i+0x122>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	07db      	lsls	r3, r3, #31
 800a9ae:	d506      	bpl.n	800a9be <_printf_i+0x122>
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	dc02      	bgt.n	800a9be <_printf_i+0x122>
 800a9b8:	2330      	movs	r3, #48	; 0x30
 800a9ba:	3e01      	subs	r6, #1
 800a9bc:	7033      	strb	r3, [r6, #0]
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	1b9b      	subs	r3, r3, r6
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	0021      	movs	r1, r4
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	9805      	ldr	r0, [sp, #20]
 800a9cc:	9b06      	ldr	r3, [sp, #24]
 800a9ce:	aa09      	add	r2, sp, #36	; 0x24
 800a9d0:	f7ff fef4 	bl	800a7bc <_printf_common>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d14c      	bne.n	800aa72 <_printf_i+0x1d6>
 800a9d8:	2001      	movs	r0, #1
 800a9da:	4240      	negs	r0, r0
 800a9dc:	b00b      	add	sp, #44	; 0x2c
 800a9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e0:	3145      	adds	r1, #69	; 0x45
 800a9e2:	700a      	strb	r2, [r1, #0]
 800a9e4:	4a34      	ldr	r2, [pc, #208]	; (800aab8 <_printf_i+0x21c>)
 800a9e6:	9203      	str	r2, [sp, #12]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	6821      	ldr	r1, [r4, #0]
 800a9ec:	ca20      	ldmia	r2!, {r5}
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	0608      	lsls	r0, r1, #24
 800a9f2:	d516      	bpl.n	800aa22 <_printf_i+0x186>
 800a9f4:	07cb      	lsls	r3, r1, #31
 800a9f6:	d502      	bpl.n	800a9fe <_printf_i+0x162>
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	4319      	orrs	r1, r3
 800a9fc:	6021      	str	r1, [r4, #0]
 800a9fe:	2710      	movs	r7, #16
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d1b2      	bne.n	800a96a <_printf_i+0xce>
 800aa04:	2320      	movs	r3, #32
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	439a      	bics	r2, r3
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	e7ad      	b.n	800a96a <_printf_i+0xce>
 800aa0e:	2220      	movs	r2, #32
 800aa10:	6809      	ldr	r1, [r1, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	0022      	movs	r2, r4
 800aa18:	2178      	movs	r1, #120	; 0x78
 800aa1a:	3245      	adds	r2, #69	; 0x45
 800aa1c:	7011      	strb	r1, [r2, #0]
 800aa1e:	4a27      	ldr	r2, [pc, #156]	; (800aabc <_printf_i+0x220>)
 800aa20:	e7e1      	b.n	800a9e6 <_printf_i+0x14a>
 800aa22:	0648      	lsls	r0, r1, #25
 800aa24:	d5e6      	bpl.n	800a9f4 <_printf_i+0x158>
 800aa26:	b2ad      	uxth	r5, r5
 800aa28:	e7e4      	b.n	800a9f4 <_printf_i+0x158>
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	680d      	ldr	r5, [r1, #0]
 800aa2e:	1d10      	adds	r0, r2, #4
 800aa30:	6949      	ldr	r1, [r1, #20]
 800aa32:	6018      	str	r0, [r3, #0]
 800aa34:	6813      	ldr	r3, [r2, #0]
 800aa36:	062e      	lsls	r6, r5, #24
 800aa38:	d501      	bpl.n	800aa3e <_printf_i+0x1a2>
 800aa3a:	6019      	str	r1, [r3, #0]
 800aa3c:	e002      	b.n	800aa44 <_printf_i+0x1a8>
 800aa3e:	066d      	lsls	r5, r5, #25
 800aa40:	d5fb      	bpl.n	800aa3a <_printf_i+0x19e>
 800aa42:	8019      	strh	r1, [r3, #0]
 800aa44:	2300      	movs	r3, #0
 800aa46:	9e04      	ldr	r6, [sp, #16]
 800aa48:	6123      	str	r3, [r4, #16]
 800aa4a:	e7bb      	b.n	800a9c4 <_printf_i+0x128>
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	1d11      	adds	r1, r2, #4
 800aa50:	6019      	str	r1, [r3, #0]
 800aa52:	6816      	ldr	r6, [r2, #0]
 800aa54:	2100      	movs	r1, #0
 800aa56:	0030      	movs	r0, r6
 800aa58:	6862      	ldr	r2, [r4, #4]
 800aa5a:	f001 f9f7 	bl	800be4c <memchr>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d001      	beq.n	800aa66 <_printf_i+0x1ca>
 800aa62:	1b80      	subs	r0, r0, r6
 800aa64:	6060      	str	r0, [r4, #4]
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	7013      	strb	r3, [r2, #0]
 800aa70:	e7a8      	b.n	800a9c4 <_printf_i+0x128>
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	0032      	movs	r2, r6
 800aa76:	9906      	ldr	r1, [sp, #24]
 800aa78:	9805      	ldr	r0, [sp, #20]
 800aa7a:	9d07      	ldr	r5, [sp, #28]
 800aa7c:	47a8      	blx	r5
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d0aa      	beq.n	800a9d8 <_printf_i+0x13c>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	079b      	lsls	r3, r3, #30
 800aa86:	d415      	bmi.n	800aab4 <_printf_i+0x218>
 800aa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8a:	68e0      	ldr	r0, [r4, #12]
 800aa8c:	4298      	cmp	r0, r3
 800aa8e:	daa5      	bge.n	800a9dc <_printf_i+0x140>
 800aa90:	0018      	movs	r0, r3
 800aa92:	e7a3      	b.n	800a9dc <_printf_i+0x140>
 800aa94:	0022      	movs	r2, r4
 800aa96:	2301      	movs	r3, #1
 800aa98:	9906      	ldr	r1, [sp, #24]
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	9e07      	ldr	r6, [sp, #28]
 800aa9e:	3219      	adds	r2, #25
 800aaa0:	47b0      	blx	r6
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d098      	beq.n	800a9d8 <_printf_i+0x13c>
 800aaa6:	3501      	adds	r5, #1
 800aaa8:	68e3      	ldr	r3, [r4, #12]
 800aaaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	42ab      	cmp	r3, r5
 800aab0:	dcf0      	bgt.n	800aa94 <_printf_i+0x1f8>
 800aab2:	e7e9      	b.n	800aa88 <_printf_i+0x1ec>
 800aab4:	2500      	movs	r5, #0
 800aab6:	e7f7      	b.n	800aaa8 <_printf_i+0x20c>
 800aab8:	0800d00b 	.word	0x0800d00b
 800aabc:	0800d01c 	.word	0x0800d01c

0800aac0 <__swbuf_r>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	0005      	movs	r5, r0
 800aac4:	000e      	movs	r6, r1
 800aac6:	0014      	movs	r4, r2
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d004      	beq.n	800aad6 <__swbuf_r+0x16>
 800aacc:	6983      	ldr	r3, [r0, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <__swbuf_r+0x16>
 800aad2:	f001 f89d 	bl	800bc10 <__sinit>
 800aad6:	4b22      	ldr	r3, [pc, #136]	; (800ab60 <__swbuf_r+0xa0>)
 800aad8:	429c      	cmp	r4, r3
 800aada:	d12e      	bne.n	800ab3a <__swbuf_r+0x7a>
 800aadc:	686c      	ldr	r4, [r5, #4]
 800aade:	69a3      	ldr	r3, [r4, #24]
 800aae0:	60a3      	str	r3, [r4, #8]
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	071b      	lsls	r3, r3, #28
 800aae6:	d532      	bpl.n	800ab4e <__swbuf_r+0x8e>
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02f      	beq.n	800ab4e <__swbuf_r+0x8e>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	6922      	ldr	r2, [r4, #16]
 800aaf2:	b2f7      	uxtb	r7, r6
 800aaf4:	1a98      	subs	r0, r3, r2
 800aaf6:	6963      	ldr	r3, [r4, #20]
 800aaf8:	b2f6      	uxtb	r6, r6
 800aafa:	4283      	cmp	r3, r0
 800aafc:	dc05      	bgt.n	800ab0a <__swbuf_r+0x4a>
 800aafe:	0021      	movs	r1, r4
 800ab00:	0028      	movs	r0, r5
 800ab02:	f000 ffe3 	bl	800bacc <_fflush_r>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d127      	bne.n	800ab5a <__swbuf_r+0x9a>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	6022      	str	r2, [r4, #0]
 800ab18:	701f      	strb	r7, [r3, #0]
 800ab1a:	6963      	ldr	r3, [r4, #20]
 800ab1c:	4283      	cmp	r3, r0
 800ab1e:	d004      	beq.n	800ab2a <__swbuf_r+0x6a>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	07db      	lsls	r3, r3, #31
 800ab24:	d507      	bpl.n	800ab36 <__swbuf_r+0x76>
 800ab26:	2e0a      	cmp	r6, #10
 800ab28:	d105      	bne.n	800ab36 <__swbuf_r+0x76>
 800ab2a:	0021      	movs	r1, r4
 800ab2c:	0028      	movs	r0, r5
 800ab2e:	f000 ffcd 	bl	800bacc <_fflush_r>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d111      	bne.n	800ab5a <__swbuf_r+0x9a>
 800ab36:	0030      	movs	r0, r6
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <__swbuf_r+0xa4>)
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	d101      	bne.n	800ab44 <__swbuf_r+0x84>
 800ab40:	68ac      	ldr	r4, [r5, #8]
 800ab42:	e7cc      	b.n	800aade <__swbuf_r+0x1e>
 800ab44:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <__swbuf_r+0xa8>)
 800ab46:	429c      	cmp	r4, r3
 800ab48:	d1c9      	bne.n	800aade <__swbuf_r+0x1e>
 800ab4a:	68ec      	ldr	r4, [r5, #12]
 800ab4c:	e7c7      	b.n	800aade <__swbuf_r+0x1e>
 800ab4e:	0021      	movs	r1, r4
 800ab50:	0028      	movs	r0, r5
 800ab52:	f000 f80b 	bl	800ab6c <__swsetup_r>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d0c9      	beq.n	800aaee <__swbuf_r+0x2e>
 800ab5a:	2601      	movs	r6, #1
 800ab5c:	4276      	negs	r6, r6
 800ab5e:	e7ea      	b.n	800ab36 <__swbuf_r+0x76>
 800ab60:	0800d0e0 	.word	0x0800d0e0
 800ab64:	0800d100 	.word	0x0800d100
 800ab68:	0800d0c0 	.word	0x0800d0c0

0800ab6c <__swsetup_r>:
 800ab6c:	4b37      	ldr	r3, [pc, #220]	; (800ac4c <__swsetup_r+0xe0>)
 800ab6e:	b570      	push	{r4, r5, r6, lr}
 800ab70:	681d      	ldr	r5, [r3, #0]
 800ab72:	0006      	movs	r6, r0
 800ab74:	000c      	movs	r4, r1
 800ab76:	2d00      	cmp	r5, #0
 800ab78:	d005      	beq.n	800ab86 <__swsetup_r+0x1a>
 800ab7a:	69ab      	ldr	r3, [r5, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <__swsetup_r+0x1a>
 800ab80:	0028      	movs	r0, r5
 800ab82:	f001 f845 	bl	800bc10 <__sinit>
 800ab86:	4b32      	ldr	r3, [pc, #200]	; (800ac50 <__swsetup_r+0xe4>)
 800ab88:	429c      	cmp	r4, r3
 800ab8a:	d10f      	bne.n	800abac <__swsetup_r+0x40>
 800ab8c:	686c      	ldr	r4, [r5, #4]
 800ab8e:	230c      	movs	r3, #12
 800ab90:	5ee2      	ldrsh	r2, [r4, r3]
 800ab92:	b293      	uxth	r3, r2
 800ab94:	0711      	lsls	r1, r2, #28
 800ab96:	d42d      	bmi.n	800abf4 <__swsetup_r+0x88>
 800ab98:	06d9      	lsls	r1, r3, #27
 800ab9a:	d411      	bmi.n	800abc0 <__swsetup_r+0x54>
 800ab9c:	2309      	movs	r3, #9
 800ab9e:	2001      	movs	r0, #1
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	3337      	adds	r3, #55	; 0x37
 800aba4:	4313      	orrs	r3, r2
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	4240      	negs	r0, r0
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	4b29      	ldr	r3, [pc, #164]	; (800ac54 <__swsetup_r+0xe8>)
 800abae:	429c      	cmp	r4, r3
 800abb0:	d101      	bne.n	800abb6 <__swsetup_r+0x4a>
 800abb2:	68ac      	ldr	r4, [r5, #8]
 800abb4:	e7eb      	b.n	800ab8e <__swsetup_r+0x22>
 800abb6:	4b28      	ldr	r3, [pc, #160]	; (800ac58 <__swsetup_r+0xec>)
 800abb8:	429c      	cmp	r4, r3
 800abba:	d1e8      	bne.n	800ab8e <__swsetup_r+0x22>
 800abbc:	68ec      	ldr	r4, [r5, #12]
 800abbe:	e7e6      	b.n	800ab8e <__swsetup_r+0x22>
 800abc0:	075b      	lsls	r3, r3, #29
 800abc2:	d513      	bpl.n	800abec <__swsetup_r+0x80>
 800abc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abc6:	2900      	cmp	r1, #0
 800abc8:	d008      	beq.n	800abdc <__swsetup_r+0x70>
 800abca:	0023      	movs	r3, r4
 800abcc:	3344      	adds	r3, #68	; 0x44
 800abce:	4299      	cmp	r1, r3
 800abd0:	d002      	beq.n	800abd8 <__swsetup_r+0x6c>
 800abd2:	0030      	movs	r0, r6
 800abd4:	f001 fd0e 	bl	800c5f4 <_free_r>
 800abd8:	2300      	movs	r3, #0
 800abda:	6363      	str	r3, [r4, #52]	; 0x34
 800abdc:	2224      	movs	r2, #36	; 0x24
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	4393      	bics	r3, r2
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	2300      	movs	r3, #0
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	6923      	ldr	r3, [r4, #16]
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	2308      	movs	r3, #8
 800abee:	89a2      	ldrh	r2, [r4, #12]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10b      	bne.n	800ac12 <__swsetup_r+0xa6>
 800abfa:	21a0      	movs	r1, #160	; 0xa0
 800abfc:	2280      	movs	r2, #128	; 0x80
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	0089      	lsls	r1, r1, #2
 800ac02:	0092      	lsls	r2, r2, #2
 800ac04:	400b      	ands	r3, r1
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d003      	beq.n	800ac12 <__swsetup_r+0xa6>
 800ac0a:	0021      	movs	r1, r4
 800ac0c:	0030      	movs	r0, r6
 800ac0e:	f001 f8cf 	bl	800bdb0 <__smakebuf_r>
 800ac12:	220c      	movs	r2, #12
 800ac14:	5ea3      	ldrsh	r3, [r4, r2]
 800ac16:	2001      	movs	r0, #1
 800ac18:	001a      	movs	r2, r3
 800ac1a:	b299      	uxth	r1, r3
 800ac1c:	4002      	ands	r2, r0
 800ac1e:	4203      	tst	r3, r0
 800ac20:	d00f      	beq.n	800ac42 <__swsetup_r+0xd6>
 800ac22:	2200      	movs	r2, #0
 800ac24:	60a2      	str	r2, [r4, #8]
 800ac26:	6962      	ldr	r2, [r4, #20]
 800ac28:	4252      	negs	r2, r2
 800ac2a:	61a2      	str	r2, [r4, #24]
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	6922      	ldr	r2, [r4, #16]
 800ac30:	4282      	cmp	r2, r0
 800ac32:	d1ba      	bne.n	800abaa <__swsetup_r+0x3e>
 800ac34:	060a      	lsls	r2, r1, #24
 800ac36:	d5b8      	bpl.n	800abaa <__swsetup_r+0x3e>
 800ac38:	2240      	movs	r2, #64	; 0x40
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	3801      	subs	r0, #1
 800ac40:	e7b3      	b.n	800abaa <__swsetup_r+0x3e>
 800ac42:	0788      	lsls	r0, r1, #30
 800ac44:	d400      	bmi.n	800ac48 <__swsetup_r+0xdc>
 800ac46:	6962      	ldr	r2, [r4, #20]
 800ac48:	60a2      	str	r2, [r4, #8]
 800ac4a:	e7ef      	b.n	800ac2c <__swsetup_r+0xc0>
 800ac4c:	2000008c 	.word	0x2000008c
 800ac50:	0800d0e0 	.word	0x0800d0e0
 800ac54:	0800d100 	.word	0x0800d100
 800ac58:	0800d0c0 	.word	0x0800d0c0

0800ac5c <abort>:
 800ac5c:	2006      	movs	r0, #6
 800ac5e:	b510      	push	{r4, lr}
 800ac60:	f001 fde6 	bl	800c830 <raise>
 800ac64:	2001      	movs	r0, #1
 800ac66:	f7f8 fb9b 	bl	80033a0 <_exit>

0800ac6a <quorem>:
 800ac6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6c:	0006      	movs	r6, r0
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	6932      	ldr	r2, [r6, #16]
 800ac72:	b087      	sub	sp, #28
 800ac74:	2000      	movs	r0, #0
 800ac76:	9103      	str	r1, [sp, #12]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	db65      	blt.n	800ad48 <quorem+0xde>
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	009c      	lsls	r4, r3, #2
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	000b      	movs	r3, r1
 800ac84:	3314      	adds	r3, #20
 800ac86:	9305      	str	r3, [sp, #20]
 800ac88:	191b      	adds	r3, r3, r4
 800ac8a:	9304      	str	r3, [sp, #16]
 800ac8c:	0033      	movs	r3, r6
 800ac8e:	3314      	adds	r3, #20
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	191c      	adds	r4, r3, r4
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	6827      	ldr	r7, [r4, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	0038      	movs	r0, r7
 800ac9c:	1c5d      	adds	r5, r3, #1
 800ac9e:	0029      	movs	r1, r5
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f7f5 fa4d 	bl	8000140 <__udivsi3>
 800aca6:	9001      	str	r0, [sp, #4]
 800aca8:	42af      	cmp	r7, r5
 800acaa:	d324      	bcc.n	800acf6 <quorem+0x8c>
 800acac:	2500      	movs	r5, #0
 800acae:	46ac      	mov	ip, r5
 800acb0:	9802      	ldr	r0, [sp, #8]
 800acb2:	9f05      	ldr	r7, [sp, #20]
 800acb4:	cf08      	ldmia	r7!, {r3}
 800acb6:	9a01      	ldr	r2, [sp, #4]
 800acb8:	b299      	uxth	r1, r3
 800acba:	4351      	muls	r1, r2
 800acbc:	0c1b      	lsrs	r3, r3, #16
 800acbe:	4353      	muls	r3, r2
 800acc0:	1949      	adds	r1, r1, r5
 800acc2:	0c0a      	lsrs	r2, r1, #16
 800acc4:	189b      	adds	r3, r3, r2
 800acc6:	6802      	ldr	r2, [r0, #0]
 800acc8:	b289      	uxth	r1, r1
 800acca:	b292      	uxth	r2, r2
 800accc:	4462      	add	r2, ip
 800acce:	1a52      	subs	r2, r2, r1
 800acd0:	6801      	ldr	r1, [r0, #0]
 800acd2:	0c1d      	lsrs	r5, r3, #16
 800acd4:	0c09      	lsrs	r1, r1, #16
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	1acb      	subs	r3, r1, r3
 800acda:	1411      	asrs	r1, r2, #16
 800acdc:	185b      	adds	r3, r3, r1
 800acde:	1419      	asrs	r1, r3, #16
 800ace0:	b292      	uxth	r2, r2
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	431a      	orrs	r2, r3
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	468c      	mov	ip, r1
 800acea:	c004      	stmia	r0!, {r2}
 800acec:	42bb      	cmp	r3, r7
 800acee:	d2e1      	bcs.n	800acb4 <quorem+0x4a>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d030      	beq.n	800ad58 <quorem+0xee>
 800acf6:	0030      	movs	r0, r6
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	f001 fb37 	bl	800c36c <__mcmp>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	db21      	blt.n	800ad46 <quorem+0xdc>
 800ad02:	0030      	movs	r0, r6
 800ad04:	2400      	movs	r4, #0
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	3014      	adds	r0, #20
 800ad10:	3114      	adds	r1, #20
 800ad12:	6803      	ldr	r3, [r0, #0]
 800ad14:	c920      	ldmia	r1!, {r5}
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	1914      	adds	r4, r2, r4
 800ad1a:	b2aa      	uxth	r2, r5
 800ad1c:	1aa2      	subs	r2, r4, r2
 800ad1e:	0c1b      	lsrs	r3, r3, #16
 800ad20:	0c2d      	lsrs	r5, r5, #16
 800ad22:	1414      	asrs	r4, r2, #16
 800ad24:	1b5b      	subs	r3, r3, r5
 800ad26:	191b      	adds	r3, r3, r4
 800ad28:	141c      	asrs	r4, r3, #16
 800ad2a:	b292      	uxth	r2, r2
 800ad2c:	041b      	lsls	r3, r3, #16
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	c008      	stmia	r0!, {r3}
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	428b      	cmp	r3, r1
 800ad36:	d2ec      	bcs.n	800ad12 <quorem+0xa8>
 800ad38:	9b00      	ldr	r3, [sp, #0]
 800ad3a:	9a02      	ldr	r2, [sp, #8]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	18d3      	adds	r3, r2, r3
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	d015      	beq.n	800ad72 <quorem+0x108>
 800ad46:	9801      	ldr	r0, [sp, #4]
 800ad48:	b007      	add	sp, #28
 800ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <quorem+0xf6>
 800ad52:	9b00      	ldr	r3, [sp, #0]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	3c04      	subs	r4, #4
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d3f5      	bcc.n	800ad4c <quorem+0xe2>
 800ad60:	9b00      	ldr	r3, [sp, #0]
 800ad62:	6133      	str	r3, [r6, #16]
 800ad64:	e7c7      	b.n	800acf6 <quorem+0x8c>
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d106      	bne.n	800ad7a <quorem+0x110>
 800ad6c:	9a00      	ldr	r2, [sp, #0]
 800ad6e:	3a01      	subs	r2, #1
 800ad70:	9200      	str	r2, [sp, #0]
 800ad72:	9a02      	ldr	r2, [sp, #8]
 800ad74:	3b04      	subs	r3, #4
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d3f5      	bcc.n	800ad66 <quorem+0xfc>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	6133      	str	r3, [r6, #16]
 800ad7e:	e7e2      	b.n	800ad46 <quorem+0xdc>

0800ad80 <_dtoa_r>:
 800ad80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad82:	b09d      	sub	sp, #116	; 0x74
 800ad84:	9202      	str	r2, [sp, #8]
 800ad86:	9303      	str	r3, [sp, #12]
 800ad88:	9b02      	ldr	r3, [sp, #8]
 800ad8a:	9c03      	ldr	r4, [sp, #12]
 800ad8c:	9308      	str	r3, [sp, #32]
 800ad8e:	9409      	str	r4, [sp, #36]	; 0x24
 800ad90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad92:	0007      	movs	r7, r0
 800ad94:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ad96:	2c00      	cmp	r4, #0
 800ad98:	d10e      	bne.n	800adb8 <_dtoa_r+0x38>
 800ad9a:	2010      	movs	r0, #16
 800ad9c:	f001 f84c 	bl	800be38 <malloc>
 800ada0:	1e02      	subs	r2, r0, #0
 800ada2:	6278      	str	r0, [r7, #36]	; 0x24
 800ada4:	d104      	bne.n	800adb0 <_dtoa_r+0x30>
 800ada6:	21ea      	movs	r1, #234	; 0xea
 800ada8:	4bc7      	ldr	r3, [pc, #796]	; (800b0c8 <_dtoa_r+0x348>)
 800adaa:	48c8      	ldr	r0, [pc, #800]	; (800b0cc <_dtoa_r+0x34c>)
 800adac:	f7ff f850 	bl	8009e50 <__assert_func>
 800adb0:	6044      	str	r4, [r0, #4]
 800adb2:	6084      	str	r4, [r0, #8]
 800adb4:	6004      	str	r4, [r0, #0]
 800adb6:	60c4      	str	r4, [r0, #12]
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	6819      	ldr	r1, [r3, #0]
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d00a      	beq.n	800add6 <_dtoa_r+0x56>
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	2301      	movs	r3, #1
 800adc4:	4093      	lsls	r3, r2
 800adc6:	604a      	str	r2, [r1, #4]
 800adc8:	608b      	str	r3, [r1, #8]
 800adca:	0038      	movs	r0, r7
 800adcc:	f001 f88e 	bl	800beec <_Bfree>
 800add0:	2200      	movs	r2, #0
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da20      	bge.n	800ae1e <_dtoa_r+0x9e>
 800addc:	2301      	movs	r3, #1
 800adde:	602b      	str	r3, [r5, #0]
 800ade0:	9b03      	ldr	r3, [sp, #12]
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	085b      	lsrs	r3, r3, #1
 800ade6:	9309      	str	r3, [sp, #36]	; 0x24
 800ade8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800adea:	4bb9      	ldr	r3, [pc, #740]	; (800b0d0 <_dtoa_r+0x350>)
 800adec:	4ab8      	ldr	r2, [pc, #736]	; (800b0d0 <_dtoa_r+0x350>)
 800adee:	402b      	ands	r3, r5
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d117      	bne.n	800ae24 <_dtoa_r+0xa4>
 800adf4:	4bb7      	ldr	r3, [pc, #732]	; (800b0d4 <_dtoa_r+0x354>)
 800adf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adf8:	0328      	lsls	r0, r5, #12
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	0b00      	lsrs	r0, r0, #12
 800ae00:	4318      	orrs	r0, r3
 800ae02:	d101      	bne.n	800ae08 <_dtoa_r+0x88>
 800ae04:	f000 fdbf 	bl	800b986 <_dtoa_r+0xc06>
 800ae08:	48b3      	ldr	r0, [pc, #716]	; (800b0d8 <_dtoa_r+0x358>)
 800ae0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae0c:	9006      	str	r0, [sp, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <_dtoa_r+0x98>
 800ae12:	4bb2      	ldr	r3, [pc, #712]	; (800b0dc <_dtoa_r+0x35c>)
 800ae14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	9806      	ldr	r0, [sp, #24]
 800ae1a:	b01d      	add	sp, #116	; 0x74
 800ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae1e:	2300      	movs	r3, #0
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	e7e1      	b.n	800ade8 <_dtoa_r+0x68>
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ae28:	9312      	str	r3, [sp, #72]	; 0x48
 800ae2a:	9413      	str	r4, [sp, #76]	; 0x4c
 800ae2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae30:	2200      	movs	r2, #0
 800ae32:	2300      	movs	r3, #0
 800ae34:	f7f5 fb0a 	bl	800044c <__aeabi_dcmpeq>
 800ae38:	1e04      	subs	r4, r0, #0
 800ae3a:	d009      	beq.n	800ae50 <_dtoa_r+0xd0>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae40:	6013      	str	r3, [r2, #0]
 800ae42:	4ba7      	ldr	r3, [pc, #668]	; (800b0e0 <_dtoa_r+0x360>)
 800ae44:	9306      	str	r3, [sp, #24]
 800ae46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0e5      	beq.n	800ae18 <_dtoa_r+0x98>
 800ae4c:	4ba5      	ldr	r3, [pc, #660]	; (800b0e4 <_dtoa_r+0x364>)
 800ae4e:	e7e1      	b.n	800ae14 <_dtoa_r+0x94>
 800ae50:	ab1a      	add	r3, sp, #104	; 0x68
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	ab1b      	add	r3, sp, #108	; 0x6c
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	0038      	movs	r0, r7
 800ae5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae5e:	f001 fb39 	bl	800c4d4 <__d2b>
 800ae62:	006e      	lsls	r6, r5, #1
 800ae64:	9005      	str	r0, [sp, #20]
 800ae66:	0d76      	lsrs	r6, r6, #21
 800ae68:	d100      	bne.n	800ae6c <_dtoa_r+0xec>
 800ae6a:	e07c      	b.n	800af66 <_dtoa_r+0x1e6>
 800ae6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae72:	4a9d      	ldr	r2, [pc, #628]	; (800b0e8 <_dtoa_r+0x368>)
 800ae74:	031b      	lsls	r3, r3, #12
 800ae76:	0b1b      	lsrs	r3, r3, #12
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	0011      	movs	r1, r2
 800ae7c:	4b9b      	ldr	r3, [pc, #620]	; (800b0ec <_dtoa_r+0x36c>)
 800ae7e:	9418      	str	r4, [sp, #96]	; 0x60
 800ae80:	18f6      	adds	r6, r6, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	4b9a      	ldr	r3, [pc, #616]	; (800b0f0 <_dtoa_r+0x370>)
 800ae86:	f7f7 fa87 	bl	8002398 <__aeabi_dsub>
 800ae8a:	4a9a      	ldr	r2, [pc, #616]	; (800b0f4 <_dtoa_r+0x374>)
 800ae8c:	4b9a      	ldr	r3, [pc, #616]	; (800b0f8 <_dtoa_r+0x378>)
 800ae8e:	f7f7 f817 	bl	8001ec0 <__aeabi_dmul>
 800ae92:	4a9a      	ldr	r2, [pc, #616]	; (800b0fc <_dtoa_r+0x37c>)
 800ae94:	4b9a      	ldr	r3, [pc, #616]	; (800b100 <_dtoa_r+0x380>)
 800ae96:	f7f6 f8d5 	bl	8001044 <__aeabi_dadd>
 800ae9a:	0004      	movs	r4, r0
 800ae9c:	0030      	movs	r0, r6
 800ae9e:	000d      	movs	r5, r1
 800aea0:	f7f7 fe60 	bl	8002b64 <__aeabi_i2d>
 800aea4:	4a97      	ldr	r2, [pc, #604]	; (800b104 <_dtoa_r+0x384>)
 800aea6:	4b98      	ldr	r3, [pc, #608]	; (800b108 <_dtoa_r+0x388>)
 800aea8:	f7f7 f80a 	bl	8001ec0 <__aeabi_dmul>
 800aeac:	0002      	movs	r2, r0
 800aeae:	000b      	movs	r3, r1
 800aeb0:	0020      	movs	r0, r4
 800aeb2:	0029      	movs	r1, r5
 800aeb4:	f7f6 f8c6 	bl	8001044 <__aeabi_dadd>
 800aeb8:	0004      	movs	r4, r0
 800aeba:	000d      	movs	r5, r1
 800aebc:	f7f7 fe1c 	bl	8002af8 <__aeabi_d2iz>
 800aec0:	2200      	movs	r2, #0
 800aec2:	9002      	str	r0, [sp, #8]
 800aec4:	2300      	movs	r3, #0
 800aec6:	0020      	movs	r0, r4
 800aec8:	0029      	movs	r1, r5
 800aeca:	f7f5 fac5 	bl	8000458 <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d00b      	beq.n	800aeea <_dtoa_r+0x16a>
 800aed2:	9802      	ldr	r0, [sp, #8]
 800aed4:	f7f7 fe46 	bl	8002b64 <__aeabi_i2d>
 800aed8:	002b      	movs	r3, r5
 800aeda:	0022      	movs	r2, r4
 800aedc:	f7f5 fab6 	bl	800044c <__aeabi_dcmpeq>
 800aee0:	4243      	negs	r3, r0
 800aee2:	4158      	adcs	r0, r3
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	1a1b      	subs	r3, r3, r0
 800aee8:	9302      	str	r3, [sp, #8]
 800aeea:	2301      	movs	r3, #1
 800aeec:	9316      	str	r3, [sp, #88]	; 0x58
 800aeee:	9b02      	ldr	r3, [sp, #8]
 800aef0:	2b16      	cmp	r3, #22
 800aef2:	d80f      	bhi.n	800af14 <_dtoa_r+0x194>
 800aef4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aef6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aef8:	00da      	lsls	r2, r3, #3
 800aefa:	4b84      	ldr	r3, [pc, #528]	; (800b10c <_dtoa_r+0x38c>)
 800aefc:	189b      	adds	r3, r3, r2
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f7f5 faa9 	bl	8000458 <__aeabi_dcmplt>
 800af06:	2800      	cmp	r0, #0
 800af08:	d049      	beq.n	800af9e <_dtoa_r+0x21e>
 800af0a:	9b02      	ldr	r3, [sp, #8]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	2300      	movs	r3, #0
 800af12:	9316      	str	r3, [sp, #88]	; 0x58
 800af14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800af16:	1b9e      	subs	r6, r3, r6
 800af18:	2300      	movs	r3, #0
 800af1a:	930a      	str	r3, [sp, #40]	; 0x28
 800af1c:	0033      	movs	r3, r6
 800af1e:	3b01      	subs	r3, #1
 800af20:	930d      	str	r3, [sp, #52]	; 0x34
 800af22:	d504      	bpl.n	800af2e <_dtoa_r+0x1ae>
 800af24:	2301      	movs	r3, #1
 800af26:	1b9b      	subs	r3, r3, r6
 800af28:	930a      	str	r3, [sp, #40]	; 0x28
 800af2a:	2300      	movs	r3, #0
 800af2c:	930d      	str	r3, [sp, #52]	; 0x34
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	db36      	blt.n	800afa2 <_dtoa_r+0x222>
 800af34:	9a02      	ldr	r2, [sp, #8]
 800af36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af38:	4694      	mov	ip, r2
 800af3a:	4463      	add	r3, ip
 800af3c:	930d      	str	r3, [sp, #52]	; 0x34
 800af3e:	2300      	movs	r3, #0
 800af40:	9215      	str	r2, [sp, #84]	; 0x54
 800af42:	930e      	str	r3, [sp, #56]	; 0x38
 800af44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af46:	2401      	movs	r4, #1
 800af48:	2b09      	cmp	r3, #9
 800af4a:	d864      	bhi.n	800b016 <_dtoa_r+0x296>
 800af4c:	2b05      	cmp	r3, #5
 800af4e:	dd02      	ble.n	800af56 <_dtoa_r+0x1d6>
 800af50:	2400      	movs	r4, #0
 800af52:	3b04      	subs	r3, #4
 800af54:	9322      	str	r3, [sp, #136]	; 0x88
 800af56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af58:	1e98      	subs	r0, r3, #2
 800af5a:	2803      	cmp	r0, #3
 800af5c:	d864      	bhi.n	800b028 <_dtoa_r+0x2a8>
 800af5e:	f7f5 f8db 	bl	8000118 <__gnu_thumb1_case_uqi>
 800af62:	3829      	.short	0x3829
 800af64:	5836      	.short	0x5836
 800af66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800af68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af6a:	189e      	adds	r6, r3, r2
 800af6c:	4b68      	ldr	r3, [pc, #416]	; (800b110 <_dtoa_r+0x390>)
 800af6e:	18f2      	adds	r2, r6, r3
 800af70:	2a20      	cmp	r2, #32
 800af72:	dd0f      	ble.n	800af94 <_dtoa_r+0x214>
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	409d      	lsls	r5, r3
 800af7a:	4b66      	ldr	r3, [pc, #408]	; (800b114 <_dtoa_r+0x394>)
 800af7c:	9802      	ldr	r0, [sp, #8]
 800af7e:	18f3      	adds	r3, r6, r3
 800af80:	40d8      	lsrs	r0, r3
 800af82:	4328      	orrs	r0, r5
 800af84:	f7f7 fe1e 	bl	8002bc4 <__aeabi_ui2d>
 800af88:	2301      	movs	r3, #1
 800af8a:	4c63      	ldr	r4, [pc, #396]	; (800b118 <_dtoa_r+0x398>)
 800af8c:	3e01      	subs	r6, #1
 800af8e:	1909      	adds	r1, r1, r4
 800af90:	9318      	str	r3, [sp, #96]	; 0x60
 800af92:	e776      	b.n	800ae82 <_dtoa_r+0x102>
 800af94:	2320      	movs	r3, #32
 800af96:	9802      	ldr	r0, [sp, #8]
 800af98:	1a9b      	subs	r3, r3, r2
 800af9a:	4098      	lsls	r0, r3
 800af9c:	e7f2      	b.n	800af84 <_dtoa_r+0x204>
 800af9e:	9016      	str	r0, [sp, #88]	; 0x58
 800afa0:	e7b8      	b.n	800af14 <_dtoa_r+0x194>
 800afa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa4:	9a02      	ldr	r2, [sp, #8]
 800afa6:	1a9b      	subs	r3, r3, r2
 800afa8:	930a      	str	r3, [sp, #40]	; 0x28
 800afaa:	4253      	negs	r3, r2
 800afac:	930e      	str	r3, [sp, #56]	; 0x38
 800afae:	2300      	movs	r3, #0
 800afb0:	9315      	str	r3, [sp, #84]	; 0x54
 800afb2:	e7c7      	b.n	800af44 <_dtoa_r+0x1c4>
 800afb4:	2300      	movs	r3, #0
 800afb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afba:	930c      	str	r3, [sp, #48]	; 0x30
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	dc13      	bgt.n	800afea <_dtoa_r+0x26a>
 800afc2:	2301      	movs	r3, #1
 800afc4:	001a      	movs	r2, r3
 800afc6:	930c      	str	r3, [sp, #48]	; 0x30
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	9223      	str	r2, [sp, #140]	; 0x8c
 800afcc:	e00d      	b.n	800afea <_dtoa_r+0x26a>
 800afce:	2301      	movs	r3, #1
 800afd0:	e7f1      	b.n	800afb6 <_dtoa_r+0x236>
 800afd2:	2300      	movs	r3, #0
 800afd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800afd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afd8:	4694      	mov	ip, r2
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	4463      	add	r3, ip
 800afde:	930c      	str	r3, [sp, #48]	; 0x30
 800afe0:	3301      	adds	r3, #1
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc00      	bgt.n	800afea <_dtoa_r+0x26a>
 800afe8:	2301      	movs	r3, #1
 800afea:	2200      	movs	r2, #0
 800afec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afee:	6042      	str	r2, [r0, #4]
 800aff0:	3204      	adds	r2, #4
 800aff2:	0015      	movs	r5, r2
 800aff4:	3514      	adds	r5, #20
 800aff6:	6841      	ldr	r1, [r0, #4]
 800aff8:	429d      	cmp	r5, r3
 800affa:	d919      	bls.n	800b030 <_dtoa_r+0x2b0>
 800affc:	0038      	movs	r0, r7
 800affe:	f000 ff31 	bl	800be64 <_Balloc>
 800b002:	9006      	str	r0, [sp, #24]
 800b004:	2800      	cmp	r0, #0
 800b006:	d117      	bne.n	800b038 <_dtoa_r+0x2b8>
 800b008:	21d5      	movs	r1, #213	; 0xd5
 800b00a:	0002      	movs	r2, r0
 800b00c:	4b43      	ldr	r3, [pc, #268]	; (800b11c <_dtoa_r+0x39c>)
 800b00e:	0049      	lsls	r1, r1, #1
 800b010:	e6cb      	b.n	800adaa <_dtoa_r+0x2a>
 800b012:	2301      	movs	r3, #1
 800b014:	e7de      	b.n	800afd4 <_dtoa_r+0x254>
 800b016:	2300      	movs	r3, #0
 800b018:	940f      	str	r4, [sp, #60]	; 0x3c
 800b01a:	9322      	str	r3, [sp, #136]	; 0x88
 800b01c:	3b01      	subs	r3, #1
 800b01e:	930c      	str	r3, [sp, #48]	; 0x30
 800b020:	9307      	str	r3, [sp, #28]
 800b022:	2200      	movs	r2, #0
 800b024:	3313      	adds	r3, #19
 800b026:	e7d0      	b.n	800afca <_dtoa_r+0x24a>
 800b028:	2301      	movs	r3, #1
 800b02a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b02c:	3b02      	subs	r3, #2
 800b02e:	e7f6      	b.n	800b01e <_dtoa_r+0x29e>
 800b030:	3101      	adds	r1, #1
 800b032:	6041      	str	r1, [r0, #4]
 800b034:	0052      	lsls	r2, r2, #1
 800b036:	e7dc      	b.n	800aff2 <_dtoa_r+0x272>
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	9a06      	ldr	r2, [sp, #24]
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	9b07      	ldr	r3, [sp, #28]
 800b040:	2b0e      	cmp	r3, #14
 800b042:	d900      	bls.n	800b046 <_dtoa_r+0x2c6>
 800b044:	e0eb      	b.n	800b21e <_dtoa_r+0x49e>
 800b046:	2c00      	cmp	r4, #0
 800b048:	d100      	bne.n	800b04c <_dtoa_r+0x2cc>
 800b04a:	e0e8      	b.n	800b21e <_dtoa_r+0x49e>
 800b04c:	9b02      	ldr	r3, [sp, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	dd68      	ble.n	800b124 <_dtoa_r+0x3a4>
 800b052:	001a      	movs	r2, r3
 800b054:	210f      	movs	r1, #15
 800b056:	4b2d      	ldr	r3, [pc, #180]	; (800b10c <_dtoa_r+0x38c>)
 800b058:	400a      	ands	r2, r1
 800b05a:	00d2      	lsls	r2, r2, #3
 800b05c:	189b      	adds	r3, r3, r2
 800b05e:	681d      	ldr	r5, [r3, #0]
 800b060:	685e      	ldr	r6, [r3, #4]
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	111c      	asrs	r4, r3, #4
 800b066:	2302      	movs	r3, #2
 800b068:	9310      	str	r3, [sp, #64]	; 0x40
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	05db      	lsls	r3, r3, #23
 800b06e:	d50b      	bpl.n	800b088 <_dtoa_r+0x308>
 800b070:	4b2b      	ldr	r3, [pc, #172]	; (800b120 <_dtoa_r+0x3a0>)
 800b072:	400c      	ands	r4, r1
 800b074:	6a1a      	ldr	r2, [r3, #32]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b07a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b07c:	f7f6 fb1e 	bl	80016bc <__aeabi_ddiv>
 800b080:	2303      	movs	r3, #3
 800b082:	9008      	str	r0, [sp, #32]
 800b084:	9109      	str	r1, [sp, #36]	; 0x24
 800b086:	9310      	str	r3, [sp, #64]	; 0x40
 800b088:	4b25      	ldr	r3, [pc, #148]	; (800b120 <_dtoa_r+0x3a0>)
 800b08a:	9314      	str	r3, [sp, #80]	; 0x50
 800b08c:	2c00      	cmp	r4, #0
 800b08e:	d108      	bne.n	800b0a2 <_dtoa_r+0x322>
 800b090:	9808      	ldr	r0, [sp, #32]
 800b092:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b094:	002a      	movs	r2, r5
 800b096:	0033      	movs	r3, r6
 800b098:	f7f6 fb10 	bl	80016bc <__aeabi_ddiv>
 800b09c:	9008      	str	r0, [sp, #32]
 800b09e:	9109      	str	r1, [sp, #36]	; 0x24
 800b0a0:	e05c      	b.n	800b15c <_dtoa_r+0x3dc>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	421c      	tst	r4, r3
 800b0a6:	d00b      	beq.n	800b0c0 <_dtoa_r+0x340>
 800b0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0aa:	0028      	movs	r0, r5
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	9310      	str	r3, [sp, #64]	; 0x40
 800b0b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0b2:	0031      	movs	r1, r6
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f7f6 ff02 	bl	8001ec0 <__aeabi_dmul>
 800b0bc:	0005      	movs	r5, r0
 800b0be:	000e      	movs	r6, r1
 800b0c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0c2:	1064      	asrs	r4, r4, #1
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	e7e0      	b.n	800b08a <_dtoa_r+0x30a>
 800b0c8:	0800d03a 	.word	0x0800d03a
 800b0cc:	0800d051 	.word	0x0800d051
 800b0d0:	7ff00000 	.word	0x7ff00000
 800b0d4:	0000270f 	.word	0x0000270f
 800b0d8:	0800d036 	.word	0x0800d036
 800b0dc:	0800d039 	.word	0x0800d039
 800b0e0:	0800d009 	.word	0x0800d009
 800b0e4:	0800d00a 	.word	0x0800d00a
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	fffffc01 	.word	0xfffffc01
 800b0f0:	3ff80000 	.word	0x3ff80000
 800b0f4:	636f4361 	.word	0x636f4361
 800b0f8:	3fd287a7 	.word	0x3fd287a7
 800b0fc:	8b60c8b3 	.word	0x8b60c8b3
 800b100:	3fc68a28 	.word	0x3fc68a28
 800b104:	509f79fb 	.word	0x509f79fb
 800b108:	3fd34413 	.word	0x3fd34413
 800b10c:	0800d1a8 	.word	0x0800d1a8
 800b110:	00000432 	.word	0x00000432
 800b114:	00000412 	.word	0x00000412
 800b118:	fe100000 	.word	0xfe100000
 800b11c:	0800d0ac 	.word	0x0800d0ac
 800b120:	0800d180 	.word	0x0800d180
 800b124:	2302      	movs	r3, #2
 800b126:	9310      	str	r3, [sp, #64]	; 0x40
 800b128:	9b02      	ldr	r3, [sp, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d016      	beq.n	800b15c <_dtoa_r+0x3dc>
 800b12e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b130:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b132:	425c      	negs	r4, r3
 800b134:	230f      	movs	r3, #15
 800b136:	4ab6      	ldr	r2, [pc, #728]	; (800b410 <_dtoa_r+0x690>)
 800b138:	4023      	ands	r3, r4
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	18d3      	adds	r3, r2, r3
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f7f6 febd 	bl	8001ec0 <__aeabi_dmul>
 800b146:	2601      	movs	r6, #1
 800b148:	2300      	movs	r3, #0
 800b14a:	9008      	str	r0, [sp, #32]
 800b14c:	9109      	str	r1, [sp, #36]	; 0x24
 800b14e:	4db1      	ldr	r5, [pc, #708]	; (800b414 <_dtoa_r+0x694>)
 800b150:	1124      	asrs	r4, r4, #4
 800b152:	2c00      	cmp	r4, #0
 800b154:	d000      	beq.n	800b158 <_dtoa_r+0x3d8>
 800b156:	e094      	b.n	800b282 <_dtoa_r+0x502>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d19f      	bne.n	800b09c <_dtoa_r+0x31c>
 800b15c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d100      	bne.n	800b164 <_dtoa_r+0x3e4>
 800b162:	e09b      	b.n	800b29c <_dtoa_r+0x51c>
 800b164:	9c08      	ldr	r4, [sp, #32]
 800b166:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b168:	2200      	movs	r2, #0
 800b16a:	0020      	movs	r0, r4
 800b16c:	0029      	movs	r1, r5
 800b16e:	4baa      	ldr	r3, [pc, #680]	; (800b418 <_dtoa_r+0x698>)
 800b170:	f7f5 f972 	bl	8000458 <__aeabi_dcmplt>
 800b174:	2800      	cmp	r0, #0
 800b176:	d100      	bne.n	800b17a <_dtoa_r+0x3fa>
 800b178:	e090      	b.n	800b29c <_dtoa_r+0x51c>
 800b17a:	9b07      	ldr	r3, [sp, #28]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d100      	bne.n	800b182 <_dtoa_r+0x402>
 800b180:	e08c      	b.n	800b29c <_dtoa_r+0x51c>
 800b182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b184:	2b00      	cmp	r3, #0
 800b186:	dd46      	ble.n	800b216 <_dtoa_r+0x496>
 800b188:	9b02      	ldr	r3, [sp, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	0020      	movs	r0, r4
 800b18e:	0029      	movs	r1, r5
 800b190:	1e5e      	subs	r6, r3, #1
 800b192:	4ba2      	ldr	r3, [pc, #648]	; (800b41c <_dtoa_r+0x69c>)
 800b194:	f7f6 fe94 	bl	8001ec0 <__aeabi_dmul>
 800b198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19a:	9008      	str	r0, [sp, #32]
 800b19c:	9109      	str	r1, [sp, #36]	; 0x24
 800b19e:	3301      	adds	r3, #1
 800b1a0:	9310      	str	r3, [sp, #64]	; 0x40
 800b1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1a6:	9c08      	ldr	r4, [sp, #32]
 800b1a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b1aa:	9314      	str	r3, [sp, #80]	; 0x50
 800b1ac:	f7f7 fcda 	bl	8002b64 <__aeabi_i2d>
 800b1b0:	0022      	movs	r2, r4
 800b1b2:	002b      	movs	r3, r5
 800b1b4:	f7f6 fe84 	bl	8001ec0 <__aeabi_dmul>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	4b99      	ldr	r3, [pc, #612]	; (800b420 <_dtoa_r+0x6a0>)
 800b1bc:	f7f5 ff42 	bl	8001044 <__aeabi_dadd>
 800b1c0:	9010      	str	r0, [sp, #64]	; 0x40
 800b1c2:	9111      	str	r1, [sp, #68]	; 0x44
 800b1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1c8:	9208      	str	r2, [sp, #32]
 800b1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b1cc:	4a95      	ldr	r2, [pc, #596]	; (800b424 <_dtoa_r+0x6a4>)
 800b1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d0:	4694      	mov	ip, r2
 800b1d2:	4463      	add	r3, ip
 800b1d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d161      	bne.n	800b2a2 <_dtoa_r+0x522>
 800b1de:	2200      	movs	r2, #0
 800b1e0:	0020      	movs	r0, r4
 800b1e2:	0029      	movs	r1, r5
 800b1e4:	4b90      	ldr	r3, [pc, #576]	; (800b428 <_dtoa_r+0x6a8>)
 800b1e6:	f7f7 f8d7 	bl	8002398 <__aeabi_dsub>
 800b1ea:	9a08      	ldr	r2, [sp, #32]
 800b1ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ee:	0004      	movs	r4, r0
 800b1f0:	000d      	movs	r5, r1
 800b1f2:	f7f5 f945 	bl	8000480 <__aeabi_dcmpgt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d000      	beq.n	800b1fc <_dtoa_r+0x47c>
 800b1fa:	e2af      	b.n	800b75c <_dtoa_r+0x9dc>
 800b1fc:	488b      	ldr	r0, [pc, #556]	; (800b42c <_dtoa_r+0x6ac>)
 800b1fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b200:	4684      	mov	ip, r0
 800b202:	4461      	add	r1, ip
 800b204:	000b      	movs	r3, r1
 800b206:	0020      	movs	r0, r4
 800b208:	0029      	movs	r1, r5
 800b20a:	9a08      	ldr	r2, [sp, #32]
 800b20c:	f7f5 f924 	bl	8000458 <__aeabi_dcmplt>
 800b210:	2800      	cmp	r0, #0
 800b212:	d000      	beq.n	800b216 <_dtoa_r+0x496>
 800b214:	e29f      	b.n	800b756 <_dtoa_r+0x9d6>
 800b216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b218:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	9409      	str	r4, [sp, #36]	; 0x24
 800b21e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b220:	2b00      	cmp	r3, #0
 800b222:	da00      	bge.n	800b226 <_dtoa_r+0x4a6>
 800b224:	e172      	b.n	800b50c <_dtoa_r+0x78c>
 800b226:	9a02      	ldr	r2, [sp, #8]
 800b228:	2a0e      	cmp	r2, #14
 800b22a:	dd00      	ble.n	800b22e <_dtoa_r+0x4ae>
 800b22c:	e16e      	b.n	800b50c <_dtoa_r+0x78c>
 800b22e:	4b78      	ldr	r3, [pc, #480]	; (800b410 <_dtoa_r+0x690>)
 800b230:	00d2      	lsls	r2, r2, #3
 800b232:	189b      	adds	r3, r3, r2
 800b234:	685c      	ldr	r4, [r3, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	930a      	str	r3, [sp, #40]	; 0x28
 800b23a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b23c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	db00      	blt.n	800b244 <_dtoa_r+0x4c4>
 800b242:	e0f7      	b.n	800b434 <_dtoa_r+0x6b4>
 800b244:	9b07      	ldr	r3, [sp, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dd00      	ble.n	800b24c <_dtoa_r+0x4cc>
 800b24a:	e0f3      	b.n	800b434 <_dtoa_r+0x6b4>
 800b24c:	d000      	beq.n	800b250 <_dtoa_r+0x4d0>
 800b24e:	e282      	b.n	800b756 <_dtoa_r+0x9d6>
 800b250:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b254:	2200      	movs	r2, #0
 800b256:	4b74      	ldr	r3, [pc, #464]	; (800b428 <_dtoa_r+0x6a8>)
 800b258:	f7f6 fe32 	bl	8001ec0 <__aeabi_dmul>
 800b25c:	9a08      	ldr	r2, [sp, #32]
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	f7f5 f918 	bl	8000494 <__aeabi_dcmpge>
 800b264:	9e07      	ldr	r6, [sp, #28]
 800b266:	0035      	movs	r5, r6
 800b268:	2800      	cmp	r0, #0
 800b26a:	d000      	beq.n	800b26e <_dtoa_r+0x4ee>
 800b26c:	e259      	b.n	800b722 <_dtoa_r+0x9a2>
 800b26e:	9b06      	ldr	r3, [sp, #24]
 800b270:	9a06      	ldr	r2, [sp, #24]
 800b272:	3301      	adds	r3, #1
 800b274:	9308      	str	r3, [sp, #32]
 800b276:	2331      	movs	r3, #49	; 0x31
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	9b02      	ldr	r3, [sp, #8]
 800b27c:	3301      	adds	r3, #1
 800b27e:	9302      	str	r3, [sp, #8]
 800b280:	e254      	b.n	800b72c <_dtoa_r+0x9ac>
 800b282:	4234      	tst	r4, r6
 800b284:	d007      	beq.n	800b296 <_dtoa_r+0x516>
 800b286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b288:	3301      	adds	r3, #1
 800b28a:	9310      	str	r3, [sp, #64]	; 0x40
 800b28c:	682a      	ldr	r2, [r5, #0]
 800b28e:	686b      	ldr	r3, [r5, #4]
 800b290:	f7f6 fe16 	bl	8001ec0 <__aeabi_dmul>
 800b294:	0033      	movs	r3, r6
 800b296:	1064      	asrs	r4, r4, #1
 800b298:	3508      	adds	r5, #8
 800b29a:	e75a      	b.n	800b152 <_dtoa_r+0x3d2>
 800b29c:	9e02      	ldr	r6, [sp, #8]
 800b29e:	9b07      	ldr	r3, [sp, #28]
 800b2a0:	e780      	b.n	800b1a4 <_dtoa_r+0x424>
 800b2a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	4b59      	ldr	r3, [pc, #356]	; (800b410 <_dtoa_r+0x690>)
 800b2aa:	00d2      	lsls	r2, r2, #3
 800b2ac:	189b      	adds	r3, r3, r2
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	2900      	cmp	r1, #0
 800b2b4:	d051      	beq.n	800b35a <_dtoa_r+0x5da>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	495d      	ldr	r1, [pc, #372]	; (800b430 <_dtoa_r+0x6b0>)
 800b2ba:	f7f6 f9ff 	bl	80016bc <__aeabi_ddiv>
 800b2be:	9a08      	ldr	r2, [sp, #32]
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	f7f7 f869 	bl	8002398 <__aeabi_dsub>
 800b2c6:	9a06      	ldr	r2, [sp, #24]
 800b2c8:	9b06      	ldr	r3, [sp, #24]
 800b2ca:	4694      	mov	ip, r2
 800b2cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2d0:	9010      	str	r0, [sp, #64]	; 0x40
 800b2d2:	9111      	str	r1, [sp, #68]	; 0x44
 800b2d4:	4463      	add	r3, ip
 800b2d6:	9319      	str	r3, [sp, #100]	; 0x64
 800b2d8:	0029      	movs	r1, r5
 800b2da:	0020      	movs	r0, r4
 800b2dc:	f7f7 fc0c 	bl	8002af8 <__aeabi_d2iz>
 800b2e0:	9014      	str	r0, [sp, #80]	; 0x50
 800b2e2:	f7f7 fc3f 	bl	8002b64 <__aeabi_i2d>
 800b2e6:	0002      	movs	r2, r0
 800b2e8:	000b      	movs	r3, r1
 800b2ea:	0020      	movs	r0, r4
 800b2ec:	0029      	movs	r1, r5
 800b2ee:	f7f7 f853 	bl	8002398 <__aeabi_dsub>
 800b2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	9308      	str	r3, [sp, #32]
 800b2fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2fc:	0004      	movs	r4, r0
 800b2fe:	3330      	adds	r3, #48	; 0x30
 800b300:	7013      	strb	r3, [r2, #0]
 800b302:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b306:	000d      	movs	r5, r1
 800b308:	f7f5 f8a6 	bl	8000458 <__aeabi_dcmplt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d175      	bne.n	800b3fc <_dtoa_r+0x67c>
 800b310:	0022      	movs	r2, r4
 800b312:	002b      	movs	r3, r5
 800b314:	2000      	movs	r0, #0
 800b316:	4940      	ldr	r1, [pc, #256]	; (800b418 <_dtoa_r+0x698>)
 800b318:	f7f7 f83e 	bl	8002398 <__aeabi_dsub>
 800b31c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b320:	f7f5 f89a 	bl	8000458 <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	d000      	beq.n	800b32a <_dtoa_r+0x5aa>
 800b328:	e0d2      	b.n	800b4d0 <_dtoa_r+0x750>
 800b32a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b32c:	9a08      	ldr	r2, [sp, #32]
 800b32e:	4293      	cmp	r3, r2
 800b330:	d100      	bne.n	800b334 <_dtoa_r+0x5b4>
 800b332:	e770      	b.n	800b216 <_dtoa_r+0x496>
 800b334:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b336:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b338:	2200      	movs	r2, #0
 800b33a:	4b38      	ldr	r3, [pc, #224]	; (800b41c <_dtoa_r+0x69c>)
 800b33c:	f7f6 fdc0 	bl	8001ec0 <__aeabi_dmul>
 800b340:	4b36      	ldr	r3, [pc, #216]	; (800b41c <_dtoa_r+0x69c>)
 800b342:	9010      	str	r0, [sp, #64]	; 0x40
 800b344:	9111      	str	r1, [sp, #68]	; 0x44
 800b346:	2200      	movs	r2, #0
 800b348:	0020      	movs	r0, r4
 800b34a:	0029      	movs	r1, r5
 800b34c:	f7f6 fdb8 	bl	8001ec0 <__aeabi_dmul>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	0004      	movs	r4, r0
 800b354:	000d      	movs	r5, r1
 800b356:	9317      	str	r3, [sp, #92]	; 0x5c
 800b358:	e7be      	b.n	800b2d8 <_dtoa_r+0x558>
 800b35a:	9808      	ldr	r0, [sp, #32]
 800b35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b35e:	f7f6 fdaf 	bl	8001ec0 <__aeabi_dmul>
 800b362:	9a06      	ldr	r2, [sp, #24]
 800b364:	9b06      	ldr	r3, [sp, #24]
 800b366:	4694      	mov	ip, r2
 800b368:	9308      	str	r3, [sp, #32]
 800b36a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b36c:	9010      	str	r0, [sp, #64]	; 0x40
 800b36e:	9111      	str	r1, [sp, #68]	; 0x44
 800b370:	4463      	add	r3, ip
 800b372:	9319      	str	r3, [sp, #100]	; 0x64
 800b374:	0029      	movs	r1, r5
 800b376:	0020      	movs	r0, r4
 800b378:	f7f7 fbbe 	bl	8002af8 <__aeabi_d2iz>
 800b37c:	9017      	str	r0, [sp, #92]	; 0x5c
 800b37e:	f7f7 fbf1 	bl	8002b64 <__aeabi_i2d>
 800b382:	0002      	movs	r2, r0
 800b384:	000b      	movs	r3, r1
 800b386:	0020      	movs	r0, r4
 800b388:	0029      	movs	r1, r5
 800b38a:	f7f7 f805 	bl	8002398 <__aeabi_dsub>
 800b38e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b390:	9a08      	ldr	r2, [sp, #32]
 800b392:	3330      	adds	r3, #48	; 0x30
 800b394:	7013      	strb	r3, [r2, #0]
 800b396:	0013      	movs	r3, r2
 800b398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b39a:	3301      	adds	r3, #1
 800b39c:	0004      	movs	r4, r0
 800b39e:	000d      	movs	r5, r1
 800b3a0:	9308      	str	r3, [sp, #32]
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d12c      	bne.n	800b400 <_dtoa_r+0x680>
 800b3a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b3a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3aa:	9a06      	ldr	r2, [sp, #24]
 800b3ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3ae:	4694      	mov	ip, r2
 800b3b0:	4463      	add	r3, ip
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	9308      	str	r3, [sp, #32]
 800b3b6:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <_dtoa_r+0x6b0>)
 800b3b8:	f7f5 fe44 	bl	8001044 <__aeabi_dadd>
 800b3bc:	0002      	movs	r2, r0
 800b3be:	000b      	movs	r3, r1
 800b3c0:	0020      	movs	r0, r4
 800b3c2:	0029      	movs	r1, r5
 800b3c4:	f7f5 f85c 	bl	8000480 <__aeabi_dcmpgt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d000      	beq.n	800b3ce <_dtoa_r+0x64e>
 800b3cc:	e080      	b.n	800b4d0 <_dtoa_r+0x750>
 800b3ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	4916      	ldr	r1, [pc, #88]	; (800b430 <_dtoa_r+0x6b0>)
 800b3d6:	f7f6 ffdf 	bl	8002398 <__aeabi_dsub>
 800b3da:	0002      	movs	r2, r0
 800b3dc:	000b      	movs	r3, r1
 800b3de:	0020      	movs	r0, r4
 800b3e0:	0029      	movs	r1, r5
 800b3e2:	f7f5 f839 	bl	8000458 <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d100      	bne.n	800b3ec <_dtoa_r+0x66c>
 800b3ea:	e714      	b.n	800b216 <_dtoa_r+0x496>
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	3a01      	subs	r2, #1
 800b3f2:	9208      	str	r2, [sp, #32]
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	2a30      	cmp	r2, #48	; 0x30
 800b3f8:	d0f8      	beq.n	800b3ec <_dtoa_r+0x66c>
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	9602      	str	r6, [sp, #8]
 800b3fe:	e055      	b.n	800b4ac <_dtoa_r+0x72c>
 800b400:	2200      	movs	r2, #0
 800b402:	4b06      	ldr	r3, [pc, #24]	; (800b41c <_dtoa_r+0x69c>)
 800b404:	f7f6 fd5c 	bl	8001ec0 <__aeabi_dmul>
 800b408:	0004      	movs	r4, r0
 800b40a:	000d      	movs	r5, r1
 800b40c:	e7b2      	b.n	800b374 <_dtoa_r+0x5f4>
 800b40e:	46c0      	nop			; (mov r8, r8)
 800b410:	0800d1a8 	.word	0x0800d1a8
 800b414:	0800d180 	.word	0x0800d180
 800b418:	3ff00000 	.word	0x3ff00000
 800b41c:	40240000 	.word	0x40240000
 800b420:	401c0000 	.word	0x401c0000
 800b424:	fcc00000 	.word	0xfcc00000
 800b428:	40140000 	.word	0x40140000
 800b42c:	7cc00000 	.word	0x7cc00000
 800b430:	3fe00000 	.word	0x3fe00000
 800b434:	9b07      	ldr	r3, [sp, #28]
 800b436:	9e06      	ldr	r6, [sp, #24]
 800b438:	3b01      	subs	r3, #1
 800b43a:	199b      	adds	r3, r3, r6
 800b43c:	930c      	str	r3, [sp, #48]	; 0x30
 800b43e:	9c08      	ldr	r4, [sp, #32]
 800b440:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b446:	0020      	movs	r0, r4
 800b448:	0029      	movs	r1, r5
 800b44a:	f7f6 f937 	bl	80016bc <__aeabi_ddiv>
 800b44e:	f7f7 fb53 	bl	8002af8 <__aeabi_d2iz>
 800b452:	9007      	str	r0, [sp, #28]
 800b454:	f7f7 fb86 	bl	8002b64 <__aeabi_i2d>
 800b458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b45c:	f7f6 fd30 	bl	8001ec0 <__aeabi_dmul>
 800b460:	0002      	movs	r2, r0
 800b462:	000b      	movs	r3, r1
 800b464:	0020      	movs	r0, r4
 800b466:	0029      	movs	r1, r5
 800b468:	f7f6 ff96 	bl	8002398 <__aeabi_dsub>
 800b46c:	0033      	movs	r3, r6
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	3601      	adds	r6, #1
 800b472:	3230      	adds	r2, #48	; 0x30
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b478:	9608      	str	r6, [sp, #32]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d139      	bne.n	800b4f2 <_dtoa_r+0x772>
 800b47e:	0002      	movs	r2, r0
 800b480:	000b      	movs	r3, r1
 800b482:	f7f5 fddf 	bl	8001044 <__aeabi_dadd>
 800b486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b48a:	0004      	movs	r4, r0
 800b48c:	000d      	movs	r5, r1
 800b48e:	f7f4 fff7 	bl	8000480 <__aeabi_dcmpgt>
 800b492:	2800      	cmp	r0, #0
 800b494:	d11b      	bne.n	800b4ce <_dtoa_r+0x74e>
 800b496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b49a:	0020      	movs	r0, r4
 800b49c:	0029      	movs	r1, r5
 800b49e:	f7f4 ffd5 	bl	800044c <__aeabi_dcmpeq>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d002      	beq.n	800b4ac <_dtoa_r+0x72c>
 800b4a6:	9b07      	ldr	r3, [sp, #28]
 800b4a8:	07db      	lsls	r3, r3, #31
 800b4aa:	d410      	bmi.n	800b4ce <_dtoa_r+0x74e>
 800b4ac:	0038      	movs	r0, r7
 800b4ae:	9905      	ldr	r1, [sp, #20]
 800b4b0:	f000 fd1c 	bl	800beec <_Bfree>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9a08      	ldr	r2, [sp, #32]
 800b4b8:	9802      	ldr	r0, [sp, #8]
 800b4ba:	7013      	strb	r3, [r2, #0]
 800b4bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b4be:	3001      	adds	r0, #1
 800b4c0:	6018      	str	r0, [r3, #0]
 800b4c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d100      	bne.n	800b4ca <_dtoa_r+0x74a>
 800b4c8:	e4a6      	b.n	800ae18 <_dtoa_r+0x98>
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e4a4      	b.n	800ae18 <_dtoa_r+0x98>
 800b4ce:	9e02      	ldr	r6, [sp, #8]
 800b4d0:	9b08      	ldr	r3, [sp, #32]
 800b4d2:	9308      	str	r3, [sp, #32]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	781a      	ldrb	r2, [r3, #0]
 800b4d8:	2a39      	cmp	r2, #57	; 0x39
 800b4da:	d106      	bne.n	800b4ea <_dtoa_r+0x76a>
 800b4dc:	9a06      	ldr	r2, [sp, #24]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d1f7      	bne.n	800b4d2 <_dtoa_r+0x752>
 800b4e2:	2230      	movs	r2, #48	; 0x30
 800b4e4:	9906      	ldr	r1, [sp, #24]
 800b4e6:	3601      	adds	r6, #1
 800b4e8:	700a      	strb	r2, [r1, #0]
 800b4ea:	781a      	ldrb	r2, [r3, #0]
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e784      	b.n	800b3fc <_dtoa_r+0x67c>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4baa      	ldr	r3, [pc, #680]	; (800b7a0 <_dtoa_r+0xa20>)
 800b4f6:	f7f6 fce3 	bl	8001ec0 <__aeabi_dmul>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	0004      	movs	r4, r0
 800b500:	000d      	movs	r5, r1
 800b502:	f7f4 ffa3 	bl	800044c <__aeabi_dcmpeq>
 800b506:	2800      	cmp	r0, #0
 800b508:	d09b      	beq.n	800b442 <_dtoa_r+0x6c2>
 800b50a:	e7cf      	b.n	800b4ac <_dtoa_r+0x72c>
 800b50c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b50e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b510:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b512:	2d00      	cmp	r5, #0
 800b514:	d012      	beq.n	800b53c <_dtoa_r+0x7bc>
 800b516:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b518:	2a01      	cmp	r2, #1
 800b51a:	dc66      	bgt.n	800b5ea <_dtoa_r+0x86a>
 800b51c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b51e:	2a00      	cmp	r2, #0
 800b520:	d05d      	beq.n	800b5de <_dtoa_r+0x85e>
 800b522:	4aa0      	ldr	r2, [pc, #640]	; (800b7a4 <_dtoa_r+0xa24>)
 800b524:	189b      	adds	r3, r3, r2
 800b526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b528:	2101      	movs	r1, #1
 800b52a:	18d2      	adds	r2, r2, r3
 800b52c:	920a      	str	r2, [sp, #40]	; 0x28
 800b52e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b530:	0038      	movs	r0, r7
 800b532:	18d3      	adds	r3, r2, r3
 800b534:	930d      	str	r3, [sp, #52]	; 0x34
 800b536:	f000 fd89 	bl	800c04c <__i2b>
 800b53a:	0005      	movs	r5, r0
 800b53c:	2c00      	cmp	r4, #0
 800b53e:	dd0e      	ble.n	800b55e <_dtoa_r+0x7de>
 800b540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b542:	2b00      	cmp	r3, #0
 800b544:	dd0b      	ble.n	800b55e <_dtoa_r+0x7de>
 800b546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b548:	0023      	movs	r3, r4
 800b54a:	4294      	cmp	r4, r2
 800b54c:	dd00      	ble.n	800b550 <_dtoa_r+0x7d0>
 800b54e:	0013      	movs	r3, r2
 800b550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b552:	1ae4      	subs	r4, r4, r3
 800b554:	1ad2      	subs	r2, r2, r3
 800b556:	920a      	str	r2, [sp, #40]	; 0x28
 800b558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	930d      	str	r3, [sp, #52]	; 0x34
 800b55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01f      	beq.n	800b5a4 <_dtoa_r+0x824>
 800b564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b566:	2b00      	cmp	r3, #0
 800b568:	d054      	beq.n	800b614 <_dtoa_r+0x894>
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	dd11      	ble.n	800b592 <_dtoa_r+0x812>
 800b56e:	0029      	movs	r1, r5
 800b570:	0032      	movs	r2, r6
 800b572:	0038      	movs	r0, r7
 800b574:	f000 fe30 	bl	800c1d8 <__pow5mult>
 800b578:	9a05      	ldr	r2, [sp, #20]
 800b57a:	0001      	movs	r1, r0
 800b57c:	0005      	movs	r5, r0
 800b57e:	0038      	movs	r0, r7
 800b580:	f000 fd7a 	bl	800c078 <__multiply>
 800b584:	9905      	ldr	r1, [sp, #20]
 800b586:	9014      	str	r0, [sp, #80]	; 0x50
 800b588:	0038      	movs	r0, r7
 800b58a:	f000 fcaf 	bl	800beec <_Bfree>
 800b58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b590:	9305      	str	r3, [sp, #20]
 800b592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b594:	1b9a      	subs	r2, r3, r6
 800b596:	42b3      	cmp	r3, r6
 800b598:	d004      	beq.n	800b5a4 <_dtoa_r+0x824>
 800b59a:	0038      	movs	r0, r7
 800b59c:	9905      	ldr	r1, [sp, #20]
 800b59e:	f000 fe1b 	bl	800c1d8 <__pow5mult>
 800b5a2:	9005      	str	r0, [sp, #20]
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	0038      	movs	r0, r7
 800b5a8:	f000 fd50 	bl	800c04c <__i2b>
 800b5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ae:	0006      	movs	r6, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dd31      	ble.n	800b618 <_dtoa_r+0x898>
 800b5b4:	001a      	movs	r2, r3
 800b5b6:	0001      	movs	r1, r0
 800b5b8:	0038      	movs	r0, r7
 800b5ba:	f000 fe0d 	bl	800c1d8 <__pow5mult>
 800b5be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5c0:	0006      	movs	r6, r0
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	dd2d      	ble.n	800b622 <_dtoa_r+0x8a2>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b5ca:	6933      	ldr	r3, [r6, #16]
 800b5cc:	3303      	adds	r3, #3
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	18f3      	adds	r3, r6, r3
 800b5d2:	6858      	ldr	r0, [r3, #4]
 800b5d4:	f000 fcf2 	bl	800bfbc <__hi0bits>
 800b5d8:	2320      	movs	r3, #32
 800b5da:	1a18      	subs	r0, r3, r0
 800b5dc:	e039      	b.n	800b652 <_dtoa_r+0x8d2>
 800b5de:	2336      	movs	r3, #54	; 0x36
 800b5e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b5e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5e6:	1a9b      	subs	r3, r3, r2
 800b5e8:	e79d      	b.n	800b526 <_dtoa_r+0x7a6>
 800b5ea:	9b07      	ldr	r3, [sp, #28]
 800b5ec:	1e5e      	subs	r6, r3, #1
 800b5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5f0:	42b3      	cmp	r3, r6
 800b5f2:	db07      	blt.n	800b604 <_dtoa_r+0x884>
 800b5f4:	1b9e      	subs	r6, r3, r6
 800b5f6:	9b07      	ldr	r3, [sp, #28]
 800b5f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	da93      	bge.n	800b526 <_dtoa_r+0x7a6>
 800b5fe:	1ae4      	subs	r4, r4, r3
 800b600:	2300      	movs	r3, #0
 800b602:	e790      	b.n	800b526 <_dtoa_r+0x7a6>
 800b604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b606:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b608:	1af3      	subs	r3, r6, r3
 800b60a:	18d3      	adds	r3, r2, r3
 800b60c:	960e      	str	r6, [sp, #56]	; 0x38
 800b60e:	9315      	str	r3, [sp, #84]	; 0x54
 800b610:	2600      	movs	r6, #0
 800b612:	e7f0      	b.n	800b5f6 <_dtoa_r+0x876>
 800b614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b616:	e7c0      	b.n	800b59a <_dtoa_r+0x81a>
 800b618:	2300      	movs	r3, #0
 800b61a:	930e      	str	r3, [sp, #56]	; 0x38
 800b61c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b61e:	2b01      	cmp	r3, #1
 800b620:	dc13      	bgt.n	800b64a <_dtoa_r+0x8ca>
 800b622:	2300      	movs	r3, #0
 800b624:	930e      	str	r3, [sp, #56]	; 0x38
 800b626:	9b08      	ldr	r3, [sp, #32]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10e      	bne.n	800b64a <_dtoa_r+0x8ca>
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	031b      	lsls	r3, r3, #12
 800b630:	d10b      	bne.n	800b64a <_dtoa_r+0x8ca>
 800b632:	4b5d      	ldr	r3, [pc, #372]	; (800b7a8 <_dtoa_r+0xa28>)
 800b634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b636:	4213      	tst	r3, r2
 800b638:	d007      	beq.n	800b64a <_dtoa_r+0x8ca>
 800b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63c:	3301      	adds	r3, #1
 800b63e:	930a      	str	r3, [sp, #40]	; 0x28
 800b640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b642:	3301      	adds	r3, #1
 800b644:	930d      	str	r3, [sp, #52]	; 0x34
 800b646:	2301      	movs	r3, #1
 800b648:	930e      	str	r3, [sp, #56]	; 0x38
 800b64a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b64c:	2001      	movs	r0, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1bb      	bne.n	800b5ca <_dtoa_r+0x84a>
 800b652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b654:	221f      	movs	r2, #31
 800b656:	1818      	adds	r0, r3, r0
 800b658:	0003      	movs	r3, r0
 800b65a:	4013      	ands	r3, r2
 800b65c:	4210      	tst	r0, r2
 800b65e:	d046      	beq.n	800b6ee <_dtoa_r+0x96e>
 800b660:	3201      	adds	r2, #1
 800b662:	1ad2      	subs	r2, r2, r3
 800b664:	2a04      	cmp	r2, #4
 800b666:	dd3f      	ble.n	800b6e8 <_dtoa_r+0x968>
 800b668:	221c      	movs	r2, #28
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b66e:	18e4      	adds	r4, r4, r3
 800b670:	18d2      	adds	r2, r2, r3
 800b672:	920a      	str	r2, [sp, #40]	; 0x28
 800b674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b676:	18d3      	adds	r3, r2, r3
 800b678:	930d      	str	r3, [sp, #52]	; 0x34
 800b67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dd05      	ble.n	800b68c <_dtoa_r+0x90c>
 800b680:	001a      	movs	r2, r3
 800b682:	0038      	movs	r0, r7
 800b684:	9905      	ldr	r1, [sp, #20]
 800b686:	f000 fe03 	bl	800c290 <__lshift>
 800b68a:	9005      	str	r0, [sp, #20]
 800b68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd05      	ble.n	800b69e <_dtoa_r+0x91e>
 800b692:	0031      	movs	r1, r6
 800b694:	001a      	movs	r2, r3
 800b696:	0038      	movs	r0, r7
 800b698:	f000 fdfa 	bl	800c290 <__lshift>
 800b69c:	0006      	movs	r6, r0
 800b69e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d026      	beq.n	800b6f2 <_dtoa_r+0x972>
 800b6a4:	0031      	movs	r1, r6
 800b6a6:	9805      	ldr	r0, [sp, #20]
 800b6a8:	f000 fe60 	bl	800c36c <__mcmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	da20      	bge.n	800b6f2 <_dtoa_r+0x972>
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	220a      	movs	r2, #10
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	9302      	str	r3, [sp, #8]
 800b6b8:	0038      	movs	r0, r7
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9905      	ldr	r1, [sp, #20]
 800b6be:	f000 fc39 	bl	800bf34 <__multadd>
 800b6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c4:	9005      	str	r0, [sp, #20]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d100      	bne.n	800b6cc <_dtoa_r+0x94c>
 800b6ca:	e166      	b.n	800b99a <_dtoa_r+0xc1a>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	0029      	movs	r1, r5
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	0038      	movs	r0, r7
 800b6d4:	f000 fc2e 	bl	800bf34 <__multadd>
 800b6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6da:	0005      	movs	r5, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dc47      	bgt.n	800b770 <_dtoa_r+0x9f0>
 800b6e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	dc0d      	bgt.n	800b702 <_dtoa_r+0x982>
 800b6e6:	e043      	b.n	800b770 <_dtoa_r+0x9f0>
 800b6e8:	2a04      	cmp	r2, #4
 800b6ea:	d0c6      	beq.n	800b67a <_dtoa_r+0x8fa>
 800b6ec:	0013      	movs	r3, r2
 800b6ee:	331c      	adds	r3, #28
 800b6f0:	e7bc      	b.n	800b66c <_dtoa_r+0x8ec>
 800b6f2:	9b07      	ldr	r3, [sp, #28]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc35      	bgt.n	800b764 <_dtoa_r+0x9e4>
 800b6f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	dd32      	ble.n	800b764 <_dtoa_r+0x9e4>
 800b6fe:	9b07      	ldr	r3, [sp, #28]
 800b700:	930c      	str	r3, [sp, #48]	; 0x30
 800b702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10c      	bne.n	800b722 <_dtoa_r+0x9a2>
 800b708:	0031      	movs	r1, r6
 800b70a:	2205      	movs	r2, #5
 800b70c:	0038      	movs	r0, r7
 800b70e:	f000 fc11 	bl	800bf34 <__multadd>
 800b712:	0006      	movs	r6, r0
 800b714:	0001      	movs	r1, r0
 800b716:	9805      	ldr	r0, [sp, #20]
 800b718:	f000 fe28 	bl	800c36c <__mcmp>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	dd00      	ble.n	800b722 <_dtoa_r+0x9a2>
 800b720:	e5a5      	b.n	800b26e <_dtoa_r+0x4ee>
 800b722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b724:	43db      	mvns	r3, r3
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	9b06      	ldr	r3, [sp, #24]
 800b72a:	9308      	str	r3, [sp, #32]
 800b72c:	2400      	movs	r4, #0
 800b72e:	0031      	movs	r1, r6
 800b730:	0038      	movs	r0, r7
 800b732:	f000 fbdb 	bl	800beec <_Bfree>
 800b736:	2d00      	cmp	r5, #0
 800b738:	d100      	bne.n	800b73c <_dtoa_r+0x9bc>
 800b73a:	e6b7      	b.n	800b4ac <_dtoa_r+0x72c>
 800b73c:	2c00      	cmp	r4, #0
 800b73e:	d005      	beq.n	800b74c <_dtoa_r+0x9cc>
 800b740:	42ac      	cmp	r4, r5
 800b742:	d003      	beq.n	800b74c <_dtoa_r+0x9cc>
 800b744:	0021      	movs	r1, r4
 800b746:	0038      	movs	r0, r7
 800b748:	f000 fbd0 	bl	800beec <_Bfree>
 800b74c:	0029      	movs	r1, r5
 800b74e:	0038      	movs	r0, r7
 800b750:	f000 fbcc 	bl	800beec <_Bfree>
 800b754:	e6aa      	b.n	800b4ac <_dtoa_r+0x72c>
 800b756:	2600      	movs	r6, #0
 800b758:	0035      	movs	r5, r6
 800b75a:	e7e2      	b.n	800b722 <_dtoa_r+0x9a2>
 800b75c:	9602      	str	r6, [sp, #8]
 800b75e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b760:	0035      	movs	r5, r6
 800b762:	e584      	b.n	800b26e <_dtoa_r+0x4ee>
 800b764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d100      	bne.n	800b76c <_dtoa_r+0x9ec>
 800b76a:	e0ce      	b.n	800b90a <_dtoa_r+0xb8a>
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	930c      	str	r3, [sp, #48]	; 0x30
 800b770:	2c00      	cmp	r4, #0
 800b772:	dd05      	ble.n	800b780 <_dtoa_r+0xa00>
 800b774:	0029      	movs	r1, r5
 800b776:	0022      	movs	r2, r4
 800b778:	0038      	movs	r0, r7
 800b77a:	f000 fd89 	bl	800c290 <__lshift>
 800b77e:	0005      	movs	r5, r0
 800b780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b782:	0028      	movs	r0, r5
 800b784:	2b00      	cmp	r3, #0
 800b786:	d022      	beq.n	800b7ce <_dtoa_r+0xa4e>
 800b788:	0038      	movs	r0, r7
 800b78a:	6869      	ldr	r1, [r5, #4]
 800b78c:	f000 fb6a 	bl	800be64 <_Balloc>
 800b790:	1e04      	subs	r4, r0, #0
 800b792:	d10f      	bne.n	800b7b4 <_dtoa_r+0xa34>
 800b794:	0002      	movs	r2, r0
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <_dtoa_r+0xa2c>)
 800b798:	4905      	ldr	r1, [pc, #20]	; (800b7b0 <_dtoa_r+0xa30>)
 800b79a:	f7ff fb06 	bl	800adaa <_dtoa_r+0x2a>
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	40240000 	.word	0x40240000
 800b7a4:	00000433 	.word	0x00000433
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	0800d0ac 	.word	0x0800d0ac
 800b7b0:	000002ea 	.word	0x000002ea
 800b7b4:	0029      	movs	r1, r5
 800b7b6:	692b      	ldr	r3, [r5, #16]
 800b7b8:	310c      	adds	r1, #12
 800b7ba:	1c9a      	adds	r2, r3, #2
 800b7bc:	0092      	lsls	r2, r2, #2
 800b7be:	300c      	adds	r0, #12
 800b7c0:	f7fe fb9e 	bl	8009f00 <memcpy>
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	0021      	movs	r1, r4
 800b7c8:	0038      	movs	r0, r7
 800b7ca:	f000 fd61 	bl	800c290 <__lshift>
 800b7ce:	9b06      	ldr	r3, [sp, #24]
 800b7d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	189b      	adds	r3, r3, r2
 800b7d8:	2201      	movs	r2, #1
 800b7da:	002c      	movs	r4, r5
 800b7dc:	0005      	movs	r5, r0
 800b7de:	9314      	str	r3, [sp, #80]	; 0x50
 800b7e0:	9b08      	ldr	r3, [sp, #32]
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e6:	0031      	movs	r1, r6
 800b7e8:	9805      	ldr	r0, [sp, #20]
 800b7ea:	f7ff fa3e 	bl	800ac6a <quorem>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	0021      	movs	r1, r4
 800b7f2:	3330      	adds	r3, #48	; 0x30
 800b7f4:	900d      	str	r0, [sp, #52]	; 0x34
 800b7f6:	9805      	ldr	r0, [sp, #20]
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	f000 fdb7 	bl	800c36c <__mcmp>
 800b7fe:	002a      	movs	r2, r5
 800b800:	900e      	str	r0, [sp, #56]	; 0x38
 800b802:	0031      	movs	r1, r6
 800b804:	0038      	movs	r0, r7
 800b806:	f000 fdcd 	bl	800c3a4 <__mdiff>
 800b80a:	68c3      	ldr	r3, [r0, #12]
 800b80c:	9008      	str	r0, [sp, #32]
 800b80e:	9310      	str	r3, [sp, #64]	; 0x40
 800b810:	2301      	movs	r3, #1
 800b812:	930c      	str	r3, [sp, #48]	; 0x30
 800b814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b816:	2b00      	cmp	r3, #0
 800b818:	d104      	bne.n	800b824 <_dtoa_r+0xaa4>
 800b81a:	0001      	movs	r1, r0
 800b81c:	9805      	ldr	r0, [sp, #20]
 800b81e:	f000 fda5 	bl	800c36c <__mcmp>
 800b822:	900c      	str	r0, [sp, #48]	; 0x30
 800b824:	0038      	movs	r0, r7
 800b826:	9908      	ldr	r1, [sp, #32]
 800b828:	f000 fb60 	bl	800beec <_Bfree>
 800b82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b82e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b830:	3301      	adds	r3, #1
 800b832:	9308      	str	r3, [sp, #32]
 800b834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b836:	4313      	orrs	r3, r2
 800b838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b83a:	4313      	orrs	r3, r2
 800b83c:	d10c      	bne.n	800b858 <_dtoa_r+0xad8>
 800b83e:	9b07      	ldr	r3, [sp, #28]
 800b840:	2b39      	cmp	r3, #57	; 0x39
 800b842:	d026      	beq.n	800b892 <_dtoa_r+0xb12>
 800b844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	dd02      	ble.n	800b850 <_dtoa_r+0xad0>
 800b84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b84c:	3331      	adds	r3, #49	; 0x31
 800b84e:	9307      	str	r3, [sp, #28]
 800b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b852:	9a07      	ldr	r2, [sp, #28]
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	e76a      	b.n	800b72e <_dtoa_r+0x9ae>
 800b858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	db04      	blt.n	800b868 <_dtoa_r+0xae8>
 800b85e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b860:	4313      	orrs	r3, r2
 800b862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b864:	4313      	orrs	r3, r2
 800b866:	d11f      	bne.n	800b8a8 <_dtoa_r+0xb28>
 800b868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	ddf0      	ble.n	800b850 <_dtoa_r+0xad0>
 800b86e:	9905      	ldr	r1, [sp, #20]
 800b870:	2201      	movs	r2, #1
 800b872:	0038      	movs	r0, r7
 800b874:	f000 fd0c 	bl	800c290 <__lshift>
 800b878:	0031      	movs	r1, r6
 800b87a:	9005      	str	r0, [sp, #20]
 800b87c:	f000 fd76 	bl	800c36c <__mcmp>
 800b880:	2800      	cmp	r0, #0
 800b882:	dc03      	bgt.n	800b88c <_dtoa_r+0xb0c>
 800b884:	d1e4      	bne.n	800b850 <_dtoa_r+0xad0>
 800b886:	9b07      	ldr	r3, [sp, #28]
 800b888:	07db      	lsls	r3, r3, #31
 800b88a:	d5e1      	bpl.n	800b850 <_dtoa_r+0xad0>
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	2b39      	cmp	r3, #57	; 0x39
 800b890:	d1db      	bne.n	800b84a <_dtoa_r+0xaca>
 800b892:	2339      	movs	r3, #57	; 0x39
 800b894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b896:	7013      	strb	r3, [r2, #0]
 800b898:	9b08      	ldr	r3, [sp, #32]
 800b89a:	9308      	str	r3, [sp, #32]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	781a      	ldrb	r2, [r3, #0]
 800b8a0:	2a39      	cmp	r2, #57	; 0x39
 800b8a2:	d068      	beq.n	800b976 <_dtoa_r+0xbf6>
 800b8a4:	3201      	adds	r2, #1
 800b8a6:	e7d5      	b.n	800b854 <_dtoa_r+0xad4>
 800b8a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd07      	ble.n	800b8be <_dtoa_r+0xb3e>
 800b8ae:	9b07      	ldr	r3, [sp, #28]
 800b8b0:	2b39      	cmp	r3, #57	; 0x39
 800b8b2:	d0ee      	beq.n	800b892 <_dtoa_r+0xb12>
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	7013      	strb	r3, [r2, #0]
 800b8bc:	e737      	b.n	800b72e <_dtoa_r+0x9ae>
 800b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c0:	9a07      	ldr	r2, [sp, #28]
 800b8c2:	701a      	strb	r2, [r3, #0]
 800b8c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d03e      	beq.n	800b94a <_dtoa_r+0xbca>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	220a      	movs	r2, #10
 800b8d0:	9905      	ldr	r1, [sp, #20]
 800b8d2:	0038      	movs	r0, r7
 800b8d4:	f000 fb2e 	bl	800bf34 <__multadd>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9005      	str	r0, [sp, #20]
 800b8dc:	220a      	movs	r2, #10
 800b8de:	0021      	movs	r1, r4
 800b8e0:	0038      	movs	r0, r7
 800b8e2:	42ac      	cmp	r4, r5
 800b8e4:	d106      	bne.n	800b8f4 <_dtoa_r+0xb74>
 800b8e6:	f000 fb25 	bl	800bf34 <__multadd>
 800b8ea:	0004      	movs	r4, r0
 800b8ec:	0005      	movs	r5, r0
 800b8ee:	9b08      	ldr	r3, [sp, #32]
 800b8f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f2:	e778      	b.n	800b7e6 <_dtoa_r+0xa66>
 800b8f4:	f000 fb1e 	bl	800bf34 <__multadd>
 800b8f8:	0029      	movs	r1, r5
 800b8fa:	0004      	movs	r4, r0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	220a      	movs	r2, #10
 800b900:	0038      	movs	r0, r7
 800b902:	f000 fb17 	bl	800bf34 <__multadd>
 800b906:	0005      	movs	r5, r0
 800b908:	e7f1      	b.n	800b8ee <_dtoa_r+0xb6e>
 800b90a:	9b07      	ldr	r3, [sp, #28]
 800b90c:	930c      	str	r3, [sp, #48]	; 0x30
 800b90e:	2400      	movs	r4, #0
 800b910:	0031      	movs	r1, r6
 800b912:	9805      	ldr	r0, [sp, #20]
 800b914:	f7ff f9a9 	bl	800ac6a <quorem>
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	3030      	adds	r0, #48	; 0x30
 800b91c:	5518      	strb	r0, [r3, r4]
 800b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b920:	3401      	adds	r4, #1
 800b922:	9007      	str	r0, [sp, #28]
 800b924:	42a3      	cmp	r3, r4
 800b926:	dd07      	ble.n	800b938 <_dtoa_r+0xbb8>
 800b928:	2300      	movs	r3, #0
 800b92a:	220a      	movs	r2, #10
 800b92c:	0038      	movs	r0, r7
 800b92e:	9905      	ldr	r1, [sp, #20]
 800b930:	f000 fb00 	bl	800bf34 <__multadd>
 800b934:	9005      	str	r0, [sp, #20]
 800b936:	e7eb      	b.n	800b910 <_dtoa_r+0xb90>
 800b938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b93a:	2001      	movs	r0, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dd00      	ble.n	800b942 <_dtoa_r+0xbc2>
 800b940:	0018      	movs	r0, r3
 800b942:	2400      	movs	r4, #0
 800b944:	9b06      	ldr	r3, [sp, #24]
 800b946:	181b      	adds	r3, r3, r0
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9905      	ldr	r1, [sp, #20]
 800b94c:	2201      	movs	r2, #1
 800b94e:	0038      	movs	r0, r7
 800b950:	f000 fc9e 	bl	800c290 <__lshift>
 800b954:	0031      	movs	r1, r6
 800b956:	9005      	str	r0, [sp, #20]
 800b958:	f000 fd08 	bl	800c36c <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	dc9b      	bgt.n	800b898 <_dtoa_r+0xb18>
 800b960:	d102      	bne.n	800b968 <_dtoa_r+0xbe8>
 800b962:	9b07      	ldr	r3, [sp, #28]
 800b964:	07db      	lsls	r3, r3, #31
 800b966:	d497      	bmi.n	800b898 <_dtoa_r+0xb18>
 800b968:	9b08      	ldr	r3, [sp, #32]
 800b96a:	9308      	str	r3, [sp, #32]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	781a      	ldrb	r2, [r3, #0]
 800b970:	2a30      	cmp	r2, #48	; 0x30
 800b972:	d0fa      	beq.n	800b96a <_dtoa_r+0xbea>
 800b974:	e6db      	b.n	800b72e <_dtoa_r+0x9ae>
 800b976:	9a06      	ldr	r2, [sp, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d18e      	bne.n	800b89a <_dtoa_r+0xb1a>
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	3301      	adds	r3, #1
 800b980:	9302      	str	r3, [sp, #8]
 800b982:	2331      	movs	r3, #49	; 0x31
 800b984:	e799      	b.n	800b8ba <_dtoa_r+0xb3a>
 800b986:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <_dtoa_r+0xc2c>)
 800b988:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b98a:	9306      	str	r3, [sp, #24]
 800b98c:	4b08      	ldr	r3, [pc, #32]	; (800b9b0 <_dtoa_r+0xc30>)
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d001      	beq.n	800b996 <_dtoa_r+0xc16>
 800b992:	f7ff fa3f 	bl	800ae14 <_dtoa_r+0x94>
 800b996:	f7ff fa3f 	bl	800ae18 <_dtoa_r+0x98>
 800b99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dcb6      	bgt.n	800b90e <_dtoa_r+0xb8e>
 800b9a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	dd00      	ble.n	800b9a8 <_dtoa_r+0xc28>
 800b9a6:	e6ac      	b.n	800b702 <_dtoa_r+0x982>
 800b9a8:	e7b1      	b.n	800b90e <_dtoa_r+0xb8e>
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	0800d02d 	.word	0x0800d02d
 800b9b0:	0800d035 	.word	0x0800d035

0800b9b4 <__sflush_r>:
 800b9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b6:	898b      	ldrh	r3, [r1, #12]
 800b9b8:	0005      	movs	r5, r0
 800b9ba:	000c      	movs	r4, r1
 800b9bc:	071a      	lsls	r2, r3, #28
 800b9be:	d45f      	bmi.n	800ba80 <__sflush_r+0xcc>
 800b9c0:	684a      	ldr	r2, [r1, #4]
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	dc04      	bgt.n	800b9d0 <__sflush_r+0x1c>
 800b9c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	dc01      	bgt.n	800b9d0 <__sflush_r+0x1c>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b9d2:	2f00      	cmp	r7, #0
 800b9d4:	d0fa      	beq.n	800b9cc <__sflush_r+0x18>
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	682e      	ldr	r6, [r5, #0]
 800b9dc:	602a      	str	r2, [r5, #0]
 800b9de:	001a      	movs	r2, r3
 800b9e0:	0149      	lsls	r1, r1, #5
 800b9e2:	400a      	ands	r2, r1
 800b9e4:	420b      	tst	r3, r1
 800b9e6:	d034      	beq.n	800ba52 <__sflush_r+0x9e>
 800b9e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	075b      	lsls	r3, r3, #29
 800b9ee:	d506      	bpl.n	800b9fe <__sflush_r+0x4a>
 800b9f0:	6863      	ldr	r3, [r4, #4]
 800b9f2:	1ac0      	subs	r0, r0, r3
 800b9f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <__sflush_r+0x4a>
 800b9fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9fc:	1ac0      	subs	r0, r0, r3
 800b9fe:	0002      	movs	r2, r0
 800ba00:	6a21      	ldr	r1, [r4, #32]
 800ba02:	2300      	movs	r3, #0
 800ba04:	0028      	movs	r0, r5
 800ba06:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ba08:	47b8      	blx	r7
 800ba0a:	89a1      	ldrh	r1, [r4, #12]
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d106      	bne.n	800ba1e <__sflush_r+0x6a>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	2b1d      	cmp	r3, #29
 800ba14:	d831      	bhi.n	800ba7a <__sflush_r+0xc6>
 800ba16:	4a2c      	ldr	r2, [pc, #176]	; (800bac8 <__sflush_r+0x114>)
 800ba18:	40da      	lsrs	r2, r3
 800ba1a:	07d3      	lsls	r3, r2, #31
 800ba1c:	d52d      	bpl.n	800ba7a <__sflush_r+0xc6>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	04cb      	lsls	r3, r1, #19
 800ba28:	d505      	bpl.n	800ba36 <__sflush_r+0x82>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	d102      	bne.n	800ba34 <__sflush_r+0x80>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d100      	bne.n	800ba36 <__sflush_r+0x82>
 800ba34:	6560      	str	r0, [r4, #84]	; 0x54
 800ba36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba38:	602e      	str	r6, [r5, #0]
 800ba3a:	2900      	cmp	r1, #0
 800ba3c:	d0c6      	beq.n	800b9cc <__sflush_r+0x18>
 800ba3e:	0023      	movs	r3, r4
 800ba40:	3344      	adds	r3, #68	; 0x44
 800ba42:	4299      	cmp	r1, r3
 800ba44:	d002      	beq.n	800ba4c <__sflush_r+0x98>
 800ba46:	0028      	movs	r0, r5
 800ba48:	f000 fdd4 	bl	800c5f4 <_free_r>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	6360      	str	r0, [r4, #52]	; 0x34
 800ba50:	e7bd      	b.n	800b9ce <__sflush_r+0x1a>
 800ba52:	2301      	movs	r3, #1
 800ba54:	0028      	movs	r0, r5
 800ba56:	6a21      	ldr	r1, [r4, #32]
 800ba58:	47b8      	blx	r7
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	d1c5      	bne.n	800b9ea <__sflush_r+0x36>
 800ba5e:	682b      	ldr	r3, [r5, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0c2      	beq.n	800b9ea <__sflush_r+0x36>
 800ba64:	2b1d      	cmp	r3, #29
 800ba66:	d001      	beq.n	800ba6c <__sflush_r+0xb8>
 800ba68:	2b16      	cmp	r3, #22
 800ba6a:	d101      	bne.n	800ba70 <__sflush_r+0xbc>
 800ba6c:	602e      	str	r6, [r5, #0]
 800ba6e:	e7ad      	b.n	800b9cc <__sflush_r+0x18>
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	89a2      	ldrh	r2, [r4, #12]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	e7a9      	b.n	800b9ce <__sflush_r+0x1a>
 800ba7a:	2340      	movs	r3, #64	; 0x40
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	e7fa      	b.n	800ba76 <__sflush_r+0xc2>
 800ba80:	690f      	ldr	r7, [r1, #16]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d0a2      	beq.n	800b9cc <__sflush_r+0x18>
 800ba86:	680a      	ldr	r2, [r1, #0]
 800ba88:	600f      	str	r7, [r1, #0]
 800ba8a:	1bd2      	subs	r2, r2, r7
 800ba8c:	9201      	str	r2, [sp, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	079b      	lsls	r3, r3, #30
 800ba92:	d100      	bne.n	800ba96 <__sflush_r+0xe2>
 800ba94:	694a      	ldr	r2, [r1, #20]
 800ba96:	60a2      	str	r2, [r4, #8]
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	dc00      	bgt.n	800baa0 <__sflush_r+0xec>
 800ba9e:	e795      	b.n	800b9cc <__sflush_r+0x18>
 800baa0:	003a      	movs	r2, r7
 800baa2:	0028      	movs	r0, r5
 800baa4:	9b01      	ldr	r3, [sp, #4]
 800baa6:	6a21      	ldr	r1, [r4, #32]
 800baa8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baaa:	47b0      	blx	r6
 800baac:	2800      	cmp	r0, #0
 800baae:	dc06      	bgt.n	800babe <__sflush_r+0x10a>
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	2001      	movs	r0, #1
 800bab4:	89a2      	ldrh	r2, [r4, #12]
 800bab6:	4240      	negs	r0, r0
 800bab8:	4313      	orrs	r3, r2
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	e787      	b.n	800b9ce <__sflush_r+0x1a>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	183f      	adds	r7, r7, r0
 800bac2:	1a1b      	subs	r3, r3, r0
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	e7e7      	b.n	800ba98 <__sflush_r+0xe4>
 800bac8:	20400001 	.word	0x20400001

0800bacc <_fflush_r>:
 800bacc:	690b      	ldr	r3, [r1, #16]
 800bace:	b570      	push	{r4, r5, r6, lr}
 800bad0:	0005      	movs	r5, r0
 800bad2:	000c      	movs	r4, r1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <_fflush_r+0x12>
 800bad8:	2500      	movs	r5, #0
 800bada:	0028      	movs	r0, r5
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	2800      	cmp	r0, #0
 800bae0:	d004      	beq.n	800baec <_fflush_r+0x20>
 800bae2:	6983      	ldr	r3, [r0, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <_fflush_r+0x20>
 800bae8:	f000 f892 	bl	800bc10 <__sinit>
 800baec:	4b14      	ldr	r3, [pc, #80]	; (800bb40 <_fflush_r+0x74>)
 800baee:	429c      	cmp	r4, r3
 800baf0:	d11b      	bne.n	800bb2a <_fflush_r+0x5e>
 800baf2:	686c      	ldr	r4, [r5, #4]
 800baf4:	220c      	movs	r2, #12
 800baf6:	5ea3      	ldrsh	r3, [r4, r2]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d0ed      	beq.n	800bad8 <_fflush_r+0xc>
 800bafc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bafe:	07d2      	lsls	r2, r2, #31
 800bb00:	d404      	bmi.n	800bb0c <_fflush_r+0x40>
 800bb02:	059b      	lsls	r3, r3, #22
 800bb04:	d402      	bmi.n	800bb0c <_fflush_r+0x40>
 800bb06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb08:	f000 f927 	bl	800bd5a <__retarget_lock_acquire_recursive>
 800bb0c:	0028      	movs	r0, r5
 800bb0e:	0021      	movs	r1, r4
 800bb10:	f7ff ff50 	bl	800b9b4 <__sflush_r>
 800bb14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb16:	0005      	movs	r5, r0
 800bb18:	07db      	lsls	r3, r3, #31
 800bb1a:	d4de      	bmi.n	800bada <_fflush_r+0xe>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	059b      	lsls	r3, r3, #22
 800bb20:	d4db      	bmi.n	800bada <_fflush_r+0xe>
 800bb22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb24:	f000 f91a 	bl	800bd5c <__retarget_lock_release_recursive>
 800bb28:	e7d7      	b.n	800bada <_fflush_r+0xe>
 800bb2a:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <_fflush_r+0x78>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	d101      	bne.n	800bb34 <_fflush_r+0x68>
 800bb30:	68ac      	ldr	r4, [r5, #8]
 800bb32:	e7df      	b.n	800baf4 <_fflush_r+0x28>
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <_fflush_r+0x7c>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d1dc      	bne.n	800baf4 <_fflush_r+0x28>
 800bb3a:	68ec      	ldr	r4, [r5, #12]
 800bb3c:	e7da      	b.n	800baf4 <_fflush_r+0x28>
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0800d0e0 	.word	0x0800d0e0
 800bb44:	0800d100 	.word	0x0800d100
 800bb48:	0800d0c0 	.word	0x0800d0c0

0800bb4c <std>:
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	0004      	movs	r4, r0
 800bb52:	6003      	str	r3, [r0, #0]
 800bb54:	6043      	str	r3, [r0, #4]
 800bb56:	6083      	str	r3, [r0, #8]
 800bb58:	8181      	strh	r1, [r0, #12]
 800bb5a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	81c2      	strh	r2, [r0, #14]
 800bb60:	6103      	str	r3, [r0, #16]
 800bb62:	6143      	str	r3, [r0, #20]
 800bb64:	6183      	str	r3, [r0, #24]
 800bb66:	2208      	movs	r2, #8
 800bb68:	305c      	adds	r0, #92	; 0x5c
 800bb6a:	f7fe f9d2 	bl	8009f12 <memset>
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <std+0x38>)
 800bb70:	6224      	str	r4, [r4, #32]
 800bb72:	6263      	str	r3, [r4, #36]	; 0x24
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <std+0x3c>)
 800bb76:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb78:	4b04      	ldr	r3, [pc, #16]	; (800bb8c <std+0x40>)
 800bb7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb7c:	4b04      	ldr	r3, [pc, #16]	; (800bb90 <std+0x44>)
 800bb7e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	46c0      	nop			; (mov r8, r8)
 800bb84:	0800c871 	.word	0x0800c871
 800bb88:	0800c899 	.word	0x0800c899
 800bb8c:	0800c8d1 	.word	0x0800c8d1
 800bb90:	0800c8fd 	.word	0x0800c8fd

0800bb94 <_cleanup_r>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	4902      	ldr	r1, [pc, #8]	; (800bba0 <_cleanup_r+0xc>)
 800bb98:	f000 f8ba 	bl	800bd10 <_fwalk_reent>
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	46c0      	nop			; (mov r8, r8)
 800bba0:	0800bacd 	.word	0x0800bacd

0800bba4 <__sfmoreglue>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	2568      	movs	r5, #104	; 0x68
 800bba8:	1e4a      	subs	r2, r1, #1
 800bbaa:	4355      	muls	r5, r2
 800bbac:	000e      	movs	r6, r1
 800bbae:	0029      	movs	r1, r5
 800bbb0:	3174      	adds	r1, #116	; 0x74
 800bbb2:	f000 fd8b 	bl	800c6cc <_malloc_r>
 800bbb6:	1e04      	subs	r4, r0, #0
 800bbb8:	d008      	beq.n	800bbcc <__sfmoreglue+0x28>
 800bbba:	2100      	movs	r1, #0
 800bbbc:	002a      	movs	r2, r5
 800bbbe:	6001      	str	r1, [r0, #0]
 800bbc0:	6046      	str	r6, [r0, #4]
 800bbc2:	300c      	adds	r0, #12
 800bbc4:	60a0      	str	r0, [r4, #8]
 800bbc6:	3268      	adds	r2, #104	; 0x68
 800bbc8:	f7fe f9a3 	bl	8009f12 <memset>
 800bbcc:	0020      	movs	r0, r4
 800bbce:	bd70      	pop	{r4, r5, r6, pc}

0800bbd0 <__sfp_lock_acquire>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	4802      	ldr	r0, [pc, #8]	; (800bbdc <__sfp_lock_acquire+0xc>)
 800bbd4:	f000 f8c1 	bl	800bd5a <__retarget_lock_acquire_recursive>
 800bbd8:	bd10      	pop	{r4, pc}
 800bbda:	46c0      	nop			; (mov r8, r8)
 800bbdc:	200007ad 	.word	0x200007ad

0800bbe0 <__sfp_lock_release>:
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4802      	ldr	r0, [pc, #8]	; (800bbec <__sfp_lock_release+0xc>)
 800bbe4:	f000 f8ba 	bl	800bd5c <__retarget_lock_release_recursive>
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	200007ad 	.word	0x200007ad

0800bbf0 <__sinit_lock_acquire>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4802      	ldr	r0, [pc, #8]	; (800bbfc <__sinit_lock_acquire+0xc>)
 800bbf4:	f000 f8b1 	bl	800bd5a <__retarget_lock_acquire_recursive>
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	200007ae 	.word	0x200007ae

0800bc00 <__sinit_lock_release>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4802      	ldr	r0, [pc, #8]	; (800bc0c <__sinit_lock_release+0xc>)
 800bc04:	f000 f8aa 	bl	800bd5c <__retarget_lock_release_recursive>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	200007ae 	.word	0x200007ae

0800bc10 <__sinit>:
 800bc10:	b513      	push	{r0, r1, r4, lr}
 800bc12:	0004      	movs	r4, r0
 800bc14:	f7ff ffec 	bl	800bbf0 <__sinit_lock_acquire>
 800bc18:	69a3      	ldr	r3, [r4, #24]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <__sinit+0x14>
 800bc1e:	f7ff ffef 	bl	800bc00 <__sinit_lock_release>
 800bc22:	bd13      	pop	{r0, r1, r4, pc}
 800bc24:	64a3      	str	r3, [r4, #72]	; 0x48
 800bc26:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bc28:	6523      	str	r3, [r4, #80]	; 0x50
 800bc2a:	4b13      	ldr	r3, [pc, #76]	; (800bc78 <__sinit+0x68>)
 800bc2c:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <__sinit+0x6c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	42a3      	cmp	r3, r4
 800bc36:	d101      	bne.n	800bc3c <__sinit+0x2c>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	61a3      	str	r3, [r4, #24]
 800bc3c:	0020      	movs	r0, r4
 800bc3e:	f000 f81f 	bl	800bc80 <__sfp>
 800bc42:	6060      	str	r0, [r4, #4]
 800bc44:	0020      	movs	r0, r4
 800bc46:	f000 f81b 	bl	800bc80 <__sfp>
 800bc4a:	60a0      	str	r0, [r4, #8]
 800bc4c:	0020      	movs	r0, r4
 800bc4e:	f000 f817 	bl	800bc80 <__sfp>
 800bc52:	2200      	movs	r2, #0
 800bc54:	2104      	movs	r1, #4
 800bc56:	60e0      	str	r0, [r4, #12]
 800bc58:	6860      	ldr	r0, [r4, #4]
 800bc5a:	f7ff ff77 	bl	800bb4c <std>
 800bc5e:	2201      	movs	r2, #1
 800bc60:	2109      	movs	r1, #9
 800bc62:	68a0      	ldr	r0, [r4, #8]
 800bc64:	f7ff ff72 	bl	800bb4c <std>
 800bc68:	2202      	movs	r2, #2
 800bc6a:	2112      	movs	r1, #18
 800bc6c:	68e0      	ldr	r0, [r4, #12]
 800bc6e:	f7ff ff6d 	bl	800bb4c <std>
 800bc72:	2301      	movs	r3, #1
 800bc74:	61a3      	str	r3, [r4, #24]
 800bc76:	e7d2      	b.n	800bc1e <__sinit+0xe>
 800bc78:	0800cfe4 	.word	0x0800cfe4
 800bc7c:	0800bb95 	.word	0x0800bb95

0800bc80 <__sfp>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	0007      	movs	r7, r0
 800bc84:	f7ff ffa4 	bl	800bbd0 <__sfp_lock_acquire>
 800bc88:	4b1f      	ldr	r3, [pc, #124]	; (800bd08 <__sfp+0x88>)
 800bc8a:	681e      	ldr	r6, [r3, #0]
 800bc8c:	69b3      	ldr	r3, [r6, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <__sfp+0x18>
 800bc92:	0030      	movs	r0, r6
 800bc94:	f7ff ffbc 	bl	800bc10 <__sinit>
 800bc98:	3648      	adds	r6, #72	; 0x48
 800bc9a:	68b4      	ldr	r4, [r6, #8]
 800bc9c:	6873      	ldr	r3, [r6, #4]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	d504      	bpl.n	800bcac <__sfp+0x2c>
 800bca2:	6833      	ldr	r3, [r6, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d022      	beq.n	800bcee <__sfp+0x6e>
 800bca8:	6836      	ldr	r6, [r6, #0]
 800bcaa:	e7f6      	b.n	800bc9a <__sfp+0x1a>
 800bcac:	220c      	movs	r2, #12
 800bcae:	5ea5      	ldrsh	r5, [r4, r2]
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	d11a      	bne.n	800bcea <__sfp+0x6a>
 800bcb4:	0020      	movs	r0, r4
 800bcb6:	4b15      	ldr	r3, [pc, #84]	; (800bd0c <__sfp+0x8c>)
 800bcb8:	3058      	adds	r0, #88	; 0x58
 800bcba:	60e3      	str	r3, [r4, #12]
 800bcbc:	6665      	str	r5, [r4, #100]	; 0x64
 800bcbe:	f000 f84b 	bl	800bd58 <__retarget_lock_init_recursive>
 800bcc2:	f7ff ff8d 	bl	800bbe0 <__sfp_lock_release>
 800bcc6:	0020      	movs	r0, r4
 800bcc8:	2208      	movs	r2, #8
 800bcca:	0029      	movs	r1, r5
 800bccc:	6025      	str	r5, [r4, #0]
 800bcce:	60a5      	str	r5, [r4, #8]
 800bcd0:	6065      	str	r5, [r4, #4]
 800bcd2:	6125      	str	r5, [r4, #16]
 800bcd4:	6165      	str	r5, [r4, #20]
 800bcd6:	61a5      	str	r5, [r4, #24]
 800bcd8:	305c      	adds	r0, #92	; 0x5c
 800bcda:	f7fe f91a 	bl	8009f12 <memset>
 800bcde:	6365      	str	r5, [r4, #52]	; 0x34
 800bce0:	63a5      	str	r5, [r4, #56]	; 0x38
 800bce2:	64a5      	str	r5, [r4, #72]	; 0x48
 800bce4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bce6:	0020      	movs	r0, r4
 800bce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcea:	3468      	adds	r4, #104	; 0x68
 800bcec:	e7d7      	b.n	800bc9e <__sfp+0x1e>
 800bcee:	2104      	movs	r1, #4
 800bcf0:	0038      	movs	r0, r7
 800bcf2:	f7ff ff57 	bl	800bba4 <__sfmoreglue>
 800bcf6:	1e04      	subs	r4, r0, #0
 800bcf8:	6030      	str	r0, [r6, #0]
 800bcfa:	d1d5      	bne.n	800bca8 <__sfp+0x28>
 800bcfc:	f7ff ff70 	bl	800bbe0 <__sfp_lock_release>
 800bd00:	230c      	movs	r3, #12
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	e7ef      	b.n	800bce6 <__sfp+0x66>
 800bd06:	46c0      	nop			; (mov r8, r8)
 800bd08:	0800cfe4 	.word	0x0800cfe4
 800bd0c:	ffff0001 	.word	0xffff0001

0800bd10 <_fwalk_reent>:
 800bd10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd12:	0004      	movs	r4, r0
 800bd14:	0006      	movs	r6, r0
 800bd16:	2700      	movs	r7, #0
 800bd18:	9101      	str	r1, [sp, #4]
 800bd1a:	3448      	adds	r4, #72	; 0x48
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	68a5      	ldr	r5, [r4, #8]
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	d504      	bpl.n	800bd34 <_fwalk_reent+0x24>
 800bd2a:	6824      	ldr	r4, [r4, #0]
 800bd2c:	2c00      	cmp	r4, #0
 800bd2e:	d1f5      	bne.n	800bd1c <_fwalk_reent+0xc>
 800bd30:	0038      	movs	r0, r7
 800bd32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd34:	89ab      	ldrh	r3, [r5, #12]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d908      	bls.n	800bd4c <_fwalk_reent+0x3c>
 800bd3a:	220e      	movs	r2, #14
 800bd3c:	5eab      	ldrsh	r3, [r5, r2]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	d004      	beq.n	800bd4c <_fwalk_reent+0x3c>
 800bd42:	0029      	movs	r1, r5
 800bd44:	0030      	movs	r0, r6
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	4307      	orrs	r7, r0
 800bd4c:	3568      	adds	r5, #104	; 0x68
 800bd4e:	e7e8      	b.n	800bd22 <_fwalk_reent+0x12>

0800bd50 <_localeconv_r>:
 800bd50:	4800      	ldr	r0, [pc, #0]	; (800bd54 <_localeconv_r+0x4>)
 800bd52:	4770      	bx	lr
 800bd54:	200001e0 	.word	0x200001e0

0800bd58 <__retarget_lock_init_recursive>:
 800bd58:	4770      	bx	lr

0800bd5a <__retarget_lock_acquire_recursive>:
 800bd5a:	4770      	bx	lr

0800bd5c <__retarget_lock_release_recursive>:
 800bd5c:	4770      	bx	lr
	...

0800bd60 <__swhatbuf_r>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	000e      	movs	r6, r1
 800bd64:	001d      	movs	r5, r3
 800bd66:	230e      	movs	r3, #14
 800bd68:	5ec9      	ldrsh	r1, [r1, r3]
 800bd6a:	0014      	movs	r4, r2
 800bd6c:	b096      	sub	sp, #88	; 0x58
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	da08      	bge.n	800bd84 <__swhatbuf_r+0x24>
 800bd72:	220c      	movs	r2, #12
 800bd74:	5eb3      	ldrsh	r3, [r6, r2]
 800bd76:	2200      	movs	r2, #0
 800bd78:	602a      	str	r2, [r5, #0]
 800bd7a:	061b      	lsls	r3, r3, #24
 800bd7c:	d411      	bmi.n	800bda2 <__swhatbuf_r+0x42>
 800bd7e:	2380      	movs	r3, #128	; 0x80
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	e00f      	b.n	800bda4 <__swhatbuf_r+0x44>
 800bd84:	466a      	mov	r2, sp
 800bd86:	f000 fde5 	bl	800c954 <_fstat_r>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	dbf1      	blt.n	800bd72 <__swhatbuf_r+0x12>
 800bd8e:	23f0      	movs	r3, #240	; 0xf0
 800bd90:	9901      	ldr	r1, [sp, #4]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	4019      	ands	r1, r3
 800bd96:	4b05      	ldr	r3, [pc, #20]	; (800bdac <__swhatbuf_r+0x4c>)
 800bd98:	18c9      	adds	r1, r1, r3
 800bd9a:	424b      	negs	r3, r1
 800bd9c:	4159      	adcs	r1, r3
 800bd9e:	6029      	str	r1, [r5, #0]
 800bda0:	e7ed      	b.n	800bd7e <__swhatbuf_r+0x1e>
 800bda2:	2340      	movs	r3, #64	; 0x40
 800bda4:	2000      	movs	r0, #0
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	b016      	add	sp, #88	; 0x58
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	ffffe000 	.word	0xffffe000

0800bdb0 <__smakebuf_r>:
 800bdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdb2:	2602      	movs	r6, #2
 800bdb4:	898b      	ldrh	r3, [r1, #12]
 800bdb6:	0005      	movs	r5, r0
 800bdb8:	000c      	movs	r4, r1
 800bdba:	4233      	tst	r3, r6
 800bdbc:	d006      	beq.n	800bdcc <__smakebuf_r+0x1c>
 800bdbe:	0023      	movs	r3, r4
 800bdc0:	3347      	adds	r3, #71	; 0x47
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6163      	str	r3, [r4, #20]
 800bdca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bdcc:	466a      	mov	r2, sp
 800bdce:	ab01      	add	r3, sp, #4
 800bdd0:	f7ff ffc6 	bl	800bd60 <__swhatbuf_r>
 800bdd4:	9900      	ldr	r1, [sp, #0]
 800bdd6:	0007      	movs	r7, r0
 800bdd8:	0028      	movs	r0, r5
 800bdda:	f000 fc77 	bl	800c6cc <_malloc_r>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d108      	bne.n	800bdf4 <__smakebuf_r+0x44>
 800bde2:	220c      	movs	r2, #12
 800bde4:	5ea3      	ldrsh	r3, [r4, r2]
 800bde6:	059a      	lsls	r2, r3, #22
 800bde8:	d4ef      	bmi.n	800bdca <__smakebuf_r+0x1a>
 800bdea:	2203      	movs	r2, #3
 800bdec:	4393      	bics	r3, r2
 800bdee:	431e      	orrs	r6, r3
 800bdf0:	81a6      	strh	r6, [r4, #12]
 800bdf2:	e7e4      	b.n	800bdbe <__smakebuf_r+0xe>
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <__smakebuf_r+0x84>)
 800bdf6:	62ab      	str	r3, [r5, #40]	; 0x28
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	89a2      	ldrh	r2, [r4, #12]
 800bdfc:	6020      	str	r0, [r4, #0]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	9b00      	ldr	r3, [sp, #0]
 800be04:	6120      	str	r0, [r4, #16]
 800be06:	6163      	str	r3, [r4, #20]
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00d      	beq.n	800be2a <__smakebuf_r+0x7a>
 800be0e:	0028      	movs	r0, r5
 800be10:	230e      	movs	r3, #14
 800be12:	5ee1      	ldrsh	r1, [r4, r3]
 800be14:	f000 fdb0 	bl	800c978 <_isatty_r>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d006      	beq.n	800be2a <__smakebuf_r+0x7a>
 800be1c:	2203      	movs	r2, #3
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	4393      	bics	r3, r2
 800be22:	001a      	movs	r2, r3
 800be24:	2301      	movs	r3, #1
 800be26:	4313      	orrs	r3, r2
 800be28:	81a3      	strh	r3, [r4, #12]
 800be2a:	89a0      	ldrh	r0, [r4, #12]
 800be2c:	4307      	orrs	r7, r0
 800be2e:	81a7      	strh	r7, [r4, #12]
 800be30:	e7cb      	b.n	800bdca <__smakebuf_r+0x1a>
 800be32:	46c0      	nop			; (mov r8, r8)
 800be34:	0800bb95 	.word	0x0800bb95

0800be38 <malloc>:
 800be38:	b510      	push	{r4, lr}
 800be3a:	4b03      	ldr	r3, [pc, #12]	; (800be48 <malloc+0x10>)
 800be3c:	0001      	movs	r1, r0
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	f000 fc44 	bl	800c6cc <_malloc_r>
 800be44:	bd10      	pop	{r4, pc}
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	2000008c 	.word	0x2000008c

0800be4c <memchr>:
 800be4c:	b2c9      	uxtb	r1, r1
 800be4e:	1882      	adds	r2, r0, r2
 800be50:	4290      	cmp	r0, r2
 800be52:	d101      	bne.n	800be58 <memchr+0xc>
 800be54:	2000      	movs	r0, #0
 800be56:	4770      	bx	lr
 800be58:	7803      	ldrb	r3, [r0, #0]
 800be5a:	428b      	cmp	r3, r1
 800be5c:	d0fb      	beq.n	800be56 <memchr+0xa>
 800be5e:	3001      	adds	r0, #1
 800be60:	e7f6      	b.n	800be50 <memchr+0x4>
	...

0800be64 <_Balloc>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be68:	0006      	movs	r6, r0
 800be6a:	000c      	movs	r4, r1
 800be6c:	2d00      	cmp	r5, #0
 800be6e:	d10e      	bne.n	800be8e <_Balloc+0x2a>
 800be70:	2010      	movs	r0, #16
 800be72:	f7ff ffe1 	bl	800be38 <malloc>
 800be76:	1e02      	subs	r2, r0, #0
 800be78:	6270      	str	r0, [r6, #36]	; 0x24
 800be7a:	d104      	bne.n	800be86 <_Balloc+0x22>
 800be7c:	2166      	movs	r1, #102	; 0x66
 800be7e:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <_Balloc+0x80>)
 800be80:	4819      	ldr	r0, [pc, #100]	; (800bee8 <_Balloc+0x84>)
 800be82:	f7fd ffe5 	bl	8009e50 <__assert_func>
 800be86:	6045      	str	r5, [r0, #4]
 800be88:	6085      	str	r5, [r0, #8]
 800be8a:	6005      	str	r5, [r0, #0]
 800be8c:	60c5      	str	r5, [r0, #12]
 800be8e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800be90:	68eb      	ldr	r3, [r5, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d013      	beq.n	800bebe <_Balloc+0x5a>
 800be96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be98:	00a2      	lsls	r2, r4, #2
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	189b      	adds	r3, r3, r2
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d118      	bne.n	800bed6 <_Balloc+0x72>
 800bea4:	2101      	movs	r1, #1
 800bea6:	000d      	movs	r5, r1
 800bea8:	40a5      	lsls	r5, r4
 800beaa:	1d6a      	adds	r2, r5, #5
 800beac:	0030      	movs	r0, r6
 800beae:	0092      	lsls	r2, r2, #2
 800beb0:	f000 fb74 	bl	800c59c <_calloc_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d00c      	beq.n	800bed2 <_Balloc+0x6e>
 800beb8:	6044      	str	r4, [r0, #4]
 800beba:	6085      	str	r5, [r0, #8]
 800bebc:	e00d      	b.n	800beda <_Balloc+0x76>
 800bebe:	2221      	movs	r2, #33	; 0x21
 800bec0:	2104      	movs	r1, #4
 800bec2:	0030      	movs	r0, r6
 800bec4:	f000 fb6a 	bl	800c59c <_calloc_r>
 800bec8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800beca:	60e8      	str	r0, [r5, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e1      	bne.n	800be96 <_Balloc+0x32>
 800bed2:	2000      	movs	r0, #0
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
 800bed6:	6802      	ldr	r2, [r0, #0]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	2300      	movs	r3, #0
 800bedc:	6103      	str	r3, [r0, #16]
 800bede:	60c3      	str	r3, [r0, #12]
 800bee0:	e7f8      	b.n	800bed4 <_Balloc+0x70>
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	0800d03a 	.word	0x0800d03a
 800bee8:	0800d120 	.word	0x0800d120

0800beec <_Bfree>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef0:	0005      	movs	r5, r0
 800bef2:	000c      	movs	r4, r1
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d10e      	bne.n	800bf16 <_Bfree+0x2a>
 800bef8:	2010      	movs	r0, #16
 800befa:	f7ff ff9d 	bl	800be38 <malloc>
 800befe:	1e02      	subs	r2, r0, #0
 800bf00:	6268      	str	r0, [r5, #36]	; 0x24
 800bf02:	d104      	bne.n	800bf0e <_Bfree+0x22>
 800bf04:	218a      	movs	r1, #138	; 0x8a
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <_Bfree+0x40>)
 800bf08:	4809      	ldr	r0, [pc, #36]	; (800bf30 <_Bfree+0x44>)
 800bf0a:	f7fd ffa1 	bl	8009e50 <__assert_func>
 800bf0e:	6046      	str	r6, [r0, #4]
 800bf10:	6086      	str	r6, [r0, #8]
 800bf12:	6006      	str	r6, [r0, #0]
 800bf14:	60c6      	str	r6, [r0, #12]
 800bf16:	2c00      	cmp	r4, #0
 800bf18:	d007      	beq.n	800bf2a <_Bfree+0x3e>
 800bf1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf1c:	6862      	ldr	r2, [r4, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	189b      	adds	r3, r3, r2
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	601c      	str	r4, [r3, #0]
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	0800d03a 	.word	0x0800d03a
 800bf30:	0800d120 	.word	0x0800d120

0800bf34 <__multadd>:
 800bf34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf36:	000e      	movs	r6, r1
 800bf38:	9001      	str	r0, [sp, #4]
 800bf3a:	000c      	movs	r4, r1
 800bf3c:	001d      	movs	r5, r3
 800bf3e:	2000      	movs	r0, #0
 800bf40:	690f      	ldr	r7, [r1, #16]
 800bf42:	3614      	adds	r6, #20
 800bf44:	6833      	ldr	r3, [r6, #0]
 800bf46:	3001      	adds	r0, #1
 800bf48:	b299      	uxth	r1, r3
 800bf4a:	4351      	muls	r1, r2
 800bf4c:	0c1b      	lsrs	r3, r3, #16
 800bf4e:	4353      	muls	r3, r2
 800bf50:	1949      	adds	r1, r1, r5
 800bf52:	0c0d      	lsrs	r5, r1, #16
 800bf54:	195b      	adds	r3, r3, r5
 800bf56:	0c1d      	lsrs	r5, r3, #16
 800bf58:	b289      	uxth	r1, r1
 800bf5a:	041b      	lsls	r3, r3, #16
 800bf5c:	185b      	adds	r3, r3, r1
 800bf5e:	c608      	stmia	r6!, {r3}
 800bf60:	4287      	cmp	r7, r0
 800bf62:	dcef      	bgt.n	800bf44 <__multadd+0x10>
 800bf64:	2d00      	cmp	r5, #0
 800bf66:	d022      	beq.n	800bfae <__multadd+0x7a>
 800bf68:	68a3      	ldr	r3, [r4, #8]
 800bf6a:	42bb      	cmp	r3, r7
 800bf6c:	dc19      	bgt.n	800bfa2 <__multadd+0x6e>
 800bf6e:	6863      	ldr	r3, [r4, #4]
 800bf70:	9801      	ldr	r0, [sp, #4]
 800bf72:	1c59      	adds	r1, r3, #1
 800bf74:	f7ff ff76 	bl	800be64 <_Balloc>
 800bf78:	1e06      	subs	r6, r0, #0
 800bf7a:	d105      	bne.n	800bf88 <__multadd+0x54>
 800bf7c:	0002      	movs	r2, r0
 800bf7e:	21b5      	movs	r1, #181	; 0xb5
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <__multadd+0x80>)
 800bf82:	480d      	ldr	r0, [pc, #52]	; (800bfb8 <__multadd+0x84>)
 800bf84:	f7fd ff64 	bl	8009e50 <__assert_func>
 800bf88:	0021      	movs	r1, r4
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	310c      	adds	r1, #12
 800bf8e:	1c9a      	adds	r2, r3, #2
 800bf90:	0092      	lsls	r2, r2, #2
 800bf92:	300c      	adds	r0, #12
 800bf94:	f7fd ffb4 	bl	8009f00 <memcpy>
 800bf98:	0021      	movs	r1, r4
 800bf9a:	9801      	ldr	r0, [sp, #4]
 800bf9c:	f7ff ffa6 	bl	800beec <_Bfree>
 800bfa0:	0034      	movs	r4, r6
 800bfa2:	1d3b      	adds	r3, r7, #4
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	18e3      	adds	r3, r4, r3
 800bfa8:	605d      	str	r5, [r3, #4]
 800bfaa:	1c7b      	adds	r3, r7, #1
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	0020      	movs	r0, r4
 800bfb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	0800d0ac 	.word	0x0800d0ac
 800bfb8:	0800d120 	.word	0x0800d120

0800bfbc <__hi0bits>:
 800bfbc:	0003      	movs	r3, r0
 800bfbe:	0c02      	lsrs	r2, r0, #16
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	4282      	cmp	r2, r0
 800bfc4:	d101      	bne.n	800bfca <__hi0bits+0xe>
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	3010      	adds	r0, #16
 800bfca:	0e1a      	lsrs	r2, r3, #24
 800bfcc:	d101      	bne.n	800bfd2 <__hi0bits+0x16>
 800bfce:	3008      	adds	r0, #8
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	0f1a      	lsrs	r2, r3, #28
 800bfd4:	d101      	bne.n	800bfda <__hi0bits+0x1e>
 800bfd6:	3004      	adds	r0, #4
 800bfd8:	011b      	lsls	r3, r3, #4
 800bfda:	0f9a      	lsrs	r2, r3, #30
 800bfdc:	d101      	bne.n	800bfe2 <__hi0bits+0x26>
 800bfde:	3002      	adds	r0, #2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	db03      	blt.n	800bfee <__hi0bits+0x32>
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	d400      	bmi.n	800bfee <__hi0bits+0x32>
 800bfec:	2020      	movs	r0, #32
 800bfee:	4770      	bx	lr

0800bff0 <__lo0bits>:
 800bff0:	6803      	ldr	r3, [r0, #0]
 800bff2:	0002      	movs	r2, r0
 800bff4:	2107      	movs	r1, #7
 800bff6:	0018      	movs	r0, r3
 800bff8:	4008      	ands	r0, r1
 800bffa:	420b      	tst	r3, r1
 800bffc:	d00d      	beq.n	800c01a <__lo0bits+0x2a>
 800bffe:	3906      	subs	r1, #6
 800c000:	2000      	movs	r0, #0
 800c002:	420b      	tst	r3, r1
 800c004:	d105      	bne.n	800c012 <__lo0bits+0x22>
 800c006:	3002      	adds	r0, #2
 800c008:	4203      	tst	r3, r0
 800c00a:	d003      	beq.n	800c014 <__lo0bits+0x24>
 800c00c:	40cb      	lsrs	r3, r1
 800c00e:	0008      	movs	r0, r1
 800c010:	6013      	str	r3, [r2, #0]
 800c012:	4770      	bx	lr
 800c014:	089b      	lsrs	r3, r3, #2
 800c016:	6013      	str	r3, [r2, #0]
 800c018:	e7fb      	b.n	800c012 <__lo0bits+0x22>
 800c01a:	b299      	uxth	r1, r3
 800c01c:	2900      	cmp	r1, #0
 800c01e:	d101      	bne.n	800c024 <__lo0bits+0x34>
 800c020:	2010      	movs	r0, #16
 800c022:	0c1b      	lsrs	r3, r3, #16
 800c024:	b2d9      	uxtb	r1, r3
 800c026:	2900      	cmp	r1, #0
 800c028:	d101      	bne.n	800c02e <__lo0bits+0x3e>
 800c02a:	3008      	adds	r0, #8
 800c02c:	0a1b      	lsrs	r3, r3, #8
 800c02e:	0719      	lsls	r1, r3, #28
 800c030:	d101      	bne.n	800c036 <__lo0bits+0x46>
 800c032:	3004      	adds	r0, #4
 800c034:	091b      	lsrs	r3, r3, #4
 800c036:	0799      	lsls	r1, r3, #30
 800c038:	d101      	bne.n	800c03e <__lo0bits+0x4e>
 800c03a:	3002      	adds	r0, #2
 800c03c:	089b      	lsrs	r3, r3, #2
 800c03e:	07d9      	lsls	r1, r3, #31
 800c040:	d4e9      	bmi.n	800c016 <__lo0bits+0x26>
 800c042:	3001      	adds	r0, #1
 800c044:	085b      	lsrs	r3, r3, #1
 800c046:	d1e6      	bne.n	800c016 <__lo0bits+0x26>
 800c048:	2020      	movs	r0, #32
 800c04a:	e7e2      	b.n	800c012 <__lo0bits+0x22>

0800c04c <__i2b>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	000c      	movs	r4, r1
 800c050:	2101      	movs	r1, #1
 800c052:	f7ff ff07 	bl	800be64 <_Balloc>
 800c056:	2800      	cmp	r0, #0
 800c058:	d106      	bne.n	800c068 <__i2b+0x1c>
 800c05a:	21a0      	movs	r1, #160	; 0xa0
 800c05c:	0002      	movs	r2, r0
 800c05e:	4b04      	ldr	r3, [pc, #16]	; (800c070 <__i2b+0x24>)
 800c060:	4804      	ldr	r0, [pc, #16]	; (800c074 <__i2b+0x28>)
 800c062:	0049      	lsls	r1, r1, #1
 800c064:	f7fd fef4 	bl	8009e50 <__assert_func>
 800c068:	2301      	movs	r3, #1
 800c06a:	6144      	str	r4, [r0, #20]
 800c06c:	6103      	str	r3, [r0, #16]
 800c06e:	bd10      	pop	{r4, pc}
 800c070:	0800d0ac 	.word	0x0800d0ac
 800c074:	0800d120 	.word	0x0800d120

0800c078 <__multiply>:
 800c078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c07a:	690b      	ldr	r3, [r1, #16]
 800c07c:	0014      	movs	r4, r2
 800c07e:	6912      	ldr	r2, [r2, #16]
 800c080:	000d      	movs	r5, r1
 800c082:	b089      	sub	sp, #36	; 0x24
 800c084:	4293      	cmp	r3, r2
 800c086:	da01      	bge.n	800c08c <__multiply+0x14>
 800c088:	0025      	movs	r5, r4
 800c08a:	000c      	movs	r4, r1
 800c08c:	692f      	ldr	r7, [r5, #16]
 800c08e:	6926      	ldr	r6, [r4, #16]
 800c090:	6869      	ldr	r1, [r5, #4]
 800c092:	19bb      	adds	r3, r7, r6
 800c094:	9302      	str	r3, [sp, #8]
 800c096:	68ab      	ldr	r3, [r5, #8]
 800c098:	19ba      	adds	r2, r7, r6
 800c09a:	4293      	cmp	r3, r2
 800c09c:	da00      	bge.n	800c0a0 <__multiply+0x28>
 800c09e:	3101      	adds	r1, #1
 800c0a0:	f7ff fee0 	bl	800be64 <_Balloc>
 800c0a4:	9001      	str	r0, [sp, #4]
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d106      	bne.n	800c0b8 <__multiply+0x40>
 800c0aa:	215e      	movs	r1, #94	; 0x5e
 800c0ac:	0002      	movs	r2, r0
 800c0ae:	4b48      	ldr	r3, [pc, #288]	; (800c1d0 <__multiply+0x158>)
 800c0b0:	4848      	ldr	r0, [pc, #288]	; (800c1d4 <__multiply+0x15c>)
 800c0b2:	31ff      	adds	r1, #255	; 0xff
 800c0b4:	f7fd fecc 	bl	8009e50 <__assert_func>
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	3314      	adds	r3, #20
 800c0be:	469c      	mov	ip, r3
 800c0c0:	19bb      	adds	r3, r7, r6
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4463      	add	r3, ip
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	4663      	mov	r3, ip
 800c0ca:	9903      	ldr	r1, [sp, #12]
 800c0cc:	428b      	cmp	r3, r1
 800c0ce:	d32c      	bcc.n	800c12a <__multiply+0xb2>
 800c0d0:	002b      	movs	r3, r5
 800c0d2:	0022      	movs	r2, r4
 800c0d4:	3314      	adds	r3, #20
 800c0d6:	00bf      	lsls	r7, r7, #2
 800c0d8:	3214      	adds	r2, #20
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	00b6      	lsls	r6, r6, #2
 800c0de:	19db      	adds	r3, r3, r7
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	1993      	adds	r3, r2, r6
 800c0e4:	9307      	str	r3, [sp, #28]
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	002b      	movs	r3, r5
 800c0ec:	9904      	ldr	r1, [sp, #16]
 800c0ee:	3315      	adds	r3, #21
 800c0f0:	9200      	str	r2, [sp, #0]
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d305      	bcc.n	800c102 <__multiply+0x8a>
 800c0f6:	1b4b      	subs	r3, r1, r5
 800c0f8:	3b15      	subs	r3, #21
 800c0fa:	089b      	lsrs	r3, r3, #2
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	9305      	str	r3, [sp, #20]
 800c102:	9b07      	ldr	r3, [sp, #28]
 800c104:	9a00      	ldr	r2, [sp, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d311      	bcc.n	800c12e <__multiply+0xb6>
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd06      	ble.n	800c11e <__multiply+0xa6>
 800c110:	9b03      	ldr	r3, [sp, #12]
 800c112:	3b04      	subs	r3, #4
 800c114:	9303      	str	r3, [sp, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d053      	beq.n	800c1c6 <__multiply+0x14e>
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	9a02      	ldr	r2, [sp, #8]
 800c122:	0018      	movs	r0, r3
 800c124:	611a      	str	r2, [r3, #16]
 800c126:	b009      	add	sp, #36	; 0x24
 800c128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12a:	c304      	stmia	r3!, {r2}
 800c12c:	e7cd      	b.n	800c0ca <__multiply+0x52>
 800c12e:	9b00      	ldr	r3, [sp, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	b298      	uxth	r0, r3
 800c134:	2800      	cmp	r0, #0
 800c136:	d01b      	beq.n	800c170 <__multiply+0xf8>
 800c138:	4667      	mov	r7, ip
 800c13a:	2400      	movs	r4, #0
 800c13c:	9e06      	ldr	r6, [sp, #24]
 800c13e:	ce02      	ldmia	r6!, {r1}
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	b28b      	uxth	r3, r1
 800c144:	4343      	muls	r3, r0
 800c146:	b292      	uxth	r2, r2
 800c148:	189b      	adds	r3, r3, r2
 800c14a:	191b      	adds	r3, r3, r4
 800c14c:	0c0c      	lsrs	r4, r1, #16
 800c14e:	4344      	muls	r4, r0
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	0c11      	lsrs	r1, r2, #16
 800c154:	1861      	adds	r1, r4, r1
 800c156:	0c1c      	lsrs	r4, r3, #16
 800c158:	1909      	adds	r1, r1, r4
 800c15a:	0c0c      	lsrs	r4, r1, #16
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	0409      	lsls	r1, r1, #16
 800c160:	430b      	orrs	r3, r1
 800c162:	c708      	stmia	r7!, {r3}
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	42b3      	cmp	r3, r6
 800c168:	d8e9      	bhi.n	800c13e <__multiply+0xc6>
 800c16a:	4663      	mov	r3, ip
 800c16c:	9a05      	ldr	r2, [sp, #20]
 800c16e:	509c      	str	r4, [r3, r2]
 800c170:	9b00      	ldr	r3, [sp, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	0c1e      	lsrs	r6, r3, #16
 800c176:	d020      	beq.n	800c1ba <__multiply+0x142>
 800c178:	4663      	mov	r3, ip
 800c17a:	002c      	movs	r4, r5
 800c17c:	4660      	mov	r0, ip
 800c17e:	2700      	movs	r7, #0
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3414      	adds	r4, #20
 800c184:	6822      	ldr	r2, [r4, #0]
 800c186:	b29b      	uxth	r3, r3
 800c188:	b291      	uxth	r1, r2
 800c18a:	4371      	muls	r1, r6
 800c18c:	6802      	ldr	r2, [r0, #0]
 800c18e:	0c12      	lsrs	r2, r2, #16
 800c190:	1889      	adds	r1, r1, r2
 800c192:	19cf      	adds	r7, r1, r7
 800c194:	0439      	lsls	r1, r7, #16
 800c196:	430b      	orrs	r3, r1
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	cc02      	ldmia	r4!, {r1}
 800c19c:	6843      	ldr	r3, [r0, #4]
 800c19e:	0c09      	lsrs	r1, r1, #16
 800c1a0:	4371      	muls	r1, r6
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	0c3f      	lsrs	r7, r7, #16
 800c1a6:	18cb      	adds	r3, r1, r3
 800c1a8:	9a04      	ldr	r2, [sp, #16]
 800c1aa:	19db      	adds	r3, r3, r7
 800c1ac:	0c1f      	lsrs	r7, r3, #16
 800c1ae:	3004      	adds	r0, #4
 800c1b0:	42a2      	cmp	r2, r4
 800c1b2:	d8e7      	bhi.n	800c184 <__multiply+0x10c>
 800c1b4:	4662      	mov	r2, ip
 800c1b6:	9905      	ldr	r1, [sp, #20]
 800c1b8:	5053      	str	r3, [r2, r1]
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	449c      	add	ip, r3
 800c1c4:	e79d      	b.n	800c102 <__multiply+0x8a>
 800c1c6:	9b02      	ldr	r3, [sp, #8]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	9302      	str	r3, [sp, #8]
 800c1cc:	e79d      	b.n	800c10a <__multiply+0x92>
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	0800d0ac 	.word	0x0800d0ac
 800c1d4:	0800d120 	.word	0x0800d120

0800c1d8 <__pow5mult>:
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1da:	2303      	movs	r3, #3
 800c1dc:	0015      	movs	r5, r2
 800c1de:	0007      	movs	r7, r0
 800c1e0:	000e      	movs	r6, r1
 800c1e2:	401a      	ands	r2, r3
 800c1e4:	421d      	tst	r5, r3
 800c1e6:	d008      	beq.n	800c1fa <__pow5mult+0x22>
 800c1e8:	4925      	ldr	r1, [pc, #148]	; (800c280 <__pow5mult+0xa8>)
 800c1ea:	3a01      	subs	r2, #1
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	5852      	ldr	r2, [r2, r1]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	0031      	movs	r1, r6
 800c1f4:	f7ff fe9e 	bl	800bf34 <__multadd>
 800c1f8:	0006      	movs	r6, r0
 800c1fa:	10ad      	asrs	r5, r5, #2
 800c1fc:	d03d      	beq.n	800c27a <__pow5mult+0xa2>
 800c1fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c200:	2c00      	cmp	r4, #0
 800c202:	d10f      	bne.n	800c224 <__pow5mult+0x4c>
 800c204:	2010      	movs	r0, #16
 800c206:	f7ff fe17 	bl	800be38 <malloc>
 800c20a:	1e02      	subs	r2, r0, #0
 800c20c:	6278      	str	r0, [r7, #36]	; 0x24
 800c20e:	d105      	bne.n	800c21c <__pow5mult+0x44>
 800c210:	21d7      	movs	r1, #215	; 0xd7
 800c212:	4b1c      	ldr	r3, [pc, #112]	; (800c284 <__pow5mult+0xac>)
 800c214:	481c      	ldr	r0, [pc, #112]	; (800c288 <__pow5mult+0xb0>)
 800c216:	0049      	lsls	r1, r1, #1
 800c218:	f7fd fe1a 	bl	8009e50 <__assert_func>
 800c21c:	6044      	str	r4, [r0, #4]
 800c21e:	6084      	str	r4, [r0, #8]
 800c220:	6004      	str	r4, [r0, #0]
 800c222:	60c4      	str	r4, [r0, #12]
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	689c      	ldr	r4, [r3, #8]
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	d108      	bne.n	800c240 <__pow5mult+0x68>
 800c22e:	0038      	movs	r0, r7
 800c230:	4916      	ldr	r1, [pc, #88]	; (800c28c <__pow5mult+0xb4>)
 800c232:	f7ff ff0b 	bl	800c04c <__i2b>
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	0004      	movs	r4, r0
 800c23a:	6098      	str	r0, [r3, #8]
 800c23c:	2300      	movs	r3, #0
 800c23e:	6003      	str	r3, [r0, #0]
 800c240:	2301      	movs	r3, #1
 800c242:	421d      	tst	r5, r3
 800c244:	d00a      	beq.n	800c25c <__pow5mult+0x84>
 800c246:	0031      	movs	r1, r6
 800c248:	0022      	movs	r2, r4
 800c24a:	0038      	movs	r0, r7
 800c24c:	f7ff ff14 	bl	800c078 <__multiply>
 800c250:	0031      	movs	r1, r6
 800c252:	9001      	str	r0, [sp, #4]
 800c254:	0038      	movs	r0, r7
 800c256:	f7ff fe49 	bl	800beec <_Bfree>
 800c25a:	9e01      	ldr	r6, [sp, #4]
 800c25c:	106d      	asrs	r5, r5, #1
 800c25e:	d00c      	beq.n	800c27a <__pow5mult+0xa2>
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	2800      	cmp	r0, #0
 800c264:	d107      	bne.n	800c276 <__pow5mult+0x9e>
 800c266:	0022      	movs	r2, r4
 800c268:	0021      	movs	r1, r4
 800c26a:	0038      	movs	r0, r7
 800c26c:	f7ff ff04 	bl	800c078 <__multiply>
 800c270:	2300      	movs	r3, #0
 800c272:	6020      	str	r0, [r4, #0]
 800c274:	6003      	str	r3, [r0, #0]
 800c276:	0004      	movs	r4, r0
 800c278:	e7e2      	b.n	800c240 <__pow5mult+0x68>
 800c27a:	0030      	movs	r0, r6
 800c27c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c27e:	46c0      	nop			; (mov r8, r8)
 800c280:	0800d270 	.word	0x0800d270
 800c284:	0800d03a 	.word	0x0800d03a
 800c288:	0800d120 	.word	0x0800d120
 800c28c:	00000271 	.word	0x00000271

0800c290 <__lshift>:
 800c290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c292:	000c      	movs	r4, r1
 800c294:	0017      	movs	r7, r2
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	1155      	asrs	r5, r2, #5
 800c29a:	b087      	sub	sp, #28
 800c29c:	18eb      	adds	r3, r5, r3
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	6849      	ldr	r1, [r1, #4]
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	9004      	str	r0, [sp, #16]
 800c2aa:	9a01      	ldr	r2, [sp, #4]
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	db10      	blt.n	800c2d2 <__lshift+0x42>
 800c2b0:	9804      	ldr	r0, [sp, #16]
 800c2b2:	f7ff fdd7 	bl	800be64 <_Balloc>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	0002      	movs	r2, r0
 800c2ba:	0006      	movs	r6, r0
 800c2bc:	0019      	movs	r1, r3
 800c2be:	3214      	adds	r2, #20
 800c2c0:	4298      	cmp	r0, r3
 800c2c2:	d10c      	bne.n	800c2de <__lshift+0x4e>
 800c2c4:	21da      	movs	r1, #218	; 0xda
 800c2c6:	0002      	movs	r2, r0
 800c2c8:	4b26      	ldr	r3, [pc, #152]	; (800c364 <__lshift+0xd4>)
 800c2ca:	4827      	ldr	r0, [pc, #156]	; (800c368 <__lshift+0xd8>)
 800c2cc:	31ff      	adds	r1, #255	; 0xff
 800c2ce:	f7fd fdbf 	bl	8009e50 <__assert_func>
 800c2d2:	3101      	adds	r1, #1
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	e7e8      	b.n	800c2aa <__lshift+0x1a>
 800c2d8:	0098      	lsls	r0, r3, #2
 800c2da:	5011      	str	r1, [r2, r0]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	42ab      	cmp	r3, r5
 800c2e0:	dbfa      	blt.n	800c2d8 <__lshift+0x48>
 800c2e2:	43eb      	mvns	r3, r5
 800c2e4:	17db      	asrs	r3, r3, #31
 800c2e6:	401d      	ands	r5, r3
 800c2e8:	211f      	movs	r1, #31
 800c2ea:	0023      	movs	r3, r4
 800c2ec:	0038      	movs	r0, r7
 800c2ee:	00ad      	lsls	r5, r5, #2
 800c2f0:	1955      	adds	r5, r2, r5
 800c2f2:	6922      	ldr	r2, [r4, #16]
 800c2f4:	3314      	adds	r3, #20
 800c2f6:	0092      	lsls	r2, r2, #2
 800c2f8:	4008      	ands	r0, r1
 800c2fa:	4684      	mov	ip, r0
 800c2fc:	189a      	adds	r2, r3, r2
 800c2fe:	420f      	tst	r7, r1
 800c300:	d02a      	beq.n	800c358 <__lshift+0xc8>
 800c302:	3101      	adds	r1, #1
 800c304:	1a09      	subs	r1, r1, r0
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	2100      	movs	r1, #0
 800c30a:	9503      	str	r5, [sp, #12]
 800c30c:	4667      	mov	r7, ip
 800c30e:	6818      	ldr	r0, [r3, #0]
 800c310:	40b8      	lsls	r0, r7
 800c312:	4301      	orrs	r1, r0
 800c314:	9803      	ldr	r0, [sp, #12]
 800c316:	c002      	stmia	r0!, {r1}
 800c318:	cb02      	ldmia	r3!, {r1}
 800c31a:	9003      	str	r0, [sp, #12]
 800c31c:	9805      	ldr	r0, [sp, #20]
 800c31e:	40c1      	lsrs	r1, r0
 800c320:	429a      	cmp	r2, r3
 800c322:	d8f3      	bhi.n	800c30c <__lshift+0x7c>
 800c324:	0020      	movs	r0, r4
 800c326:	3015      	adds	r0, #21
 800c328:	2304      	movs	r3, #4
 800c32a:	4282      	cmp	r2, r0
 800c32c:	d304      	bcc.n	800c338 <__lshift+0xa8>
 800c32e:	1b13      	subs	r3, r2, r4
 800c330:	3b15      	subs	r3, #21
 800c332:	089b      	lsrs	r3, r3, #2
 800c334:	3301      	adds	r3, #1
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	50e9      	str	r1, [r5, r3]
 800c33a:	2900      	cmp	r1, #0
 800c33c:	d002      	beq.n	800c344 <__lshift+0xb4>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	3302      	adds	r3, #2
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	9804      	ldr	r0, [sp, #16]
 800c348:	3b01      	subs	r3, #1
 800c34a:	0021      	movs	r1, r4
 800c34c:	6133      	str	r3, [r6, #16]
 800c34e:	f7ff fdcd 	bl	800beec <_Bfree>
 800c352:	0030      	movs	r0, r6
 800c354:	b007      	add	sp, #28
 800c356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c358:	cb02      	ldmia	r3!, {r1}
 800c35a:	c502      	stmia	r5!, {r1}
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d8fb      	bhi.n	800c358 <__lshift+0xc8>
 800c360:	e7f0      	b.n	800c344 <__lshift+0xb4>
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	0800d0ac 	.word	0x0800d0ac
 800c368:	0800d120 	.word	0x0800d120

0800c36c <__mcmp>:
 800c36c:	6902      	ldr	r2, [r0, #16]
 800c36e:	690b      	ldr	r3, [r1, #16]
 800c370:	b530      	push	{r4, r5, lr}
 800c372:	0004      	movs	r4, r0
 800c374:	1ad0      	subs	r0, r2, r3
 800c376:	429a      	cmp	r2, r3
 800c378:	d10d      	bne.n	800c396 <__mcmp+0x2a>
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	3414      	adds	r4, #20
 800c37e:	3114      	adds	r1, #20
 800c380:	18e2      	adds	r2, r4, r3
 800c382:	18c9      	adds	r1, r1, r3
 800c384:	3a04      	subs	r2, #4
 800c386:	3904      	subs	r1, #4
 800c388:	6815      	ldr	r5, [r2, #0]
 800c38a:	680b      	ldr	r3, [r1, #0]
 800c38c:	429d      	cmp	r5, r3
 800c38e:	d003      	beq.n	800c398 <__mcmp+0x2c>
 800c390:	2001      	movs	r0, #1
 800c392:	429d      	cmp	r5, r3
 800c394:	d303      	bcc.n	800c39e <__mcmp+0x32>
 800c396:	bd30      	pop	{r4, r5, pc}
 800c398:	4294      	cmp	r4, r2
 800c39a:	d3f3      	bcc.n	800c384 <__mcmp+0x18>
 800c39c:	e7fb      	b.n	800c396 <__mcmp+0x2a>
 800c39e:	4240      	negs	r0, r0
 800c3a0:	e7f9      	b.n	800c396 <__mcmp+0x2a>
	...

0800c3a4 <__mdiff>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	000e      	movs	r6, r1
 800c3a8:	0007      	movs	r7, r0
 800c3aa:	0011      	movs	r1, r2
 800c3ac:	0030      	movs	r0, r6
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	0014      	movs	r4, r2
 800c3b2:	f7ff ffdb 	bl	800c36c <__mcmp>
 800c3b6:	1e05      	subs	r5, r0, #0
 800c3b8:	d110      	bne.n	800c3dc <__mdiff+0x38>
 800c3ba:	0001      	movs	r1, r0
 800c3bc:	0038      	movs	r0, r7
 800c3be:	f7ff fd51 	bl	800be64 <_Balloc>
 800c3c2:	1e02      	subs	r2, r0, #0
 800c3c4:	d104      	bne.n	800c3d0 <__mdiff+0x2c>
 800c3c6:	4b40      	ldr	r3, [pc, #256]	; (800c4c8 <__mdiff+0x124>)
 800c3c8:	4940      	ldr	r1, [pc, #256]	; (800c4cc <__mdiff+0x128>)
 800c3ca:	4841      	ldr	r0, [pc, #260]	; (800c4d0 <__mdiff+0x12c>)
 800c3cc:	f7fd fd40 	bl	8009e50 <__assert_func>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	6145      	str	r5, [r0, #20]
 800c3d4:	6103      	str	r3, [r0, #16]
 800c3d6:	0010      	movs	r0, r2
 800c3d8:	b007      	add	sp, #28
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	2301      	movs	r3, #1
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	db04      	blt.n	800c3ee <__mdiff+0x4a>
 800c3e4:	0023      	movs	r3, r4
 800c3e6:	0034      	movs	r4, r6
 800c3e8:	001e      	movs	r6, r3
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	0038      	movs	r0, r7
 800c3f0:	6861      	ldr	r1, [r4, #4]
 800c3f2:	f7ff fd37 	bl	800be64 <_Balloc>
 800c3f6:	1e02      	subs	r2, r0, #0
 800c3f8:	d103      	bne.n	800c402 <__mdiff+0x5e>
 800c3fa:	2190      	movs	r1, #144	; 0x90
 800c3fc:	4b32      	ldr	r3, [pc, #200]	; (800c4c8 <__mdiff+0x124>)
 800c3fe:	0089      	lsls	r1, r1, #2
 800c400:	e7e3      	b.n	800c3ca <__mdiff+0x26>
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	2700      	movs	r7, #0
 800c406:	60c3      	str	r3, [r0, #12]
 800c408:	6920      	ldr	r0, [r4, #16]
 800c40a:	3414      	adds	r4, #20
 800c40c:	9401      	str	r4, [sp, #4]
 800c40e:	9b01      	ldr	r3, [sp, #4]
 800c410:	0084      	lsls	r4, r0, #2
 800c412:	191b      	adds	r3, r3, r4
 800c414:	0034      	movs	r4, r6
 800c416:	9302      	str	r3, [sp, #8]
 800c418:	6933      	ldr	r3, [r6, #16]
 800c41a:	3414      	adds	r4, #20
 800c41c:	0099      	lsls	r1, r3, #2
 800c41e:	1863      	adds	r3, r4, r1
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	0013      	movs	r3, r2
 800c424:	3314      	adds	r3, #20
 800c426:	469c      	mov	ip, r3
 800c428:	9305      	str	r3, [sp, #20]
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	cc02      	ldmia	r4!, {r1}
 800c432:	cb20      	ldmia	r3!, {r5}
 800c434:	9304      	str	r3, [sp, #16]
 800c436:	b2ab      	uxth	r3, r5
 800c438:	19df      	adds	r7, r3, r7
 800c43a:	b28b      	uxth	r3, r1
 800c43c:	1afb      	subs	r3, r7, r3
 800c43e:	0c09      	lsrs	r1, r1, #16
 800c440:	0c2d      	lsrs	r5, r5, #16
 800c442:	1a6d      	subs	r5, r5, r1
 800c444:	1419      	asrs	r1, r3, #16
 800c446:	186d      	adds	r5, r5, r1
 800c448:	4661      	mov	r1, ip
 800c44a:	142f      	asrs	r7, r5, #16
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	042d      	lsls	r5, r5, #16
 800c450:	432b      	orrs	r3, r5
 800c452:	c108      	stmia	r1!, {r3}
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	468c      	mov	ip, r1
 800c458:	42a3      	cmp	r3, r4
 800c45a:	d8e8      	bhi.n	800c42e <__mdiff+0x8a>
 800c45c:	0031      	movs	r1, r6
 800c45e:	9c03      	ldr	r4, [sp, #12]
 800c460:	3115      	adds	r1, #21
 800c462:	2304      	movs	r3, #4
 800c464:	428c      	cmp	r4, r1
 800c466:	d304      	bcc.n	800c472 <__mdiff+0xce>
 800c468:	1ba3      	subs	r3, r4, r6
 800c46a:	3b15      	subs	r3, #21
 800c46c:	089b      	lsrs	r3, r3, #2
 800c46e:	3301      	adds	r3, #1
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	9901      	ldr	r1, [sp, #4]
 800c474:	18cc      	adds	r4, r1, r3
 800c476:	9905      	ldr	r1, [sp, #20]
 800c478:	0026      	movs	r6, r4
 800c47a:	18cb      	adds	r3, r1, r3
 800c47c:	469c      	mov	ip, r3
 800c47e:	9902      	ldr	r1, [sp, #8]
 800c480:	428e      	cmp	r6, r1
 800c482:	d310      	bcc.n	800c4a6 <__mdiff+0x102>
 800c484:	9e02      	ldr	r6, [sp, #8]
 800c486:	1ee1      	subs	r1, r4, #3
 800c488:	2500      	movs	r5, #0
 800c48a:	428e      	cmp	r6, r1
 800c48c:	d304      	bcc.n	800c498 <__mdiff+0xf4>
 800c48e:	0031      	movs	r1, r6
 800c490:	3103      	adds	r1, #3
 800c492:	1b0c      	subs	r4, r1, r4
 800c494:	08a4      	lsrs	r4, r4, #2
 800c496:	00a5      	lsls	r5, r4, #2
 800c498:	195b      	adds	r3, r3, r5
 800c49a:	3b04      	subs	r3, #4
 800c49c:	6819      	ldr	r1, [r3, #0]
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	d00f      	beq.n	800c4c2 <__mdiff+0x11e>
 800c4a2:	6110      	str	r0, [r2, #16]
 800c4a4:	e797      	b.n	800c3d6 <__mdiff+0x32>
 800c4a6:	ce02      	ldmia	r6!, {r1}
 800c4a8:	b28d      	uxth	r5, r1
 800c4aa:	19ed      	adds	r5, r5, r7
 800c4ac:	0c0f      	lsrs	r7, r1, #16
 800c4ae:	1429      	asrs	r1, r5, #16
 800c4b0:	1879      	adds	r1, r7, r1
 800c4b2:	140f      	asrs	r7, r1, #16
 800c4b4:	b2ad      	uxth	r5, r5
 800c4b6:	0409      	lsls	r1, r1, #16
 800c4b8:	430d      	orrs	r5, r1
 800c4ba:	4661      	mov	r1, ip
 800c4bc:	c120      	stmia	r1!, {r5}
 800c4be:	468c      	mov	ip, r1
 800c4c0:	e7dd      	b.n	800c47e <__mdiff+0xda>
 800c4c2:	3801      	subs	r0, #1
 800c4c4:	e7e9      	b.n	800c49a <__mdiff+0xf6>
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	0800d0ac 	.word	0x0800d0ac
 800c4cc:	00000232 	.word	0x00000232
 800c4d0:	0800d120 	.word	0x0800d120

0800c4d4 <__d2b>:
 800c4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	0014      	movs	r4, r2
 800c4da:	001e      	movs	r6, r3
 800c4dc:	9f08      	ldr	r7, [sp, #32]
 800c4de:	f7ff fcc1 	bl	800be64 <_Balloc>
 800c4e2:	1e05      	subs	r5, r0, #0
 800c4e4:	d105      	bne.n	800c4f2 <__d2b+0x1e>
 800c4e6:	0002      	movs	r2, r0
 800c4e8:	4b26      	ldr	r3, [pc, #152]	; (800c584 <__d2b+0xb0>)
 800c4ea:	4927      	ldr	r1, [pc, #156]	; (800c588 <__d2b+0xb4>)
 800c4ec:	4827      	ldr	r0, [pc, #156]	; (800c58c <__d2b+0xb8>)
 800c4ee:	f7fd fcaf 	bl	8009e50 <__assert_func>
 800c4f2:	0333      	lsls	r3, r6, #12
 800c4f4:	0076      	lsls	r6, r6, #1
 800c4f6:	0b1b      	lsrs	r3, r3, #12
 800c4f8:	0d76      	lsrs	r6, r6, #21
 800c4fa:	d124      	bne.n	800c546 <__d2b+0x72>
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	d027      	beq.n	800c552 <__d2b+0x7e>
 800c502:	4668      	mov	r0, sp
 800c504:	9400      	str	r4, [sp, #0]
 800c506:	f7ff fd73 	bl	800bff0 <__lo0bits>
 800c50a:	9c00      	ldr	r4, [sp, #0]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d01e      	beq.n	800c54e <__d2b+0x7a>
 800c510:	9b01      	ldr	r3, [sp, #4]
 800c512:	2120      	movs	r1, #32
 800c514:	001a      	movs	r2, r3
 800c516:	1a09      	subs	r1, r1, r0
 800c518:	408a      	lsls	r2, r1
 800c51a:	40c3      	lsrs	r3, r0
 800c51c:	4322      	orrs	r2, r4
 800c51e:	616a      	str	r2, [r5, #20]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	9c01      	ldr	r4, [sp, #4]
 800c524:	61ac      	str	r4, [r5, #24]
 800c526:	1e63      	subs	r3, r4, #1
 800c528:	419c      	sbcs	r4, r3
 800c52a:	3401      	adds	r4, #1
 800c52c:	612c      	str	r4, [r5, #16]
 800c52e:	2e00      	cmp	r6, #0
 800c530:	d018      	beq.n	800c564 <__d2b+0x90>
 800c532:	4b17      	ldr	r3, [pc, #92]	; (800c590 <__d2b+0xbc>)
 800c534:	18f6      	adds	r6, r6, r3
 800c536:	2335      	movs	r3, #53	; 0x35
 800c538:	1836      	adds	r6, r6, r0
 800c53a:	1a18      	subs	r0, r3, r0
 800c53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c53e:	603e      	str	r6, [r7, #0]
 800c540:	6018      	str	r0, [r3, #0]
 800c542:	0028      	movs	r0, r5
 800c544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c546:	2280      	movs	r2, #128	; 0x80
 800c548:	0352      	lsls	r2, r2, #13
 800c54a:	4313      	orrs	r3, r2
 800c54c:	e7d6      	b.n	800c4fc <__d2b+0x28>
 800c54e:	616c      	str	r4, [r5, #20]
 800c550:	e7e7      	b.n	800c522 <__d2b+0x4e>
 800c552:	a801      	add	r0, sp, #4
 800c554:	f7ff fd4c 	bl	800bff0 <__lo0bits>
 800c558:	2401      	movs	r4, #1
 800c55a:	9b01      	ldr	r3, [sp, #4]
 800c55c:	612c      	str	r4, [r5, #16]
 800c55e:	616b      	str	r3, [r5, #20]
 800c560:	3020      	adds	r0, #32
 800c562:	e7e4      	b.n	800c52e <__d2b+0x5a>
 800c564:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <__d2b+0xc0>)
 800c566:	18c0      	adds	r0, r0, r3
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <__d2b+0xc4>)
 800c56a:	6038      	str	r0, [r7, #0]
 800c56c:	18e3      	adds	r3, r4, r3
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	18eb      	adds	r3, r5, r3
 800c572:	6958      	ldr	r0, [r3, #20]
 800c574:	f7ff fd22 	bl	800bfbc <__hi0bits>
 800c578:	0164      	lsls	r4, r4, #5
 800c57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57c:	1a24      	subs	r4, r4, r0
 800c57e:	601c      	str	r4, [r3, #0]
 800c580:	e7df      	b.n	800c542 <__d2b+0x6e>
 800c582:	46c0      	nop			; (mov r8, r8)
 800c584:	0800d0ac 	.word	0x0800d0ac
 800c588:	0000030a 	.word	0x0000030a
 800c58c:	0800d120 	.word	0x0800d120
 800c590:	fffffbcd 	.word	0xfffffbcd
 800c594:	fffffbce 	.word	0xfffffbce
 800c598:	3fffffff 	.word	0x3fffffff

0800c59c <_calloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	0c13      	lsrs	r3, r2, #16
 800c5a0:	0c0d      	lsrs	r5, r1, #16
 800c5a2:	d11e      	bne.n	800c5e2 <_calloc_r+0x46>
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10c      	bne.n	800c5c2 <_calloc_r+0x26>
 800c5a8:	b289      	uxth	r1, r1
 800c5aa:	b294      	uxth	r4, r2
 800c5ac:	434c      	muls	r4, r1
 800c5ae:	0021      	movs	r1, r4
 800c5b0:	f000 f88c 	bl	800c6cc <_malloc_r>
 800c5b4:	1e05      	subs	r5, r0, #0
 800c5b6:	d01b      	beq.n	800c5f0 <_calloc_r+0x54>
 800c5b8:	0022      	movs	r2, r4
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	f7fd fca9 	bl	8009f12 <memset>
 800c5c0:	e016      	b.n	800c5f0 <_calloc_r+0x54>
 800c5c2:	1c1d      	adds	r5, r3, #0
 800c5c4:	1c0b      	adds	r3, r1, #0
 800c5c6:	b292      	uxth	r2, r2
 800c5c8:	b289      	uxth	r1, r1
 800c5ca:	b29c      	uxth	r4, r3
 800c5cc:	4351      	muls	r1, r2
 800c5ce:	b2ab      	uxth	r3, r5
 800c5d0:	4363      	muls	r3, r4
 800c5d2:	0c0c      	lsrs	r4, r1, #16
 800c5d4:	191c      	adds	r4, r3, r4
 800c5d6:	0c22      	lsrs	r2, r4, #16
 800c5d8:	d107      	bne.n	800c5ea <_calloc_r+0x4e>
 800c5da:	0424      	lsls	r4, r4, #16
 800c5dc:	b289      	uxth	r1, r1
 800c5de:	430c      	orrs	r4, r1
 800c5e0:	e7e5      	b.n	800c5ae <_calloc_r+0x12>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <_calloc_r+0x4e>
 800c5e6:	1c13      	adds	r3, r2, #0
 800c5e8:	e7ed      	b.n	800c5c6 <_calloc_r+0x2a>
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	2500      	movs	r5, #0
 800c5ee:	6003      	str	r3, [r0, #0]
 800c5f0:	0028      	movs	r0, r5
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}

0800c5f4 <_free_r>:
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	0005      	movs	r5, r0
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d010      	beq.n	800c61e <_free_r+0x2a>
 800c5fc:	1f0c      	subs	r4, r1, #4
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	da00      	bge.n	800c606 <_free_r+0x12>
 800c604:	18e4      	adds	r4, r4, r3
 800c606:	0028      	movs	r0, r5
 800c608:	f000 f9ee 	bl	800c9e8 <__malloc_lock>
 800c60c:	4a1d      	ldr	r2, [pc, #116]	; (800c684 <_free_r+0x90>)
 800c60e:	6813      	ldr	r3, [r2, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d105      	bne.n	800c620 <_free_r+0x2c>
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6014      	str	r4, [r2, #0]
 800c618:	0028      	movs	r0, r5
 800c61a:	f000 f9ed 	bl	800c9f8 <__malloc_unlock>
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	42a3      	cmp	r3, r4
 800c622:	d908      	bls.n	800c636 <_free_r+0x42>
 800c624:	6821      	ldr	r1, [r4, #0]
 800c626:	1860      	adds	r0, r4, r1
 800c628:	4283      	cmp	r3, r0
 800c62a:	d1f3      	bne.n	800c614 <_free_r+0x20>
 800c62c:	6818      	ldr	r0, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	1841      	adds	r1, r0, r1
 800c632:	6021      	str	r1, [r4, #0]
 800c634:	e7ee      	b.n	800c614 <_free_r+0x20>
 800c636:	001a      	movs	r2, r3
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <_free_r+0x4e>
 800c63e:	42a3      	cmp	r3, r4
 800c640:	d9f9      	bls.n	800c636 <_free_r+0x42>
 800c642:	6811      	ldr	r1, [r2, #0]
 800c644:	1850      	adds	r0, r2, r1
 800c646:	42a0      	cmp	r0, r4
 800c648:	d10b      	bne.n	800c662 <_free_r+0x6e>
 800c64a:	6820      	ldr	r0, [r4, #0]
 800c64c:	1809      	adds	r1, r1, r0
 800c64e:	1850      	adds	r0, r2, r1
 800c650:	6011      	str	r1, [r2, #0]
 800c652:	4283      	cmp	r3, r0
 800c654:	d1e0      	bne.n	800c618 <_free_r+0x24>
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	1841      	adds	r1, r0, r1
 800c65c:	6011      	str	r1, [r2, #0]
 800c65e:	6053      	str	r3, [r2, #4]
 800c660:	e7da      	b.n	800c618 <_free_r+0x24>
 800c662:	42a0      	cmp	r0, r4
 800c664:	d902      	bls.n	800c66c <_free_r+0x78>
 800c666:	230c      	movs	r3, #12
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	e7d5      	b.n	800c618 <_free_r+0x24>
 800c66c:	6821      	ldr	r1, [r4, #0]
 800c66e:	1860      	adds	r0, r4, r1
 800c670:	4283      	cmp	r3, r0
 800c672:	d103      	bne.n	800c67c <_free_r+0x88>
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	1841      	adds	r1, r0, r1
 800c67a:	6021      	str	r1, [r4, #0]
 800c67c:	6063      	str	r3, [r4, #4]
 800c67e:	6054      	str	r4, [r2, #4]
 800c680:	e7ca      	b.n	800c618 <_free_r+0x24>
 800c682:	46c0      	nop			; (mov r8, r8)
 800c684:	200007b0 	.word	0x200007b0

0800c688 <sbrk_aligned>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	4e0f      	ldr	r6, [pc, #60]	; (800c6c8 <sbrk_aligned+0x40>)
 800c68c:	000d      	movs	r5, r1
 800c68e:	6831      	ldr	r1, [r6, #0]
 800c690:	0004      	movs	r4, r0
 800c692:	2900      	cmp	r1, #0
 800c694:	d102      	bne.n	800c69c <sbrk_aligned+0x14>
 800c696:	f000 f88f 	bl	800c7b8 <_sbrk_r>
 800c69a:	6030      	str	r0, [r6, #0]
 800c69c:	0029      	movs	r1, r5
 800c69e:	0020      	movs	r0, r4
 800c6a0:	f000 f88a 	bl	800c7b8 <_sbrk_r>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d00a      	beq.n	800c6be <sbrk_aligned+0x36>
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	1cc5      	adds	r5, r0, #3
 800c6ac:	439d      	bics	r5, r3
 800c6ae:	42a8      	cmp	r0, r5
 800c6b0:	d007      	beq.n	800c6c2 <sbrk_aligned+0x3a>
 800c6b2:	1a29      	subs	r1, r5, r0
 800c6b4:	0020      	movs	r0, r4
 800c6b6:	f000 f87f 	bl	800c7b8 <_sbrk_r>
 800c6ba:	1c43      	adds	r3, r0, #1
 800c6bc:	d101      	bne.n	800c6c2 <sbrk_aligned+0x3a>
 800c6be:	2501      	movs	r5, #1
 800c6c0:	426d      	negs	r5, r5
 800c6c2:	0028      	movs	r0, r5
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	46c0      	nop			; (mov r8, r8)
 800c6c8:	200007b4 	.word	0x200007b4

0800c6cc <_malloc_r>:
 800c6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	1ccb      	adds	r3, r1, #3
 800c6d2:	4393      	bics	r3, r2
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	0006      	movs	r6, r0
 800c6d8:	001f      	movs	r7, r3
 800c6da:	2b0c      	cmp	r3, #12
 800c6dc:	d232      	bcs.n	800c744 <_malloc_r+0x78>
 800c6de:	270c      	movs	r7, #12
 800c6e0:	42b9      	cmp	r1, r7
 800c6e2:	d831      	bhi.n	800c748 <_malloc_r+0x7c>
 800c6e4:	0030      	movs	r0, r6
 800c6e6:	f000 f97f 	bl	800c9e8 <__malloc_lock>
 800c6ea:	4d32      	ldr	r5, [pc, #200]	; (800c7b4 <_malloc_r+0xe8>)
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	001c      	movs	r4, r3
 800c6f0:	2c00      	cmp	r4, #0
 800c6f2:	d12e      	bne.n	800c752 <_malloc_r+0x86>
 800c6f4:	0039      	movs	r1, r7
 800c6f6:	0030      	movs	r0, r6
 800c6f8:	f7ff ffc6 	bl	800c688 <sbrk_aligned>
 800c6fc:	0004      	movs	r4, r0
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	d11e      	bne.n	800c740 <_malloc_r+0x74>
 800c702:	682c      	ldr	r4, [r5, #0]
 800c704:	0025      	movs	r5, r4
 800c706:	2d00      	cmp	r5, #0
 800c708:	d14a      	bne.n	800c7a0 <_malloc_r+0xd4>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	0029      	movs	r1, r5
 800c70e:	18e3      	adds	r3, r4, r3
 800c710:	0030      	movs	r0, r6
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f000 f850 	bl	800c7b8 <_sbrk_r>
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	4283      	cmp	r3, r0
 800c71c:	d143      	bne.n	800c7a6 <_malloc_r+0xda>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	3703      	adds	r7, #3
 800c722:	1aff      	subs	r7, r7, r3
 800c724:	2303      	movs	r3, #3
 800c726:	439f      	bics	r7, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	2f0c      	cmp	r7, #12
 800c72c:	d200      	bcs.n	800c730 <_malloc_r+0x64>
 800c72e:	270c      	movs	r7, #12
 800c730:	0039      	movs	r1, r7
 800c732:	0030      	movs	r0, r6
 800c734:	f7ff ffa8 	bl	800c688 <sbrk_aligned>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d034      	beq.n	800c7a6 <_malloc_r+0xda>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	19df      	adds	r7, r3, r7
 800c740:	6027      	str	r7, [r4, #0]
 800c742:	e013      	b.n	800c76c <_malloc_r+0xa0>
 800c744:	2b00      	cmp	r3, #0
 800c746:	dacb      	bge.n	800c6e0 <_malloc_r+0x14>
 800c748:	230c      	movs	r3, #12
 800c74a:	2500      	movs	r5, #0
 800c74c:	6033      	str	r3, [r6, #0]
 800c74e:	0028      	movs	r0, r5
 800c750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c752:	6822      	ldr	r2, [r4, #0]
 800c754:	1bd1      	subs	r1, r2, r7
 800c756:	d420      	bmi.n	800c79a <_malloc_r+0xce>
 800c758:	290b      	cmp	r1, #11
 800c75a:	d917      	bls.n	800c78c <_malloc_r+0xc0>
 800c75c:	19e2      	adds	r2, r4, r7
 800c75e:	6027      	str	r7, [r4, #0]
 800c760:	42a3      	cmp	r3, r4
 800c762:	d111      	bne.n	800c788 <_malloc_r+0xbc>
 800c764:	602a      	str	r2, [r5, #0]
 800c766:	6863      	ldr	r3, [r4, #4]
 800c768:	6011      	str	r1, [r2, #0]
 800c76a:	6053      	str	r3, [r2, #4]
 800c76c:	0030      	movs	r0, r6
 800c76e:	0025      	movs	r5, r4
 800c770:	f000 f942 	bl	800c9f8 <__malloc_unlock>
 800c774:	2207      	movs	r2, #7
 800c776:	350b      	adds	r5, #11
 800c778:	1d23      	adds	r3, r4, #4
 800c77a:	4395      	bics	r5, r2
 800c77c:	1aea      	subs	r2, r5, r3
 800c77e:	429d      	cmp	r5, r3
 800c780:	d0e5      	beq.n	800c74e <_malloc_r+0x82>
 800c782:	1b5b      	subs	r3, r3, r5
 800c784:	50a3      	str	r3, [r4, r2]
 800c786:	e7e2      	b.n	800c74e <_malloc_r+0x82>
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	e7ec      	b.n	800c766 <_malloc_r+0x9a>
 800c78c:	6862      	ldr	r2, [r4, #4]
 800c78e:	42a3      	cmp	r3, r4
 800c790:	d101      	bne.n	800c796 <_malloc_r+0xca>
 800c792:	602a      	str	r2, [r5, #0]
 800c794:	e7ea      	b.n	800c76c <_malloc_r+0xa0>
 800c796:	605a      	str	r2, [r3, #4]
 800c798:	e7e8      	b.n	800c76c <_malloc_r+0xa0>
 800c79a:	0023      	movs	r3, r4
 800c79c:	6864      	ldr	r4, [r4, #4]
 800c79e:	e7a7      	b.n	800c6f0 <_malloc_r+0x24>
 800c7a0:	002c      	movs	r4, r5
 800c7a2:	686d      	ldr	r5, [r5, #4]
 800c7a4:	e7af      	b.n	800c706 <_malloc_r+0x3a>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	0030      	movs	r0, r6
 800c7aa:	6033      	str	r3, [r6, #0]
 800c7ac:	f000 f924 	bl	800c9f8 <__malloc_unlock>
 800c7b0:	e7cd      	b.n	800c74e <_malloc_r+0x82>
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	200007b0 	.word	0x200007b0

0800c7b8 <_sbrk_r>:
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	4d06      	ldr	r5, [pc, #24]	; (800c7d8 <_sbrk_r+0x20>)
 800c7be:	0004      	movs	r4, r0
 800c7c0:	0008      	movs	r0, r1
 800c7c2:	602b      	str	r3, [r5, #0]
 800c7c4:	f7f6 fe5e 	bl	8003484 <_sbrk>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d103      	bne.n	800c7d4 <_sbrk_r+0x1c>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d000      	beq.n	800c7d4 <_sbrk_r+0x1c>
 800c7d2:	6023      	str	r3, [r4, #0]
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	200007b8 	.word	0x200007b8

0800c7dc <_raise_r>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	0004      	movs	r4, r0
 800c7e0:	000d      	movs	r5, r1
 800c7e2:	291f      	cmp	r1, #31
 800c7e4:	d904      	bls.n	800c7f0 <_raise_r+0x14>
 800c7e6:	2316      	movs	r3, #22
 800c7e8:	6003      	str	r3, [r0, #0]
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	4240      	negs	r0, r0
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}
 800c7f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <_raise_r+0x24>
 800c7f6:	008a      	lsls	r2, r1, #2
 800c7f8:	189b      	adds	r3, r3, r2
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	d108      	bne.n	800c812 <_raise_r+0x36>
 800c800:	0020      	movs	r0, r4
 800c802:	f000 f831 	bl	800c868 <_getpid_r>
 800c806:	002a      	movs	r2, r5
 800c808:	0001      	movs	r1, r0
 800c80a:	0020      	movs	r0, r4
 800c80c:	f000 f81a 	bl	800c844 <_kill_r>
 800c810:	e7ed      	b.n	800c7ee <_raise_r+0x12>
 800c812:	2000      	movs	r0, #0
 800c814:	2a01      	cmp	r2, #1
 800c816:	d0ea      	beq.n	800c7ee <_raise_r+0x12>
 800c818:	1c51      	adds	r1, r2, #1
 800c81a:	d103      	bne.n	800c824 <_raise_r+0x48>
 800c81c:	2316      	movs	r3, #22
 800c81e:	3001      	adds	r0, #1
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	e7e4      	b.n	800c7ee <_raise_r+0x12>
 800c824:	2400      	movs	r4, #0
 800c826:	0028      	movs	r0, r5
 800c828:	601c      	str	r4, [r3, #0]
 800c82a:	4790      	blx	r2
 800c82c:	0020      	movs	r0, r4
 800c82e:	e7de      	b.n	800c7ee <_raise_r+0x12>

0800c830 <raise>:
 800c830:	b510      	push	{r4, lr}
 800c832:	4b03      	ldr	r3, [pc, #12]	; (800c840 <raise+0x10>)
 800c834:	0001      	movs	r1, r0
 800c836:	6818      	ldr	r0, [r3, #0]
 800c838:	f7ff ffd0 	bl	800c7dc <_raise_r>
 800c83c:	bd10      	pop	{r4, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	2000008c 	.word	0x2000008c

0800c844 <_kill_r>:
 800c844:	2300      	movs	r3, #0
 800c846:	b570      	push	{r4, r5, r6, lr}
 800c848:	4d06      	ldr	r5, [pc, #24]	; (800c864 <_kill_r+0x20>)
 800c84a:	0004      	movs	r4, r0
 800c84c:	0008      	movs	r0, r1
 800c84e:	0011      	movs	r1, r2
 800c850:	602b      	str	r3, [r5, #0]
 800c852:	f7f6 fd95 	bl	8003380 <_kill>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	d103      	bne.n	800c862 <_kill_r+0x1e>
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d000      	beq.n	800c862 <_kill_r+0x1e>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	200007b8 	.word	0x200007b8

0800c868 <_getpid_r>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	f7f6 fd83 	bl	8003374 <_getpid>
 800c86e:	bd10      	pop	{r4, pc}

0800c870 <__sread>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	000c      	movs	r4, r1
 800c874:	250e      	movs	r5, #14
 800c876:	5f49      	ldrsh	r1, [r1, r5]
 800c878:	f000 f8c6 	bl	800ca08 <_read_r>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	db03      	blt.n	800c888 <__sread+0x18>
 800c880:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c882:	181b      	adds	r3, r3, r0
 800c884:	6563      	str	r3, [r4, #84]	; 0x54
 800c886:	bd70      	pop	{r4, r5, r6, pc}
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	4a02      	ldr	r2, [pc, #8]	; (800c894 <__sread+0x24>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	e7f9      	b.n	800c886 <__sread+0x16>
 800c892:	46c0      	nop			; (mov r8, r8)
 800c894:	ffffefff 	.word	0xffffefff

0800c898 <__swrite>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	001f      	movs	r7, r3
 800c89c:	898b      	ldrh	r3, [r1, #12]
 800c89e:	0005      	movs	r5, r0
 800c8a0:	000c      	movs	r4, r1
 800c8a2:	0016      	movs	r6, r2
 800c8a4:	05db      	lsls	r3, r3, #23
 800c8a6:	d505      	bpl.n	800c8b4 <__swrite+0x1c>
 800c8a8:	230e      	movs	r3, #14
 800c8aa:	5ec9      	ldrsh	r1, [r1, r3]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	f000 f874 	bl	800c99c <_lseek_r>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	4a05      	ldr	r2, [pc, #20]	; (800c8cc <__swrite+0x34>)
 800c8b8:	0028      	movs	r0, r5
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	0032      	movs	r2, r6
 800c8c0:	230e      	movs	r3, #14
 800c8c2:	5ee1      	ldrsh	r1, [r4, r3]
 800c8c4:	003b      	movs	r3, r7
 800c8c6:	f000 f81f 	bl	800c908 <_write_r>
 800c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8cc:	ffffefff 	.word	0xffffefff

0800c8d0 <__sseek>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	000c      	movs	r4, r1
 800c8d4:	250e      	movs	r5, #14
 800c8d6:	5f49      	ldrsh	r1, [r1, r5]
 800c8d8:	f000 f860 	bl	800c99c <_lseek_r>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	1c42      	adds	r2, r0, #1
 800c8e0:	d103      	bne.n	800c8ea <__sseek+0x1a>
 800c8e2:	4a05      	ldr	r2, [pc, #20]	; (800c8f8 <__sseek+0x28>)
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ea:	2280      	movs	r2, #128	; 0x80
 800c8ec:	0152      	lsls	r2, r2, #5
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	81a3      	strh	r3, [r4, #12]
 800c8f2:	6560      	str	r0, [r4, #84]	; 0x54
 800c8f4:	e7f8      	b.n	800c8e8 <__sseek+0x18>
 800c8f6:	46c0      	nop			; (mov r8, r8)
 800c8f8:	ffffefff 	.word	0xffffefff

0800c8fc <__sclose>:
 800c8fc:	b510      	push	{r4, lr}
 800c8fe:	230e      	movs	r3, #14
 800c900:	5ec9      	ldrsh	r1, [r1, r3]
 800c902:	f000 f815 	bl	800c930 <_close_r>
 800c906:	bd10      	pop	{r4, pc}

0800c908 <_write_r>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	0004      	movs	r4, r0
 800c90c:	0008      	movs	r0, r1
 800c90e:	0011      	movs	r1, r2
 800c910:	001a      	movs	r2, r3
 800c912:	2300      	movs	r3, #0
 800c914:	4d05      	ldr	r5, [pc, #20]	; (800c92c <_write_r+0x24>)
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	f7f6 fd6b 	bl	80033f2 <_write>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d103      	bne.n	800c928 <_write_r+0x20>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d000      	beq.n	800c928 <_write_r+0x20>
 800c926:	6023      	str	r3, [r4, #0]
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	200007b8 	.word	0x200007b8

0800c930 <_close_r>:
 800c930:	2300      	movs	r3, #0
 800c932:	b570      	push	{r4, r5, r6, lr}
 800c934:	4d06      	ldr	r5, [pc, #24]	; (800c950 <_close_r+0x20>)
 800c936:	0004      	movs	r4, r0
 800c938:	0008      	movs	r0, r1
 800c93a:	602b      	str	r3, [r5, #0]
 800c93c:	f7f6 fd75 	bl	800342a <_close>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d103      	bne.n	800c94c <_close_r+0x1c>
 800c944:	682b      	ldr	r3, [r5, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d000      	beq.n	800c94c <_close_r+0x1c>
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	bd70      	pop	{r4, r5, r6, pc}
 800c94e:	46c0      	nop			; (mov r8, r8)
 800c950:	200007b8 	.word	0x200007b8

0800c954 <_fstat_r>:
 800c954:	2300      	movs	r3, #0
 800c956:	b570      	push	{r4, r5, r6, lr}
 800c958:	4d06      	ldr	r5, [pc, #24]	; (800c974 <_fstat_r+0x20>)
 800c95a:	0004      	movs	r4, r0
 800c95c:	0008      	movs	r0, r1
 800c95e:	0011      	movs	r1, r2
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	f7f6 fd6c 	bl	800343e <_fstat>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d103      	bne.n	800c972 <_fstat_r+0x1e>
 800c96a:	682b      	ldr	r3, [r5, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d000      	beq.n	800c972 <_fstat_r+0x1e>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	200007b8 	.word	0x200007b8

0800c978 <_isatty_r>:
 800c978:	2300      	movs	r3, #0
 800c97a:	b570      	push	{r4, r5, r6, lr}
 800c97c:	4d06      	ldr	r5, [pc, #24]	; (800c998 <_isatty_r+0x20>)
 800c97e:	0004      	movs	r4, r0
 800c980:	0008      	movs	r0, r1
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	f7f6 fd69 	bl	800345a <_isatty>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d103      	bne.n	800c994 <_isatty_r+0x1c>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d000      	beq.n	800c994 <_isatty_r+0x1c>
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	46c0      	nop			; (mov r8, r8)
 800c998:	200007b8 	.word	0x200007b8

0800c99c <_lseek_r>:
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	0004      	movs	r4, r0
 800c9a0:	0008      	movs	r0, r1
 800c9a2:	0011      	movs	r1, r2
 800c9a4:	001a      	movs	r2, r3
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4d05      	ldr	r5, [pc, #20]	; (800c9c0 <_lseek_r+0x24>)
 800c9aa:	602b      	str	r3, [r5, #0]
 800c9ac:	f7f6 fd5e 	bl	800346c <_lseek>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	d103      	bne.n	800c9bc <_lseek_r+0x20>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d000      	beq.n	800c9bc <_lseek_r+0x20>
 800c9ba:	6023      	str	r3, [r4, #0]
 800c9bc:	bd70      	pop	{r4, r5, r6, pc}
 800c9be:	46c0      	nop			; (mov r8, r8)
 800c9c0:	200007b8 	.word	0x200007b8

0800c9c4 <__ascii_mbtowc>:
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	2900      	cmp	r1, #0
 800c9c8:	d100      	bne.n	800c9cc <__ascii_mbtowc+0x8>
 800c9ca:	a901      	add	r1, sp, #4
 800c9cc:	1e10      	subs	r0, r2, #0
 800c9ce:	d006      	beq.n	800c9de <__ascii_mbtowc+0x1a>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d006      	beq.n	800c9e2 <__ascii_mbtowc+0x1e>
 800c9d4:	7813      	ldrb	r3, [r2, #0]
 800c9d6:	600b      	str	r3, [r1, #0]
 800c9d8:	7810      	ldrb	r0, [r2, #0]
 800c9da:	1e43      	subs	r3, r0, #1
 800c9dc:	4198      	sbcs	r0, r3
 800c9de:	b002      	add	sp, #8
 800c9e0:	4770      	bx	lr
 800c9e2:	2002      	movs	r0, #2
 800c9e4:	4240      	negs	r0, r0
 800c9e6:	e7fa      	b.n	800c9de <__ascii_mbtowc+0x1a>

0800c9e8 <__malloc_lock>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	4802      	ldr	r0, [pc, #8]	; (800c9f4 <__malloc_lock+0xc>)
 800c9ec:	f7ff f9b5 	bl	800bd5a <__retarget_lock_acquire_recursive>
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	46c0      	nop			; (mov r8, r8)
 800c9f4:	200007ac 	.word	0x200007ac

0800c9f8 <__malloc_unlock>:
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	4802      	ldr	r0, [pc, #8]	; (800ca04 <__malloc_unlock+0xc>)
 800c9fc:	f7ff f9ae 	bl	800bd5c <__retarget_lock_release_recursive>
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	46c0      	nop			; (mov r8, r8)
 800ca04:	200007ac 	.word	0x200007ac

0800ca08 <_read_r>:
 800ca08:	b570      	push	{r4, r5, r6, lr}
 800ca0a:	0004      	movs	r4, r0
 800ca0c:	0008      	movs	r0, r1
 800ca0e:	0011      	movs	r1, r2
 800ca10:	001a      	movs	r2, r3
 800ca12:	2300      	movs	r3, #0
 800ca14:	4d05      	ldr	r5, [pc, #20]	; (800ca2c <_read_r+0x24>)
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	f7f6 fcce 	bl	80033b8 <_read>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d103      	bne.n	800ca28 <_read_r+0x20>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d000      	beq.n	800ca28 <_read_r+0x20>
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	bd70      	pop	{r4, r5, r6, pc}
 800ca2a:	46c0      	nop			; (mov r8, r8)
 800ca2c:	200007b8 	.word	0x200007b8

0800ca30 <__ascii_wctomb>:
 800ca30:	0003      	movs	r3, r0
 800ca32:	1e08      	subs	r0, r1, #0
 800ca34:	d005      	beq.n	800ca42 <__ascii_wctomb+0x12>
 800ca36:	2aff      	cmp	r2, #255	; 0xff
 800ca38:	d904      	bls.n	800ca44 <__ascii_wctomb+0x14>
 800ca3a:	228a      	movs	r2, #138	; 0x8a
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	4240      	negs	r0, r0
 800ca42:	4770      	bx	lr
 800ca44:	2001      	movs	r0, #1
 800ca46:	700a      	strb	r2, [r1, #0]
 800ca48:	e7fb      	b.n	800ca42 <__ascii_wctomb+0x12>
	...

0800ca4c <_init>:
 800ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca52:	bc08      	pop	{r3}
 800ca54:	469e      	mov	lr, r3
 800ca56:	4770      	bx	lr

0800ca58 <_fini>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr
