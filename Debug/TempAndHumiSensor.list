
TempAndHumiSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08008798  08008798  00018798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d0c  08008d0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d14  08008d14  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d14  08008d14  00018d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  08008ef8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008ef8  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e010  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a6  00000000  00000000  0002e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000307c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000314b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d2f  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011de8  00000000  00000000  00048da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845e7  00000000  00000000  0005ab8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd8  00000000  00000000  000df1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008780 	.word	0x08008780

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008780 	.word	0x08008780

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9cf 	bl	80017e0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f91f 	bl	8001690 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9c1 	bl	80017e0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9b7 	bl	80017e0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f947 	bl	8001714 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f93d 	bl	8001714 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f8ae 	bl	80026c4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f8a9 	bl	80026c4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fdiv>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0245      	lsls	r5, r0, #9
 80006e6:	b5c0      	push	{r6, r7, lr}
 80006e8:	0047      	lsls	r7, r0, #1
 80006ea:	1c0c      	adds	r4, r1, #0
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	0e3f      	lsrs	r7, r7, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fdiv+0x1c>
 80006f6:	e070      	b.n	80007da <__aeabi_fdiv+0xfe>
 80006f8:	2fff      	cmp	r7, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x22>
 80006fc:	e075      	b.n	80007ea <__aeabi_fdiv+0x10e>
 80006fe:	00eb      	lsls	r3, r5, #3
 8000700:	2580      	movs	r5, #128	; 0x80
 8000702:	04ed      	lsls	r5, r5, #19
 8000704:	431d      	orrs	r5, r3
 8000706:	2300      	movs	r3, #0
 8000708:	4699      	mov	r9, r3
 800070a:	469a      	mov	sl, r3
 800070c:	3f7f      	subs	r7, #127	; 0x7f
 800070e:	0260      	lsls	r0, r4, #9
 8000710:	0a43      	lsrs	r3, r0, #9
 8000712:	4698      	mov	r8, r3
 8000714:	0063      	lsls	r3, r4, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fe4      	lsrs	r4, r4, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d04e      	beq.n	80007bc <__aeabi_fdiv+0xe0>
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d046      	beq.n	80007b0 <__aeabi_fdiv+0xd4>
 8000722:	4642      	mov	r2, r8
 8000724:	00d0      	lsls	r0, r2, #3
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	04d2      	lsls	r2, r2, #19
 800072a:	4302      	orrs	r2, r0
 800072c:	4690      	mov	r8, r2
 800072e:	2200      	movs	r2, #0
 8000730:	3b7f      	subs	r3, #127	; 0x7f
 8000732:	0031      	movs	r1, r6
 8000734:	1aff      	subs	r7, r7, r3
 8000736:	464b      	mov	r3, r9
 8000738:	4061      	eors	r1, r4
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4313      	orrs	r3, r2
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d900      	bls.n	8000744 <__aeabi_fdiv+0x68>
 8000742:	e0b5      	b.n	80008b0 <__aeabi_fdiv+0x1d4>
 8000744:	486e      	ldr	r0, [pc, #440]	; (8000900 <__aeabi_fdiv+0x224>)
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	58c3      	ldr	r3, [r0, r3]
 800074a:	469f      	mov	pc, r3
 800074c:	2300      	movs	r3, #0
 800074e:	4698      	mov	r8, r3
 8000750:	0026      	movs	r6, r4
 8000752:	4645      	mov	r5, r8
 8000754:	4692      	mov	sl, r2
 8000756:	4653      	mov	r3, sl
 8000758:	2b02      	cmp	r3, #2
 800075a:	d100      	bne.n	800075e <__aeabi_fdiv+0x82>
 800075c:	e089      	b.n	8000872 <__aeabi_fdiv+0x196>
 800075e:	2b03      	cmp	r3, #3
 8000760:	d100      	bne.n	8000764 <__aeabi_fdiv+0x88>
 8000762:	e09e      	b.n	80008a2 <__aeabi_fdiv+0x1c6>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d018      	beq.n	800079a <__aeabi_fdiv+0xbe>
 8000768:	003b      	movs	r3, r7
 800076a:	337f      	adds	r3, #127	; 0x7f
 800076c:	2b00      	cmp	r3, #0
 800076e:	dd69      	ble.n	8000844 <__aeabi_fdiv+0x168>
 8000770:	076a      	lsls	r2, r5, #29
 8000772:	d004      	beq.n	800077e <__aeabi_fdiv+0xa2>
 8000774:	220f      	movs	r2, #15
 8000776:	402a      	ands	r2, r5
 8000778:	2a04      	cmp	r2, #4
 800077a:	d000      	beq.n	800077e <__aeabi_fdiv+0xa2>
 800077c:	3504      	adds	r5, #4
 800077e:	012a      	lsls	r2, r5, #4
 8000780:	d503      	bpl.n	800078a <__aeabi_fdiv+0xae>
 8000782:	4b60      	ldr	r3, [pc, #384]	; (8000904 <__aeabi_fdiv+0x228>)
 8000784:	401d      	ands	r5, r3
 8000786:	003b      	movs	r3, r7
 8000788:	3380      	adds	r3, #128	; 0x80
 800078a:	2bfe      	cmp	r3, #254	; 0xfe
 800078c:	dd00      	ble.n	8000790 <__aeabi_fdiv+0xb4>
 800078e:	e070      	b.n	8000872 <__aeabi_fdiv+0x196>
 8000790:	01ad      	lsls	r5, r5, #6
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	e002      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000798:	000e      	movs	r6, r1
 800079a:	2000      	movs	r0, #0
 800079c:	2500      	movs	r5, #0
 800079e:	05c0      	lsls	r0, r0, #23
 80007a0:	4328      	orrs	r0, r5
 80007a2:	07f6      	lsls	r6, r6, #31
 80007a4:	4330      	orrs	r0, r6
 80007a6:	bce0      	pop	{r5, r6, r7}
 80007a8:	46ba      	mov	sl, r7
 80007aa:	46b1      	mov	r9, r6
 80007ac:	46a8      	mov	r8, r5
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b0:	4643      	mov	r3, r8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d13f      	bne.n	8000836 <__aeabi_fdiv+0x15a>
 80007b6:	2202      	movs	r2, #2
 80007b8:	3fff      	subs	r7, #255	; 0xff
 80007ba:	e003      	b.n	80007c4 <__aeabi_fdiv+0xe8>
 80007bc:	4643      	mov	r3, r8
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d12d      	bne.n	800081e <__aeabi_fdiv+0x142>
 80007c2:	2201      	movs	r2, #1
 80007c4:	0031      	movs	r1, r6
 80007c6:	464b      	mov	r3, r9
 80007c8:	4061      	eors	r1, r4
 80007ca:	b2c9      	uxtb	r1, r1
 80007cc:	4313      	orrs	r3, r2
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d834      	bhi.n	800083c <__aeabi_fdiv+0x160>
 80007d2:	484d      	ldr	r0, [pc, #308]	; (8000908 <__aeabi_fdiv+0x22c>)
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	58c3      	ldr	r3, [r0, r3]
 80007d8:	469f      	mov	pc, r3
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d113      	bne.n	8000806 <__aeabi_fdiv+0x12a>
 80007de:	2304      	movs	r3, #4
 80007e0:	4699      	mov	r9, r3
 80007e2:	3b03      	subs	r3, #3
 80007e4:	2700      	movs	r7, #0
 80007e6:	469a      	mov	sl, r3
 80007e8:	e791      	b.n	800070e <__aeabi_fdiv+0x32>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d105      	bne.n	80007fa <__aeabi_fdiv+0x11e>
 80007ee:	2308      	movs	r3, #8
 80007f0:	4699      	mov	r9, r3
 80007f2:	3b06      	subs	r3, #6
 80007f4:	27ff      	movs	r7, #255	; 0xff
 80007f6:	469a      	mov	sl, r3
 80007f8:	e789      	b.n	800070e <__aeabi_fdiv+0x32>
 80007fa:	230c      	movs	r3, #12
 80007fc:	4699      	mov	r9, r3
 80007fe:	3b09      	subs	r3, #9
 8000800:	27ff      	movs	r7, #255	; 0xff
 8000802:	469a      	mov	sl, r3
 8000804:	e783      	b.n	800070e <__aeabi_fdiv+0x32>
 8000806:	0028      	movs	r0, r5
 8000808:	f001 ff3e 	bl	8002688 <__clzsi2>
 800080c:	2776      	movs	r7, #118	; 0x76
 800080e:	1f43      	subs	r3, r0, #5
 8000810:	409d      	lsls	r5, r3
 8000812:	2300      	movs	r3, #0
 8000814:	427f      	negs	r7, r7
 8000816:	4699      	mov	r9, r3
 8000818:	469a      	mov	sl, r3
 800081a:	1a3f      	subs	r7, r7, r0
 800081c:	e777      	b.n	800070e <__aeabi_fdiv+0x32>
 800081e:	4640      	mov	r0, r8
 8000820:	f001 ff32 	bl	8002688 <__clzsi2>
 8000824:	4642      	mov	r2, r8
 8000826:	1f43      	subs	r3, r0, #5
 8000828:	409a      	lsls	r2, r3
 800082a:	2376      	movs	r3, #118	; 0x76
 800082c:	425b      	negs	r3, r3
 800082e:	4690      	mov	r8, r2
 8000830:	1a1b      	subs	r3, r3, r0
 8000832:	2200      	movs	r2, #0
 8000834:	e77d      	b.n	8000732 <__aeabi_fdiv+0x56>
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	2203      	movs	r2, #3
 800083a:	e77a      	b.n	8000732 <__aeabi_fdiv+0x56>
 800083c:	000e      	movs	r6, r1
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	2500      	movs	r5, #0
 8000842:	e7ac      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000844:	2001      	movs	r0, #1
 8000846:	1ac0      	subs	r0, r0, r3
 8000848:	281b      	cmp	r0, #27
 800084a:	dca6      	bgt.n	800079a <__aeabi_fdiv+0xbe>
 800084c:	379e      	adds	r7, #158	; 0x9e
 800084e:	002a      	movs	r2, r5
 8000850:	40bd      	lsls	r5, r7
 8000852:	40c2      	lsrs	r2, r0
 8000854:	1e6b      	subs	r3, r5, #1
 8000856:	419d      	sbcs	r5, r3
 8000858:	4315      	orrs	r5, r2
 800085a:	076b      	lsls	r3, r5, #29
 800085c:	d004      	beq.n	8000868 <__aeabi_fdiv+0x18c>
 800085e:	230f      	movs	r3, #15
 8000860:	402b      	ands	r3, r5
 8000862:	2b04      	cmp	r3, #4
 8000864:	d000      	beq.n	8000868 <__aeabi_fdiv+0x18c>
 8000866:	3504      	adds	r5, #4
 8000868:	016b      	lsls	r3, r5, #5
 800086a:	d544      	bpl.n	80008f6 <__aeabi_fdiv+0x21a>
 800086c:	2001      	movs	r0, #1
 800086e:	2500      	movs	r5, #0
 8000870:	e795      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	2500      	movs	r5, #0
 8000876:	e792      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000878:	2580      	movs	r5, #128	; 0x80
 800087a:	2600      	movs	r6, #0
 800087c:	20ff      	movs	r0, #255	; 0xff
 800087e:	03ed      	lsls	r5, r5, #15
 8000880:	e78d      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000882:	2300      	movs	r3, #0
 8000884:	4698      	mov	r8, r3
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	03c0      	lsls	r0, r0, #15
 800088a:	4205      	tst	r5, r0
 800088c:	d009      	beq.n	80008a2 <__aeabi_fdiv+0x1c6>
 800088e:	4643      	mov	r3, r8
 8000890:	4203      	tst	r3, r0
 8000892:	d106      	bne.n	80008a2 <__aeabi_fdiv+0x1c6>
 8000894:	4645      	mov	r5, r8
 8000896:	4305      	orrs	r5, r0
 8000898:	026d      	lsls	r5, r5, #9
 800089a:	0026      	movs	r6, r4
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	e77d      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4305      	orrs	r5, r0
 80008a8:	026d      	lsls	r5, r5, #9
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	e776      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008b0:	4642      	mov	r2, r8
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	0150      	lsls	r0, r2, #5
 80008b6:	4283      	cmp	r3, r0
 80008b8:	d219      	bcs.n	80008ee <__aeabi_fdiv+0x212>
 80008ba:	221b      	movs	r2, #27
 80008bc:	2500      	movs	r5, #0
 80008be:	3f01      	subs	r7, #1
 80008c0:	2601      	movs	r6, #1
 80008c2:	001c      	movs	r4, r3
 80008c4:	006d      	lsls	r5, r5, #1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	db01      	blt.n	80008d0 <__aeabi_fdiv+0x1f4>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d801      	bhi.n	80008d4 <__aeabi_fdiv+0x1f8>
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	4335      	orrs	r5, r6
 80008d4:	3a01      	subs	r2, #1
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d1f3      	bne.n	80008c2 <__aeabi_fdiv+0x1e6>
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	4193      	sbcs	r3, r2
 80008de:	431d      	orrs	r5, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	337f      	adds	r3, #127	; 0x7f
 80008e4:	000e      	movs	r6, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dd00      	ble.n	80008ec <__aeabi_fdiv+0x210>
 80008ea:	e741      	b.n	8000770 <__aeabi_fdiv+0x94>
 80008ec:	e7aa      	b.n	8000844 <__aeabi_fdiv+0x168>
 80008ee:	221a      	movs	r2, #26
 80008f0:	2501      	movs	r5, #1
 80008f2:	1a1b      	subs	r3, r3, r0
 80008f4:	e7e4      	b.n	80008c0 <__aeabi_fdiv+0x1e4>
 80008f6:	01ad      	lsls	r5, r5, #6
 80008f8:	2000      	movs	r0, #0
 80008fa:	0a6d      	lsrs	r5, r5, #9
 80008fc:	e74f      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	080087c4 	.word	0x080087c4
 8000904:	f7ffffff 	.word	0xf7ffffff
 8000908:	08008804 	.word	0x08008804

0800090c <__aeabi_i2f>:
 800090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090e:	2800      	cmp	r0, #0
 8000910:	d013      	beq.n	800093a <__aeabi_i2f+0x2e>
 8000912:	17c3      	asrs	r3, r0, #31
 8000914:	18c6      	adds	r6, r0, r3
 8000916:	405e      	eors	r6, r3
 8000918:	0fc4      	lsrs	r4, r0, #31
 800091a:	0030      	movs	r0, r6
 800091c:	f001 feb4 	bl	8002688 <__clzsi2>
 8000920:	239e      	movs	r3, #158	; 0x9e
 8000922:	0005      	movs	r5, r0
 8000924:	1a1b      	subs	r3, r3, r0
 8000926:	2b96      	cmp	r3, #150	; 0x96
 8000928:	dc0f      	bgt.n	800094a <__aeabi_i2f+0x3e>
 800092a:	2808      	cmp	r0, #8
 800092c:	dd01      	ble.n	8000932 <__aeabi_i2f+0x26>
 800092e:	3d08      	subs	r5, #8
 8000930:	40ae      	lsls	r6, r5
 8000932:	0276      	lsls	r6, r6, #9
 8000934:	0a76      	lsrs	r6, r6, #9
 8000936:	b2d8      	uxtb	r0, r3
 8000938:	e002      	b.n	8000940 <__aeabi_i2f+0x34>
 800093a:	2400      	movs	r4, #0
 800093c:	2000      	movs	r0, #0
 800093e:	2600      	movs	r6, #0
 8000940:	05c0      	lsls	r0, r0, #23
 8000942:	4330      	orrs	r0, r6
 8000944:	07e4      	lsls	r4, r4, #31
 8000946:	4320      	orrs	r0, r4
 8000948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800094a:	2b99      	cmp	r3, #153	; 0x99
 800094c:	dd0c      	ble.n	8000968 <__aeabi_i2f+0x5c>
 800094e:	2205      	movs	r2, #5
 8000950:	0031      	movs	r1, r6
 8000952:	1a12      	subs	r2, r2, r0
 8000954:	40d1      	lsrs	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	0001      	movs	r1, r0
 800095a:	0030      	movs	r0, r6
 800095c:	311b      	adds	r1, #27
 800095e:	4088      	lsls	r0, r1
 8000960:	1e41      	subs	r1, r0, #1
 8000962:	4188      	sbcs	r0, r1
 8000964:	4302      	orrs	r2, r0
 8000966:	0016      	movs	r6, r2
 8000968:	2d05      	cmp	r5, #5
 800096a:	dc12      	bgt.n	8000992 <__aeabi_i2f+0x86>
 800096c:	0031      	movs	r1, r6
 800096e:	4f0d      	ldr	r7, [pc, #52]	; (80009a4 <__aeabi_i2f+0x98>)
 8000970:	4039      	ands	r1, r7
 8000972:	0772      	lsls	r2, r6, #29
 8000974:	d009      	beq.n	800098a <__aeabi_i2f+0x7e>
 8000976:	200f      	movs	r0, #15
 8000978:	4030      	ands	r0, r6
 800097a:	2804      	cmp	r0, #4
 800097c:	d005      	beq.n	800098a <__aeabi_i2f+0x7e>
 800097e:	3104      	adds	r1, #4
 8000980:	014a      	lsls	r2, r1, #5
 8000982:	d502      	bpl.n	800098a <__aeabi_i2f+0x7e>
 8000984:	239f      	movs	r3, #159	; 0x9f
 8000986:	4039      	ands	r1, r7
 8000988:	1b5b      	subs	r3, r3, r5
 800098a:	0189      	lsls	r1, r1, #6
 800098c:	0a4e      	lsrs	r6, r1, #9
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	e7d6      	b.n	8000940 <__aeabi_i2f+0x34>
 8000992:	1f6a      	subs	r2, r5, #5
 8000994:	4096      	lsls	r6, r2
 8000996:	0031      	movs	r1, r6
 8000998:	4f02      	ldr	r7, [pc, #8]	; (80009a4 <__aeabi_i2f+0x98>)
 800099a:	4039      	ands	r1, r7
 800099c:	0772      	lsls	r2, r6, #29
 800099e:	d0f4      	beq.n	800098a <__aeabi_i2f+0x7e>
 80009a0:	e7e9      	b.n	8000976 <__aeabi_i2f+0x6a>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	fbffffff 	.word	0xfbffffff

080009a8 <__aeabi_ui2f>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	1e05      	subs	r5, r0, #0
 80009ac:	d00e      	beq.n	80009cc <__aeabi_ui2f+0x24>
 80009ae:	f001 fe6b 	bl	8002688 <__clzsi2>
 80009b2:	239e      	movs	r3, #158	; 0x9e
 80009b4:	0004      	movs	r4, r0
 80009b6:	1a1b      	subs	r3, r3, r0
 80009b8:	2b96      	cmp	r3, #150	; 0x96
 80009ba:	dc0c      	bgt.n	80009d6 <__aeabi_ui2f+0x2e>
 80009bc:	2808      	cmp	r0, #8
 80009be:	dd01      	ble.n	80009c4 <__aeabi_ui2f+0x1c>
 80009c0:	3c08      	subs	r4, #8
 80009c2:	40a5      	lsls	r5, r4
 80009c4:	026d      	lsls	r5, r5, #9
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	b2d8      	uxtb	r0, r3
 80009ca:	e001      	b.n	80009d0 <__aeabi_ui2f+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	2500      	movs	r5, #0
 80009d0:	05c0      	lsls	r0, r0, #23
 80009d2:	4328      	orrs	r0, r5
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	2b99      	cmp	r3, #153	; 0x99
 80009d8:	dd09      	ble.n	80009ee <__aeabi_ui2f+0x46>
 80009da:	0002      	movs	r2, r0
 80009dc:	0029      	movs	r1, r5
 80009de:	321b      	adds	r2, #27
 80009e0:	4091      	lsls	r1, r2
 80009e2:	1e4a      	subs	r2, r1, #1
 80009e4:	4191      	sbcs	r1, r2
 80009e6:	2205      	movs	r2, #5
 80009e8:	1a12      	subs	r2, r2, r0
 80009ea:	40d5      	lsrs	r5, r2
 80009ec:	430d      	orrs	r5, r1
 80009ee:	2c05      	cmp	r4, #5
 80009f0:	dc12      	bgt.n	8000a18 <__aeabi_ui2f+0x70>
 80009f2:	0029      	movs	r1, r5
 80009f4:	4e0c      	ldr	r6, [pc, #48]	; (8000a28 <__aeabi_ui2f+0x80>)
 80009f6:	4031      	ands	r1, r6
 80009f8:	076a      	lsls	r2, r5, #29
 80009fa:	d009      	beq.n	8000a10 <__aeabi_ui2f+0x68>
 80009fc:	200f      	movs	r0, #15
 80009fe:	4028      	ands	r0, r5
 8000a00:	2804      	cmp	r0, #4
 8000a02:	d005      	beq.n	8000a10 <__aeabi_ui2f+0x68>
 8000a04:	3104      	adds	r1, #4
 8000a06:	014a      	lsls	r2, r1, #5
 8000a08:	d502      	bpl.n	8000a10 <__aeabi_ui2f+0x68>
 8000a0a:	239f      	movs	r3, #159	; 0x9f
 8000a0c:	4031      	ands	r1, r6
 8000a0e:	1b1b      	subs	r3, r3, r4
 8000a10:	0189      	lsls	r1, r1, #6
 8000a12:	0a4d      	lsrs	r5, r1, #9
 8000a14:	b2d8      	uxtb	r0, r3
 8000a16:	e7db      	b.n	80009d0 <__aeabi_ui2f+0x28>
 8000a18:	1f62      	subs	r2, r4, #5
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	0029      	movs	r1, r5
 8000a1e:	4e02      	ldr	r6, [pc, #8]	; (8000a28 <__aeabi_ui2f+0x80>)
 8000a20:	4031      	ands	r1, r6
 8000a22:	076a      	lsls	r2, r5, #29
 8000a24:	d0f4      	beq.n	8000a10 <__aeabi_ui2f+0x68>
 8000a26:	e7e9      	b.n	80009fc <__aeabi_ui2f+0x54>
 8000a28:	fbffffff 	.word	0xfbffffff

08000a2c <__aeabi_dadd>:
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	464f      	mov	r7, r9
 8000a30:	4646      	mov	r6, r8
 8000a32:	46d6      	mov	lr, sl
 8000a34:	000d      	movs	r5, r1
 8000a36:	0004      	movs	r4, r0
 8000a38:	b5c0      	push	{r6, r7, lr}
 8000a3a:	001f      	movs	r7, r3
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0328      	lsls	r0, r5, #12
 8000a40:	0f62      	lsrs	r2, r4, #29
 8000a42:	0a40      	lsrs	r0, r0, #9
 8000a44:	4310      	orrs	r0, r2
 8000a46:	007a      	lsls	r2, r7, #1
 8000a48:	0d52      	lsrs	r2, r2, #21
 8000a4a:	00e3      	lsls	r3, r4, #3
 8000a4c:	033c      	lsls	r4, r7, #12
 8000a4e:	4691      	mov	r9, r2
 8000a50:	0a64      	lsrs	r4, r4, #9
 8000a52:	0ffa      	lsrs	r2, r7, #31
 8000a54:	0f4f      	lsrs	r7, r1, #29
 8000a56:	006e      	lsls	r6, r5, #1
 8000a58:	4327      	orrs	r7, r4
 8000a5a:	4692      	mov	sl, r2
 8000a5c:	46b8      	mov	r8, r7
 8000a5e:	0d76      	lsrs	r6, r6, #21
 8000a60:	0fed      	lsrs	r5, r5, #31
 8000a62:	00c9      	lsls	r1, r1, #3
 8000a64:	4295      	cmp	r5, r2
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x3e>
 8000a68:	e099      	b.n	8000b9e <__aeabi_dadd+0x172>
 8000a6a:	464c      	mov	r4, r9
 8000a6c:	1b34      	subs	r4, r6, r4
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_dadd+0x4a>
 8000a74:	e07c      	b.n	8000b70 <__aeabi_dadd+0x144>
 8000a76:	464a      	mov	r2, r9
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x52>
 8000a7c:	e0b8      	b.n	8000bf0 <__aeabi_dadd+0x1c4>
 8000a7e:	4ac5      	ldr	r2, [pc, #788]	; (8000d94 <__aeabi_dadd+0x368>)
 8000a80:	4296      	cmp	r6, r2
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x5a>
 8000a84:	e11c      	b.n	8000cc0 <__aeabi_dadd+0x294>
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	003c      	movs	r4, r7
 8000a8a:	0412      	lsls	r2, r2, #16
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	46a0      	mov	r8, r4
 8000a90:	4662      	mov	r2, ip
 8000a92:	2a38      	cmp	r2, #56	; 0x38
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0x6c>
 8000a96:	e161      	b.n	8000d5c <__aeabi_dadd+0x330>
 8000a98:	2a1f      	cmp	r2, #31
 8000a9a:	dd00      	ble.n	8000a9e <__aeabi_dadd+0x72>
 8000a9c:	e1cc      	b.n	8000e38 <__aeabi_dadd+0x40c>
 8000a9e:	4664      	mov	r4, ip
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	1b12      	subs	r2, r2, r4
 8000aa4:	4644      	mov	r4, r8
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	000f      	movs	r7, r1
 8000aaa:	46a1      	mov	r9, r4
 8000aac:	4664      	mov	r4, ip
 8000aae:	4091      	lsls	r1, r2
 8000ab0:	40e7      	lsrs	r7, r4
 8000ab2:	464c      	mov	r4, r9
 8000ab4:	1e4a      	subs	r2, r1, #1
 8000ab6:	4191      	sbcs	r1, r2
 8000ab8:	433c      	orrs	r4, r7
 8000aba:	4642      	mov	r2, r8
 8000abc:	4321      	orrs	r1, r4
 8000abe:	4664      	mov	r4, ip
 8000ac0:	40e2      	lsrs	r2, r4
 8000ac2:	1a80      	subs	r0, r0, r2
 8000ac4:	1a5c      	subs	r4, r3, r1
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	419b      	sbcs	r3, r3
 8000aca:	425f      	negs	r7, r3
 8000acc:	1bc7      	subs	r7, r0, r7
 8000ace:	023b      	lsls	r3, r7, #8
 8000ad0:	d400      	bmi.n	8000ad4 <__aeabi_dadd+0xa8>
 8000ad2:	e0d0      	b.n	8000c76 <__aeabi_dadd+0x24a>
 8000ad4:	027f      	lsls	r7, r7, #9
 8000ad6:	0a7f      	lsrs	r7, r7, #9
 8000ad8:	2f00      	cmp	r7, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0xb2>
 8000adc:	e0ff      	b.n	8000cde <__aeabi_dadd+0x2b2>
 8000ade:	0038      	movs	r0, r7
 8000ae0:	f001 fdd2 	bl	8002688 <__clzsi2>
 8000ae4:	0001      	movs	r1, r0
 8000ae6:	3908      	subs	r1, #8
 8000ae8:	2320      	movs	r3, #32
 8000aea:	0022      	movs	r2, r4
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	408f      	lsls	r7, r1
 8000af0:	40da      	lsrs	r2, r3
 8000af2:	408c      	lsls	r4, r1
 8000af4:	4317      	orrs	r7, r2
 8000af6:	42b1      	cmp	r1, r6
 8000af8:	da00      	bge.n	8000afc <__aeabi_dadd+0xd0>
 8000afa:	e0ff      	b.n	8000cfc <__aeabi_dadd+0x2d0>
 8000afc:	1b89      	subs	r1, r1, r6
 8000afe:	1c4b      	adds	r3, r1, #1
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	dd00      	ble.n	8000b06 <__aeabi_dadd+0xda>
 8000b04:	e0a8      	b.n	8000c58 <__aeabi_dadd+0x22c>
 8000b06:	2220      	movs	r2, #32
 8000b08:	0039      	movs	r1, r7
 8000b0a:	1ad2      	subs	r2, r2, r3
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	4094      	lsls	r4, r2
 8000b10:	4091      	lsls	r1, r2
 8000b12:	40d8      	lsrs	r0, r3
 8000b14:	1e62      	subs	r2, r4, #1
 8000b16:	4194      	sbcs	r4, r2
 8000b18:	40df      	lsrs	r7, r3
 8000b1a:	2600      	movs	r6, #0
 8000b1c:	4301      	orrs	r1, r0
 8000b1e:	430c      	orrs	r4, r1
 8000b20:	0763      	lsls	r3, r4, #29
 8000b22:	d009      	beq.n	8000b38 <__aeabi_dadd+0x10c>
 8000b24:	230f      	movs	r3, #15
 8000b26:	4023      	ands	r3, r4
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d005      	beq.n	8000b38 <__aeabi_dadd+0x10c>
 8000b2c:	1d23      	adds	r3, r4, #4
 8000b2e:	42a3      	cmp	r3, r4
 8000b30:	41a4      	sbcs	r4, r4
 8000b32:	4264      	negs	r4, r4
 8000b34:	193f      	adds	r7, r7, r4
 8000b36:	001c      	movs	r4, r3
 8000b38:	023b      	lsls	r3, r7, #8
 8000b3a:	d400      	bmi.n	8000b3e <__aeabi_dadd+0x112>
 8000b3c:	e09e      	b.n	8000c7c <__aeabi_dadd+0x250>
 8000b3e:	4b95      	ldr	r3, [pc, #596]	; (8000d94 <__aeabi_dadd+0x368>)
 8000b40:	3601      	adds	r6, #1
 8000b42:	429e      	cmp	r6, r3
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x11c>
 8000b46:	e0b7      	b.n	8000cb8 <__aeabi_dadd+0x28c>
 8000b48:	4a93      	ldr	r2, [pc, #588]	; (8000d98 <__aeabi_dadd+0x36c>)
 8000b4a:	08e4      	lsrs	r4, r4, #3
 8000b4c:	4017      	ands	r7, r2
 8000b4e:	077b      	lsls	r3, r7, #29
 8000b50:	0571      	lsls	r1, r6, #21
 8000b52:	027f      	lsls	r7, r7, #9
 8000b54:	4323      	orrs	r3, r4
 8000b56:	0b3f      	lsrs	r7, r7, #12
 8000b58:	0d4a      	lsrs	r2, r1, #21
 8000b5a:	0512      	lsls	r2, r2, #20
 8000b5c:	433a      	orrs	r2, r7
 8000b5e:	07ed      	lsls	r5, r5, #31
 8000b60:	432a      	orrs	r2, r5
 8000b62:	0018      	movs	r0, r3
 8000b64:	0011      	movs	r1, r2
 8000b66:	bce0      	pop	{r5, r6, r7}
 8000b68:	46ba      	mov	sl, r7
 8000b6a:	46b1      	mov	r9, r6
 8000b6c:	46a8      	mov	r8, r5
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	d04b      	beq.n	8000c0c <__aeabi_dadd+0x1e0>
 8000b74:	464c      	mov	r4, r9
 8000b76:	1ba4      	subs	r4, r4, r6
 8000b78:	46a4      	mov	ip, r4
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x154>
 8000b7e:	e123      	b.n	8000dc8 <__aeabi_dadd+0x39c>
 8000b80:	0004      	movs	r4, r0
 8000b82:	431c      	orrs	r4, r3
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x15c>
 8000b86:	e1af      	b.n	8000ee8 <__aeabi_dadd+0x4bc>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	1e54      	subs	r4, r2, #1
 8000b8c:	2a01      	cmp	r2, #1
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x166>
 8000b90:	e215      	b.n	8000fbe <__aeabi_dadd+0x592>
 8000b92:	4d80      	ldr	r5, [pc, #512]	; (8000d94 <__aeabi_dadd+0x368>)
 8000b94:	45ac      	cmp	ip, r5
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x16e>
 8000b98:	e1c8      	b.n	8000f2c <__aeabi_dadd+0x500>
 8000b9a:	46a4      	mov	ip, r4
 8000b9c:	e11b      	b.n	8000dd6 <__aeabi_dadd+0x3aa>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	1ab2      	subs	r2, r6, r2
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	dc00      	bgt.n	8000baa <__aeabi_dadd+0x17e>
 8000ba8:	e0ac      	b.n	8000d04 <__aeabi_dadd+0x2d8>
 8000baa:	464a      	mov	r2, r9
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d043      	beq.n	8000c38 <__aeabi_dadd+0x20c>
 8000bb0:	4a78      	ldr	r2, [pc, #480]	; (8000d94 <__aeabi_dadd+0x368>)
 8000bb2:	4296      	cmp	r6, r2
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x18c>
 8000bb6:	e1af      	b.n	8000f18 <__aeabi_dadd+0x4ec>
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	003c      	movs	r4, r7
 8000bbc:	0412      	lsls	r2, r2, #16
 8000bbe:	4314      	orrs	r4, r2
 8000bc0:	46a0      	mov	r8, r4
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	2a38      	cmp	r2, #56	; 0x38
 8000bc6:	dc67      	bgt.n	8000c98 <__aeabi_dadd+0x26c>
 8000bc8:	2a1f      	cmp	r2, #31
 8000bca:	dc00      	bgt.n	8000bce <__aeabi_dadd+0x1a2>
 8000bcc:	e15f      	b.n	8000e8e <__aeabi_dadd+0x462>
 8000bce:	4647      	mov	r7, r8
 8000bd0:	3a20      	subs	r2, #32
 8000bd2:	40d7      	lsrs	r7, r2
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	2a20      	cmp	r2, #32
 8000bd8:	d005      	beq.n	8000be6 <__aeabi_dadd+0x1ba>
 8000bda:	4664      	mov	r4, ip
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	1b12      	subs	r2, r2, r4
 8000be0:	4644      	mov	r4, r8
 8000be2:	4094      	lsls	r4, r2
 8000be4:	4321      	orrs	r1, r4
 8000be6:	1e4a      	subs	r2, r1, #1
 8000be8:	4191      	sbcs	r1, r2
 8000bea:	000c      	movs	r4, r1
 8000bec:	433c      	orrs	r4, r7
 8000bee:	e057      	b.n	8000ca0 <__aeabi_dadd+0x274>
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dadd+0x1cc>
 8000bf6:	e105      	b.n	8000e04 <__aeabi_dadd+0x3d8>
 8000bf8:	0022      	movs	r2, r4
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	2c01      	cmp	r4, #1
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x1d6>
 8000c00:	e182      	b.n	8000f08 <__aeabi_dadd+0x4dc>
 8000c02:	4c64      	ldr	r4, [pc, #400]	; (8000d94 <__aeabi_dadd+0x368>)
 8000c04:	45a4      	cmp	ip, r4
 8000c06:	d05b      	beq.n	8000cc0 <__aeabi_dadd+0x294>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	e741      	b.n	8000a90 <__aeabi_dadd+0x64>
 8000c0c:	4c63      	ldr	r4, [pc, #396]	; (8000d9c <__aeabi_dadd+0x370>)
 8000c0e:	1c77      	adds	r7, r6, #1
 8000c10:	4227      	tst	r7, r4
 8000c12:	d000      	beq.n	8000c16 <__aeabi_dadd+0x1ea>
 8000c14:	e0c4      	b.n	8000da0 <__aeabi_dadd+0x374>
 8000c16:	0004      	movs	r4, r0
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x1f4>
 8000c1e:	e169      	b.n	8000ef4 <__aeabi_dadd+0x4c8>
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x1fa>
 8000c24:	e1bf      	b.n	8000fa6 <__aeabi_dadd+0x57a>
 8000c26:	4644      	mov	r4, r8
 8000c28:	430c      	orrs	r4, r1
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x202>
 8000c2c:	e1d0      	b.n	8000fd0 <__aeabi_dadd+0x5a4>
 8000c2e:	0742      	lsls	r2, r0, #29
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	e029      	b.n	8000c8c <__aeabi_dadd+0x260>
 8000c38:	003a      	movs	r2, r7
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x214>
 8000c3e:	e170      	b.n	8000f22 <__aeabi_dadd+0x4f6>
 8000c40:	4662      	mov	r2, ip
 8000c42:	4664      	mov	r4, ip
 8000c44:	3a01      	subs	r2, #1
 8000c46:	2c01      	cmp	r4, #1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x220>
 8000c4a:	e0e0      	b.n	8000e0e <__aeabi_dadd+0x3e2>
 8000c4c:	4c51      	ldr	r4, [pc, #324]	; (8000d94 <__aeabi_dadd+0x368>)
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x228>
 8000c52:	e161      	b.n	8000f18 <__aeabi_dadd+0x4ec>
 8000c54:	4694      	mov	ip, r2
 8000c56:	e7b4      	b.n	8000bc2 <__aeabi_dadd+0x196>
 8000c58:	003a      	movs	r2, r7
 8000c5a:	391f      	subs	r1, #31
 8000c5c:	40ca      	lsrs	r2, r1
 8000c5e:	0011      	movs	r1, r2
 8000c60:	2b20      	cmp	r3, #32
 8000c62:	d003      	beq.n	8000c6c <__aeabi_dadd+0x240>
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	409f      	lsls	r7, r3
 8000c6a:	433c      	orrs	r4, r7
 8000c6c:	1e63      	subs	r3, r4, #1
 8000c6e:	419c      	sbcs	r4, r3
 8000c70:	2700      	movs	r7, #0
 8000c72:	2600      	movs	r6, #0
 8000c74:	430c      	orrs	r4, r1
 8000c76:	0763      	lsls	r3, r4, #29
 8000c78:	d000      	beq.n	8000c7c <__aeabi_dadd+0x250>
 8000c7a:	e753      	b.n	8000b24 <__aeabi_dadd+0xf8>
 8000c7c:	46b4      	mov	ip, r6
 8000c7e:	08e4      	lsrs	r4, r4, #3
 8000c80:	077b      	lsls	r3, r7, #29
 8000c82:	4323      	orrs	r3, r4
 8000c84:	08f8      	lsrs	r0, r7, #3
 8000c86:	4a43      	ldr	r2, [pc, #268]	; (8000d94 <__aeabi_dadd+0x368>)
 8000c88:	4594      	cmp	ip, r2
 8000c8a:	d01d      	beq.n	8000cc8 <__aeabi_dadd+0x29c>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	0307      	lsls	r7, r0, #12
 8000c90:	0552      	lsls	r2, r2, #21
 8000c92:	0b3f      	lsrs	r7, r7, #12
 8000c94:	0d52      	lsrs	r2, r2, #21
 8000c96:	e760      	b.n	8000b5a <__aeabi_dadd+0x12e>
 8000c98:	4644      	mov	r4, r8
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	1e62      	subs	r2, r4, #1
 8000c9e:	4194      	sbcs	r4, r2
 8000ca0:	18e4      	adds	r4, r4, r3
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	425f      	negs	r7, r3
 8000ca8:	183f      	adds	r7, r7, r0
 8000caa:	023b      	lsls	r3, r7, #8
 8000cac:	d5e3      	bpl.n	8000c76 <__aeabi_dadd+0x24a>
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <__aeabi_dadd+0x368>)
 8000cb0:	3601      	adds	r6, #1
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x28c>
 8000cb6:	e0b5      	b.n	8000e24 <__aeabi_dadd+0x3f8>
 8000cb8:	0032      	movs	r2, r6
 8000cba:	2700      	movs	r7, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e74c      	b.n	8000b5a <__aeabi_dadd+0x12e>
 8000cc0:	0742      	lsls	r2, r0, #29
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	08c0      	lsrs	r0, r0, #3
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x2a4>
 8000cce:	e1e1      	b.n	8001094 <__aeabi_dadd+0x668>
 8000cd0:	2780      	movs	r7, #128	; 0x80
 8000cd2:	033f      	lsls	r7, r7, #12
 8000cd4:	4307      	orrs	r7, r0
 8000cd6:	033f      	lsls	r7, r7, #12
 8000cd8:	4a2e      	ldr	r2, [pc, #184]	; (8000d94 <__aeabi_dadd+0x368>)
 8000cda:	0b3f      	lsrs	r7, r7, #12
 8000cdc:	e73d      	b.n	8000b5a <__aeabi_dadd+0x12e>
 8000cde:	0020      	movs	r0, r4
 8000ce0:	f001 fcd2 	bl	8002688 <__clzsi2>
 8000ce4:	0001      	movs	r1, r0
 8000ce6:	3118      	adds	r1, #24
 8000ce8:	291f      	cmp	r1, #31
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_dadd+0x2c2>
 8000cec:	e6fc      	b.n	8000ae8 <__aeabi_dadd+0xbc>
 8000cee:	3808      	subs	r0, #8
 8000cf0:	4084      	lsls	r4, r0
 8000cf2:	0027      	movs	r7, r4
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	42b1      	cmp	r1, r6
 8000cf8:	db00      	blt.n	8000cfc <__aeabi_dadd+0x2d0>
 8000cfa:	e6ff      	b.n	8000afc <__aeabi_dadd+0xd0>
 8000cfc:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <__aeabi_dadd+0x36c>)
 8000cfe:	1a76      	subs	r6, r6, r1
 8000d00:	4017      	ands	r7, r2
 8000d02:	e70d      	b.n	8000b20 <__aeabi_dadd+0xf4>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d02f      	beq.n	8000d68 <__aeabi_dadd+0x33c>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	1b92      	subs	r2, r2, r6
 8000d0c:	4694      	mov	ip, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x2e8>
 8000d12:	e0ad      	b.n	8000e70 <__aeabi_dadd+0x444>
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <__aeabi_dadd+0x368>)
 8000d16:	4591      	cmp	r9, r2
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x2f0>
 8000d1a:	e10f      	b.n	8000f3c <__aeabi_dadd+0x510>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0412      	lsls	r2, r2, #16
 8000d20:	4310      	orrs	r0, r2
 8000d22:	4662      	mov	r2, ip
 8000d24:	2a38      	cmp	r2, #56	; 0x38
 8000d26:	dd00      	ble.n	8000d2a <__aeabi_dadd+0x2fe>
 8000d28:	e10f      	b.n	8000f4a <__aeabi_dadd+0x51e>
 8000d2a:	2a1f      	cmp	r2, #31
 8000d2c:	dd00      	ble.n	8000d30 <__aeabi_dadd+0x304>
 8000d2e:	e180      	b.n	8001032 <__aeabi_dadd+0x606>
 8000d30:	4664      	mov	r4, ip
 8000d32:	2220      	movs	r2, #32
 8000d34:	001e      	movs	r6, r3
 8000d36:	1b12      	subs	r2, r2, r4
 8000d38:	4667      	mov	r7, ip
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	4094      	lsls	r4, r2
 8000d40:	40fe      	lsrs	r6, r7
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	4193      	sbcs	r3, r2
 8000d46:	40f8      	lsrs	r0, r7
 8000d48:	4334      	orrs	r4, r6
 8000d4a:	431c      	orrs	r4, r3
 8000d4c:	4480      	add	r8, r0
 8000d4e:	1864      	adds	r4, r4, r1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	41bf      	sbcs	r7, r7
 8000d54:	427f      	negs	r7, r7
 8000d56:	464e      	mov	r6, r9
 8000d58:	4447      	add	r7, r8
 8000d5a:	e7a6      	b.n	8000caa <__aeabi_dadd+0x27e>
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	0011      	movs	r1, r2
 8000d62:	1e4a      	subs	r2, r1, #1
 8000d64:	4191      	sbcs	r1, r2
 8000d66:	e6ad      	b.n	8000ac4 <__aeabi_dadd+0x98>
 8000d68:	4c0c      	ldr	r4, [pc, #48]	; (8000d9c <__aeabi_dadd+0x370>)
 8000d6a:	1c72      	adds	r2, r6, #1
 8000d6c:	4222      	tst	r2, r4
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_dadd+0x346>
 8000d70:	e0a1      	b.n	8000eb6 <__aeabi_dadd+0x48a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	431a      	orrs	r2, r3
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_dadd+0x350>
 8000d7a:	e0fa      	b.n	8000f72 <__aeabi_dadd+0x546>
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x356>
 8000d80:	e145      	b.n	800100e <__aeabi_dadd+0x5e2>
 8000d82:	003a      	movs	r2, r7
 8000d84:	430a      	orrs	r2, r1
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dadd+0x35e>
 8000d88:	e146      	b.n	8001018 <__aeabi_dadd+0x5ec>
 8000d8a:	0742      	lsls	r2, r0, #29
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	08c0      	lsrs	r0, r0, #3
 8000d92:	e77b      	b.n	8000c8c <__aeabi_dadd+0x260>
 8000d94:	000007ff 	.word	0x000007ff
 8000d98:	ff7fffff 	.word	0xff7fffff
 8000d9c:	000007fe 	.word	0x000007fe
 8000da0:	4647      	mov	r7, r8
 8000da2:	1a5c      	subs	r4, r3, r1
 8000da4:	1bc2      	subs	r2, r0, r7
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	41bf      	sbcs	r7, r7
 8000daa:	427f      	negs	r7, r7
 8000dac:	46b9      	mov	r9, r7
 8000dae:	0017      	movs	r7, r2
 8000db0:	464a      	mov	r2, r9
 8000db2:	1abf      	subs	r7, r7, r2
 8000db4:	023a      	lsls	r2, r7, #8
 8000db6:	d500      	bpl.n	8000dba <__aeabi_dadd+0x38e>
 8000db8:	e08d      	b.n	8000ed6 <__aeabi_dadd+0x4aa>
 8000dba:	0023      	movs	r3, r4
 8000dbc:	433b      	orrs	r3, r7
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_dadd+0x396>
 8000dc0:	e68a      	b.n	8000ad8 <__aeabi_dadd+0xac>
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	e761      	b.n	8000c8c <__aeabi_dadd+0x260>
 8000dc8:	4cb4      	ldr	r4, [pc, #720]	; (800109c <__aeabi_dadd+0x670>)
 8000dca:	45a1      	cmp	r9, r4
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dadd+0x3a4>
 8000dce:	e0ad      	b.n	8000f2c <__aeabi_dadd+0x500>
 8000dd0:	2480      	movs	r4, #128	; 0x80
 8000dd2:	0424      	lsls	r4, r4, #16
 8000dd4:	4320      	orrs	r0, r4
 8000dd6:	4664      	mov	r4, ip
 8000dd8:	2c38      	cmp	r4, #56	; 0x38
 8000dda:	dc3d      	bgt.n	8000e58 <__aeabi_dadd+0x42c>
 8000ddc:	4662      	mov	r2, ip
 8000dde:	2c1f      	cmp	r4, #31
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_dadd+0x3b8>
 8000de2:	e0b7      	b.n	8000f54 <__aeabi_dadd+0x528>
 8000de4:	2520      	movs	r5, #32
 8000de6:	001e      	movs	r6, r3
 8000de8:	1b2d      	subs	r5, r5, r4
 8000dea:	0004      	movs	r4, r0
 8000dec:	40ab      	lsls	r3, r5
 8000dee:	40ac      	lsls	r4, r5
 8000df0:	40d6      	lsrs	r6, r2
 8000df2:	40d0      	lsrs	r0, r2
 8000df4:	4642      	mov	r2, r8
 8000df6:	1e5d      	subs	r5, r3, #1
 8000df8:	41ab      	sbcs	r3, r5
 8000dfa:	4334      	orrs	r4, r6
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4323      	orrs	r3, r4
 8000e02:	e02c      	b.n	8000e5e <__aeabi_dadd+0x432>
 8000e04:	0742      	lsls	r2, r0, #29
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	08c0      	lsrs	r0, r0, #3
 8000e0c:	e73b      	b.n	8000c86 <__aeabi_dadd+0x25a>
 8000e0e:	185c      	adds	r4, r3, r1
 8000e10:	429c      	cmp	r4, r3
 8000e12:	419b      	sbcs	r3, r3
 8000e14:	4440      	add	r0, r8
 8000e16:	425b      	negs	r3, r3
 8000e18:	18c7      	adds	r7, r0, r3
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	023b      	lsls	r3, r7, #8
 8000e1e:	d400      	bmi.n	8000e22 <__aeabi_dadd+0x3f6>
 8000e20:	e729      	b.n	8000c76 <__aeabi_dadd+0x24a>
 8000e22:	2602      	movs	r6, #2
 8000e24:	4a9e      	ldr	r2, [pc, #632]	; (80010a0 <__aeabi_dadd+0x674>)
 8000e26:	0863      	lsrs	r3, r4, #1
 8000e28:	4017      	ands	r7, r2
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4014      	ands	r4, r2
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	07fb      	lsls	r3, r7, #31
 8000e32:	431c      	orrs	r4, r3
 8000e34:	087f      	lsrs	r7, r7, #1
 8000e36:	e673      	b.n	8000b20 <__aeabi_dadd+0xf4>
 8000e38:	4644      	mov	r4, r8
 8000e3a:	3a20      	subs	r2, #32
 8000e3c:	40d4      	lsrs	r4, r2
 8000e3e:	4662      	mov	r2, ip
 8000e40:	2a20      	cmp	r2, #32
 8000e42:	d005      	beq.n	8000e50 <__aeabi_dadd+0x424>
 8000e44:	4667      	mov	r7, ip
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	1bd2      	subs	r2, r2, r7
 8000e4a:	4647      	mov	r7, r8
 8000e4c:	4097      	lsls	r7, r2
 8000e4e:	4339      	orrs	r1, r7
 8000e50:	1e4a      	subs	r2, r1, #1
 8000e52:	4191      	sbcs	r1, r2
 8000e54:	4321      	orrs	r1, r4
 8000e56:	e635      	b.n	8000ac4 <__aeabi_dadd+0x98>
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	1e58      	subs	r0, r3, #1
 8000e5c:	4183      	sbcs	r3, r0
 8000e5e:	1acc      	subs	r4, r1, r3
 8000e60:	42a1      	cmp	r1, r4
 8000e62:	41bf      	sbcs	r7, r7
 8000e64:	4643      	mov	r3, r8
 8000e66:	427f      	negs	r7, r7
 8000e68:	4655      	mov	r5, sl
 8000e6a:	464e      	mov	r6, r9
 8000e6c:	1bdf      	subs	r7, r3, r7
 8000e6e:	e62e      	b.n	8000ace <__aeabi_dadd+0xa2>
 8000e70:	0002      	movs	r2, r0
 8000e72:	431a      	orrs	r2, r3
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x44c>
 8000e76:	e0bd      	b.n	8000ff4 <__aeabi_dadd+0x5c8>
 8000e78:	4662      	mov	r2, ip
 8000e7a:	4664      	mov	r4, ip
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	2c01      	cmp	r4, #1
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x458>
 8000e82:	e0e5      	b.n	8001050 <__aeabi_dadd+0x624>
 8000e84:	4c85      	ldr	r4, [pc, #532]	; (800109c <__aeabi_dadd+0x670>)
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d058      	beq.n	8000f3c <__aeabi_dadd+0x510>
 8000e8a:	4694      	mov	ip, r2
 8000e8c:	e749      	b.n	8000d22 <__aeabi_dadd+0x2f6>
 8000e8e:	4664      	mov	r4, ip
 8000e90:	2220      	movs	r2, #32
 8000e92:	1b12      	subs	r2, r2, r4
 8000e94:	4644      	mov	r4, r8
 8000e96:	4094      	lsls	r4, r2
 8000e98:	000f      	movs	r7, r1
 8000e9a:	46a1      	mov	r9, r4
 8000e9c:	4664      	mov	r4, ip
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	40e7      	lsrs	r7, r4
 8000ea2:	464c      	mov	r4, r9
 8000ea4:	1e4a      	subs	r2, r1, #1
 8000ea6:	4191      	sbcs	r1, r2
 8000ea8:	433c      	orrs	r4, r7
 8000eaa:	4642      	mov	r2, r8
 8000eac:	430c      	orrs	r4, r1
 8000eae:	4661      	mov	r1, ip
 8000eb0:	40ca      	lsrs	r2, r1
 8000eb2:	1880      	adds	r0, r0, r2
 8000eb4:	e6f4      	b.n	8000ca0 <__aeabi_dadd+0x274>
 8000eb6:	4c79      	ldr	r4, [pc, #484]	; (800109c <__aeabi_dadd+0x670>)
 8000eb8:	42a2      	cmp	r2, r4
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x492>
 8000ebc:	e6fd      	b.n	8000cba <__aeabi_dadd+0x28e>
 8000ebe:	1859      	adds	r1, r3, r1
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	419b      	sbcs	r3, r3
 8000ec4:	4440      	add	r0, r8
 8000ec6:	425f      	negs	r7, r3
 8000ec8:	19c7      	adds	r7, r0, r7
 8000eca:	07fc      	lsls	r4, r7, #31
 8000ecc:	0849      	lsrs	r1, r1, #1
 8000ece:	0016      	movs	r6, r2
 8000ed0:	430c      	orrs	r4, r1
 8000ed2:	087f      	lsrs	r7, r7, #1
 8000ed4:	e6cf      	b.n	8000c76 <__aeabi_dadd+0x24a>
 8000ed6:	1acc      	subs	r4, r1, r3
 8000ed8:	42a1      	cmp	r1, r4
 8000eda:	41bf      	sbcs	r7, r7
 8000edc:	4643      	mov	r3, r8
 8000ede:	427f      	negs	r7, r7
 8000ee0:	1a18      	subs	r0, r3, r0
 8000ee2:	4655      	mov	r5, sl
 8000ee4:	1bc7      	subs	r7, r0, r7
 8000ee6:	e5f7      	b.n	8000ad8 <__aeabi_dadd+0xac>
 8000ee8:	08c9      	lsrs	r1, r1, #3
 8000eea:	077b      	lsls	r3, r7, #29
 8000eec:	4655      	mov	r5, sl
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	08f8      	lsrs	r0, r7, #3
 8000ef2:	e6c8      	b.n	8000c86 <__aeabi_dadd+0x25a>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dadd+0x4ce>
 8000ef8:	e081      	b.n	8000ffe <__aeabi_dadd+0x5d2>
 8000efa:	4643      	mov	r3, r8
 8000efc:	430b      	orrs	r3, r1
 8000efe:	d115      	bne.n	8000f2c <__aeabi_dadd+0x500>
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	2500      	movs	r5, #0
 8000f04:	0300      	lsls	r0, r0, #12
 8000f06:	e6e3      	b.n	8000cd0 <__aeabi_dadd+0x2a4>
 8000f08:	1a5c      	subs	r4, r3, r1
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	419b      	sbcs	r3, r3
 8000f0e:	1bc7      	subs	r7, r0, r7
 8000f10:	425b      	negs	r3, r3
 8000f12:	2601      	movs	r6, #1
 8000f14:	1aff      	subs	r7, r7, r3
 8000f16:	e5da      	b.n	8000ace <__aeabi_dadd+0xa2>
 8000f18:	0742      	lsls	r2, r0, #29
 8000f1a:	08db      	lsrs	r3, r3, #3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	08c0      	lsrs	r0, r0, #3
 8000f20:	e6d2      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 8000f22:	0742      	lsls	r2, r0, #29
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	08c0      	lsrs	r0, r0, #3
 8000f2a:	e6ac      	b.n	8000c86 <__aeabi_dadd+0x25a>
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	4642      	mov	r2, r8
 8000f30:	08c9      	lsrs	r1, r1, #3
 8000f32:	075b      	lsls	r3, r3, #29
 8000f34:	4655      	mov	r5, sl
 8000f36:	430b      	orrs	r3, r1
 8000f38:	08d0      	lsrs	r0, r2, #3
 8000f3a:	e6c5      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	4642      	mov	r2, r8
 8000f40:	075b      	lsls	r3, r3, #29
 8000f42:	08c9      	lsrs	r1, r1, #3
 8000f44:	430b      	orrs	r3, r1
 8000f46:	08d0      	lsrs	r0, r2, #3
 8000f48:	e6be      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 8000f4a:	4303      	orrs	r3, r0
 8000f4c:	001c      	movs	r4, r3
 8000f4e:	1e63      	subs	r3, r4, #1
 8000f50:	419c      	sbcs	r4, r3
 8000f52:	e6fc      	b.n	8000d4e <__aeabi_dadd+0x322>
 8000f54:	0002      	movs	r2, r0
 8000f56:	3c20      	subs	r4, #32
 8000f58:	40e2      	lsrs	r2, r4
 8000f5a:	0014      	movs	r4, r2
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2a20      	cmp	r2, #32
 8000f60:	d003      	beq.n	8000f6a <__aeabi_dadd+0x53e>
 8000f62:	2540      	movs	r5, #64	; 0x40
 8000f64:	1aad      	subs	r5, r5, r2
 8000f66:	40a8      	lsls	r0, r5
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	1e58      	subs	r0, r3, #1
 8000f6c:	4183      	sbcs	r3, r0
 8000f6e:	4323      	orrs	r3, r4
 8000f70:	e775      	b.n	8000e5e <__aeabi_dadd+0x432>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d0e2      	beq.n	8000f3c <__aeabi_dadd+0x510>
 8000f76:	003a      	movs	r2, r7
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	d0cd      	beq.n	8000f18 <__aeabi_dadd+0x4ec>
 8000f7c:	0742      	lsls	r2, r0, #29
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	08c0      	lsrs	r0, r0, #3
 8000f86:	0312      	lsls	r2, r2, #12
 8000f88:	4210      	tst	r0, r2
 8000f8a:	d006      	beq.n	8000f9a <__aeabi_dadd+0x56e>
 8000f8c:	08fc      	lsrs	r4, r7, #3
 8000f8e:	4214      	tst	r4, r2
 8000f90:	d103      	bne.n	8000f9a <__aeabi_dadd+0x56e>
 8000f92:	0020      	movs	r0, r4
 8000f94:	08cb      	lsrs	r3, r1, #3
 8000f96:	077a      	lsls	r2, r7, #29
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	0f5a      	lsrs	r2, r3, #29
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	0752      	lsls	r2, r2, #29
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	e690      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0x582>
 8000fac:	e709      	b.n	8000dc2 <__aeabi_dadd+0x396>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	4642      	mov	r2, r8
 8000fb2:	08c9      	lsrs	r1, r1, #3
 8000fb4:	075b      	lsls	r3, r3, #29
 8000fb6:	4655      	mov	r5, sl
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	08d0      	lsrs	r0, r2, #3
 8000fbc:	e666      	b.n	8000c8c <__aeabi_dadd+0x260>
 8000fbe:	1acc      	subs	r4, r1, r3
 8000fc0:	42a1      	cmp	r1, r4
 8000fc2:	4189      	sbcs	r1, r1
 8000fc4:	1a3f      	subs	r7, r7, r0
 8000fc6:	4249      	negs	r1, r1
 8000fc8:	4655      	mov	r5, sl
 8000fca:	2601      	movs	r6, #1
 8000fcc:	1a7f      	subs	r7, r7, r1
 8000fce:	e57e      	b.n	8000ace <__aeabi_dadd+0xa2>
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	1a5c      	subs	r4, r3, r1
 8000fd4:	1a87      	subs	r7, r0, r2
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	4192      	sbcs	r2, r2
 8000fda:	4252      	negs	r2, r2
 8000fdc:	1abf      	subs	r7, r7, r2
 8000fde:	023a      	lsls	r2, r7, #8
 8000fe0:	d53d      	bpl.n	800105e <__aeabi_dadd+0x632>
 8000fe2:	1acc      	subs	r4, r1, r3
 8000fe4:	42a1      	cmp	r1, r4
 8000fe6:	4189      	sbcs	r1, r1
 8000fe8:	4643      	mov	r3, r8
 8000fea:	4249      	negs	r1, r1
 8000fec:	1a1f      	subs	r7, r3, r0
 8000fee:	4655      	mov	r5, sl
 8000ff0:	1a7f      	subs	r7, r7, r1
 8000ff2:	e595      	b.n	8000b20 <__aeabi_dadd+0xf4>
 8000ff4:	077b      	lsls	r3, r7, #29
 8000ff6:	08c9      	lsrs	r1, r1, #3
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	08f8      	lsrs	r0, r7, #3
 8000ffc:	e643      	b.n	8000c86 <__aeabi_dadd+0x25a>
 8000ffe:	4644      	mov	r4, r8
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	430c      	orrs	r4, r1
 8001004:	d130      	bne.n	8001068 <__aeabi_dadd+0x63c>
 8001006:	0742      	lsls	r2, r0, #29
 8001008:	4313      	orrs	r3, r2
 800100a:	08c0      	lsrs	r0, r0, #3
 800100c:	e65c      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 800100e:	077b      	lsls	r3, r7, #29
 8001010:	08c9      	lsrs	r1, r1, #3
 8001012:	430b      	orrs	r3, r1
 8001014:	08f8      	lsrs	r0, r7, #3
 8001016:	e639      	b.n	8000c8c <__aeabi_dadd+0x260>
 8001018:	185c      	adds	r4, r3, r1
 800101a:	429c      	cmp	r4, r3
 800101c:	419b      	sbcs	r3, r3
 800101e:	4440      	add	r0, r8
 8001020:	425b      	negs	r3, r3
 8001022:	18c7      	adds	r7, r0, r3
 8001024:	023b      	lsls	r3, r7, #8
 8001026:	d400      	bmi.n	800102a <__aeabi_dadd+0x5fe>
 8001028:	e625      	b.n	8000c76 <__aeabi_dadd+0x24a>
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <__aeabi_dadd+0x674>)
 800102c:	2601      	movs	r6, #1
 800102e:	401f      	ands	r7, r3
 8001030:	e621      	b.n	8000c76 <__aeabi_dadd+0x24a>
 8001032:	0004      	movs	r4, r0
 8001034:	3a20      	subs	r2, #32
 8001036:	40d4      	lsrs	r4, r2
 8001038:	4662      	mov	r2, ip
 800103a:	2a20      	cmp	r2, #32
 800103c:	d004      	beq.n	8001048 <__aeabi_dadd+0x61c>
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	4666      	mov	r6, ip
 8001042:	1b92      	subs	r2, r2, r6
 8001044:	4090      	lsls	r0, r2
 8001046:	4303      	orrs	r3, r0
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	4193      	sbcs	r3, r2
 800104c:	431c      	orrs	r4, r3
 800104e:	e67e      	b.n	8000d4e <__aeabi_dadd+0x322>
 8001050:	185c      	adds	r4, r3, r1
 8001052:	428c      	cmp	r4, r1
 8001054:	4189      	sbcs	r1, r1
 8001056:	4440      	add	r0, r8
 8001058:	4249      	negs	r1, r1
 800105a:	1847      	adds	r7, r0, r1
 800105c:	e6dd      	b.n	8000e1a <__aeabi_dadd+0x3ee>
 800105e:	0023      	movs	r3, r4
 8001060:	433b      	orrs	r3, r7
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x63a>
 8001064:	e6ad      	b.n	8000dc2 <__aeabi_dadd+0x396>
 8001066:	e606      	b.n	8000c76 <__aeabi_dadd+0x24a>
 8001068:	0744      	lsls	r4, r0, #29
 800106a:	4323      	orrs	r3, r4
 800106c:	2480      	movs	r4, #128	; 0x80
 800106e:	08c0      	lsrs	r0, r0, #3
 8001070:	0324      	lsls	r4, r4, #12
 8001072:	4220      	tst	r0, r4
 8001074:	d008      	beq.n	8001088 <__aeabi_dadd+0x65c>
 8001076:	4642      	mov	r2, r8
 8001078:	08d6      	lsrs	r6, r2, #3
 800107a:	4226      	tst	r6, r4
 800107c:	d104      	bne.n	8001088 <__aeabi_dadd+0x65c>
 800107e:	4655      	mov	r5, sl
 8001080:	0030      	movs	r0, r6
 8001082:	08cb      	lsrs	r3, r1, #3
 8001084:	0751      	lsls	r1, r2, #29
 8001086:	430b      	orrs	r3, r1
 8001088:	0f5a      	lsrs	r2, r3, #29
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	0752      	lsls	r2, r2, #29
 8001090:	4313      	orrs	r3, r2
 8001092:	e619      	b.n	8000cc8 <__aeabi_dadd+0x29c>
 8001094:	2300      	movs	r3, #0
 8001096:	4a01      	ldr	r2, [pc, #4]	; (800109c <__aeabi_dadd+0x670>)
 8001098:	001f      	movs	r7, r3
 800109a:	e55e      	b.n	8000b5a <__aeabi_dadd+0x12e>
 800109c:	000007ff 	.word	0x000007ff
 80010a0:	ff7fffff 	.word	0xff7fffff

080010a4 <__aeabi_ddiv>:
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	4657      	mov	r7, sl
 80010a8:	464e      	mov	r6, r9
 80010aa:	4645      	mov	r5, r8
 80010ac:	46de      	mov	lr, fp
 80010ae:	b5e0      	push	{r5, r6, r7, lr}
 80010b0:	4681      	mov	r9, r0
 80010b2:	0005      	movs	r5, r0
 80010b4:	030c      	lsls	r4, r1, #12
 80010b6:	0048      	lsls	r0, r1, #1
 80010b8:	4692      	mov	sl, r2
 80010ba:	001f      	movs	r7, r3
 80010bc:	b085      	sub	sp, #20
 80010be:	0b24      	lsrs	r4, r4, #12
 80010c0:	0d40      	lsrs	r0, r0, #21
 80010c2:	0fce      	lsrs	r6, r1, #31
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_ddiv+0x26>
 80010c8:	e156      	b.n	8001378 <__aeabi_ddiv+0x2d4>
 80010ca:	4bd4      	ldr	r3, [pc, #848]	; (800141c <__aeabi_ddiv+0x378>)
 80010cc:	4298      	cmp	r0, r3
 80010ce:	d100      	bne.n	80010d2 <__aeabi_ddiv+0x2e>
 80010d0:	e172      	b.n	80013b8 <__aeabi_ddiv+0x314>
 80010d2:	0f6b      	lsrs	r3, r5, #29
 80010d4:	00e4      	lsls	r4, r4, #3
 80010d6:	431c      	orrs	r4, r3
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	4323      	orrs	r3, r4
 80010de:	4698      	mov	r8, r3
 80010e0:	4bcf      	ldr	r3, [pc, #828]	; (8001420 <__aeabi_ddiv+0x37c>)
 80010e2:	00ed      	lsls	r5, r5, #3
 80010e4:	469b      	mov	fp, r3
 80010e6:	2300      	movs	r3, #0
 80010e8:	4699      	mov	r9, r3
 80010ea:	4483      	add	fp, r0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	033c      	lsls	r4, r7, #12
 80010f0:	007b      	lsls	r3, r7, #1
 80010f2:	4650      	mov	r0, sl
 80010f4:	0b24      	lsrs	r4, r4, #12
 80010f6:	0d5b      	lsrs	r3, r3, #21
 80010f8:	0fff      	lsrs	r7, r7, #31
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_ddiv+0x5c>
 80010fe:	e11f      	b.n	8001340 <__aeabi_ddiv+0x29c>
 8001100:	4ac6      	ldr	r2, [pc, #792]	; (800141c <__aeabi_ddiv+0x378>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d100      	bne.n	8001108 <__aeabi_ddiv+0x64>
 8001106:	e162      	b.n	80013ce <__aeabi_ddiv+0x32a>
 8001108:	49c5      	ldr	r1, [pc, #788]	; (8001420 <__aeabi_ddiv+0x37c>)
 800110a:	0f42      	lsrs	r2, r0, #29
 800110c:	468c      	mov	ip, r1
 800110e:	00e4      	lsls	r4, r4, #3
 8001110:	4659      	mov	r1, fp
 8001112:	4314      	orrs	r4, r2
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	4463      	add	r3, ip
 8001118:	0412      	lsls	r2, r2, #16
 800111a:	1acb      	subs	r3, r1, r3
 800111c:	4314      	orrs	r4, r2
 800111e:	469b      	mov	fp, r3
 8001120:	00c2      	lsls	r2, r0, #3
 8001122:	2000      	movs	r0, #0
 8001124:	0033      	movs	r3, r6
 8001126:	407b      	eors	r3, r7
 8001128:	469a      	mov	sl, r3
 800112a:	464b      	mov	r3, r9
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d827      	bhi.n	8001180 <__aeabi_ddiv+0xdc>
 8001130:	49bc      	ldr	r1, [pc, #752]	; (8001424 <__aeabi_ddiv+0x380>)
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	58cb      	ldr	r3, [r1, r3]
 8001136:	469f      	mov	pc, r3
 8001138:	46b2      	mov	sl, r6
 800113a:	9b00      	ldr	r3, [sp, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d016      	beq.n	800116e <__aeabi_ddiv+0xca>
 8001140:	2b03      	cmp	r3, #3
 8001142:	d100      	bne.n	8001146 <__aeabi_ddiv+0xa2>
 8001144:	e28e      	b.n	8001664 <__aeabi_ddiv+0x5c0>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d000      	beq.n	800114c <__aeabi_ddiv+0xa8>
 800114a:	e0d9      	b.n	8001300 <__aeabi_ddiv+0x25c>
 800114c:	2300      	movs	r3, #0
 800114e:	2400      	movs	r4, #0
 8001150:	2500      	movs	r5, #0
 8001152:	4652      	mov	r2, sl
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	4323      	orrs	r3, r4
 8001158:	07d2      	lsls	r2, r2, #31
 800115a:	4313      	orrs	r3, r2
 800115c:	0028      	movs	r0, r5
 800115e:	0019      	movs	r1, r3
 8001160:	b005      	add	sp, #20
 8001162:	bcf0      	pop	{r4, r5, r6, r7}
 8001164:	46bb      	mov	fp, r7
 8001166:	46b2      	mov	sl, r6
 8001168:	46a9      	mov	r9, r5
 800116a:	46a0      	mov	r8, r4
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	4baa      	ldr	r3, [pc, #680]	; (800141c <__aeabi_ddiv+0x378>)
 8001174:	e7ed      	b.n	8001152 <__aeabi_ddiv+0xae>
 8001176:	46ba      	mov	sl, r7
 8001178:	46a0      	mov	r8, r4
 800117a:	0015      	movs	r5, r2
 800117c:	9000      	str	r0, [sp, #0]
 800117e:	e7dc      	b.n	800113a <__aeabi_ddiv+0x96>
 8001180:	4544      	cmp	r4, r8
 8001182:	d200      	bcs.n	8001186 <__aeabi_ddiv+0xe2>
 8001184:	e1c7      	b.n	8001516 <__aeabi_ddiv+0x472>
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0xe6>
 8001188:	e1c2      	b.n	8001510 <__aeabi_ddiv+0x46c>
 800118a:	2301      	movs	r3, #1
 800118c:	425b      	negs	r3, r3
 800118e:	469c      	mov	ip, r3
 8001190:	002e      	movs	r6, r5
 8001192:	4640      	mov	r0, r8
 8001194:	2500      	movs	r5, #0
 8001196:	44e3      	add	fp, ip
 8001198:	0223      	lsls	r3, r4, #8
 800119a:	0e14      	lsrs	r4, r2, #24
 800119c:	431c      	orrs	r4, r3
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	4699      	mov	r9, r3
 80011a2:	0423      	lsls	r3, r4, #16
 80011a4:	0c1f      	lsrs	r7, r3, #16
 80011a6:	0212      	lsls	r2, r2, #8
 80011a8:	4649      	mov	r1, r9
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	9701      	str	r7, [sp, #4]
 80011ae:	f7ff f84d 	bl	800024c <__aeabi_uidivmod>
 80011b2:	0002      	movs	r2, r0
 80011b4:	437a      	muls	r2, r7
 80011b6:	040b      	lsls	r3, r1, #16
 80011b8:	0c31      	lsrs	r1, r6, #16
 80011ba:	4680      	mov	r8, r0
 80011bc:	4319      	orrs	r1, r3
 80011be:	428a      	cmp	r2, r1
 80011c0:	d907      	bls.n	80011d2 <__aeabi_ddiv+0x12e>
 80011c2:	2301      	movs	r3, #1
 80011c4:	425b      	negs	r3, r3
 80011c6:	469c      	mov	ip, r3
 80011c8:	1909      	adds	r1, r1, r4
 80011ca:	44e0      	add	r8, ip
 80011cc:	428c      	cmp	r4, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x12e>
 80011d0:	e207      	b.n	80015e2 <__aeabi_ddiv+0x53e>
 80011d2:	1a88      	subs	r0, r1, r2
 80011d4:	4649      	mov	r1, r9
 80011d6:	f7ff f839 	bl	800024c <__aeabi_uidivmod>
 80011da:	0409      	lsls	r1, r1, #16
 80011dc:	468c      	mov	ip, r1
 80011de:	0431      	lsls	r1, r6, #16
 80011e0:	4666      	mov	r6, ip
 80011e2:	9a01      	ldr	r2, [sp, #4]
 80011e4:	0c09      	lsrs	r1, r1, #16
 80011e6:	4342      	muls	r2, r0
 80011e8:	0003      	movs	r3, r0
 80011ea:	4331      	orrs	r1, r6
 80011ec:	428a      	cmp	r2, r1
 80011ee:	d904      	bls.n	80011fa <__aeabi_ddiv+0x156>
 80011f0:	1909      	adds	r1, r1, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d800      	bhi.n	80011fa <__aeabi_ddiv+0x156>
 80011f8:	e1ed      	b.n	80015d6 <__aeabi_ddiv+0x532>
 80011fa:	1a88      	subs	r0, r1, r2
 80011fc:	4642      	mov	r2, r8
 80011fe:	0412      	lsls	r2, r2, #16
 8001200:	431a      	orrs	r2, r3
 8001202:	4690      	mov	r8, r2
 8001204:	4641      	mov	r1, r8
 8001206:	9b00      	ldr	r3, [sp, #0]
 8001208:	040e      	lsls	r6, r1, #16
 800120a:	0c1b      	lsrs	r3, r3, #16
 800120c:	001f      	movs	r7, r3
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	9b00      	ldr	r3, [sp, #0]
 8001212:	0c36      	lsrs	r6, r6, #16
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	0c19      	lsrs	r1, r3, #16
 8001218:	000b      	movs	r3, r1
 800121a:	4373      	muls	r3, r6
 800121c:	0c12      	lsrs	r2, r2, #16
 800121e:	437e      	muls	r6, r7
 8001220:	9103      	str	r1, [sp, #12]
 8001222:	4351      	muls	r1, r2
 8001224:	437a      	muls	r2, r7
 8001226:	0c1f      	lsrs	r7, r3, #16
 8001228:	46bc      	mov	ip, r7
 800122a:	1876      	adds	r6, r6, r1
 800122c:	4466      	add	r6, ip
 800122e:	42b1      	cmp	r1, r6
 8001230:	d903      	bls.n	800123a <__aeabi_ddiv+0x196>
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	0249      	lsls	r1, r1, #9
 8001236:	468c      	mov	ip, r1
 8001238:	4462      	add	r2, ip
 800123a:	0c31      	lsrs	r1, r6, #16
 800123c:	188a      	adds	r2, r1, r2
 800123e:	0431      	lsls	r1, r6, #16
 8001240:	041e      	lsls	r6, r3, #16
 8001242:	0c36      	lsrs	r6, r6, #16
 8001244:	198e      	adds	r6, r1, r6
 8001246:	4290      	cmp	r0, r2
 8001248:	d302      	bcc.n	8001250 <__aeabi_ddiv+0x1ac>
 800124a:	d112      	bne.n	8001272 <__aeabi_ddiv+0x1ce>
 800124c:	42b5      	cmp	r5, r6
 800124e:	d210      	bcs.n	8001272 <__aeabi_ddiv+0x1ce>
 8001250:	4643      	mov	r3, r8
 8001252:	1e59      	subs	r1, r3, #1
 8001254:	9b00      	ldr	r3, [sp, #0]
 8001256:	469c      	mov	ip, r3
 8001258:	4465      	add	r5, ip
 800125a:	001f      	movs	r7, r3
 800125c:	429d      	cmp	r5, r3
 800125e:	419b      	sbcs	r3, r3
 8001260:	425b      	negs	r3, r3
 8001262:	191b      	adds	r3, r3, r4
 8001264:	18c0      	adds	r0, r0, r3
 8001266:	4284      	cmp	r4, r0
 8001268:	d200      	bcs.n	800126c <__aeabi_ddiv+0x1c8>
 800126a:	e1a0      	b.n	80015ae <__aeabi_ddiv+0x50a>
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x1cc>
 800126e:	e19b      	b.n	80015a8 <__aeabi_ddiv+0x504>
 8001270:	4688      	mov	r8, r1
 8001272:	1bae      	subs	r6, r5, r6
 8001274:	42b5      	cmp	r5, r6
 8001276:	41ad      	sbcs	r5, r5
 8001278:	1a80      	subs	r0, r0, r2
 800127a:	426d      	negs	r5, r5
 800127c:	1b40      	subs	r0, r0, r5
 800127e:	4284      	cmp	r4, r0
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x1e0>
 8001282:	e1d5      	b.n	8001630 <__aeabi_ddiv+0x58c>
 8001284:	4649      	mov	r1, r9
 8001286:	f7fe ffe1 	bl	800024c <__aeabi_uidivmod>
 800128a:	9a01      	ldr	r2, [sp, #4]
 800128c:	040b      	lsls	r3, r1, #16
 800128e:	4342      	muls	r2, r0
 8001290:	0c31      	lsrs	r1, r6, #16
 8001292:	0005      	movs	r5, r0
 8001294:	4319      	orrs	r1, r3
 8001296:	428a      	cmp	r2, r1
 8001298:	d900      	bls.n	800129c <__aeabi_ddiv+0x1f8>
 800129a:	e16c      	b.n	8001576 <__aeabi_ddiv+0x4d2>
 800129c:	1a88      	subs	r0, r1, r2
 800129e:	4649      	mov	r1, r9
 80012a0:	f7fe ffd4 	bl	800024c <__aeabi_uidivmod>
 80012a4:	9a01      	ldr	r2, [sp, #4]
 80012a6:	0436      	lsls	r6, r6, #16
 80012a8:	4342      	muls	r2, r0
 80012aa:	0409      	lsls	r1, r1, #16
 80012ac:	0c36      	lsrs	r6, r6, #16
 80012ae:	0003      	movs	r3, r0
 80012b0:	430e      	orrs	r6, r1
 80012b2:	42b2      	cmp	r2, r6
 80012b4:	d900      	bls.n	80012b8 <__aeabi_ddiv+0x214>
 80012b6:	e153      	b.n	8001560 <__aeabi_ddiv+0x4bc>
 80012b8:	9803      	ldr	r0, [sp, #12]
 80012ba:	1ab6      	subs	r6, r6, r2
 80012bc:	0002      	movs	r2, r0
 80012be:	042d      	lsls	r5, r5, #16
 80012c0:	431d      	orrs	r5, r3
 80012c2:	9f02      	ldr	r7, [sp, #8]
 80012c4:	042b      	lsls	r3, r5, #16
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	435a      	muls	r2, r3
 80012ca:	437b      	muls	r3, r7
 80012cc:	469c      	mov	ip, r3
 80012ce:	0c29      	lsrs	r1, r5, #16
 80012d0:	4348      	muls	r0, r1
 80012d2:	0c13      	lsrs	r3, r2, #16
 80012d4:	4484      	add	ip, r0
 80012d6:	4463      	add	r3, ip
 80012d8:	4379      	muls	r1, r7
 80012da:	4298      	cmp	r0, r3
 80012dc:	d903      	bls.n	80012e6 <__aeabi_ddiv+0x242>
 80012de:	2080      	movs	r0, #128	; 0x80
 80012e0:	0240      	lsls	r0, r0, #9
 80012e2:	4684      	mov	ip, r0
 80012e4:	4461      	add	r1, ip
 80012e6:	0c18      	lsrs	r0, r3, #16
 80012e8:	0412      	lsls	r2, r2, #16
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	0c12      	lsrs	r2, r2, #16
 80012ee:	1841      	adds	r1, r0, r1
 80012f0:	189b      	adds	r3, r3, r2
 80012f2:	428e      	cmp	r6, r1
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_ddiv+0x254>
 80012f6:	e0ff      	b.n	80014f8 <__aeabi_ddiv+0x454>
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x258>
 80012fa:	e0fa      	b.n	80014f2 <__aeabi_ddiv+0x44e>
 80012fc:	2301      	movs	r3, #1
 80012fe:	431d      	orrs	r5, r3
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <__aeabi_ddiv+0x384>)
 8001302:	445a      	add	r2, fp
 8001304:	2a00      	cmp	r2, #0
 8001306:	dc00      	bgt.n	800130a <__aeabi_ddiv+0x266>
 8001308:	e0aa      	b.n	8001460 <__aeabi_ddiv+0x3bc>
 800130a:	076b      	lsls	r3, r5, #29
 800130c:	d000      	beq.n	8001310 <__aeabi_ddiv+0x26c>
 800130e:	e13d      	b.n	800158c <__aeabi_ddiv+0x4e8>
 8001310:	08ed      	lsrs	r5, r5, #3
 8001312:	4643      	mov	r3, r8
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	d506      	bpl.n	8001326 <__aeabi_ddiv+0x282>
 8001318:	4642      	mov	r2, r8
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <__aeabi_ddiv+0x388>)
 800131c:	401a      	ands	r2, r3
 800131e:	4690      	mov	r8, r2
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	00d2      	lsls	r2, r2, #3
 8001324:	445a      	add	r2, fp
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <__aeabi_ddiv+0x38c>)
 8001328:	429a      	cmp	r2, r3
 800132a:	dd00      	ble.n	800132e <__aeabi_ddiv+0x28a>
 800132c:	e71f      	b.n	800116e <__aeabi_ddiv+0xca>
 800132e:	4643      	mov	r3, r8
 8001330:	075b      	lsls	r3, r3, #29
 8001332:	431d      	orrs	r5, r3
 8001334:	4643      	mov	r3, r8
 8001336:	0552      	lsls	r2, r2, #21
 8001338:	025c      	lsls	r4, r3, #9
 800133a:	0b24      	lsrs	r4, r4, #12
 800133c:	0d53      	lsrs	r3, r2, #21
 800133e:	e708      	b.n	8001152 <__aeabi_ddiv+0xae>
 8001340:	4652      	mov	r2, sl
 8001342:	4322      	orrs	r2, r4
 8001344:	d100      	bne.n	8001348 <__aeabi_ddiv+0x2a4>
 8001346:	e07b      	b.n	8001440 <__aeabi_ddiv+0x39c>
 8001348:	2c00      	cmp	r4, #0
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x2aa>
 800134c:	e0fa      	b.n	8001544 <__aeabi_ddiv+0x4a0>
 800134e:	0020      	movs	r0, r4
 8001350:	f001 f99a 	bl	8002688 <__clzsi2>
 8001354:	0002      	movs	r2, r0
 8001356:	3a0b      	subs	r2, #11
 8001358:	231d      	movs	r3, #29
 800135a:	0001      	movs	r1, r0
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	4652      	mov	r2, sl
 8001360:	3908      	subs	r1, #8
 8001362:	40da      	lsrs	r2, r3
 8001364:	408c      	lsls	r4, r1
 8001366:	4314      	orrs	r4, r2
 8001368:	4652      	mov	r2, sl
 800136a:	408a      	lsls	r2, r1
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <__aeabi_ddiv+0x390>)
 800136e:	4458      	add	r0, fp
 8001370:	469b      	mov	fp, r3
 8001372:	4483      	add	fp, r0
 8001374:	2000      	movs	r0, #0
 8001376:	e6d5      	b.n	8001124 <__aeabi_ddiv+0x80>
 8001378:	464b      	mov	r3, r9
 800137a:	4323      	orrs	r3, r4
 800137c:	4698      	mov	r8, r3
 800137e:	d044      	beq.n	800140a <__aeabi_ddiv+0x366>
 8001380:	2c00      	cmp	r4, #0
 8001382:	d100      	bne.n	8001386 <__aeabi_ddiv+0x2e2>
 8001384:	e0ce      	b.n	8001524 <__aeabi_ddiv+0x480>
 8001386:	0020      	movs	r0, r4
 8001388:	f001 f97e 	bl	8002688 <__clzsi2>
 800138c:	0001      	movs	r1, r0
 800138e:	0002      	movs	r2, r0
 8001390:	390b      	subs	r1, #11
 8001392:	231d      	movs	r3, #29
 8001394:	1a5b      	subs	r3, r3, r1
 8001396:	4649      	mov	r1, r9
 8001398:	0010      	movs	r0, r2
 800139a:	40d9      	lsrs	r1, r3
 800139c:	3808      	subs	r0, #8
 800139e:	4084      	lsls	r4, r0
 80013a0:	000b      	movs	r3, r1
 80013a2:	464d      	mov	r5, r9
 80013a4:	4323      	orrs	r3, r4
 80013a6:	4698      	mov	r8, r3
 80013a8:	4085      	lsls	r5, r0
 80013aa:	4823      	ldr	r0, [pc, #140]	; (8001438 <__aeabi_ddiv+0x394>)
 80013ac:	1a83      	subs	r3, r0, r2
 80013ae:	469b      	mov	fp, r3
 80013b0:	2300      	movs	r3, #0
 80013b2:	4699      	mov	r9, r3
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	e69a      	b.n	80010ee <__aeabi_ddiv+0x4a>
 80013b8:	464b      	mov	r3, r9
 80013ba:	4323      	orrs	r3, r4
 80013bc:	4698      	mov	r8, r3
 80013be:	d11d      	bne.n	80013fc <__aeabi_ddiv+0x358>
 80013c0:	2308      	movs	r3, #8
 80013c2:	4699      	mov	r9, r3
 80013c4:	3b06      	subs	r3, #6
 80013c6:	2500      	movs	r5, #0
 80013c8:	4683      	mov	fp, r0
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	e68f      	b.n	80010ee <__aeabi_ddiv+0x4a>
 80013ce:	4652      	mov	r2, sl
 80013d0:	4322      	orrs	r2, r4
 80013d2:	d109      	bne.n	80013e8 <__aeabi_ddiv+0x344>
 80013d4:	2302      	movs	r3, #2
 80013d6:	4649      	mov	r1, r9
 80013d8:	4319      	orrs	r1, r3
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <__aeabi_ddiv+0x398>)
 80013dc:	4689      	mov	r9, r1
 80013de:	469c      	mov	ip, r3
 80013e0:	2400      	movs	r4, #0
 80013e2:	2002      	movs	r0, #2
 80013e4:	44e3      	add	fp, ip
 80013e6:	e69d      	b.n	8001124 <__aeabi_ddiv+0x80>
 80013e8:	2303      	movs	r3, #3
 80013ea:	464a      	mov	r2, r9
 80013ec:	431a      	orrs	r2, r3
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <__aeabi_ddiv+0x398>)
 80013f0:	4691      	mov	r9, r2
 80013f2:	469c      	mov	ip, r3
 80013f4:	4652      	mov	r2, sl
 80013f6:	2003      	movs	r0, #3
 80013f8:	44e3      	add	fp, ip
 80013fa:	e693      	b.n	8001124 <__aeabi_ddiv+0x80>
 80013fc:	230c      	movs	r3, #12
 80013fe:	4699      	mov	r9, r3
 8001400:	3b09      	subs	r3, #9
 8001402:	46a0      	mov	r8, r4
 8001404:	4683      	mov	fp, r0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	e671      	b.n	80010ee <__aeabi_ddiv+0x4a>
 800140a:	2304      	movs	r3, #4
 800140c:	4699      	mov	r9, r3
 800140e:	2300      	movs	r3, #0
 8001410:	469b      	mov	fp, r3
 8001412:	3301      	adds	r3, #1
 8001414:	2500      	movs	r5, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	e669      	b.n	80010ee <__aeabi_ddiv+0x4a>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	000007ff 	.word	0x000007ff
 8001420:	fffffc01 	.word	0xfffffc01
 8001424:	08008844 	.word	0x08008844
 8001428:	000003ff 	.word	0x000003ff
 800142c:	feffffff 	.word	0xfeffffff
 8001430:	000007fe 	.word	0x000007fe
 8001434:	000003f3 	.word	0x000003f3
 8001438:	fffffc0d 	.word	0xfffffc0d
 800143c:	fffff801 	.word	0xfffff801
 8001440:	4649      	mov	r1, r9
 8001442:	2301      	movs	r3, #1
 8001444:	4319      	orrs	r1, r3
 8001446:	4689      	mov	r9, r1
 8001448:	2400      	movs	r4, #0
 800144a:	2001      	movs	r0, #1
 800144c:	e66a      	b.n	8001124 <__aeabi_ddiv+0x80>
 800144e:	2300      	movs	r3, #0
 8001450:	2480      	movs	r4, #128	; 0x80
 8001452:	469a      	mov	sl, r3
 8001454:	2500      	movs	r5, #0
 8001456:	4b8a      	ldr	r3, [pc, #552]	; (8001680 <__aeabi_ddiv+0x5dc>)
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	e67a      	b.n	8001152 <__aeabi_ddiv+0xae>
 800145c:	2501      	movs	r5, #1
 800145e:	426d      	negs	r5, r5
 8001460:	2301      	movs	r3, #1
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	2b38      	cmp	r3, #56	; 0x38
 8001466:	dd00      	ble.n	800146a <__aeabi_ddiv+0x3c6>
 8001468:	e670      	b.n	800114c <__aeabi_ddiv+0xa8>
 800146a:	2b1f      	cmp	r3, #31
 800146c:	dc00      	bgt.n	8001470 <__aeabi_ddiv+0x3cc>
 800146e:	e0bf      	b.n	80015f0 <__aeabi_ddiv+0x54c>
 8001470:	211f      	movs	r1, #31
 8001472:	4249      	negs	r1, r1
 8001474:	1a8a      	subs	r2, r1, r2
 8001476:	4641      	mov	r1, r8
 8001478:	40d1      	lsrs	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	2b20      	cmp	r3, #32
 800147e:	d004      	beq.n	800148a <__aeabi_ddiv+0x3e6>
 8001480:	4641      	mov	r1, r8
 8001482:	4b80      	ldr	r3, [pc, #512]	; (8001684 <__aeabi_ddiv+0x5e0>)
 8001484:	445b      	add	r3, fp
 8001486:	4099      	lsls	r1, r3
 8001488:	430d      	orrs	r5, r1
 800148a:	1e6b      	subs	r3, r5, #1
 800148c:	419d      	sbcs	r5, r3
 800148e:	2307      	movs	r3, #7
 8001490:	432a      	orrs	r2, r5
 8001492:	001d      	movs	r5, r3
 8001494:	2400      	movs	r4, #0
 8001496:	4015      	ands	r5, r2
 8001498:	4213      	tst	r3, r2
 800149a:	d100      	bne.n	800149e <__aeabi_ddiv+0x3fa>
 800149c:	e0d4      	b.n	8001648 <__aeabi_ddiv+0x5a4>
 800149e:	210f      	movs	r1, #15
 80014a0:	2300      	movs	r3, #0
 80014a2:	4011      	ands	r1, r2
 80014a4:	2904      	cmp	r1, #4
 80014a6:	d100      	bne.n	80014aa <__aeabi_ddiv+0x406>
 80014a8:	e0cb      	b.n	8001642 <__aeabi_ddiv+0x59e>
 80014aa:	1d11      	adds	r1, r2, #4
 80014ac:	4291      	cmp	r1, r2
 80014ae:	4192      	sbcs	r2, r2
 80014b0:	4252      	negs	r2, r2
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	000a      	movs	r2, r1
 80014b6:	0219      	lsls	r1, r3, #8
 80014b8:	d400      	bmi.n	80014bc <__aeabi_ddiv+0x418>
 80014ba:	e0c2      	b.n	8001642 <__aeabi_ddiv+0x59e>
 80014bc:	2301      	movs	r3, #1
 80014be:	2400      	movs	r4, #0
 80014c0:	2500      	movs	r5, #0
 80014c2:	e646      	b.n	8001152 <__aeabi_ddiv+0xae>
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	4641      	mov	r1, r8
 80014c8:	031b      	lsls	r3, r3, #12
 80014ca:	4219      	tst	r1, r3
 80014cc:	d008      	beq.n	80014e0 <__aeabi_ddiv+0x43c>
 80014ce:	421c      	tst	r4, r3
 80014d0:	d106      	bne.n	80014e0 <__aeabi_ddiv+0x43c>
 80014d2:	431c      	orrs	r4, r3
 80014d4:	0324      	lsls	r4, r4, #12
 80014d6:	46ba      	mov	sl, r7
 80014d8:	0015      	movs	r5, r2
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <__aeabi_ddiv+0x5dc>)
 80014dc:	0b24      	lsrs	r4, r4, #12
 80014de:	e638      	b.n	8001152 <__aeabi_ddiv+0xae>
 80014e0:	2480      	movs	r4, #128	; 0x80
 80014e2:	4643      	mov	r3, r8
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	431c      	orrs	r4, r3
 80014e8:	0324      	lsls	r4, r4, #12
 80014ea:	46b2      	mov	sl, r6
 80014ec:	4b64      	ldr	r3, [pc, #400]	; (8001680 <__aeabi_ddiv+0x5dc>)
 80014ee:	0b24      	lsrs	r4, r4, #12
 80014f0:	e62f      	b.n	8001152 <__aeabi_ddiv+0xae>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_ddiv+0x454>
 80014f6:	e703      	b.n	8001300 <__aeabi_ddiv+0x25c>
 80014f8:	19a6      	adds	r6, r4, r6
 80014fa:	1e68      	subs	r0, r5, #1
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d200      	bcs.n	8001502 <__aeabi_ddiv+0x45e>
 8001500:	e08d      	b.n	800161e <__aeabi_ddiv+0x57a>
 8001502:	428e      	cmp	r6, r1
 8001504:	d200      	bcs.n	8001508 <__aeabi_ddiv+0x464>
 8001506:	e0a3      	b.n	8001650 <__aeabi_ddiv+0x5ac>
 8001508:	d100      	bne.n	800150c <__aeabi_ddiv+0x468>
 800150a:	e0b3      	b.n	8001674 <__aeabi_ddiv+0x5d0>
 800150c:	0005      	movs	r5, r0
 800150e:	e6f5      	b.n	80012fc <__aeabi_ddiv+0x258>
 8001510:	42aa      	cmp	r2, r5
 8001512:	d900      	bls.n	8001516 <__aeabi_ddiv+0x472>
 8001514:	e639      	b.n	800118a <__aeabi_ddiv+0xe6>
 8001516:	4643      	mov	r3, r8
 8001518:	07de      	lsls	r6, r3, #31
 800151a:	0858      	lsrs	r0, r3, #1
 800151c:	086b      	lsrs	r3, r5, #1
 800151e:	431e      	orrs	r6, r3
 8001520:	07ed      	lsls	r5, r5, #31
 8001522:	e639      	b.n	8001198 <__aeabi_ddiv+0xf4>
 8001524:	4648      	mov	r0, r9
 8001526:	f001 f8af 	bl	8002688 <__clzsi2>
 800152a:	0001      	movs	r1, r0
 800152c:	0002      	movs	r2, r0
 800152e:	3115      	adds	r1, #21
 8001530:	3220      	adds	r2, #32
 8001532:	291c      	cmp	r1, #28
 8001534:	dc00      	bgt.n	8001538 <__aeabi_ddiv+0x494>
 8001536:	e72c      	b.n	8001392 <__aeabi_ddiv+0x2ee>
 8001538:	464b      	mov	r3, r9
 800153a:	3808      	subs	r0, #8
 800153c:	4083      	lsls	r3, r0
 800153e:	2500      	movs	r5, #0
 8001540:	4698      	mov	r8, r3
 8001542:	e732      	b.n	80013aa <__aeabi_ddiv+0x306>
 8001544:	f001 f8a0 	bl	8002688 <__clzsi2>
 8001548:	0003      	movs	r3, r0
 800154a:	001a      	movs	r2, r3
 800154c:	3215      	adds	r2, #21
 800154e:	3020      	adds	r0, #32
 8001550:	2a1c      	cmp	r2, #28
 8001552:	dc00      	bgt.n	8001556 <__aeabi_ddiv+0x4b2>
 8001554:	e700      	b.n	8001358 <__aeabi_ddiv+0x2b4>
 8001556:	4654      	mov	r4, sl
 8001558:	3b08      	subs	r3, #8
 800155a:	2200      	movs	r2, #0
 800155c:	409c      	lsls	r4, r3
 800155e:	e705      	b.n	800136c <__aeabi_ddiv+0x2c8>
 8001560:	1936      	adds	r6, r6, r4
 8001562:	3b01      	subs	r3, #1
 8001564:	42b4      	cmp	r4, r6
 8001566:	d900      	bls.n	800156a <__aeabi_ddiv+0x4c6>
 8001568:	e6a6      	b.n	80012b8 <__aeabi_ddiv+0x214>
 800156a:	42b2      	cmp	r2, r6
 800156c:	d800      	bhi.n	8001570 <__aeabi_ddiv+0x4cc>
 800156e:	e6a3      	b.n	80012b8 <__aeabi_ddiv+0x214>
 8001570:	1e83      	subs	r3, r0, #2
 8001572:	1936      	adds	r6, r6, r4
 8001574:	e6a0      	b.n	80012b8 <__aeabi_ddiv+0x214>
 8001576:	1909      	adds	r1, r1, r4
 8001578:	3d01      	subs	r5, #1
 800157a:	428c      	cmp	r4, r1
 800157c:	d900      	bls.n	8001580 <__aeabi_ddiv+0x4dc>
 800157e:	e68d      	b.n	800129c <__aeabi_ddiv+0x1f8>
 8001580:	428a      	cmp	r2, r1
 8001582:	d800      	bhi.n	8001586 <__aeabi_ddiv+0x4e2>
 8001584:	e68a      	b.n	800129c <__aeabi_ddiv+0x1f8>
 8001586:	1e85      	subs	r5, r0, #2
 8001588:	1909      	adds	r1, r1, r4
 800158a:	e687      	b.n	800129c <__aeabi_ddiv+0x1f8>
 800158c:	230f      	movs	r3, #15
 800158e:	402b      	ands	r3, r5
 8001590:	2b04      	cmp	r3, #4
 8001592:	d100      	bne.n	8001596 <__aeabi_ddiv+0x4f2>
 8001594:	e6bc      	b.n	8001310 <__aeabi_ddiv+0x26c>
 8001596:	2305      	movs	r3, #5
 8001598:	425b      	negs	r3, r3
 800159a:	42ab      	cmp	r3, r5
 800159c:	419b      	sbcs	r3, r3
 800159e:	3504      	adds	r5, #4
 80015a0:	425b      	negs	r3, r3
 80015a2:	08ed      	lsrs	r5, r5, #3
 80015a4:	4498      	add	r8, r3
 80015a6:	e6b4      	b.n	8001312 <__aeabi_ddiv+0x26e>
 80015a8:	42af      	cmp	r7, r5
 80015aa:	d900      	bls.n	80015ae <__aeabi_ddiv+0x50a>
 80015ac:	e660      	b.n	8001270 <__aeabi_ddiv+0x1cc>
 80015ae:	4282      	cmp	r2, r0
 80015b0:	d804      	bhi.n	80015bc <__aeabi_ddiv+0x518>
 80015b2:	d000      	beq.n	80015b6 <__aeabi_ddiv+0x512>
 80015b4:	e65c      	b.n	8001270 <__aeabi_ddiv+0x1cc>
 80015b6:	42ae      	cmp	r6, r5
 80015b8:	d800      	bhi.n	80015bc <__aeabi_ddiv+0x518>
 80015ba:	e659      	b.n	8001270 <__aeabi_ddiv+0x1cc>
 80015bc:	2302      	movs	r3, #2
 80015be:	425b      	negs	r3, r3
 80015c0:	469c      	mov	ip, r3
 80015c2:	9b00      	ldr	r3, [sp, #0]
 80015c4:	44e0      	add	r8, ip
 80015c6:	469c      	mov	ip, r3
 80015c8:	4465      	add	r5, ip
 80015ca:	429d      	cmp	r5, r3
 80015cc:	419b      	sbcs	r3, r3
 80015ce:	425b      	negs	r3, r3
 80015d0:	191b      	adds	r3, r3, r4
 80015d2:	18c0      	adds	r0, r0, r3
 80015d4:	e64d      	b.n	8001272 <__aeabi_ddiv+0x1ce>
 80015d6:	428a      	cmp	r2, r1
 80015d8:	d800      	bhi.n	80015dc <__aeabi_ddiv+0x538>
 80015da:	e60e      	b.n	80011fa <__aeabi_ddiv+0x156>
 80015dc:	1e83      	subs	r3, r0, #2
 80015de:	1909      	adds	r1, r1, r4
 80015e0:	e60b      	b.n	80011fa <__aeabi_ddiv+0x156>
 80015e2:	428a      	cmp	r2, r1
 80015e4:	d800      	bhi.n	80015e8 <__aeabi_ddiv+0x544>
 80015e6:	e5f4      	b.n	80011d2 <__aeabi_ddiv+0x12e>
 80015e8:	1e83      	subs	r3, r0, #2
 80015ea:	4698      	mov	r8, r3
 80015ec:	1909      	adds	r1, r1, r4
 80015ee:	e5f0      	b.n	80011d2 <__aeabi_ddiv+0x12e>
 80015f0:	4925      	ldr	r1, [pc, #148]	; (8001688 <__aeabi_ddiv+0x5e4>)
 80015f2:	0028      	movs	r0, r5
 80015f4:	4459      	add	r1, fp
 80015f6:	408d      	lsls	r5, r1
 80015f8:	4642      	mov	r2, r8
 80015fa:	408a      	lsls	r2, r1
 80015fc:	1e69      	subs	r1, r5, #1
 80015fe:	418d      	sbcs	r5, r1
 8001600:	4641      	mov	r1, r8
 8001602:	40d8      	lsrs	r0, r3
 8001604:	40d9      	lsrs	r1, r3
 8001606:	4302      	orrs	r2, r0
 8001608:	432a      	orrs	r2, r5
 800160a:	000b      	movs	r3, r1
 800160c:	0751      	lsls	r1, r2, #29
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x56e>
 8001610:	e751      	b.n	80014b6 <__aeabi_ddiv+0x412>
 8001612:	210f      	movs	r1, #15
 8001614:	4011      	ands	r1, r2
 8001616:	2904      	cmp	r1, #4
 8001618:	d000      	beq.n	800161c <__aeabi_ddiv+0x578>
 800161a:	e746      	b.n	80014aa <__aeabi_ddiv+0x406>
 800161c:	e74b      	b.n	80014b6 <__aeabi_ddiv+0x412>
 800161e:	0005      	movs	r5, r0
 8001620:	428e      	cmp	r6, r1
 8001622:	d000      	beq.n	8001626 <__aeabi_ddiv+0x582>
 8001624:	e66a      	b.n	80012fc <__aeabi_ddiv+0x258>
 8001626:	9a00      	ldr	r2, [sp, #0]
 8001628:	4293      	cmp	r3, r2
 800162a:	d000      	beq.n	800162e <__aeabi_ddiv+0x58a>
 800162c:	e666      	b.n	80012fc <__aeabi_ddiv+0x258>
 800162e:	e667      	b.n	8001300 <__aeabi_ddiv+0x25c>
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <__aeabi_ddiv+0x5e8>)
 8001632:	445a      	add	r2, fp
 8001634:	2a00      	cmp	r2, #0
 8001636:	dc00      	bgt.n	800163a <__aeabi_ddiv+0x596>
 8001638:	e710      	b.n	800145c <__aeabi_ddiv+0x3b8>
 800163a:	2301      	movs	r3, #1
 800163c:	2500      	movs	r5, #0
 800163e:	4498      	add	r8, r3
 8001640:	e667      	b.n	8001312 <__aeabi_ddiv+0x26e>
 8001642:	075d      	lsls	r5, r3, #29
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	0b1c      	lsrs	r4, r3, #12
 8001648:	08d2      	lsrs	r2, r2, #3
 800164a:	2300      	movs	r3, #0
 800164c:	4315      	orrs	r5, r2
 800164e:	e580      	b.n	8001152 <__aeabi_ddiv+0xae>
 8001650:	9800      	ldr	r0, [sp, #0]
 8001652:	3d02      	subs	r5, #2
 8001654:	0042      	lsls	r2, r0, #1
 8001656:	4282      	cmp	r2, r0
 8001658:	41bf      	sbcs	r7, r7
 800165a:	427f      	negs	r7, r7
 800165c:	193c      	adds	r4, r7, r4
 800165e:	1936      	adds	r6, r6, r4
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	e7dd      	b.n	8001620 <__aeabi_ddiv+0x57c>
 8001664:	2480      	movs	r4, #128	; 0x80
 8001666:	4643      	mov	r3, r8
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	431c      	orrs	r4, r3
 800166c:	0324      	lsls	r4, r4, #12
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__aeabi_ddiv+0x5dc>)
 8001670:	0b24      	lsrs	r4, r4, #12
 8001672:	e56e      	b.n	8001152 <__aeabi_ddiv+0xae>
 8001674:	9a00      	ldr	r2, [sp, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3ea      	bcc.n	8001650 <__aeabi_ddiv+0x5ac>
 800167a:	0005      	movs	r5, r0
 800167c:	e7d3      	b.n	8001626 <__aeabi_ddiv+0x582>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	0000043e 	.word	0x0000043e
 8001688:	0000041e 	.word	0x0000041e
 800168c:	000003ff 	.word	0x000003ff

08001690 <__eqdf2>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	464e      	mov	r6, r9
 8001694:	4645      	mov	r5, r8
 8001696:	46de      	mov	lr, fp
 8001698:	4657      	mov	r7, sl
 800169a:	4690      	mov	r8, r2
 800169c:	b5e0      	push	{r5, r6, r7, lr}
 800169e:	0017      	movs	r7, r2
 80016a0:	031a      	lsls	r2, r3, #12
 80016a2:	0b12      	lsrs	r2, r2, #12
 80016a4:	0005      	movs	r5, r0
 80016a6:	4684      	mov	ip, r0
 80016a8:	4819      	ldr	r0, [pc, #100]	; (8001710 <__eqdf2+0x80>)
 80016aa:	030e      	lsls	r6, r1, #12
 80016ac:	004c      	lsls	r4, r1, #1
 80016ae:	4691      	mov	r9, r2
 80016b0:	005a      	lsls	r2, r3, #1
 80016b2:	0fdb      	lsrs	r3, r3, #31
 80016b4:	469b      	mov	fp, r3
 80016b6:	0b36      	lsrs	r6, r6, #12
 80016b8:	0d64      	lsrs	r4, r4, #21
 80016ba:	0fc9      	lsrs	r1, r1, #31
 80016bc:	0d52      	lsrs	r2, r2, #21
 80016be:	4284      	cmp	r4, r0
 80016c0:	d019      	beq.n	80016f6 <__eqdf2+0x66>
 80016c2:	4282      	cmp	r2, r0
 80016c4:	d010      	beq.n	80016e8 <__eqdf2+0x58>
 80016c6:	2001      	movs	r0, #1
 80016c8:	4294      	cmp	r4, r2
 80016ca:	d10e      	bne.n	80016ea <__eqdf2+0x5a>
 80016cc:	454e      	cmp	r6, r9
 80016ce:	d10c      	bne.n	80016ea <__eqdf2+0x5a>
 80016d0:	2001      	movs	r0, #1
 80016d2:	45c4      	cmp	ip, r8
 80016d4:	d109      	bne.n	80016ea <__eqdf2+0x5a>
 80016d6:	4559      	cmp	r1, fp
 80016d8:	d017      	beq.n	800170a <__eqdf2+0x7a>
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d105      	bne.n	80016ea <__eqdf2+0x5a>
 80016de:	0030      	movs	r0, r6
 80016e0:	4328      	orrs	r0, r5
 80016e2:	1e43      	subs	r3, r0, #1
 80016e4:	4198      	sbcs	r0, r3
 80016e6:	e000      	b.n	80016ea <__eqdf2+0x5a>
 80016e8:	2001      	movs	r0, #1
 80016ea:	bcf0      	pop	{r4, r5, r6, r7}
 80016ec:	46bb      	mov	fp, r7
 80016ee:	46b2      	mov	sl, r6
 80016f0:	46a9      	mov	r9, r5
 80016f2:	46a0      	mov	r8, r4
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f6:	0033      	movs	r3, r6
 80016f8:	2001      	movs	r0, #1
 80016fa:	432b      	orrs	r3, r5
 80016fc:	d1f5      	bne.n	80016ea <__eqdf2+0x5a>
 80016fe:	42a2      	cmp	r2, r4
 8001700:	d1f3      	bne.n	80016ea <__eqdf2+0x5a>
 8001702:	464b      	mov	r3, r9
 8001704:	433b      	orrs	r3, r7
 8001706:	d1f0      	bne.n	80016ea <__eqdf2+0x5a>
 8001708:	e7e2      	b.n	80016d0 <__eqdf2+0x40>
 800170a:	2000      	movs	r0, #0
 800170c:	e7ed      	b.n	80016ea <__eqdf2+0x5a>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	000007ff 	.word	0x000007ff

08001714 <__gedf2>:
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	4647      	mov	r7, r8
 8001718:	46ce      	mov	lr, r9
 800171a:	0004      	movs	r4, r0
 800171c:	0018      	movs	r0, r3
 800171e:	0016      	movs	r6, r2
 8001720:	031b      	lsls	r3, r3, #12
 8001722:	0b1b      	lsrs	r3, r3, #12
 8001724:	4d2d      	ldr	r5, [pc, #180]	; (80017dc <__gedf2+0xc8>)
 8001726:	004a      	lsls	r2, r1, #1
 8001728:	4699      	mov	r9, r3
 800172a:	b580      	push	{r7, lr}
 800172c:	0043      	lsls	r3, r0, #1
 800172e:	030f      	lsls	r7, r1, #12
 8001730:	46a4      	mov	ip, r4
 8001732:	46b0      	mov	r8, r6
 8001734:	0b3f      	lsrs	r7, r7, #12
 8001736:	0d52      	lsrs	r2, r2, #21
 8001738:	0fc9      	lsrs	r1, r1, #31
 800173a:	0d5b      	lsrs	r3, r3, #21
 800173c:	0fc0      	lsrs	r0, r0, #31
 800173e:	42aa      	cmp	r2, r5
 8001740:	d021      	beq.n	8001786 <__gedf2+0x72>
 8001742:	42ab      	cmp	r3, r5
 8001744:	d013      	beq.n	800176e <__gedf2+0x5a>
 8001746:	2a00      	cmp	r2, #0
 8001748:	d122      	bne.n	8001790 <__gedf2+0x7c>
 800174a:	433c      	orrs	r4, r7
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <__gedf2+0x42>
 8001750:	464d      	mov	r5, r9
 8001752:	432e      	orrs	r6, r5
 8001754:	d022      	beq.n	800179c <__gedf2+0x88>
 8001756:	2c00      	cmp	r4, #0
 8001758:	d010      	beq.n	800177c <__gedf2+0x68>
 800175a:	4281      	cmp	r1, r0
 800175c:	d022      	beq.n	80017a4 <__gedf2+0x90>
 800175e:	2002      	movs	r0, #2
 8001760:	3901      	subs	r1, #1
 8001762:	4008      	ands	r0, r1
 8001764:	3801      	subs	r0, #1
 8001766:	bcc0      	pop	{r6, r7}
 8001768:	46b9      	mov	r9, r7
 800176a:	46b0      	mov	r8, r6
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	464d      	mov	r5, r9
 8001770:	432e      	orrs	r6, r5
 8001772:	d129      	bne.n	80017c8 <__gedf2+0xb4>
 8001774:	2a00      	cmp	r2, #0
 8001776:	d1f0      	bne.n	800175a <__gedf2+0x46>
 8001778:	433c      	orrs	r4, r7
 800177a:	d1ee      	bne.n	800175a <__gedf2+0x46>
 800177c:	2800      	cmp	r0, #0
 800177e:	d1f2      	bne.n	8001766 <__gedf2+0x52>
 8001780:	2001      	movs	r0, #1
 8001782:	4240      	negs	r0, r0
 8001784:	e7ef      	b.n	8001766 <__gedf2+0x52>
 8001786:	003d      	movs	r5, r7
 8001788:	4325      	orrs	r5, r4
 800178a:	d11d      	bne.n	80017c8 <__gedf2+0xb4>
 800178c:	4293      	cmp	r3, r2
 800178e:	d0ee      	beq.n	800176e <__gedf2+0x5a>
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e2      	bne.n	800175a <__gedf2+0x46>
 8001794:	464c      	mov	r4, r9
 8001796:	4326      	orrs	r6, r4
 8001798:	d1df      	bne.n	800175a <__gedf2+0x46>
 800179a:	e7e0      	b.n	800175e <__gedf2+0x4a>
 800179c:	2000      	movs	r0, #0
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d0e1      	beq.n	8001766 <__gedf2+0x52>
 80017a2:	e7dc      	b.n	800175e <__gedf2+0x4a>
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dc0a      	bgt.n	80017be <__gedf2+0xaa>
 80017a8:	dbe8      	blt.n	800177c <__gedf2+0x68>
 80017aa:	454f      	cmp	r7, r9
 80017ac:	d8d7      	bhi.n	800175e <__gedf2+0x4a>
 80017ae:	d00e      	beq.n	80017ce <__gedf2+0xba>
 80017b0:	2000      	movs	r0, #0
 80017b2:	454f      	cmp	r7, r9
 80017b4:	d2d7      	bcs.n	8001766 <__gedf2+0x52>
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d0e2      	beq.n	8001780 <__gedf2+0x6c>
 80017ba:	0008      	movs	r0, r1
 80017bc:	e7d3      	b.n	8001766 <__gedf2+0x52>
 80017be:	4243      	negs	r3, r0
 80017c0:	4158      	adcs	r0, r3
 80017c2:	0040      	lsls	r0, r0, #1
 80017c4:	3801      	subs	r0, #1
 80017c6:	e7ce      	b.n	8001766 <__gedf2+0x52>
 80017c8:	2002      	movs	r0, #2
 80017ca:	4240      	negs	r0, r0
 80017cc:	e7cb      	b.n	8001766 <__gedf2+0x52>
 80017ce:	45c4      	cmp	ip, r8
 80017d0:	d8c5      	bhi.n	800175e <__gedf2+0x4a>
 80017d2:	2000      	movs	r0, #0
 80017d4:	45c4      	cmp	ip, r8
 80017d6:	d2c6      	bcs.n	8001766 <__gedf2+0x52>
 80017d8:	e7ed      	b.n	80017b6 <__gedf2+0xa2>
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <__ledf2>:
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	4647      	mov	r7, r8
 80017e4:	46ce      	mov	lr, r9
 80017e6:	0004      	movs	r4, r0
 80017e8:	0018      	movs	r0, r3
 80017ea:	0016      	movs	r6, r2
 80017ec:	031b      	lsls	r3, r3, #12
 80017ee:	0b1b      	lsrs	r3, r3, #12
 80017f0:	4d2c      	ldr	r5, [pc, #176]	; (80018a4 <__ledf2+0xc4>)
 80017f2:	004a      	lsls	r2, r1, #1
 80017f4:	4699      	mov	r9, r3
 80017f6:	b580      	push	{r7, lr}
 80017f8:	0043      	lsls	r3, r0, #1
 80017fa:	030f      	lsls	r7, r1, #12
 80017fc:	46a4      	mov	ip, r4
 80017fe:	46b0      	mov	r8, r6
 8001800:	0b3f      	lsrs	r7, r7, #12
 8001802:	0d52      	lsrs	r2, r2, #21
 8001804:	0fc9      	lsrs	r1, r1, #31
 8001806:	0d5b      	lsrs	r3, r3, #21
 8001808:	0fc0      	lsrs	r0, r0, #31
 800180a:	42aa      	cmp	r2, r5
 800180c:	d00d      	beq.n	800182a <__ledf2+0x4a>
 800180e:	42ab      	cmp	r3, r5
 8001810:	d010      	beq.n	8001834 <__ledf2+0x54>
 8001812:	2a00      	cmp	r2, #0
 8001814:	d127      	bne.n	8001866 <__ledf2+0x86>
 8001816:	433c      	orrs	r4, r7
 8001818:	2b00      	cmp	r3, #0
 800181a:	d111      	bne.n	8001840 <__ledf2+0x60>
 800181c:	464d      	mov	r5, r9
 800181e:	432e      	orrs	r6, r5
 8001820:	d10e      	bne.n	8001840 <__ledf2+0x60>
 8001822:	2000      	movs	r0, #0
 8001824:	2c00      	cmp	r4, #0
 8001826:	d015      	beq.n	8001854 <__ledf2+0x74>
 8001828:	e00e      	b.n	8001848 <__ledf2+0x68>
 800182a:	003d      	movs	r5, r7
 800182c:	4325      	orrs	r5, r4
 800182e:	d110      	bne.n	8001852 <__ledf2+0x72>
 8001830:	4293      	cmp	r3, r2
 8001832:	d118      	bne.n	8001866 <__ledf2+0x86>
 8001834:	464d      	mov	r5, r9
 8001836:	432e      	orrs	r6, r5
 8001838:	d10b      	bne.n	8001852 <__ledf2+0x72>
 800183a:	2a00      	cmp	r2, #0
 800183c:	d102      	bne.n	8001844 <__ledf2+0x64>
 800183e:	433c      	orrs	r4, r7
 8001840:	2c00      	cmp	r4, #0
 8001842:	d00b      	beq.n	800185c <__ledf2+0x7c>
 8001844:	4281      	cmp	r1, r0
 8001846:	d014      	beq.n	8001872 <__ledf2+0x92>
 8001848:	2002      	movs	r0, #2
 800184a:	3901      	subs	r1, #1
 800184c:	4008      	ands	r0, r1
 800184e:	3801      	subs	r0, #1
 8001850:	e000      	b.n	8001854 <__ledf2+0x74>
 8001852:	2002      	movs	r0, #2
 8001854:	bcc0      	pop	{r6, r7}
 8001856:	46b9      	mov	r9, r7
 8001858:	46b0      	mov	r8, r6
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185c:	2800      	cmp	r0, #0
 800185e:	d1f9      	bne.n	8001854 <__ledf2+0x74>
 8001860:	2001      	movs	r0, #1
 8001862:	4240      	negs	r0, r0
 8001864:	e7f6      	b.n	8001854 <__ledf2+0x74>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ec      	bne.n	8001844 <__ledf2+0x64>
 800186a:	464c      	mov	r4, r9
 800186c:	4326      	orrs	r6, r4
 800186e:	d1e9      	bne.n	8001844 <__ledf2+0x64>
 8001870:	e7ea      	b.n	8001848 <__ledf2+0x68>
 8001872:	429a      	cmp	r2, r3
 8001874:	dd04      	ble.n	8001880 <__ledf2+0xa0>
 8001876:	4243      	negs	r3, r0
 8001878:	4158      	adcs	r0, r3
 800187a:	0040      	lsls	r0, r0, #1
 800187c:	3801      	subs	r0, #1
 800187e:	e7e9      	b.n	8001854 <__ledf2+0x74>
 8001880:	429a      	cmp	r2, r3
 8001882:	dbeb      	blt.n	800185c <__ledf2+0x7c>
 8001884:	454f      	cmp	r7, r9
 8001886:	d8df      	bhi.n	8001848 <__ledf2+0x68>
 8001888:	d006      	beq.n	8001898 <__ledf2+0xb8>
 800188a:	2000      	movs	r0, #0
 800188c:	454f      	cmp	r7, r9
 800188e:	d2e1      	bcs.n	8001854 <__ledf2+0x74>
 8001890:	2900      	cmp	r1, #0
 8001892:	d0e5      	beq.n	8001860 <__ledf2+0x80>
 8001894:	0008      	movs	r0, r1
 8001896:	e7dd      	b.n	8001854 <__ledf2+0x74>
 8001898:	45c4      	cmp	ip, r8
 800189a:	d8d5      	bhi.n	8001848 <__ledf2+0x68>
 800189c:	2000      	movs	r0, #0
 800189e:	45c4      	cmp	ip, r8
 80018a0:	d2d8      	bcs.n	8001854 <__ledf2+0x74>
 80018a2:	e7f5      	b.n	8001890 <__ledf2+0xb0>
 80018a4:	000007ff 	.word	0x000007ff

080018a8 <__aeabi_dmul>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	4657      	mov	r7, sl
 80018ac:	464e      	mov	r6, r9
 80018ae:	4645      	mov	r5, r8
 80018b0:	46de      	mov	lr, fp
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	4698      	mov	r8, r3
 80018b6:	030c      	lsls	r4, r1, #12
 80018b8:	004b      	lsls	r3, r1, #1
 80018ba:	0006      	movs	r6, r0
 80018bc:	4692      	mov	sl, r2
 80018be:	b087      	sub	sp, #28
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	0d5b      	lsrs	r3, r3, #21
 80018c4:	0fcf      	lsrs	r7, r1, #31
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d100      	bne.n	80018cc <__aeabi_dmul+0x24>
 80018ca:	e15c      	b.n	8001b86 <__aeabi_dmul+0x2de>
 80018cc:	4ad9      	ldr	r2, [pc, #868]	; (8001c34 <__aeabi_dmul+0x38c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dmul+0x2c>
 80018d2:	e175      	b.n	8001bc0 <__aeabi_dmul+0x318>
 80018d4:	0f42      	lsrs	r2, r0, #29
 80018d6:	00e4      	lsls	r4, r4, #3
 80018d8:	4314      	orrs	r4, r2
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0412      	lsls	r2, r2, #16
 80018de:	4314      	orrs	r4, r2
 80018e0:	4ad5      	ldr	r2, [pc, #852]	; (8001c38 <__aeabi_dmul+0x390>)
 80018e2:	00c5      	lsls	r5, r0, #3
 80018e4:	4694      	mov	ip, r2
 80018e6:	4463      	add	r3, ip
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	4699      	mov	r9, r3
 80018ee:	469b      	mov	fp, r3
 80018f0:	4643      	mov	r3, r8
 80018f2:	4642      	mov	r2, r8
 80018f4:	031e      	lsls	r6, r3, #12
 80018f6:	0fd2      	lsrs	r2, r2, #31
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4650      	mov	r0, sl
 80018fc:	4690      	mov	r8, r2
 80018fe:	0b36      	lsrs	r6, r6, #12
 8001900:	0d5b      	lsrs	r3, r3, #21
 8001902:	d100      	bne.n	8001906 <__aeabi_dmul+0x5e>
 8001904:	e120      	b.n	8001b48 <__aeabi_dmul+0x2a0>
 8001906:	4acb      	ldr	r2, [pc, #812]	; (8001c34 <__aeabi_dmul+0x38c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d100      	bne.n	800190e <__aeabi_dmul+0x66>
 800190c:	e162      	b.n	8001bd4 <__aeabi_dmul+0x32c>
 800190e:	49ca      	ldr	r1, [pc, #808]	; (8001c38 <__aeabi_dmul+0x390>)
 8001910:	0f42      	lsrs	r2, r0, #29
 8001912:	468c      	mov	ip, r1
 8001914:	9900      	ldr	r1, [sp, #0]
 8001916:	4463      	add	r3, ip
 8001918:	00f6      	lsls	r6, r6, #3
 800191a:	468c      	mov	ip, r1
 800191c:	4316      	orrs	r6, r2
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	449c      	add	ip, r3
 8001922:	0412      	lsls	r2, r2, #16
 8001924:	4663      	mov	r3, ip
 8001926:	4316      	orrs	r6, r2
 8001928:	00c2      	lsls	r2, r0, #3
 800192a:	2000      	movs	r0, #0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	9900      	ldr	r1, [sp, #0]
 8001930:	4643      	mov	r3, r8
 8001932:	3101      	adds	r1, #1
 8001934:	468c      	mov	ip, r1
 8001936:	4649      	mov	r1, r9
 8001938:	407b      	eors	r3, r7
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	290f      	cmp	r1, #15
 800193e:	d826      	bhi.n	800198e <__aeabi_dmul+0xe6>
 8001940:	4bbe      	ldr	r3, [pc, #760]	; (8001c3c <__aeabi_dmul+0x394>)
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	5859      	ldr	r1, [r3, r1]
 8001946:	468f      	mov	pc, r1
 8001948:	4643      	mov	r3, r8
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	0034      	movs	r4, r6
 800194e:	0015      	movs	r5, r2
 8001950:	4683      	mov	fp, r0
 8001952:	465b      	mov	r3, fp
 8001954:	2b02      	cmp	r3, #2
 8001956:	d016      	beq.n	8001986 <__aeabi_dmul+0xde>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d100      	bne.n	800195e <__aeabi_dmul+0xb6>
 800195c:	e203      	b.n	8001d66 <__aeabi_dmul+0x4be>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d000      	beq.n	8001964 <__aeabi_dmul+0xbc>
 8001962:	e0cd      	b.n	8001b00 <__aeabi_dmul+0x258>
 8001964:	2200      	movs	r2, #0
 8001966:	2400      	movs	r4, #0
 8001968:	2500      	movs	r5, #0
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	0512      	lsls	r2, r2, #20
 800196e:	4322      	orrs	r2, r4
 8001970:	07db      	lsls	r3, r3, #31
 8001972:	431a      	orrs	r2, r3
 8001974:	0028      	movs	r0, r5
 8001976:	0011      	movs	r1, r2
 8001978:	b007      	add	sp, #28
 800197a:	bcf0      	pop	{r4, r5, r6, r7}
 800197c:	46bb      	mov	fp, r7
 800197e:	46b2      	mov	sl, r6
 8001980:	46a9      	mov	r9, r5
 8001982:	46a0      	mov	r8, r4
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	2400      	movs	r4, #0
 8001988:	2500      	movs	r5, #0
 800198a:	4aaa      	ldr	r2, [pc, #680]	; (8001c34 <__aeabi_dmul+0x38c>)
 800198c:	e7ed      	b.n	800196a <__aeabi_dmul+0xc2>
 800198e:	0c28      	lsrs	r0, r5, #16
 8001990:	042d      	lsls	r5, r5, #16
 8001992:	0c2d      	lsrs	r5, r5, #16
 8001994:	002b      	movs	r3, r5
 8001996:	0c11      	lsrs	r1, r2, #16
 8001998:	0412      	lsls	r2, r2, #16
 800199a:	0c12      	lsrs	r2, r2, #16
 800199c:	4353      	muls	r3, r2
 800199e:	4698      	mov	r8, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	002f      	movs	r7, r5
 80019a4:	4343      	muls	r3, r0
 80019a6:	4699      	mov	r9, r3
 80019a8:	434f      	muls	r7, r1
 80019aa:	444f      	add	r7, r9
 80019ac:	46bb      	mov	fp, r7
 80019ae:	4647      	mov	r7, r8
 80019b0:	000b      	movs	r3, r1
 80019b2:	0c3f      	lsrs	r7, r7, #16
 80019b4:	46ba      	mov	sl, r7
 80019b6:	4343      	muls	r3, r0
 80019b8:	44da      	add	sl, fp
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	45d1      	cmp	r9, sl
 80019be:	d904      	bls.n	80019ca <__aeabi_dmul+0x122>
 80019c0:	2780      	movs	r7, #128	; 0x80
 80019c2:	027f      	lsls	r7, r7, #9
 80019c4:	46b9      	mov	r9, r7
 80019c6:	444b      	add	r3, r9
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	4653      	mov	r3, sl
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	469b      	mov	fp, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	041f      	lsls	r7, r3, #16
 80019d4:	4643      	mov	r3, r8
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	4698      	mov	r8, r3
 80019dc:	003b      	movs	r3, r7
 80019de:	4443      	add	r3, r8
 80019e0:	9304      	str	r3, [sp, #16]
 80019e2:	0c33      	lsrs	r3, r6, #16
 80019e4:	0436      	lsls	r6, r6, #16
 80019e6:	0c36      	lsrs	r6, r6, #16
 80019e8:	4698      	mov	r8, r3
 80019ea:	0033      	movs	r3, r6
 80019ec:	4343      	muls	r3, r0
 80019ee:	4699      	mov	r9, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	4343      	muls	r3, r0
 80019f4:	002f      	movs	r7, r5
 80019f6:	469a      	mov	sl, r3
 80019f8:	4643      	mov	r3, r8
 80019fa:	4377      	muls	r7, r6
 80019fc:	435d      	muls	r5, r3
 80019fe:	0c38      	lsrs	r0, r7, #16
 8001a00:	444d      	add	r5, r9
 8001a02:	1945      	adds	r5, r0, r5
 8001a04:	45a9      	cmp	r9, r5
 8001a06:	d903      	bls.n	8001a10 <__aeabi_dmul+0x168>
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	44ca      	add	sl, r9
 8001a10:	043f      	lsls	r7, r7, #16
 8001a12:	0c28      	lsrs	r0, r5, #16
 8001a14:	0c3f      	lsrs	r7, r7, #16
 8001a16:	042d      	lsls	r5, r5, #16
 8001a18:	19ed      	adds	r5, r5, r7
 8001a1a:	0c27      	lsrs	r7, r4, #16
 8001a1c:	0424      	lsls	r4, r4, #16
 8001a1e:	0c24      	lsrs	r4, r4, #16
 8001a20:	0003      	movs	r3, r0
 8001a22:	0020      	movs	r0, r4
 8001a24:	4350      	muls	r0, r2
 8001a26:	437a      	muls	r2, r7
 8001a28:	4691      	mov	r9, r2
 8001a2a:	003a      	movs	r2, r7
 8001a2c:	4453      	add	r3, sl
 8001a2e:	9305      	str	r3, [sp, #20]
 8001a30:	0c03      	lsrs	r3, r0, #16
 8001a32:	469a      	mov	sl, r3
 8001a34:	434a      	muls	r2, r1
 8001a36:	4361      	muls	r1, r4
 8001a38:	4449      	add	r1, r9
 8001a3a:	4451      	add	r1, sl
 8001a3c:	44ab      	add	fp, r5
 8001a3e:	4589      	cmp	r9, r1
 8001a40:	d903      	bls.n	8001a4a <__aeabi_dmul+0x1a2>
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	4699      	mov	r9, r3
 8001a48:	444a      	add	r2, r9
 8001a4a:	0400      	lsls	r0, r0, #16
 8001a4c:	0c0b      	lsrs	r3, r1, #16
 8001a4e:	0c00      	lsrs	r0, r0, #16
 8001a50:	0409      	lsls	r1, r1, #16
 8001a52:	1809      	adds	r1, r1, r0
 8001a54:	0020      	movs	r0, r4
 8001a56:	4699      	mov	r9, r3
 8001a58:	4643      	mov	r3, r8
 8001a5a:	4370      	muls	r0, r6
 8001a5c:	435c      	muls	r4, r3
 8001a5e:	437e      	muls	r6, r7
 8001a60:	435f      	muls	r7, r3
 8001a62:	0c03      	lsrs	r3, r0, #16
 8001a64:	4698      	mov	r8, r3
 8001a66:	19a4      	adds	r4, r4, r6
 8001a68:	4444      	add	r4, r8
 8001a6a:	444a      	add	r2, r9
 8001a6c:	9703      	str	r7, [sp, #12]
 8001a6e:	42a6      	cmp	r6, r4
 8001a70:	d904      	bls.n	8001a7c <__aeabi_dmul+0x1d4>
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	025b      	lsls	r3, r3, #9
 8001a76:	4698      	mov	r8, r3
 8001a78:	4447      	add	r7, r8
 8001a7a:	9703      	str	r7, [sp, #12]
 8001a7c:	0423      	lsls	r3, r4, #16
 8001a7e:	9e02      	ldr	r6, [sp, #8]
 8001a80:	469a      	mov	sl, r3
 8001a82:	9b05      	ldr	r3, [sp, #20]
 8001a84:	445e      	add	r6, fp
 8001a86:	4698      	mov	r8, r3
 8001a88:	42ae      	cmp	r6, r5
 8001a8a:	41ad      	sbcs	r5, r5
 8001a8c:	1876      	adds	r6, r6, r1
 8001a8e:	428e      	cmp	r6, r1
 8001a90:	4189      	sbcs	r1, r1
 8001a92:	0400      	lsls	r0, r0, #16
 8001a94:	0c00      	lsrs	r0, r0, #16
 8001a96:	4450      	add	r0, sl
 8001a98:	4440      	add	r0, r8
 8001a9a:	426d      	negs	r5, r5
 8001a9c:	1947      	adds	r7, r0, r5
 8001a9e:	46b8      	mov	r8, r7
 8001aa0:	4693      	mov	fp, r2
 8001aa2:	4249      	negs	r1, r1
 8001aa4:	4689      	mov	r9, r1
 8001aa6:	44c3      	add	fp, r8
 8001aa8:	44d9      	add	r9, fp
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	4180      	sbcs	r0, r0
 8001aae:	45a8      	cmp	r8, r5
 8001ab0:	41ad      	sbcs	r5, r5
 8001ab2:	4593      	cmp	fp, r2
 8001ab4:	4192      	sbcs	r2, r2
 8001ab6:	4589      	cmp	r9, r1
 8001ab8:	4189      	sbcs	r1, r1
 8001aba:	426d      	negs	r5, r5
 8001abc:	4240      	negs	r0, r0
 8001abe:	4328      	orrs	r0, r5
 8001ac0:	0c24      	lsrs	r4, r4, #16
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	1900      	adds	r0, r0, r4
 8001acc:	1880      	adds	r0, r0, r2
 8001ace:	18c7      	adds	r7, r0, r3
 8001ad0:	464b      	mov	r3, r9
 8001ad2:	0ddc      	lsrs	r4, r3, #23
 8001ad4:	9b04      	ldr	r3, [sp, #16]
 8001ad6:	0275      	lsls	r5, r6, #9
 8001ad8:	431d      	orrs	r5, r3
 8001ada:	1e6a      	subs	r2, r5, #1
 8001adc:	4195      	sbcs	r5, r2
 8001ade:	464b      	mov	r3, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	027f      	lsls	r7, r7, #9
 8001ae4:	4335      	orrs	r5, r6
 8001ae6:	025a      	lsls	r2, r3, #9
 8001ae8:	433c      	orrs	r4, r7
 8001aea:	4315      	orrs	r5, r2
 8001aec:	01fb      	lsls	r3, r7, #7
 8001aee:	d400      	bmi.n	8001af2 <__aeabi_dmul+0x24a>
 8001af0:	e11c      	b.n	8001d2c <__aeabi_dmul+0x484>
 8001af2:	2101      	movs	r1, #1
 8001af4:	086a      	lsrs	r2, r5, #1
 8001af6:	400d      	ands	r5, r1
 8001af8:	4315      	orrs	r5, r2
 8001afa:	07e2      	lsls	r2, r4, #31
 8001afc:	4315      	orrs	r5, r2
 8001afe:	0864      	lsrs	r4, r4, #1
 8001b00:	494f      	ldr	r1, [pc, #316]	; (8001c40 <__aeabi_dmul+0x398>)
 8001b02:	4461      	add	r1, ip
 8001b04:	2900      	cmp	r1, #0
 8001b06:	dc00      	bgt.n	8001b0a <__aeabi_dmul+0x262>
 8001b08:	e0b0      	b.n	8001c6c <__aeabi_dmul+0x3c4>
 8001b0a:	076b      	lsls	r3, r5, #29
 8001b0c:	d009      	beq.n	8001b22 <__aeabi_dmul+0x27a>
 8001b0e:	220f      	movs	r2, #15
 8001b10:	402a      	ands	r2, r5
 8001b12:	2a04      	cmp	r2, #4
 8001b14:	d005      	beq.n	8001b22 <__aeabi_dmul+0x27a>
 8001b16:	1d2a      	adds	r2, r5, #4
 8001b18:	42aa      	cmp	r2, r5
 8001b1a:	41ad      	sbcs	r5, r5
 8001b1c:	426d      	negs	r5, r5
 8001b1e:	1964      	adds	r4, r4, r5
 8001b20:	0015      	movs	r5, r2
 8001b22:	01e3      	lsls	r3, r4, #7
 8001b24:	d504      	bpl.n	8001b30 <__aeabi_dmul+0x288>
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <__aeabi_dmul+0x39c>)
 8001b2a:	00c9      	lsls	r1, r1, #3
 8001b2c:	4014      	ands	r4, r2
 8001b2e:	4461      	add	r1, ip
 8001b30:	4a45      	ldr	r2, [pc, #276]	; (8001c48 <__aeabi_dmul+0x3a0>)
 8001b32:	4291      	cmp	r1, r2
 8001b34:	dd00      	ble.n	8001b38 <__aeabi_dmul+0x290>
 8001b36:	e726      	b.n	8001986 <__aeabi_dmul+0xde>
 8001b38:	0762      	lsls	r2, r4, #29
 8001b3a:	08ed      	lsrs	r5, r5, #3
 8001b3c:	0264      	lsls	r4, r4, #9
 8001b3e:	0549      	lsls	r1, r1, #21
 8001b40:	4315      	orrs	r5, r2
 8001b42:	0b24      	lsrs	r4, r4, #12
 8001b44:	0d4a      	lsrs	r2, r1, #21
 8001b46:	e710      	b.n	800196a <__aeabi_dmul+0xc2>
 8001b48:	4652      	mov	r2, sl
 8001b4a:	4332      	orrs	r2, r6
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dmul+0x2a8>
 8001b4e:	e07f      	b.n	8001c50 <__aeabi_dmul+0x3a8>
 8001b50:	2e00      	cmp	r6, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dmul+0x2ae>
 8001b54:	e0dc      	b.n	8001d10 <__aeabi_dmul+0x468>
 8001b56:	0030      	movs	r0, r6
 8001b58:	f000 fd96 	bl	8002688 <__clzsi2>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	3a0b      	subs	r2, #11
 8001b60:	231d      	movs	r3, #29
 8001b62:	0001      	movs	r1, r0
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	4652      	mov	r2, sl
 8001b68:	3908      	subs	r1, #8
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	408e      	lsls	r6, r1
 8001b6e:	4316      	orrs	r6, r2
 8001b70:	4652      	mov	r2, sl
 8001b72:	408a      	lsls	r2, r1
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	4935      	ldr	r1, [pc, #212]	; (8001c4c <__aeabi_dmul+0x3a4>)
 8001b78:	1a18      	subs	r0, r3, r0
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	468c      	mov	ip, r1
 8001b7e:	4463      	add	r3, ip
 8001b80:	2000      	movs	r0, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	e6d3      	b.n	800192e <__aeabi_dmul+0x86>
 8001b86:	0025      	movs	r5, r4
 8001b88:	4305      	orrs	r5, r0
 8001b8a:	d04a      	beq.n	8001c22 <__aeabi_dmul+0x37a>
 8001b8c:	2c00      	cmp	r4, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dmul+0x2ea>
 8001b90:	e0b0      	b.n	8001cf4 <__aeabi_dmul+0x44c>
 8001b92:	0020      	movs	r0, r4
 8001b94:	f000 fd78 	bl	8002688 <__clzsi2>
 8001b98:	0001      	movs	r1, r0
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	390b      	subs	r1, #11
 8001b9e:	231d      	movs	r3, #29
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	1a5b      	subs	r3, r3, r1
 8001ba4:	0031      	movs	r1, r6
 8001ba6:	0035      	movs	r5, r6
 8001ba8:	3808      	subs	r0, #8
 8001baa:	4084      	lsls	r4, r0
 8001bac:	40d9      	lsrs	r1, r3
 8001bae:	4085      	lsls	r5, r0
 8001bb0:	430c      	orrs	r4, r1
 8001bb2:	4826      	ldr	r0, [pc, #152]	; (8001c4c <__aeabi_dmul+0x3a4>)
 8001bb4:	1a83      	subs	r3, r0, r2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	4699      	mov	r9, r3
 8001bbc:	469b      	mov	fp, r3
 8001bbe:	e697      	b.n	80018f0 <__aeabi_dmul+0x48>
 8001bc0:	0005      	movs	r5, r0
 8001bc2:	4325      	orrs	r5, r4
 8001bc4:	d126      	bne.n	8001c14 <__aeabi_dmul+0x36c>
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	2400      	movs	r4, #0
 8001bce:	4691      	mov	r9, r2
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	e68d      	b.n	80018f0 <__aeabi_dmul+0x48>
 8001bd4:	4652      	mov	r2, sl
 8001bd6:	9b00      	ldr	r3, [sp, #0]
 8001bd8:	4332      	orrs	r2, r6
 8001bda:	d110      	bne.n	8001bfe <__aeabi_dmul+0x356>
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <__aeabi_dmul+0x38c>)
 8001bde:	2600      	movs	r6, #0
 8001be0:	468c      	mov	ip, r1
 8001be2:	4463      	add	r3, ip
 8001be4:	4649      	mov	r1, r9
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2302      	movs	r3, #2
 8001bea:	4319      	orrs	r1, r3
 8001bec:	4689      	mov	r9, r1
 8001bee:	2002      	movs	r0, #2
 8001bf0:	e69d      	b.n	800192e <__aeabi_dmul+0x86>
 8001bf2:	465b      	mov	r3, fp
 8001bf4:	9701      	str	r7, [sp, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dmul+0x354>
 8001bfa:	e6ad      	b.n	8001958 <__aeabi_dmul+0xb0>
 8001bfc:	e6c3      	b.n	8001986 <__aeabi_dmul+0xde>
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <__aeabi_dmul+0x38c>)
 8001c00:	2003      	movs	r0, #3
 8001c02:	4694      	mov	ip, r2
 8001c04:	4463      	add	r3, ip
 8001c06:	464a      	mov	r2, r9
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	4691      	mov	r9, r2
 8001c10:	4652      	mov	r2, sl
 8001c12:	e68c      	b.n	800192e <__aeabi_dmul+0x86>
 8001c14:	220c      	movs	r2, #12
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2303      	movs	r3, #3
 8001c1a:	0005      	movs	r5, r0
 8001c1c:	4691      	mov	r9, r2
 8001c1e:	469b      	mov	fp, r3
 8001c20:	e666      	b.n	80018f0 <__aeabi_dmul+0x48>
 8001c22:	2304      	movs	r3, #4
 8001c24:	4699      	mov	r9, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	469b      	mov	fp, r3
 8001c30:	e65e      	b.n	80018f0 <__aeabi_dmul+0x48>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	fffffc01 	.word	0xfffffc01
 8001c3c:	08008884 	.word	0x08008884
 8001c40:	000003ff 	.word	0x000003ff
 8001c44:	feffffff 	.word	0xfeffffff
 8001c48:	000007fe 	.word	0x000007fe
 8001c4c:	fffffc0d 	.word	0xfffffc0d
 8001c50:	4649      	mov	r1, r9
 8001c52:	2301      	movs	r3, #1
 8001c54:	4319      	orrs	r1, r3
 8001c56:	4689      	mov	r9, r1
 8001c58:	2600      	movs	r6, #0
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e667      	b.n	800192e <__aeabi_dmul+0x86>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2480      	movs	r4, #128	; 0x80
 8001c62:	2500      	movs	r5, #0
 8001c64:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <__aeabi_dmul+0x4cc>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	0324      	lsls	r4, r4, #12
 8001c6a:	e67e      	b.n	800196a <__aeabi_dmul+0xc2>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	1a40      	subs	r0, r0, r1
 8001c70:	2838      	cmp	r0, #56	; 0x38
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dmul+0x3ce>
 8001c74:	e676      	b.n	8001964 <__aeabi_dmul+0xbc>
 8001c76:	281f      	cmp	r0, #31
 8001c78:	dd5b      	ble.n	8001d32 <__aeabi_dmul+0x48a>
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	4252      	negs	r2, r2
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	40cb      	lsrs	r3, r1
 8001c84:	0019      	movs	r1, r3
 8001c86:	2820      	cmp	r0, #32
 8001c88:	d003      	beq.n	8001c92 <__aeabi_dmul+0x3ea>
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <__aeabi_dmul+0x4d0>)
 8001c8c:	4462      	add	r2, ip
 8001c8e:	4094      	lsls	r4, r2
 8001c90:	4325      	orrs	r5, r4
 8001c92:	1e6a      	subs	r2, r5, #1
 8001c94:	4195      	sbcs	r5, r2
 8001c96:	002a      	movs	r2, r5
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	000d      	movs	r5, r1
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	4015      	ands	r5, r2
 8001ca2:	4211      	tst	r1, r2
 8001ca4:	d05b      	beq.n	8001d5e <__aeabi_dmul+0x4b6>
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	2400      	movs	r4, #0
 8001caa:	4011      	ands	r1, r2
 8001cac:	2904      	cmp	r1, #4
 8001cae:	d053      	beq.n	8001d58 <__aeabi_dmul+0x4b0>
 8001cb0:	1d11      	adds	r1, r2, #4
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	4192      	sbcs	r2, r2
 8001cb6:	4252      	negs	r2, r2
 8001cb8:	18a4      	adds	r4, r4, r2
 8001cba:	000a      	movs	r2, r1
 8001cbc:	0223      	lsls	r3, r4, #8
 8001cbe:	d54b      	bpl.n	8001d58 <__aeabi_dmul+0x4b0>
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	e650      	b.n	800196a <__aeabi_dmul+0xc2>
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	421c      	tst	r4, r3
 8001cce:	d009      	beq.n	8001ce4 <__aeabi_dmul+0x43c>
 8001cd0:	421e      	tst	r6, r3
 8001cd2:	d107      	bne.n	8001ce4 <__aeabi_dmul+0x43c>
 8001cd4:	4333      	orrs	r3, r6
 8001cd6:	031c      	lsls	r4, r3, #12
 8001cd8:	4643      	mov	r3, r8
 8001cda:	0015      	movs	r5, r2
 8001cdc:	0b24      	lsrs	r4, r4, #12
 8001cde:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <__aeabi_dmul+0x4cc>)
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	e642      	b.n	800196a <__aeabi_dmul+0xc2>
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	0312      	lsls	r2, r2, #12
 8001ce8:	4314      	orrs	r4, r2
 8001cea:	0324      	lsls	r4, r4, #12
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <__aeabi_dmul+0x4cc>)
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	9701      	str	r7, [sp, #4]
 8001cf2:	e63a      	b.n	800196a <__aeabi_dmul+0xc2>
 8001cf4:	f000 fcc8 	bl	8002688 <__clzsi2>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	3115      	adds	r1, #21
 8001cfe:	3220      	adds	r2, #32
 8001d00:	291c      	cmp	r1, #28
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dmul+0x45e>
 8001d04:	e74b      	b.n	8001b9e <__aeabi_dmul+0x2f6>
 8001d06:	0034      	movs	r4, r6
 8001d08:	3808      	subs	r0, #8
 8001d0a:	2500      	movs	r5, #0
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	e750      	b.n	8001bb2 <__aeabi_dmul+0x30a>
 8001d10:	f000 fcba 	bl	8002688 <__clzsi2>
 8001d14:	0003      	movs	r3, r0
 8001d16:	001a      	movs	r2, r3
 8001d18:	3215      	adds	r2, #21
 8001d1a:	3020      	adds	r0, #32
 8001d1c:	2a1c      	cmp	r2, #28
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dmul+0x47a>
 8001d20:	e71e      	b.n	8001b60 <__aeabi_dmul+0x2b8>
 8001d22:	4656      	mov	r6, sl
 8001d24:	3b08      	subs	r3, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	409e      	lsls	r6, r3
 8001d2a:	e723      	b.n	8001b74 <__aeabi_dmul+0x2cc>
 8001d2c:	9b00      	ldr	r3, [sp, #0]
 8001d2e:	469c      	mov	ip, r3
 8001d30:	e6e6      	b.n	8001b00 <__aeabi_dmul+0x258>
 8001d32:	4912      	ldr	r1, [pc, #72]	; (8001d7c <__aeabi_dmul+0x4d4>)
 8001d34:	0022      	movs	r2, r4
 8001d36:	4461      	add	r1, ip
 8001d38:	002e      	movs	r6, r5
 8001d3a:	408d      	lsls	r5, r1
 8001d3c:	408a      	lsls	r2, r1
 8001d3e:	40c6      	lsrs	r6, r0
 8001d40:	1e69      	subs	r1, r5, #1
 8001d42:	418d      	sbcs	r5, r1
 8001d44:	4332      	orrs	r2, r6
 8001d46:	432a      	orrs	r2, r5
 8001d48:	40c4      	lsrs	r4, r0
 8001d4a:	0753      	lsls	r3, r2, #29
 8001d4c:	d0b6      	beq.n	8001cbc <__aeabi_dmul+0x414>
 8001d4e:	210f      	movs	r1, #15
 8001d50:	4011      	ands	r1, r2
 8001d52:	2904      	cmp	r1, #4
 8001d54:	d1ac      	bne.n	8001cb0 <__aeabi_dmul+0x408>
 8001d56:	e7b1      	b.n	8001cbc <__aeabi_dmul+0x414>
 8001d58:	0765      	lsls	r5, r4, #29
 8001d5a:	0264      	lsls	r4, r4, #9
 8001d5c:	0b24      	lsrs	r4, r4, #12
 8001d5e:	08d2      	lsrs	r2, r2, #3
 8001d60:	4315      	orrs	r5, r2
 8001d62:	2200      	movs	r2, #0
 8001d64:	e601      	b.n	800196a <__aeabi_dmul+0xc2>
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0312      	lsls	r2, r2, #12
 8001d6a:	4314      	orrs	r4, r2
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	4a01      	ldr	r2, [pc, #4]	; (8001d74 <__aeabi_dmul+0x4cc>)
 8001d70:	0b24      	lsrs	r4, r4, #12
 8001d72:	e5fa      	b.n	800196a <__aeabi_dmul+0xc2>
 8001d74:	000007ff 	.word	0x000007ff
 8001d78:	0000043e 	.word	0x0000043e
 8001d7c:	0000041e 	.word	0x0000041e

08001d80 <__aeabi_dsub>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	4657      	mov	r7, sl
 8001d84:	464e      	mov	r6, r9
 8001d86:	4645      	mov	r5, r8
 8001d88:	46de      	mov	lr, fp
 8001d8a:	b5e0      	push	{r5, r6, r7, lr}
 8001d8c:	001e      	movs	r6, r3
 8001d8e:	0017      	movs	r7, r2
 8001d90:	004a      	lsls	r2, r1, #1
 8001d92:	030b      	lsls	r3, r1, #12
 8001d94:	0d52      	lsrs	r2, r2, #21
 8001d96:	0a5b      	lsrs	r3, r3, #9
 8001d98:	4690      	mov	r8, r2
 8001d9a:	0f42      	lsrs	r2, r0, #29
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	0fcd      	lsrs	r5, r1, #31
 8001da0:	4ccd      	ldr	r4, [pc, #820]	; (80020d8 <__aeabi_dsub+0x358>)
 8001da2:	0331      	lsls	r1, r6, #12
 8001da4:	00c3      	lsls	r3, r0, #3
 8001da6:	4694      	mov	ip, r2
 8001da8:	0070      	lsls	r0, r6, #1
 8001daa:	0f7a      	lsrs	r2, r7, #29
 8001dac:	0a49      	lsrs	r1, r1, #9
 8001dae:	00ff      	lsls	r7, r7, #3
 8001db0:	469a      	mov	sl, r3
 8001db2:	46b9      	mov	r9, r7
 8001db4:	0d40      	lsrs	r0, r0, #21
 8001db6:	0ff6      	lsrs	r6, r6, #31
 8001db8:	4311      	orrs	r1, r2
 8001dba:	42a0      	cmp	r0, r4
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x40>
 8001dbe:	e0b1      	b.n	8001f24 <__aeabi_dsub+0x1a4>
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4056      	eors	r6, r2
 8001dc4:	46b3      	mov	fp, r6
 8001dc6:	42b5      	cmp	r5, r6
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x4c>
 8001dca:	e088      	b.n	8001ede <__aeabi_dsub+0x15e>
 8001dcc:	4642      	mov	r2, r8
 8001dce:	1a12      	subs	r2, r2, r0
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	dc00      	bgt.n	8001dd6 <__aeabi_dsub+0x56>
 8001dd4:	e0ae      	b.n	8001f34 <__aeabi_dsub+0x1b4>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x5c>
 8001dda:	e0c1      	b.n	8001f60 <__aeabi_dsub+0x1e0>
 8001ddc:	48be      	ldr	r0, [pc, #760]	; (80020d8 <__aeabi_dsub+0x358>)
 8001dde:	4580      	cmp	r8, r0
 8001de0:	d100      	bne.n	8001de4 <__aeabi_dsub+0x64>
 8001de2:	e151      	b.n	8002088 <__aeabi_dsub+0x308>
 8001de4:	2080      	movs	r0, #128	; 0x80
 8001de6:	0400      	lsls	r0, r0, #16
 8001de8:	4301      	orrs	r1, r0
 8001dea:	2a38      	cmp	r2, #56	; 0x38
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x70>
 8001dee:	e17b      	b.n	80020e8 <__aeabi_dsub+0x368>
 8001df0:	2a1f      	cmp	r2, #31
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dsub+0x76>
 8001df4:	e1ee      	b.n	80021d4 <__aeabi_dsub+0x454>
 8001df6:	2020      	movs	r0, #32
 8001df8:	003e      	movs	r6, r7
 8001dfa:	1a80      	subs	r0, r0, r2
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	40d6      	lsrs	r6, r2
 8001e00:	40d1      	lsrs	r1, r2
 8001e02:	4087      	lsls	r7, r0
 8001e04:	4662      	mov	r2, ip
 8001e06:	4084      	lsls	r4, r0
 8001e08:	1a52      	subs	r2, r2, r1
 8001e0a:	1e78      	subs	r0, r7, #1
 8001e0c:	4187      	sbcs	r7, r0
 8001e0e:	4694      	mov	ip, r2
 8001e10:	4334      	orrs	r4, r6
 8001e12:	4327      	orrs	r7, r4
 8001e14:	1bdc      	subs	r4, r3, r7
 8001e16:	42a3      	cmp	r3, r4
 8001e18:	419b      	sbcs	r3, r3
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4699      	mov	r9, r3
 8001e22:	464b      	mov	r3, r9
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	d400      	bmi.n	8001e2a <__aeabi_dsub+0xaa>
 8001e28:	e118      	b.n	800205c <__aeabi_dsub+0x2dc>
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	0258      	lsls	r0, r3, #9
 8001e2e:	0a43      	lsrs	r3, r0, #9
 8001e30:	4699      	mov	r9, r3
 8001e32:	464b      	mov	r3, r9
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0xba>
 8001e38:	e137      	b.n	80020aa <__aeabi_dsub+0x32a>
 8001e3a:	4648      	mov	r0, r9
 8001e3c:	f000 fc24 	bl	8002688 <__clzsi2>
 8001e40:	0001      	movs	r1, r0
 8001e42:	3908      	subs	r1, #8
 8001e44:	2320      	movs	r3, #32
 8001e46:	0022      	movs	r2, r4
 8001e48:	4648      	mov	r0, r9
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	40da      	lsrs	r2, r3
 8001e4e:	4088      	lsls	r0, r1
 8001e50:	408c      	lsls	r4, r1
 8001e52:	4643      	mov	r3, r8
 8001e54:	4310      	orrs	r0, r2
 8001e56:	4588      	cmp	r8, r1
 8001e58:	dd00      	ble.n	8001e5c <__aeabi_dsub+0xdc>
 8001e5a:	e136      	b.n	80020ca <__aeabi_dsub+0x34a>
 8001e5c:	1ac9      	subs	r1, r1, r3
 8001e5e:	1c4b      	adds	r3, r1, #1
 8001e60:	2b1f      	cmp	r3, #31
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0xe6>
 8001e64:	e0ea      	b.n	800203c <__aeabi_dsub+0x2bc>
 8001e66:	2220      	movs	r2, #32
 8001e68:	0026      	movs	r6, r4
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	0001      	movs	r1, r0
 8001e6e:	4094      	lsls	r4, r2
 8001e70:	40de      	lsrs	r6, r3
 8001e72:	40d8      	lsrs	r0, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	4091      	lsls	r1, r2
 8001e78:	1e62      	subs	r2, r4, #1
 8001e7a:	4194      	sbcs	r4, r2
 8001e7c:	4681      	mov	r9, r0
 8001e7e:	4698      	mov	r8, r3
 8001e80:	4331      	orrs	r1, r6
 8001e82:	430c      	orrs	r4, r1
 8001e84:	0763      	lsls	r3, r4, #29
 8001e86:	d009      	beq.n	8001e9c <__aeabi_dsub+0x11c>
 8001e88:	230f      	movs	r3, #15
 8001e8a:	4023      	ands	r3, r4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x11c>
 8001e90:	1d23      	adds	r3, r4, #4
 8001e92:	42a3      	cmp	r3, r4
 8001e94:	41a4      	sbcs	r4, r4
 8001e96:	4264      	negs	r4, r4
 8001e98:	44a1      	add	r9, r4
 8001e9a:	001c      	movs	r4, r3
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	d400      	bmi.n	8001ea4 <__aeabi_dsub+0x124>
 8001ea2:	e0de      	b.n	8002062 <__aeabi_dsub+0x2e2>
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <__aeabi_dsub+0x358>)
 8001ea8:	3101      	adds	r1, #1
 8001eaa:	4299      	cmp	r1, r3
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x130>
 8001eae:	e0e7      	b.n	8002080 <__aeabi_dsub+0x300>
 8001eb0:	464b      	mov	r3, r9
 8001eb2:	488a      	ldr	r0, [pc, #552]	; (80020dc <__aeabi_dsub+0x35c>)
 8001eb4:	08e4      	lsrs	r4, r4, #3
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	0018      	movs	r0, r3
 8001eba:	0549      	lsls	r1, r1, #21
 8001ebc:	075b      	lsls	r3, r3, #29
 8001ebe:	0240      	lsls	r0, r0, #9
 8001ec0:	4323      	orrs	r3, r4
 8001ec2:	0d4a      	lsrs	r2, r1, #21
 8001ec4:	0b04      	lsrs	r4, r0, #12
 8001ec6:	0512      	lsls	r2, r2, #20
 8001ec8:	07ed      	lsls	r5, r5, #31
 8001eca:	4322      	orrs	r2, r4
 8001ecc:	432a      	orrs	r2, r5
 8001ece:	0018      	movs	r0, r3
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed4:	46bb      	mov	fp, r7
 8001ed6:	46b2      	mov	sl, r6
 8001ed8:	46a9      	mov	r9, r5
 8001eda:	46a0      	mov	r8, r4
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ede:	4642      	mov	r2, r8
 8001ee0:	1a12      	subs	r2, r2, r0
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	dd52      	ble.n	8001f8c <__aeabi_dsub+0x20c>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x16c>
 8001eea:	e09c      	b.n	8002026 <__aeabi_dsub+0x2a6>
 8001eec:	45a0      	cmp	r8, r4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x172>
 8001ef0:	e0ca      	b.n	8002088 <__aeabi_dsub+0x308>
 8001ef2:	2080      	movs	r0, #128	; 0x80
 8001ef4:	0400      	lsls	r0, r0, #16
 8001ef6:	4301      	orrs	r1, r0
 8001ef8:	2a38      	cmp	r2, #56	; 0x38
 8001efa:	dd00      	ble.n	8001efe <__aeabi_dsub+0x17e>
 8001efc:	e149      	b.n	8002192 <__aeabi_dsub+0x412>
 8001efe:	2a1f      	cmp	r2, #31
 8001f00:	dc00      	bgt.n	8001f04 <__aeabi_dsub+0x184>
 8001f02:	e197      	b.n	8002234 <__aeabi_dsub+0x4b4>
 8001f04:	0010      	movs	r0, r2
 8001f06:	000e      	movs	r6, r1
 8001f08:	3820      	subs	r0, #32
 8001f0a:	40c6      	lsrs	r6, r0
 8001f0c:	2a20      	cmp	r2, #32
 8001f0e:	d004      	beq.n	8001f1a <__aeabi_dsub+0x19a>
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	1a82      	subs	r2, r0, r2
 8001f14:	4091      	lsls	r1, r2
 8001f16:	430f      	orrs	r7, r1
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	464c      	mov	r4, r9
 8001f1c:	1e62      	subs	r2, r4, #1
 8001f1e:	4194      	sbcs	r4, r2
 8001f20:	4334      	orrs	r4, r6
 8001f22:	e13a      	b.n	800219a <__aeabi_dsub+0x41a>
 8001f24:	000a      	movs	r2, r1
 8001f26:	433a      	orrs	r2, r7
 8001f28:	d028      	beq.n	8001f7c <__aeabi_dsub+0x1fc>
 8001f2a:	46b3      	mov	fp, r6
 8001f2c:	42b5      	cmp	r5, r6
 8001f2e:	d02b      	beq.n	8001f88 <__aeabi_dsub+0x208>
 8001f30:	4a6b      	ldr	r2, [pc, #428]	; (80020e0 <__aeabi_dsub+0x360>)
 8001f32:	4442      	add	r2, r8
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d05d      	beq.n	8001ff4 <__aeabi_dsub+0x274>
 8001f38:	4642      	mov	r2, r8
 8001f3a:	4644      	mov	r4, r8
 8001f3c:	1a82      	subs	r2, r0, r2
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x1c4>
 8001f42:	e0f5      	b.n	8002130 <__aeabi_dsub+0x3b0>
 8001f44:	4665      	mov	r5, ip
 8001f46:	431d      	orrs	r5, r3
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x1cc>
 8001f4a:	e19c      	b.n	8002286 <__aeabi_dsub+0x506>
 8001f4c:	1e55      	subs	r5, r2, #1
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x1d4>
 8001f52:	e1fb      	b.n	800234c <__aeabi_dsub+0x5cc>
 8001f54:	4c60      	ldr	r4, [pc, #384]	; (80020d8 <__aeabi_dsub+0x358>)
 8001f56:	42a2      	cmp	r2, r4
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x1dc>
 8001f5a:	e1bd      	b.n	80022d8 <__aeabi_dsub+0x558>
 8001f5c:	002a      	movs	r2, r5
 8001f5e:	e0f0      	b.n	8002142 <__aeabi_dsub+0x3c2>
 8001f60:	0008      	movs	r0, r1
 8001f62:	4338      	orrs	r0, r7
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x1e8>
 8001f66:	e0c3      	b.n	80020f0 <__aeabi_dsub+0x370>
 8001f68:	1e50      	subs	r0, r2, #1
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x1f0>
 8001f6e:	e1a8      	b.n	80022c2 <__aeabi_dsub+0x542>
 8001f70:	4c59      	ldr	r4, [pc, #356]	; (80020d8 <__aeabi_dsub+0x358>)
 8001f72:	42a2      	cmp	r2, r4
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x1f8>
 8001f76:	e087      	b.n	8002088 <__aeabi_dsub+0x308>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	e736      	b.n	8001dea <__aeabi_dsub+0x6a>
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4056      	eors	r6, r2
 8001f80:	46b3      	mov	fp, r6
 8001f82:	42b5      	cmp	r5, r6
 8001f84:	d000      	beq.n	8001f88 <__aeabi_dsub+0x208>
 8001f86:	e721      	b.n	8001dcc <__aeabi_dsub+0x4c>
 8001f88:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <__aeabi_dsub+0x360>)
 8001f8a:	4442      	add	r2, r8
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x212>
 8001f90:	e0b5      	b.n	80020fe <__aeabi_dsub+0x37e>
 8001f92:	4642      	mov	r2, r8
 8001f94:	4644      	mov	r4, r8
 8001f96:	1a82      	subs	r2, r0, r2
 8001f98:	2c00      	cmp	r4, #0
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x21e>
 8001f9c:	e138      	b.n	8002210 <__aeabi_dsub+0x490>
 8001f9e:	4e4e      	ldr	r6, [pc, #312]	; (80020d8 <__aeabi_dsub+0x358>)
 8001fa0:	42b0      	cmp	r0, r6
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x226>
 8001fa4:	e1de      	b.n	8002364 <__aeabi_dsub+0x5e4>
 8001fa6:	2680      	movs	r6, #128	; 0x80
 8001fa8:	4664      	mov	r4, ip
 8001faa:	0436      	lsls	r6, r6, #16
 8001fac:	4334      	orrs	r4, r6
 8001fae:	46a4      	mov	ip, r4
 8001fb0:	2a38      	cmp	r2, #56	; 0x38
 8001fb2:	dd00      	ble.n	8001fb6 <__aeabi_dsub+0x236>
 8001fb4:	e196      	b.n	80022e4 <__aeabi_dsub+0x564>
 8001fb6:	2a1f      	cmp	r2, #31
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dsub+0x23c>
 8001fba:	e224      	b.n	8002406 <__aeabi_dsub+0x686>
 8001fbc:	2620      	movs	r6, #32
 8001fbe:	1ab4      	subs	r4, r6, r2
 8001fc0:	46a2      	mov	sl, r4
 8001fc2:	4664      	mov	r4, ip
 8001fc4:	4656      	mov	r6, sl
 8001fc6:	40b4      	lsls	r4, r6
 8001fc8:	46a1      	mov	r9, r4
 8001fca:	001c      	movs	r4, r3
 8001fcc:	464e      	mov	r6, r9
 8001fce:	40d4      	lsrs	r4, r2
 8001fd0:	4326      	orrs	r6, r4
 8001fd2:	0034      	movs	r4, r6
 8001fd4:	4656      	mov	r6, sl
 8001fd6:	40b3      	lsls	r3, r6
 8001fd8:	1e5e      	subs	r6, r3, #1
 8001fda:	41b3      	sbcs	r3, r6
 8001fdc:	431c      	orrs	r4, r3
 8001fde:	4663      	mov	r3, ip
 8001fe0:	40d3      	lsrs	r3, r2
 8001fe2:	18c9      	adds	r1, r1, r3
 8001fe4:	19e4      	adds	r4, r4, r7
 8001fe6:	42bc      	cmp	r4, r7
 8001fe8:	41bf      	sbcs	r7, r7
 8001fea:	427f      	negs	r7, r7
 8001fec:	46b9      	mov	r9, r7
 8001fee:	4680      	mov	r8, r0
 8001ff0:	4489      	add	r9, r1
 8001ff2:	e0d8      	b.n	80021a6 <__aeabi_dsub+0x426>
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	4c3b      	ldr	r4, [pc, #236]	; (80020e4 <__aeabi_dsub+0x364>)
 8001ff8:	3001      	adds	r0, #1
 8001ffa:	4220      	tst	r0, r4
 8001ffc:	d000      	beq.n	8002000 <__aeabi_dsub+0x280>
 8001ffe:	e0b4      	b.n	800216a <__aeabi_dsub+0x3ea>
 8002000:	4640      	mov	r0, r8
 8002002:	2800      	cmp	r0, #0
 8002004:	d000      	beq.n	8002008 <__aeabi_dsub+0x288>
 8002006:	e144      	b.n	8002292 <__aeabi_dsub+0x512>
 8002008:	4660      	mov	r0, ip
 800200a:	4318      	orrs	r0, r3
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x290>
 800200e:	e190      	b.n	8002332 <__aeabi_dsub+0x5b2>
 8002010:	0008      	movs	r0, r1
 8002012:	4338      	orrs	r0, r7
 8002014:	d000      	beq.n	8002018 <__aeabi_dsub+0x298>
 8002016:	e1aa      	b.n	800236e <__aeabi_dsub+0x5ee>
 8002018:	4661      	mov	r1, ip
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	0749      	lsls	r1, r1, #29
 800201e:	430b      	orrs	r3, r1
 8002020:	4661      	mov	r1, ip
 8002022:	08cc      	lsrs	r4, r1, #3
 8002024:	e027      	b.n	8002076 <__aeabi_dsub+0x2f6>
 8002026:	0008      	movs	r0, r1
 8002028:	4338      	orrs	r0, r7
 800202a:	d061      	beq.n	80020f0 <__aeabi_dsub+0x370>
 800202c:	1e50      	subs	r0, r2, #1
 800202e:	2a01      	cmp	r2, #1
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x2b4>
 8002032:	e139      	b.n	80022a8 <__aeabi_dsub+0x528>
 8002034:	42a2      	cmp	r2, r4
 8002036:	d027      	beq.n	8002088 <__aeabi_dsub+0x308>
 8002038:	0002      	movs	r2, r0
 800203a:	e75d      	b.n	8001ef8 <__aeabi_dsub+0x178>
 800203c:	0002      	movs	r2, r0
 800203e:	391f      	subs	r1, #31
 8002040:	40ca      	lsrs	r2, r1
 8002042:	0011      	movs	r1, r2
 8002044:	2b20      	cmp	r3, #32
 8002046:	d003      	beq.n	8002050 <__aeabi_dsub+0x2d0>
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4098      	lsls	r0, r3
 800204e:	4304      	orrs	r4, r0
 8002050:	1e63      	subs	r3, r4, #1
 8002052:	419c      	sbcs	r4, r3
 8002054:	2300      	movs	r3, #0
 8002056:	4699      	mov	r9, r3
 8002058:	4698      	mov	r8, r3
 800205a:	430c      	orrs	r4, r1
 800205c:	0763      	lsls	r3, r4, #29
 800205e:	d000      	beq.n	8002062 <__aeabi_dsub+0x2e2>
 8002060:	e712      	b.n	8001e88 <__aeabi_dsub+0x108>
 8002062:	464b      	mov	r3, r9
 8002064:	464a      	mov	r2, r9
 8002066:	08e4      	lsrs	r4, r4, #3
 8002068:	075b      	lsls	r3, r3, #29
 800206a:	4323      	orrs	r3, r4
 800206c:	08d4      	lsrs	r4, r2, #3
 800206e:	4642      	mov	r2, r8
 8002070:	4919      	ldr	r1, [pc, #100]	; (80020d8 <__aeabi_dsub+0x358>)
 8002072:	428a      	cmp	r2, r1
 8002074:	d00e      	beq.n	8002094 <__aeabi_dsub+0x314>
 8002076:	0324      	lsls	r4, r4, #12
 8002078:	0552      	lsls	r2, r2, #21
 800207a:	0b24      	lsrs	r4, r4, #12
 800207c:	0d52      	lsrs	r2, r2, #21
 800207e:	e722      	b.n	8001ec6 <__aeabi_dsub+0x146>
 8002080:	000a      	movs	r2, r1
 8002082:	2400      	movs	r4, #0
 8002084:	2300      	movs	r3, #0
 8002086:	e71e      	b.n	8001ec6 <__aeabi_dsub+0x146>
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	4662      	mov	r2, ip
 800208c:	0752      	lsls	r2, r2, #29
 800208e:	4313      	orrs	r3, r2
 8002090:	4662      	mov	r2, ip
 8002092:	08d4      	lsrs	r4, r2, #3
 8002094:	001a      	movs	r2, r3
 8002096:	4322      	orrs	r2, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x31c>
 800209a:	e1fc      	b.n	8002496 <__aeabi_dsub+0x716>
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0312      	lsls	r2, r2, #12
 80020a0:	4314      	orrs	r4, r2
 80020a2:	0324      	lsls	r4, r4, #12
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <__aeabi_dsub+0x358>)
 80020a6:	0b24      	lsrs	r4, r4, #12
 80020a8:	e70d      	b.n	8001ec6 <__aeabi_dsub+0x146>
 80020aa:	0020      	movs	r0, r4
 80020ac:	f000 faec 	bl	8002688 <__clzsi2>
 80020b0:	0001      	movs	r1, r0
 80020b2:	3118      	adds	r1, #24
 80020b4:	291f      	cmp	r1, #31
 80020b6:	dc00      	bgt.n	80020ba <__aeabi_dsub+0x33a>
 80020b8:	e6c4      	b.n	8001e44 <__aeabi_dsub+0xc4>
 80020ba:	3808      	subs	r0, #8
 80020bc:	4084      	lsls	r4, r0
 80020be:	4643      	mov	r3, r8
 80020c0:	0020      	movs	r0, r4
 80020c2:	2400      	movs	r4, #0
 80020c4:	4588      	cmp	r8, r1
 80020c6:	dc00      	bgt.n	80020ca <__aeabi_dsub+0x34a>
 80020c8:	e6c8      	b.n	8001e5c <__aeabi_dsub+0xdc>
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__aeabi_dsub+0x35c>)
 80020cc:	1a5b      	subs	r3, r3, r1
 80020ce:	4010      	ands	r0, r2
 80020d0:	4698      	mov	r8, r3
 80020d2:	4681      	mov	r9, r0
 80020d4:	e6d6      	b.n	8001e84 <__aeabi_dsub+0x104>
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	000007ff 	.word	0x000007ff
 80020dc:	ff7fffff 	.word	0xff7fffff
 80020e0:	fffff801 	.word	0xfffff801
 80020e4:	000007fe 	.word	0x000007fe
 80020e8:	430f      	orrs	r7, r1
 80020ea:	1e7a      	subs	r2, r7, #1
 80020ec:	4197      	sbcs	r7, r2
 80020ee:	e691      	b.n	8001e14 <__aeabi_dsub+0x94>
 80020f0:	4661      	mov	r1, ip
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	0749      	lsls	r1, r1, #29
 80020f6:	430b      	orrs	r3, r1
 80020f8:	4661      	mov	r1, ip
 80020fa:	08cc      	lsrs	r4, r1, #3
 80020fc:	e7b8      	b.n	8002070 <__aeabi_dsub+0x2f0>
 80020fe:	4640      	mov	r0, r8
 8002100:	4cd3      	ldr	r4, [pc, #844]	; (8002450 <__aeabi_dsub+0x6d0>)
 8002102:	3001      	adds	r0, #1
 8002104:	4220      	tst	r0, r4
 8002106:	d000      	beq.n	800210a <__aeabi_dsub+0x38a>
 8002108:	e0a2      	b.n	8002250 <__aeabi_dsub+0x4d0>
 800210a:	4640      	mov	r0, r8
 800210c:	2800      	cmp	r0, #0
 800210e:	d000      	beq.n	8002112 <__aeabi_dsub+0x392>
 8002110:	e101      	b.n	8002316 <__aeabi_dsub+0x596>
 8002112:	4660      	mov	r0, ip
 8002114:	4318      	orrs	r0, r3
 8002116:	d100      	bne.n	800211a <__aeabi_dsub+0x39a>
 8002118:	e15e      	b.n	80023d8 <__aeabi_dsub+0x658>
 800211a:	0008      	movs	r0, r1
 800211c:	4338      	orrs	r0, r7
 800211e:	d000      	beq.n	8002122 <__aeabi_dsub+0x3a2>
 8002120:	e15f      	b.n	80023e2 <__aeabi_dsub+0x662>
 8002122:	4661      	mov	r1, ip
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	0749      	lsls	r1, r1, #29
 8002128:	430b      	orrs	r3, r1
 800212a:	4661      	mov	r1, ip
 800212c:	08cc      	lsrs	r4, r1, #3
 800212e:	e7a2      	b.n	8002076 <__aeabi_dsub+0x2f6>
 8002130:	4dc8      	ldr	r5, [pc, #800]	; (8002454 <__aeabi_dsub+0x6d4>)
 8002132:	42a8      	cmp	r0, r5
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x3b8>
 8002136:	e0cf      	b.n	80022d8 <__aeabi_dsub+0x558>
 8002138:	2580      	movs	r5, #128	; 0x80
 800213a:	4664      	mov	r4, ip
 800213c:	042d      	lsls	r5, r5, #16
 800213e:	432c      	orrs	r4, r5
 8002140:	46a4      	mov	ip, r4
 8002142:	2a38      	cmp	r2, #56	; 0x38
 8002144:	dc56      	bgt.n	80021f4 <__aeabi_dsub+0x474>
 8002146:	2a1f      	cmp	r2, #31
 8002148:	dd00      	ble.n	800214c <__aeabi_dsub+0x3cc>
 800214a:	e0d1      	b.n	80022f0 <__aeabi_dsub+0x570>
 800214c:	2520      	movs	r5, #32
 800214e:	001e      	movs	r6, r3
 8002150:	1aad      	subs	r5, r5, r2
 8002152:	4664      	mov	r4, ip
 8002154:	40ab      	lsls	r3, r5
 8002156:	40ac      	lsls	r4, r5
 8002158:	40d6      	lsrs	r6, r2
 800215a:	1e5d      	subs	r5, r3, #1
 800215c:	41ab      	sbcs	r3, r5
 800215e:	4334      	orrs	r4, r6
 8002160:	4323      	orrs	r3, r4
 8002162:	4664      	mov	r4, ip
 8002164:	40d4      	lsrs	r4, r2
 8002166:	1b09      	subs	r1, r1, r4
 8002168:	e049      	b.n	80021fe <__aeabi_dsub+0x47e>
 800216a:	4660      	mov	r0, ip
 800216c:	1bdc      	subs	r4, r3, r7
 800216e:	1a46      	subs	r6, r0, r1
 8002170:	42a3      	cmp	r3, r4
 8002172:	4180      	sbcs	r0, r0
 8002174:	4240      	negs	r0, r0
 8002176:	4681      	mov	r9, r0
 8002178:	0030      	movs	r0, r6
 800217a:	464e      	mov	r6, r9
 800217c:	1b80      	subs	r0, r0, r6
 800217e:	4681      	mov	r9, r0
 8002180:	0200      	lsls	r0, r0, #8
 8002182:	d476      	bmi.n	8002272 <__aeabi_dsub+0x4f2>
 8002184:	464b      	mov	r3, r9
 8002186:	4323      	orrs	r3, r4
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x40c>
 800218a:	e652      	b.n	8001e32 <__aeabi_dsub+0xb2>
 800218c:	2400      	movs	r4, #0
 800218e:	2500      	movs	r5, #0
 8002190:	e771      	b.n	8002076 <__aeabi_dsub+0x2f6>
 8002192:	4339      	orrs	r1, r7
 8002194:	000c      	movs	r4, r1
 8002196:	1e62      	subs	r2, r4, #1
 8002198:	4194      	sbcs	r4, r2
 800219a:	18e4      	adds	r4, r4, r3
 800219c:	429c      	cmp	r4, r3
 800219e:	419b      	sbcs	r3, r3
 80021a0:	425b      	negs	r3, r3
 80021a2:	4463      	add	r3, ip
 80021a4:	4699      	mov	r9, r3
 80021a6:	464b      	mov	r3, r9
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	d400      	bmi.n	80021ae <__aeabi_dsub+0x42e>
 80021ac:	e756      	b.n	800205c <__aeabi_dsub+0x2dc>
 80021ae:	2301      	movs	r3, #1
 80021b0:	469c      	mov	ip, r3
 80021b2:	4ba8      	ldr	r3, [pc, #672]	; (8002454 <__aeabi_dsub+0x6d4>)
 80021b4:	44e0      	add	r8, ip
 80021b6:	4598      	cmp	r8, r3
 80021b8:	d038      	beq.n	800222c <__aeabi_dsub+0x4ac>
 80021ba:	464b      	mov	r3, r9
 80021bc:	48a6      	ldr	r0, [pc, #664]	; (8002458 <__aeabi_dsub+0x6d8>)
 80021be:	2201      	movs	r2, #1
 80021c0:	4003      	ands	r3, r0
 80021c2:	0018      	movs	r0, r3
 80021c4:	0863      	lsrs	r3, r4, #1
 80021c6:	4014      	ands	r4, r2
 80021c8:	431c      	orrs	r4, r3
 80021ca:	07c3      	lsls	r3, r0, #31
 80021cc:	431c      	orrs	r4, r3
 80021ce:	0843      	lsrs	r3, r0, #1
 80021d0:	4699      	mov	r9, r3
 80021d2:	e657      	b.n	8001e84 <__aeabi_dsub+0x104>
 80021d4:	0010      	movs	r0, r2
 80021d6:	000e      	movs	r6, r1
 80021d8:	3820      	subs	r0, #32
 80021da:	40c6      	lsrs	r6, r0
 80021dc:	2a20      	cmp	r2, #32
 80021de:	d004      	beq.n	80021ea <__aeabi_dsub+0x46a>
 80021e0:	2040      	movs	r0, #64	; 0x40
 80021e2:	1a82      	subs	r2, r0, r2
 80021e4:	4091      	lsls	r1, r2
 80021e6:	430f      	orrs	r7, r1
 80021e8:	46b9      	mov	r9, r7
 80021ea:	464f      	mov	r7, r9
 80021ec:	1e7a      	subs	r2, r7, #1
 80021ee:	4197      	sbcs	r7, r2
 80021f0:	4337      	orrs	r7, r6
 80021f2:	e60f      	b.n	8001e14 <__aeabi_dsub+0x94>
 80021f4:	4662      	mov	r2, ip
 80021f6:	431a      	orrs	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	4193      	sbcs	r3, r2
 80021fe:	1afc      	subs	r4, r7, r3
 8002200:	42a7      	cmp	r7, r4
 8002202:	41bf      	sbcs	r7, r7
 8002204:	427f      	negs	r7, r7
 8002206:	1bcb      	subs	r3, r1, r7
 8002208:	4699      	mov	r9, r3
 800220a:	465d      	mov	r5, fp
 800220c:	4680      	mov	r8, r0
 800220e:	e608      	b.n	8001e22 <__aeabi_dsub+0xa2>
 8002210:	4666      	mov	r6, ip
 8002212:	431e      	orrs	r6, r3
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x498>
 8002216:	e0be      	b.n	8002396 <__aeabi_dsub+0x616>
 8002218:	1e56      	subs	r6, r2, #1
 800221a:	2a01      	cmp	r2, #1
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x4a0>
 800221e:	e109      	b.n	8002434 <__aeabi_dsub+0x6b4>
 8002220:	4c8c      	ldr	r4, [pc, #560]	; (8002454 <__aeabi_dsub+0x6d4>)
 8002222:	42a2      	cmp	r2, r4
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x4a8>
 8002226:	e119      	b.n	800245c <__aeabi_dsub+0x6dc>
 8002228:	0032      	movs	r2, r6
 800222a:	e6c1      	b.n	8001fb0 <__aeabi_dsub+0x230>
 800222c:	4642      	mov	r2, r8
 800222e:	2400      	movs	r4, #0
 8002230:	2300      	movs	r3, #0
 8002232:	e648      	b.n	8001ec6 <__aeabi_dsub+0x146>
 8002234:	2020      	movs	r0, #32
 8002236:	000c      	movs	r4, r1
 8002238:	1a80      	subs	r0, r0, r2
 800223a:	003e      	movs	r6, r7
 800223c:	4087      	lsls	r7, r0
 800223e:	4084      	lsls	r4, r0
 8002240:	40d6      	lsrs	r6, r2
 8002242:	1e78      	subs	r0, r7, #1
 8002244:	4187      	sbcs	r7, r0
 8002246:	40d1      	lsrs	r1, r2
 8002248:	4334      	orrs	r4, r6
 800224a:	433c      	orrs	r4, r7
 800224c:	448c      	add	ip, r1
 800224e:	e7a4      	b.n	800219a <__aeabi_dsub+0x41a>
 8002250:	4a80      	ldr	r2, [pc, #512]	; (8002454 <__aeabi_dsub+0x6d4>)
 8002252:	4290      	cmp	r0, r2
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x4d8>
 8002256:	e0e9      	b.n	800242c <__aeabi_dsub+0x6ac>
 8002258:	19df      	adds	r7, r3, r7
 800225a:	429f      	cmp	r7, r3
 800225c:	419b      	sbcs	r3, r3
 800225e:	4461      	add	r1, ip
 8002260:	425b      	negs	r3, r3
 8002262:	18c9      	adds	r1, r1, r3
 8002264:	07cc      	lsls	r4, r1, #31
 8002266:	087f      	lsrs	r7, r7, #1
 8002268:	084b      	lsrs	r3, r1, #1
 800226a:	4699      	mov	r9, r3
 800226c:	4680      	mov	r8, r0
 800226e:	433c      	orrs	r4, r7
 8002270:	e6f4      	b.n	800205c <__aeabi_dsub+0x2dc>
 8002272:	1afc      	subs	r4, r7, r3
 8002274:	42a7      	cmp	r7, r4
 8002276:	41bf      	sbcs	r7, r7
 8002278:	4663      	mov	r3, ip
 800227a:	427f      	negs	r7, r7
 800227c:	1ac9      	subs	r1, r1, r3
 800227e:	1bcb      	subs	r3, r1, r7
 8002280:	4699      	mov	r9, r3
 8002282:	465d      	mov	r5, fp
 8002284:	e5d5      	b.n	8001e32 <__aeabi_dsub+0xb2>
 8002286:	08ff      	lsrs	r7, r7, #3
 8002288:	074b      	lsls	r3, r1, #29
 800228a:	465d      	mov	r5, fp
 800228c:	433b      	orrs	r3, r7
 800228e:	08cc      	lsrs	r4, r1, #3
 8002290:	e6ee      	b.n	8002070 <__aeabi_dsub+0x2f0>
 8002292:	4662      	mov	r2, ip
 8002294:	431a      	orrs	r2, r3
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x51a>
 8002298:	e082      	b.n	80023a0 <__aeabi_dsub+0x620>
 800229a:	000b      	movs	r3, r1
 800229c:	433b      	orrs	r3, r7
 800229e:	d11b      	bne.n	80022d8 <__aeabi_dsub+0x558>
 80022a0:	2480      	movs	r4, #128	; 0x80
 80022a2:	2500      	movs	r5, #0
 80022a4:	0324      	lsls	r4, r4, #12
 80022a6:	e6f9      	b.n	800209c <__aeabi_dsub+0x31c>
 80022a8:	19dc      	adds	r4, r3, r7
 80022aa:	429c      	cmp	r4, r3
 80022ac:	419b      	sbcs	r3, r3
 80022ae:	4461      	add	r1, ip
 80022b0:	4689      	mov	r9, r1
 80022b2:	425b      	negs	r3, r3
 80022b4:	4499      	add	r9, r3
 80022b6:	464b      	mov	r3, r9
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	d444      	bmi.n	8002346 <__aeabi_dsub+0x5c6>
 80022bc:	2301      	movs	r3, #1
 80022be:	4698      	mov	r8, r3
 80022c0:	e6cc      	b.n	800205c <__aeabi_dsub+0x2dc>
 80022c2:	1bdc      	subs	r4, r3, r7
 80022c4:	4662      	mov	r2, ip
 80022c6:	42a3      	cmp	r3, r4
 80022c8:	419b      	sbcs	r3, r3
 80022ca:	1a51      	subs	r1, r2, r1
 80022cc:	425b      	negs	r3, r3
 80022ce:	1acb      	subs	r3, r1, r3
 80022d0:	4699      	mov	r9, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	4698      	mov	r8, r3
 80022d6:	e5a4      	b.n	8001e22 <__aeabi_dsub+0xa2>
 80022d8:	08ff      	lsrs	r7, r7, #3
 80022da:	074b      	lsls	r3, r1, #29
 80022dc:	465d      	mov	r5, fp
 80022de:	433b      	orrs	r3, r7
 80022e0:	08cc      	lsrs	r4, r1, #3
 80022e2:	e6d7      	b.n	8002094 <__aeabi_dsub+0x314>
 80022e4:	4662      	mov	r2, ip
 80022e6:	431a      	orrs	r2, r3
 80022e8:	0014      	movs	r4, r2
 80022ea:	1e63      	subs	r3, r4, #1
 80022ec:	419c      	sbcs	r4, r3
 80022ee:	e679      	b.n	8001fe4 <__aeabi_dsub+0x264>
 80022f0:	0015      	movs	r5, r2
 80022f2:	4664      	mov	r4, ip
 80022f4:	3d20      	subs	r5, #32
 80022f6:	40ec      	lsrs	r4, r5
 80022f8:	46a0      	mov	r8, r4
 80022fa:	2a20      	cmp	r2, #32
 80022fc:	d005      	beq.n	800230a <__aeabi_dsub+0x58a>
 80022fe:	2540      	movs	r5, #64	; 0x40
 8002300:	4664      	mov	r4, ip
 8002302:	1aaa      	subs	r2, r5, r2
 8002304:	4094      	lsls	r4, r2
 8002306:	4323      	orrs	r3, r4
 8002308:	469a      	mov	sl, r3
 800230a:	4654      	mov	r4, sl
 800230c:	1e63      	subs	r3, r4, #1
 800230e:	419c      	sbcs	r4, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4323      	orrs	r3, r4
 8002314:	e773      	b.n	80021fe <__aeabi_dsub+0x47e>
 8002316:	4662      	mov	r2, ip
 8002318:	431a      	orrs	r2, r3
 800231a:	d023      	beq.n	8002364 <__aeabi_dsub+0x5e4>
 800231c:	000a      	movs	r2, r1
 800231e:	433a      	orrs	r2, r7
 8002320:	d000      	beq.n	8002324 <__aeabi_dsub+0x5a4>
 8002322:	e0a0      	b.n	8002466 <__aeabi_dsub+0x6e6>
 8002324:	4662      	mov	r2, ip
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	4313      	orrs	r3, r2
 800232c:	4662      	mov	r2, ip
 800232e:	08d4      	lsrs	r4, r2, #3
 8002330:	e6b0      	b.n	8002094 <__aeabi_dsub+0x314>
 8002332:	000b      	movs	r3, r1
 8002334:	433b      	orrs	r3, r7
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x5ba>
 8002338:	e728      	b.n	800218c <__aeabi_dsub+0x40c>
 800233a:	08ff      	lsrs	r7, r7, #3
 800233c:	074b      	lsls	r3, r1, #29
 800233e:	465d      	mov	r5, fp
 8002340:	433b      	orrs	r3, r7
 8002342:	08cc      	lsrs	r4, r1, #3
 8002344:	e697      	b.n	8002076 <__aeabi_dsub+0x2f6>
 8002346:	2302      	movs	r3, #2
 8002348:	4698      	mov	r8, r3
 800234a:	e736      	b.n	80021ba <__aeabi_dsub+0x43a>
 800234c:	1afc      	subs	r4, r7, r3
 800234e:	42a7      	cmp	r7, r4
 8002350:	41bf      	sbcs	r7, r7
 8002352:	4663      	mov	r3, ip
 8002354:	427f      	negs	r7, r7
 8002356:	1ac9      	subs	r1, r1, r3
 8002358:	1bcb      	subs	r3, r1, r7
 800235a:	4699      	mov	r9, r3
 800235c:	2301      	movs	r3, #1
 800235e:	465d      	mov	r5, fp
 8002360:	4698      	mov	r8, r3
 8002362:	e55e      	b.n	8001e22 <__aeabi_dsub+0xa2>
 8002364:	074b      	lsls	r3, r1, #29
 8002366:	08ff      	lsrs	r7, r7, #3
 8002368:	433b      	orrs	r3, r7
 800236a:	08cc      	lsrs	r4, r1, #3
 800236c:	e692      	b.n	8002094 <__aeabi_dsub+0x314>
 800236e:	1bdc      	subs	r4, r3, r7
 8002370:	4660      	mov	r0, ip
 8002372:	42a3      	cmp	r3, r4
 8002374:	41b6      	sbcs	r6, r6
 8002376:	1a40      	subs	r0, r0, r1
 8002378:	4276      	negs	r6, r6
 800237a:	1b80      	subs	r0, r0, r6
 800237c:	4681      	mov	r9, r0
 800237e:	0200      	lsls	r0, r0, #8
 8002380:	d560      	bpl.n	8002444 <__aeabi_dsub+0x6c4>
 8002382:	1afc      	subs	r4, r7, r3
 8002384:	42a7      	cmp	r7, r4
 8002386:	41bf      	sbcs	r7, r7
 8002388:	4663      	mov	r3, ip
 800238a:	427f      	negs	r7, r7
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	1bcb      	subs	r3, r1, r7
 8002390:	4699      	mov	r9, r3
 8002392:	465d      	mov	r5, fp
 8002394:	e576      	b.n	8001e84 <__aeabi_dsub+0x104>
 8002396:	08ff      	lsrs	r7, r7, #3
 8002398:	074b      	lsls	r3, r1, #29
 800239a:	433b      	orrs	r3, r7
 800239c:	08cc      	lsrs	r4, r1, #3
 800239e:	e667      	b.n	8002070 <__aeabi_dsub+0x2f0>
 80023a0:	000a      	movs	r2, r1
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	433a      	orrs	r2, r7
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x62a>
 80023a8:	e66f      	b.n	800208a <__aeabi_dsub+0x30a>
 80023aa:	4662      	mov	r2, ip
 80023ac:	0752      	lsls	r2, r2, #29
 80023ae:	4313      	orrs	r3, r2
 80023b0:	4662      	mov	r2, ip
 80023b2:	08d4      	lsrs	r4, r2, #3
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0312      	lsls	r2, r2, #12
 80023b8:	4214      	tst	r4, r2
 80023ba:	d007      	beq.n	80023cc <__aeabi_dsub+0x64c>
 80023bc:	08c8      	lsrs	r0, r1, #3
 80023be:	4210      	tst	r0, r2
 80023c0:	d104      	bne.n	80023cc <__aeabi_dsub+0x64c>
 80023c2:	465d      	mov	r5, fp
 80023c4:	0004      	movs	r4, r0
 80023c6:	08fb      	lsrs	r3, r7, #3
 80023c8:	0749      	lsls	r1, r1, #29
 80023ca:	430b      	orrs	r3, r1
 80023cc:	0f5a      	lsrs	r2, r3, #29
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	0752      	lsls	r2, r2, #29
 80023d4:	4313      	orrs	r3, r2
 80023d6:	e65d      	b.n	8002094 <__aeabi_dsub+0x314>
 80023d8:	074b      	lsls	r3, r1, #29
 80023da:	08ff      	lsrs	r7, r7, #3
 80023dc:	433b      	orrs	r3, r7
 80023de:	08cc      	lsrs	r4, r1, #3
 80023e0:	e649      	b.n	8002076 <__aeabi_dsub+0x2f6>
 80023e2:	19dc      	adds	r4, r3, r7
 80023e4:	429c      	cmp	r4, r3
 80023e6:	419b      	sbcs	r3, r3
 80023e8:	4461      	add	r1, ip
 80023ea:	4689      	mov	r9, r1
 80023ec:	425b      	negs	r3, r3
 80023ee:	4499      	add	r9, r3
 80023f0:	464b      	mov	r3, r9
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	d400      	bmi.n	80023f8 <__aeabi_dsub+0x678>
 80023f6:	e631      	b.n	800205c <__aeabi_dsub+0x2dc>
 80023f8:	464a      	mov	r2, r9
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <__aeabi_dsub+0x6d8>)
 80023fc:	401a      	ands	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	4691      	mov	r9, r2
 8002402:	4698      	mov	r8, r3
 8002404:	e62a      	b.n	800205c <__aeabi_dsub+0x2dc>
 8002406:	0016      	movs	r6, r2
 8002408:	4664      	mov	r4, ip
 800240a:	3e20      	subs	r6, #32
 800240c:	40f4      	lsrs	r4, r6
 800240e:	46a0      	mov	r8, r4
 8002410:	2a20      	cmp	r2, #32
 8002412:	d005      	beq.n	8002420 <__aeabi_dsub+0x6a0>
 8002414:	2640      	movs	r6, #64	; 0x40
 8002416:	4664      	mov	r4, ip
 8002418:	1ab2      	subs	r2, r6, r2
 800241a:	4094      	lsls	r4, r2
 800241c:	4323      	orrs	r3, r4
 800241e:	469a      	mov	sl, r3
 8002420:	4654      	mov	r4, sl
 8002422:	1e63      	subs	r3, r4, #1
 8002424:	419c      	sbcs	r4, r3
 8002426:	4643      	mov	r3, r8
 8002428:	431c      	orrs	r4, r3
 800242a:	e5db      	b.n	8001fe4 <__aeabi_dsub+0x264>
 800242c:	0002      	movs	r2, r0
 800242e:	2400      	movs	r4, #0
 8002430:	2300      	movs	r3, #0
 8002432:	e548      	b.n	8001ec6 <__aeabi_dsub+0x146>
 8002434:	19dc      	adds	r4, r3, r7
 8002436:	42bc      	cmp	r4, r7
 8002438:	41bf      	sbcs	r7, r7
 800243a:	4461      	add	r1, ip
 800243c:	4689      	mov	r9, r1
 800243e:	427f      	negs	r7, r7
 8002440:	44b9      	add	r9, r7
 8002442:	e738      	b.n	80022b6 <__aeabi_dsub+0x536>
 8002444:	464b      	mov	r3, r9
 8002446:	4323      	orrs	r3, r4
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x6cc>
 800244a:	e69f      	b.n	800218c <__aeabi_dsub+0x40c>
 800244c:	e606      	b.n	800205c <__aeabi_dsub+0x2dc>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	000007fe 	.word	0x000007fe
 8002454:	000007ff 	.word	0x000007ff
 8002458:	ff7fffff 	.word	0xff7fffff
 800245c:	08ff      	lsrs	r7, r7, #3
 800245e:	074b      	lsls	r3, r1, #29
 8002460:	433b      	orrs	r3, r7
 8002462:	08cc      	lsrs	r4, r1, #3
 8002464:	e616      	b.n	8002094 <__aeabi_dsub+0x314>
 8002466:	4662      	mov	r2, ip
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	0752      	lsls	r2, r2, #29
 800246c:	4313      	orrs	r3, r2
 800246e:	4662      	mov	r2, ip
 8002470:	08d4      	lsrs	r4, r2, #3
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	0312      	lsls	r2, r2, #12
 8002476:	4214      	tst	r4, r2
 8002478:	d007      	beq.n	800248a <__aeabi_dsub+0x70a>
 800247a:	08c8      	lsrs	r0, r1, #3
 800247c:	4210      	tst	r0, r2
 800247e:	d104      	bne.n	800248a <__aeabi_dsub+0x70a>
 8002480:	465d      	mov	r5, fp
 8002482:	0004      	movs	r4, r0
 8002484:	08fb      	lsrs	r3, r7, #3
 8002486:	0749      	lsls	r1, r1, #29
 8002488:	430b      	orrs	r3, r1
 800248a:	0f5a      	lsrs	r2, r3, #29
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	0752      	lsls	r2, r2, #29
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	4313      	orrs	r3, r2
 8002494:	e5fe      	b.n	8002094 <__aeabi_dsub+0x314>
 8002496:	2300      	movs	r3, #0
 8002498:	4a01      	ldr	r2, [pc, #4]	; (80024a0 <__aeabi_dsub+0x720>)
 800249a:	001c      	movs	r4, r3
 800249c:	e513      	b.n	8001ec6 <__aeabi_dsub+0x146>
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	000007ff 	.word	0x000007ff

080024a4 <__aeabi_dcmpun>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	0005      	movs	r5, r0
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <__aeabi_dcmpun+0x38>)
 80024aa:	031c      	lsls	r4, r3, #12
 80024ac:	0016      	movs	r6, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	030a      	lsls	r2, r1, #12
 80024b2:	0049      	lsls	r1, r1, #1
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	0d49      	lsrs	r1, r1, #21
 80024b8:	0b24      	lsrs	r4, r4, #12
 80024ba:	0d5b      	lsrs	r3, r3, #21
 80024bc:	4281      	cmp	r1, r0
 80024be:	d008      	beq.n	80024d2 <__aeabi_dcmpun+0x2e>
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <__aeabi_dcmpun+0x38>)
 80024c2:	2000      	movs	r0, #0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d103      	bne.n	80024d0 <__aeabi_dcmpun+0x2c>
 80024c8:	0020      	movs	r0, r4
 80024ca:	4330      	orrs	r0, r6
 80024cc:	1e43      	subs	r3, r0, #1
 80024ce:	4198      	sbcs	r0, r3
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
 80024d2:	2001      	movs	r0, #1
 80024d4:	432a      	orrs	r2, r5
 80024d6:	d1fb      	bne.n	80024d0 <__aeabi_dcmpun+0x2c>
 80024d8:	e7f2      	b.n	80024c0 <__aeabi_dcmpun+0x1c>
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__aeabi_d2iz>:
 80024e0:	000a      	movs	r2, r1
 80024e2:	b530      	push	{r4, r5, lr}
 80024e4:	4c13      	ldr	r4, [pc, #76]	; (8002534 <__aeabi_d2iz+0x54>)
 80024e6:	0053      	lsls	r3, r2, #1
 80024e8:	0309      	lsls	r1, r1, #12
 80024ea:	0005      	movs	r5, r0
 80024ec:	0b09      	lsrs	r1, r1, #12
 80024ee:	2000      	movs	r0, #0
 80024f0:	0d5b      	lsrs	r3, r3, #21
 80024f2:	0fd2      	lsrs	r2, r2, #31
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	dd04      	ble.n	8002502 <__aeabi_d2iz+0x22>
 80024f8:	480f      	ldr	r0, [pc, #60]	; (8002538 <__aeabi_d2iz+0x58>)
 80024fa:	4283      	cmp	r3, r0
 80024fc:	dd02      	ble.n	8002504 <__aeabi_d2iz+0x24>
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <__aeabi_d2iz+0x5c>)
 8002500:	18d0      	adds	r0, r2, r3
 8002502:	bd30      	pop	{r4, r5, pc}
 8002504:	2080      	movs	r0, #128	; 0x80
 8002506:	0340      	lsls	r0, r0, #13
 8002508:	4301      	orrs	r1, r0
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <__aeabi_d2iz+0x60>)
 800250c:	1ac0      	subs	r0, r0, r3
 800250e:	281f      	cmp	r0, #31
 8002510:	dd08      	ble.n	8002524 <__aeabi_d2iz+0x44>
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <__aeabi_d2iz+0x64>)
 8002514:	1ac3      	subs	r3, r0, r3
 8002516:	40d9      	lsrs	r1, r3
 8002518:	000b      	movs	r3, r1
 800251a:	4258      	negs	r0, r3
 800251c:	2a00      	cmp	r2, #0
 800251e:	d1f0      	bne.n	8002502 <__aeabi_d2iz+0x22>
 8002520:	0018      	movs	r0, r3
 8002522:	e7ee      	b.n	8002502 <__aeabi_d2iz+0x22>
 8002524:	4c08      	ldr	r4, [pc, #32]	; (8002548 <__aeabi_d2iz+0x68>)
 8002526:	40c5      	lsrs	r5, r0
 8002528:	46a4      	mov	ip, r4
 800252a:	4463      	add	r3, ip
 800252c:	4099      	lsls	r1, r3
 800252e:	000b      	movs	r3, r1
 8002530:	432b      	orrs	r3, r5
 8002532:	e7f2      	b.n	800251a <__aeabi_d2iz+0x3a>
 8002534:	000003fe 	.word	0x000003fe
 8002538:	0000041d 	.word	0x0000041d
 800253c:	7fffffff 	.word	0x7fffffff
 8002540:	00000433 	.word	0x00000433
 8002544:	00000413 	.word	0x00000413
 8002548:	fffffbed 	.word	0xfffffbed

0800254c <__aeabi_i2d>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	2800      	cmp	r0, #0
 8002550:	d016      	beq.n	8002580 <__aeabi_i2d+0x34>
 8002552:	17c3      	asrs	r3, r0, #31
 8002554:	18c5      	adds	r5, r0, r3
 8002556:	405d      	eors	r5, r3
 8002558:	0fc4      	lsrs	r4, r0, #31
 800255a:	0028      	movs	r0, r5
 800255c:	f000 f894 	bl	8002688 <__clzsi2>
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <__aeabi_i2d+0x5c>)
 8002562:	1a12      	subs	r2, r2, r0
 8002564:	280a      	cmp	r0, #10
 8002566:	dc16      	bgt.n	8002596 <__aeabi_i2d+0x4a>
 8002568:	0003      	movs	r3, r0
 800256a:	002e      	movs	r6, r5
 800256c:	3315      	adds	r3, #21
 800256e:	409e      	lsls	r6, r3
 8002570:	230b      	movs	r3, #11
 8002572:	1a18      	subs	r0, r3, r0
 8002574:	40c5      	lsrs	r5, r0
 8002576:	0552      	lsls	r2, r2, #21
 8002578:	032d      	lsls	r5, r5, #12
 800257a:	0b2d      	lsrs	r5, r5, #12
 800257c:	0d53      	lsrs	r3, r2, #21
 800257e:	e003      	b.n	8002588 <__aeabi_i2d+0x3c>
 8002580:	2400      	movs	r4, #0
 8002582:	2300      	movs	r3, #0
 8002584:	2500      	movs	r5, #0
 8002586:	2600      	movs	r6, #0
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	432b      	orrs	r3, r5
 800258c:	07e4      	lsls	r4, r4, #31
 800258e:	4323      	orrs	r3, r4
 8002590:	0030      	movs	r0, r6
 8002592:	0019      	movs	r1, r3
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	380b      	subs	r0, #11
 8002598:	4085      	lsls	r5, r0
 800259a:	0552      	lsls	r2, r2, #21
 800259c:	032d      	lsls	r5, r5, #12
 800259e:	2600      	movs	r6, #0
 80025a0:	0b2d      	lsrs	r5, r5, #12
 80025a2:	0d53      	lsrs	r3, r2, #21
 80025a4:	e7f0      	b.n	8002588 <__aeabi_i2d+0x3c>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	0000041e 	.word	0x0000041e

080025ac <__aeabi_ui2d>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	1e04      	subs	r4, r0, #0
 80025b0:	d010      	beq.n	80025d4 <__aeabi_ui2d+0x28>
 80025b2:	f000 f869 	bl	8002688 <__clzsi2>
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <__aeabi_ui2d+0x48>)
 80025b8:	1a1b      	subs	r3, r3, r0
 80025ba:	280a      	cmp	r0, #10
 80025bc:	dc11      	bgt.n	80025e2 <__aeabi_ui2d+0x36>
 80025be:	220b      	movs	r2, #11
 80025c0:	0021      	movs	r1, r4
 80025c2:	1a12      	subs	r2, r2, r0
 80025c4:	40d1      	lsrs	r1, r2
 80025c6:	3015      	adds	r0, #21
 80025c8:	030a      	lsls	r2, r1, #12
 80025ca:	055b      	lsls	r3, r3, #21
 80025cc:	4084      	lsls	r4, r0
 80025ce:	0b12      	lsrs	r2, r2, #12
 80025d0:	0d5b      	lsrs	r3, r3, #21
 80025d2:	e001      	b.n	80025d8 <__aeabi_ui2d+0x2c>
 80025d4:	2300      	movs	r3, #0
 80025d6:	2200      	movs	r2, #0
 80025d8:	051b      	lsls	r3, r3, #20
 80025da:	4313      	orrs	r3, r2
 80025dc:	0020      	movs	r0, r4
 80025de:	0019      	movs	r1, r3
 80025e0:	bd10      	pop	{r4, pc}
 80025e2:	0022      	movs	r2, r4
 80025e4:	380b      	subs	r0, #11
 80025e6:	4082      	lsls	r2, r0
 80025e8:	055b      	lsls	r3, r3, #21
 80025ea:	0312      	lsls	r2, r2, #12
 80025ec:	2400      	movs	r4, #0
 80025ee:	0b12      	lsrs	r2, r2, #12
 80025f0:	0d5b      	lsrs	r3, r3, #21
 80025f2:	e7f1      	b.n	80025d8 <__aeabi_ui2d+0x2c>
 80025f4:	0000041e 	.word	0x0000041e

080025f8 <__aeabi_f2d>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	0043      	lsls	r3, r0, #1
 80025fc:	0246      	lsls	r6, r0, #9
 80025fe:	0fc4      	lsrs	r4, r0, #31
 8002600:	20fe      	movs	r0, #254	; 0xfe
 8002602:	0e1b      	lsrs	r3, r3, #24
 8002604:	1c59      	adds	r1, r3, #1
 8002606:	0a75      	lsrs	r5, r6, #9
 8002608:	4208      	tst	r0, r1
 800260a:	d00c      	beq.n	8002626 <__aeabi_f2d+0x2e>
 800260c:	22e0      	movs	r2, #224	; 0xe0
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4694      	mov	ip, r2
 8002612:	076d      	lsls	r5, r5, #29
 8002614:	0b36      	lsrs	r6, r6, #12
 8002616:	4463      	add	r3, ip
 8002618:	051b      	lsls	r3, r3, #20
 800261a:	4333      	orrs	r3, r6
 800261c:	07e4      	lsls	r4, r4, #31
 800261e:	4323      	orrs	r3, r4
 8002620:	0028      	movs	r0, r5
 8002622:	0019      	movs	r1, r3
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	2b00      	cmp	r3, #0
 8002628:	d114      	bne.n	8002654 <__aeabi_f2d+0x5c>
 800262a:	2d00      	cmp	r5, #0
 800262c:	d01b      	beq.n	8002666 <__aeabi_f2d+0x6e>
 800262e:	0028      	movs	r0, r5
 8002630:	f000 f82a 	bl	8002688 <__clzsi2>
 8002634:	280a      	cmp	r0, #10
 8002636:	dc1c      	bgt.n	8002672 <__aeabi_f2d+0x7a>
 8002638:	230b      	movs	r3, #11
 800263a:	002e      	movs	r6, r5
 800263c:	1a1b      	subs	r3, r3, r0
 800263e:	40de      	lsrs	r6, r3
 8002640:	0003      	movs	r3, r0
 8002642:	3315      	adds	r3, #21
 8002644:	409d      	lsls	r5, r3
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <__aeabi_f2d+0x88>)
 8002648:	0336      	lsls	r6, r6, #12
 800264a:	1a12      	subs	r2, r2, r0
 800264c:	0552      	lsls	r2, r2, #21
 800264e:	0b36      	lsrs	r6, r6, #12
 8002650:	0d53      	lsrs	r3, r2, #21
 8002652:	e7e1      	b.n	8002618 <__aeabi_f2d+0x20>
 8002654:	2d00      	cmp	r5, #0
 8002656:	d009      	beq.n	800266c <__aeabi_f2d+0x74>
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0b36      	lsrs	r6, r6, #12
 800265c:	0312      	lsls	r2, r2, #12
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <__aeabi_f2d+0x8c>)
 8002660:	076d      	lsls	r5, r5, #29
 8002662:	4316      	orrs	r6, r2
 8002664:	e7d8      	b.n	8002618 <__aeabi_f2d+0x20>
 8002666:	2300      	movs	r3, #0
 8002668:	2600      	movs	r6, #0
 800266a:	e7d5      	b.n	8002618 <__aeabi_f2d+0x20>
 800266c:	2600      	movs	r6, #0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <__aeabi_f2d+0x8c>)
 8002670:	e7d2      	b.n	8002618 <__aeabi_f2d+0x20>
 8002672:	0003      	movs	r3, r0
 8002674:	3b0b      	subs	r3, #11
 8002676:	409d      	lsls	r5, r3
 8002678:	002e      	movs	r6, r5
 800267a:	2500      	movs	r5, #0
 800267c:	e7e3      	b.n	8002646 <__aeabi_f2d+0x4e>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	00000389 	.word	0x00000389
 8002684:	000007ff 	.word	0x000007ff

08002688 <__clzsi2>:
 8002688:	211c      	movs	r1, #28
 800268a:	2301      	movs	r3, #1
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	4298      	cmp	r0, r3
 8002690:	d301      	bcc.n	8002696 <__clzsi2+0xe>
 8002692:	0c00      	lsrs	r0, r0, #16
 8002694:	3910      	subs	r1, #16
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	4298      	cmp	r0, r3
 800269a:	d301      	bcc.n	80026a0 <__clzsi2+0x18>
 800269c:	0a00      	lsrs	r0, r0, #8
 800269e:	3908      	subs	r1, #8
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d301      	bcc.n	80026aa <__clzsi2+0x22>
 80026a6:	0900      	lsrs	r0, r0, #4
 80026a8:	3904      	subs	r1, #4
 80026aa:	a202      	add	r2, pc, #8	; (adr r2, 80026b4 <__clzsi2+0x2c>)
 80026ac:	5c10      	ldrb	r0, [r2, r0]
 80026ae:	1840      	adds	r0, r0, r1
 80026b0:	4770      	bx	lr
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	02020304 	.word	0x02020304
 80026b8:	01010101 	.word	0x01010101
	...

080026c4 <__clzdi2>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	2900      	cmp	r1, #0
 80026c8:	d103      	bne.n	80026d2 <__clzdi2+0xe>
 80026ca:	f7ff ffdd 	bl	8002688 <__clzsi2>
 80026ce:	3020      	adds	r0, #32
 80026d0:	e002      	b.n	80026d8 <__clzdi2+0x14>
 80026d2:	0008      	movs	r0, r1
 80026d4:	f7ff ffd8 	bl	8002688 <__clzsi2>
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	46c0      	nop			; (mov r8, r8)

080026dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_GPIO_Init+0x70>)
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <MX_GPIO_Init+0x70>)
 80026e8:	2104      	movs	r1, #4
 80026ea:	430a      	orrs	r2, r1
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_GPIO_Init+0x70>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_GPIO_Init+0x70>)
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <MX_GPIO_Init+0x70>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	430a      	orrs	r2, r1
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_GPIO_Init+0x70>)
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_GPIO_Init+0x70>)
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <MX_GPIO_Init+0x70>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_GPIO_Init+0x70>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_GPIO_Init+0x70>)
 800272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <MX_GPIO_Init+0x70>)
 8002730:	2102      	movs	r1, #2
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <MX_GPIO_Init+0x70>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000

08002750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <MX_I2C1_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_I2C1_Init+0x74>)
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <MX_I2C1_Init+0x7c>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_I2C1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_I2C1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_I2C1_Init+0x74>)
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fe2f 	bl	80033f0 <HAL_I2C_Init>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002796:	f000 f92f 	bl	80029f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_I2C1_Init+0x74>)
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f001 fac4 	bl	8003d2c <HAL_I2CEx_ConfigAnalogFilter>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 f926 	bl	80029f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <MX_I2C1_Init+0x74>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	0018      	movs	r0, r3
 80027b2:	f001 fb07 	bl	8003dc4 <HAL_I2CEx_ConfigDigitalFilter>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f000 f91d 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200001f8 	.word	0x200001f8
 80027c8:	40005400 	.word	0x40005400
 80027cc:	00707cbb 	.word	0x00707cbb

080027d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	240c      	movs	r4, #12
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	0018      	movs	r0, r3
 80027de:	2314      	movs	r3, #20
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f003 f9de 	bl	8005ba4 <memset>
  if(i2cHandle->Instance==I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_I2C_MspInit+0x80>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12a      	bne.n	8002848 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_I2C_MspInit+0x84>)
 80027f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_I2C_MspInit+0x84>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_I2C_MspInit+0x84>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	22c0      	movs	r2, #192	; 0xc0
 800280e:	00d2      	lsls	r2, r2, #3
 8002810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002812:	0021      	movs	r1, r4
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2212      	movs	r2, #18
 8002818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2203      	movs	r2, #3
 8002824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2206      	movs	r2, #6
 800282a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	187a      	adds	r2, r7, r1
 800282e:	23a0      	movs	r3, #160	; 0xa0
 8002830:	05db      	lsls	r3, r3, #23
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fc5d 	bl	80030f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_I2C_MspInit+0x84>)
 800283c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_I2C_MspInit+0x84>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0389      	lsls	r1, r1, #14
 8002844:	430a      	orrs	r2, r1
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b009      	add	sp, #36	; 0x24
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	40005400 	.word	0x40005400
 8002854:	40021000 	.word	0x40021000

08002858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800285c:	f000 fb02 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002860:	f000 f840 	bl	80028e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002864:	f7ff ff3a 	bl	80026dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002868:	f7ff ff72 	bl	8002750 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800286c:	f000 f9fa 	bl	8002c64 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002870:	f000 fa28 	bl	8002cc4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002874:	f000 f8c6 	bl	8002a04 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  i2c_init();
 8002878:	f002 fff0 	bl	800585c <i2c_init>
  SHT_begin(&sht31);
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <main+0x80>)
 800287e:	0018      	movs	r0, r3
 8002880:	f003 f82e 	bl	80058e0 <SHT_begin>
  SHT_reset(&sht31);
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <main+0x80>)
 8002886:	0018      	movs	r0, r3
 8002888:	f003 f85a 	bl	8005940 <SHT_reset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SHT_mesure(&sht31);
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <main+0x80>)
 800288e:	0018      	movs	r0, r3
 8002890:	f003 f866 	bl	8005960 <SHT_mesure>
	  printf("Temperature: %0.2f \r\n",SHT_read_temp(&sht31));
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <main+0x80>)
 8002896:	0018      	movs	r0, r3
 8002898:	f003 f83e 	bl	8005918 <SHT_read_temp>
 800289c:	1c03      	adds	r3, r0, #0
 800289e:	1c18      	adds	r0, r3, #0
 80028a0:	f7ff feaa 	bl	80025f8 <__aeabi_f2d>
 80028a4:	0002      	movs	r2, r0
 80028a6:	000b      	movs	r3, r1
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <main+0x84>)
 80028aa:	0008      	movs	r0, r1
 80028ac:	f003 fdf0 	bl	8006490 <iprintf>
	  printf("Humidity: %0.2f \r\n",SHT_read_humi(&sht31));
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <main+0x80>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f003 f83a 	bl	800592c <SHT_read_humi>
 80028b8:	1c03      	adds	r3, r0, #0
 80028ba:	1c18      	adds	r0, r3, #0
 80028bc:	f7ff fe9c 	bl	80025f8 <__aeabi_f2d>
 80028c0:	0002      	movs	r2, r0
 80028c2:	000b      	movs	r3, r1
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <main+0x88>)
 80028c6:	0008      	movs	r0, r1
 80028c8:	f003 fde2 	bl	8006490 <iprintf>
	  HAL_Delay(1000);
 80028cc:	23fa      	movs	r3, #250	; 0xfa
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fb37 	bl	8002f44 <HAL_Delay>
	  SHT_mesure(&sht31);
 80028d6:	e7d9      	b.n	800288c <main+0x34>
 80028d8:	20000378 	.word	0x20000378
 80028dc:	08008798 	.word	0x08008798
 80028e0:	080087b0 	.word	0x080087b0

080028e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b09d      	sub	sp, #116	; 0x74
 80028e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ea:	2438      	movs	r4, #56	; 0x38
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	0018      	movs	r0, r3
 80028f0:	2338      	movs	r3, #56	; 0x38
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f003 f955 	bl	8005ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fa:	2324      	movs	r3, #36	; 0x24
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	0018      	movs	r0, r3
 8002900:	2314      	movs	r3, #20
 8002902:	001a      	movs	r2, r3
 8002904:	2100      	movs	r1, #0
 8002906:	f003 f94d 	bl	8005ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800290a:	003b      	movs	r3, r7
 800290c:	0018      	movs	r0, r3
 800290e:	2324      	movs	r3, #36	; 0x24
 8002910:	001a      	movs	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f003 f946 	bl	8005ba4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <SystemClock_Config+0x108>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <SystemClock_Config+0x10c>)
 800291e:	401a      	ands	r2, r3
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <SystemClock_Config+0x108>)
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0109      	lsls	r1, r1, #4
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800292a:	f001 fa97 	bl	8003e5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <SystemClock_Config+0x110>)
 8002930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <SystemClock_Config+0x110>)
 8002934:	492e      	ldr	r1, [pc, #184]	; (80029f0 <SystemClock_Config+0x10c>)
 8002936:	400a      	ands	r2, r1
 8002938:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2206      	movs	r2, #6
 800293e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	0052      	lsls	r2, r2, #1
 8002946:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002948:	0021      	movs	r1, r4
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2201      	movs	r2, #1
 800294e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2210      	movs	r2, #16
 8002954:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2202      	movs	r2, #2
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	02d2      	lsls	r2, r2, #11
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	03d2      	lsls	r2, r2, #15
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002972:	187b      	adds	r3, r7, r1
 8002974:	0018      	movs	r0, r3
 8002976:	f001 fa7f 	bl	8003e78 <HAL_RCC_OscConfig>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800297e:	f000 f83b 	bl	80029f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002982:	2124      	movs	r1, #36	; 0x24
 8002984:	187b      	adds	r3, r7, r1
 8002986:	220f      	movs	r2, #15
 8002988:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2203      	movs	r2, #3
 800298e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2101      	movs	r1, #1
 80029a6:	0018      	movs	r0, r3
 80029a8:	f001 fe3a 	bl	8004620 <HAL_RCC_ClockConfig>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d001      	beq.n	80029b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80029b0:	f000 f822 	bl	80029f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80029b4:	003b      	movs	r3, r7
 80029b6:	222d      	movs	r2, #45	; 0x2d
 80029b8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029ba:	003b      	movs	r3, r7
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029c0:	003b      	movs	r3, r7
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029c6:	003b      	movs	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029cc:	003b      	movs	r3, r7
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0252      	lsls	r2, r2, #9
 80029d2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d4:	003b      	movs	r3, r7
 80029d6:	0018      	movs	r0, r3
 80029d8:	f002 f846 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80029e0:	f000 f80a 	bl	80029f8 <Error_Handler>
  }
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b01d      	add	sp, #116	; 0x74
 80029ea:	bd90      	pop	{r4, r7, pc}
 80029ec:	40007000 	.word	0x40007000
 80029f0:	ffffe7ff 	.word	0xffffe7ff
 80029f4:	40021000 	.word	0x40021000

080029f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
}
 80029fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <Error_Handler+0x8>
	...

08002a04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <MX_RTC_Init+0x50>)
 8002a0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a16:	227f      	movs	r2, #127	; 0x7f
 8002a18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <MX_RTC_Init+0x4c>)
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f002 f96a 	bl	8004d14 <HAL_RTC_Init>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002a44:	f7ff ffd8 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	20000244 	.word	0x20000244
 8002a54:	40002800 	.word	0x40002800

08002a58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_RTC_MspInit+0x28>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d106      	bne.n	8002a78 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RTC_MspInit+0x2c>)
 8002a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RTC_MspInit+0x2c>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	02c9      	lsls	r1, r1, #11
 8002a74:	430a      	orrs	r2, r1
 8002a76:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40002800 	.word	0x40002800
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_MspInit+0x24>)
 8002a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_MspInit+0x24>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	430a      	orrs	r2, r1
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_MspInit+0x24>)
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_MspInit+0x24>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0549      	lsls	r1, r1, #21
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f000 fa1a 	bl	8002f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
	return 1;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_kill>:

int _kill(int pid, int sig)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002af4:	f003 f82c 	bl	8005b50 <__errno>
 8002af8:	0003      	movs	r3, r0
 8002afa:	2216      	movs	r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
	return -1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	425b      	negs	r3, r3
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_exit>:

void _exit (int status)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	425a      	negs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0011      	movs	r1, r2
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff ffe5 	bl	8002aea <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b20:	e7fe      	b.n	8002b20 <_exit+0x16>

08002b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00a      	b.n	8002b4a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b34:	e000      	b.n	8002b38 <_read+0x16>
 8002b36:	bf00      	nop
 8002b38:	0001      	movs	r1, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf0      	blt.n	8002b34 <_read+0x12>
	}

return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e009      	b.n	8002b82 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	60ba      	str	r2, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	0018      	movs	r0, r3
 8002b78:	e000      	b.n	8002b7c <_write+0x20>
 8002b7a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbf1      	blt.n	8002b6e <_write+0x12>
	}
	return len;
 8002b8a:	687b      	ldr	r3, [r7, #4]
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b006      	add	sp, #24
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_close>:

int _close(int file)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	return -1;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	425b      	negs	r3, r3
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	0192      	lsls	r2, r2, #6
 8002bb8:	605a      	str	r2, [r3, #4]
	return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_isatty>:

int _isatty(int file)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
	return 0;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c1c:	f002 ff98 	bl	8005b50 <__errno>
 8002c20:	0003      	movs	r3, r0
 8002c22:	220c      	movs	r2, #12
 8002c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20005000 	.word	0x20005000
 8002c4c:	00000400 	.word	0x00000400
 8002c50:	20000268 	.word	0x20000268
 8002c54:	200003a0 	.word	0x200003a0

08002c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <MX_LPUART1_UART_Init+0x58>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <MX_LPUART1_UART_Init+0x5c>)
 8002c72:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0552      	lsls	r2, r2, #21
 8002c7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <MX_LPUART1_UART_Init+0x54>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f002 f926 	bl	8004ef4 <HAL_UART_Init>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002cac:	f7ff fea4 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	2000026c 	.word	0x2000026c
 8002cbc:	40004800 	.word	0x40004800
 8002cc0:	00033324 	.word	0x00033324

08002cc4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <MX_USART1_UART_Init+0x5c>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cd0:	22e1      	movs	r2, #225	; 0xe1
 8002cd2:	0252      	lsls	r2, r2, #9
 8002cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <MX_USART1_UART_Init+0x58>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f002 f8f3 	bl	8004ef4 <HAL_UART_Init>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d12:	f7ff fe71 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200002f0 	.word	0x200002f0
 8002d20:	40013800 	.word	0x40013800

08002d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b08b      	sub	sp, #44	; 0x2c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	2414      	movs	r4, #20
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	0018      	movs	r0, r3
 8002d32:	2314      	movs	r3, #20
 8002d34:	001a      	movs	r2, r3
 8002d36:	2100      	movs	r1, #0
 8002d38:	f002 ff34 	bl	8005ba4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2f      	ldr	r2, [pc, #188]	; (8002e00 <HAL_UART_MspInit+0xdc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12a      	bne.n	8002d9c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	02c9      	lsls	r1, r1, #11
 8002d50:	430a      	orrs	r2, r1
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2201      	movs	r2, #1
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d6c:	0021      	movs	r1, r4
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	220c      	movs	r2, #12
 8002d72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2202      	movs	r2, #2
 8002d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2203      	movs	r2, #3
 8002d84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2206      	movs	r2, #6
 8002d8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	187a      	adds	r2, r7, r1
 8002d8e:	23a0      	movs	r3, #160	; 0xa0
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 f9ad 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d9a:	e02d      	b.n	8002df8 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_UART_MspInit+0xe4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d128      	bne.n	8002df8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	01c9      	lsls	r1, r1, #7
 8002db0:	430a      	orrs	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002dba:	2102      	movs	r1, #2
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_UART_MspInit+0xe0>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dcc:	2114      	movs	r1, #20
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	22c0      	movs	r2, #192	; 0xc0
 8002dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2203      	movs	r2, #3
 8002de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_UART_MspInit+0xe8>)
 8002df0:	0019      	movs	r1, r3
 8002df2:	0010      	movs	r0, r2
 8002df4:	f000 f97e 	bl	80030f4 <HAL_GPIO_Init>
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b00b      	add	sp, #44	; 0x2c
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	40004800 	.word	0x40004800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	50000400 	.word	0x50000400

08002e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002e12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e16:	490e      	ldr	r1, [pc, #56]	; (8002e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <LoopForever+0xe>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e2c:	4c0b      	ldr	r4, [pc, #44]	; (8002e5c <LoopForever+0x16>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e3a:	f7ff ff0d 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f002 fe8d 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e42:	f7ff fd09 	bl	8002858 <main>

08002e46 <LoopForever>:

LoopForever:
    b LoopForever
 8002e46:	e7fe      	b.n	8002e46 <LoopForever>
   ldr   r0, =_estack
 8002e48:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e50:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e54:	08008d1c 	.word	0x08008d1c
  ldr r2, =_sbss
 8002e58:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e5c:	2000039c 	.word	0x2000039c

08002e60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC1_COMP_IRQHandler>
	...

08002e64 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_Init+0x3c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_Init+0x3c>)
 8002e76:	2140      	movs	r1, #64	; 0x40
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f000 f811 	bl	8002ea4 <HAL_InitTick>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e001      	b.n	8002e92 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e8e:	f7ff fdfb 	bl	8002a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_InitTick+0x5c>)
 8002eae:	681c      	ldr	r4, [r3, #0]
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_InitTick+0x60>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	23fa      	movs	r3, #250	; 0xfa
 8002eb8:	0098      	lsls	r0, r3, #2
 8002eba:	f7fd f941 	bl	8000140 <__udivsi3>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	0020      	movs	r0, r4
 8002ec4:	f7fd f93c 	bl	8000140 <__udivsi3>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f905 	bl	80030da <HAL_SYSTICK_Config>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e00f      	b.n	8002ef8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d80b      	bhi.n	8002ef6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f8e2 	bl	80030b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_InitTick+0x64>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b003      	add	sp, #12
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000008 	.word	0x20000008
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_IncTick+0x1c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	001a      	movs	r2, r3
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_IncTick+0x20>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	18d2      	adds	r2, r2, r3
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_IncTick+0x20>)
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	20000374 	.word	0x20000374

08002f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  return uwTick;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_GetTick+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	20000374 	.word	0x20000374

08002f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff fff0 	bl	8002f30 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	d005      	beq.n	8002f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_Delay+0x44>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	001a      	movs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	f7ff ffe0 	bl	8002f30 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d8f7      	bhi.n	8002f6c <HAL_Delay+0x28>
  {
  }
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20000008 	.word	0x20000008

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	0002      	movs	r2, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa0:	d828      	bhi.n	8002ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <__NVIC_SetPriority+0xd4>)
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	33c0      	adds	r3, #192	; 0xc0
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	589b      	ldr	r3, [r3, r2]
 8002fb2:	1dfa      	adds	r2, r7, #7
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	0011      	movs	r1, r2
 8002fb8:	2203      	movs	r2, #3
 8002fba:	400a      	ands	r2, r1
 8002fbc:	00d2      	lsls	r2, r2, #3
 8002fbe:	21ff      	movs	r1, #255	; 0xff
 8002fc0:	4091      	lsls	r1, r2
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	43d2      	mvns	r2, r2
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	2303      	movs	r3, #3
 8002fda:	4003      	ands	r3, r0
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe0:	481f      	ldr	r0, [pc, #124]	; (8003060 <__NVIC_SetPriority+0xd4>)
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	430a      	orrs	r2, r1
 8002fec:	33c0      	adds	r3, #192	; 0xc0
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ff2:	e031      	b.n	8003058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <__NVIC_SetPriority+0xd8>)
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	230f      	movs	r3, #15
 8002ffe:	400b      	ands	r3, r1
 8003000:	3b08      	subs	r3, #8
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3306      	adds	r3, #6
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	3304      	adds	r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1dfa      	adds	r2, r7, #7
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	0011      	movs	r1, r2
 8003014:	2203      	movs	r2, #3
 8003016:	400a      	ands	r2, r1
 8003018:	00d2      	lsls	r2, r2, #3
 800301a:	21ff      	movs	r1, #255	; 0xff
 800301c:	4091      	lsls	r1, r2
 800301e:	000a      	movs	r2, r1
 8003020:	43d2      	mvns	r2, r2
 8003022:	401a      	ands	r2, r3
 8003024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	401a      	ands	r2, r3
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	0018      	movs	r0, r3
 8003034:	2303      	movs	r3, #3
 8003036:	4003      	ands	r3, r0
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800303c:	4809      	ldr	r0, [pc, #36]	; (8003064 <__NVIC_SetPriority+0xd8>)
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	001c      	movs	r4, r3
 8003044:	230f      	movs	r3, #15
 8003046:	4023      	ands	r3, r4
 8003048:	3b08      	subs	r3, #8
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	430a      	orrs	r2, r1
 800304e:	3306      	adds	r3, #6
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	18c3      	adds	r3, r0, r3
 8003054:	3304      	adds	r3, #4
 8003056:	601a      	str	r2, [r3, #0]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b003      	add	sp, #12
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	045b      	lsls	r3, r3, #17
 8003078:	429a      	cmp	r2, r3
 800307a:	d301      	bcc.n	8003080 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307c:	2301      	movs	r3, #1
 800307e:	e010      	b.n	80030a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <SysTick_Config+0x44>)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	3a01      	subs	r2, #1
 8003086:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003088:	2301      	movs	r3, #1
 800308a:	425b      	negs	r3, r3
 800308c:	2103      	movs	r1, #3
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff ff7c 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <SysTick_Config+0x44>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <SysTick_Config+0x44>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	210f      	movs	r1, #15
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff ffbf 	bl	8003068 <SysTick_Config>
 80030ea:	0003      	movs	r3, r0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800310a:	e155      	b.n	80033b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4091      	lsls	r1, r2
 8003116:	000a      	movs	r2, r1
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d100      	bne.n	8003124 <HAL_GPIO_Init+0x30>
 8003122:	e146      	b.n	80033b2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	4013      	ands	r3, r2
 800312c:	2b01      	cmp	r3, #1
 800312e:	d005      	beq.n	800313c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2203      	movs	r2, #3
 8003136:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003138:	2b02      	cmp	r3, #2
 800313a:	d130      	bne.n	800319e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	43da      	mvns	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003172:	2201      	movs	r2, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	43da      	mvns	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	2201      	movs	r2, #1
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d017      	beq.n	80031da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	43da      	mvns	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2203      	movs	r2, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d123      	bne.n	800322e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	58d3      	ldr	r3, [r2, r3]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2207      	movs	r2, #7
 80031f8:	4013      	ands	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	43da      	mvns	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2107      	movs	r1, #7
 8003212:	400b      	ands	r3, r1
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	6939      	ldr	r1, [r7, #16]
 800322c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	43da      	mvns	r2, r3
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	401a      	ands	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	0013      	movs	r3, r2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	4013      	ands	r3, r2
 800326c:	d100      	bne.n	8003270 <HAL_GPIO_Init+0x17c>
 800326e:	e0a0      	b.n	80033b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003270:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003274:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003276:	2101      	movs	r1, #1
 8003278:	430a      	orrs	r2, r1
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800327c:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	589b      	ldr	r3, [r3, r2]
 8003288:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2203      	movs	r2, #3
 800328e:	4013      	ands	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	409a      	lsls	r2, r3
 8003296:	0013      	movs	r3, r2
 8003298:	43da      	mvns	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x1f6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x2e4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x1f2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_GPIO_Init+0x2ec>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x1ea>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x1e6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_GPIO_Init+0x2f4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032d2:	2305      	movs	r3, #5
 80032d4:	e00a      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032da:	2304      	movs	r3, #4
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x1f8>
 80032ea:	2300      	movs	r3, #0
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	2103      	movs	r1, #3
 80032f0:	400a      	ands	r2, r1
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4935      	ldr	r1, [pc, #212]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43da      	mvns	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	025b      	lsls	r3, r3, #9
 8003322:	4013      	ands	r3, r2
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43da      	mvns	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	029b      	lsls	r3, r3, #10
 800334c:	4013      	ands	r3, r2
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	43da      	mvns	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	035b      	lsls	r3, r3, #13
 8003376:	4013      	ands	r3, r2
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43da      	mvns	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	039b      	lsls	r3, r3, #14
 80033a0:	4013      	ands	r3, r2
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	3301      	adds	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	40da      	lsrs	r2, r3
 80033c0:	1e13      	subs	r3, r2, #0
 80033c2:	d000      	beq.n	80033c6 <HAL_GPIO_Init+0x2d2>
 80033c4:	e6a2      	b.n	800310c <HAL_GPIO_Init+0x18>
  }
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b006      	add	sp, #24
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010000 	.word	0x40010000
 80033d8:	50000400 	.word	0x50000400
 80033dc:	50000800 	.word	0x50000800
 80033e0:	50000c00 	.word	0x50000c00
 80033e4:	50001000 	.word	0x50001000
 80033e8:	50001c00 	.word	0x50001c00
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e082      	b.n	8003508 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2241      	movs	r2, #65	; 0x41
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2240      	movs	r2, #64	; 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff f9d9 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2241      	movs	r2, #65	; 0x41
 8003422:	2124      	movs	r1, #36	; 0x24
 8003424:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	438a      	bics	r2, r1
 8003434:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4934      	ldr	r1, [pc, #208]	; (8003510 <HAL_I2C_Init+0x120>)
 8003440:	400a      	ands	r2, r1
 8003442:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4931      	ldr	r1, [pc, #196]	; (8003514 <HAL_I2C_Init+0x124>)
 8003450:	400a      	ands	r2, r1
 8003452:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0209      	lsls	r1, r1, #8
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	e007      	b.n	800347e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2184      	movs	r1, #132	; 0x84
 8003478:	0209      	lsls	r1, r1, #8
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d104      	bne.n	8003490 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	491f      	ldr	r1, [pc, #124]	; (8003518 <HAL_I2C_Init+0x128>)
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	491a      	ldr	r1, [pc, #104]	; (8003514 <HAL_I2C_Init+0x124>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69d9      	ldr	r1, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1a      	ldr	r2, [r3, #32]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2241      	movs	r2, #65	; 0x41
 80034f4:	2120      	movs	r1, #32
 80034f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2242      	movs	r2, #66	; 0x42
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	f0ffffff 	.word	0xf0ffffff
 8003514:	ffff7fff 	.word	0xffff7fff
 8003518:	02008000 	.word	0x02008000

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	0008      	movs	r0, r1
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	0019      	movs	r1, r3
 800352a:	230a      	movs	r3, #10
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	1c02      	adds	r2, r0, #0
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	2308      	movs	r3, #8
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	1c0a      	adds	r2, r1, #0
 8003538:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2241      	movs	r2, #65	; 0x41
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d000      	beq.n	8003548 <HAL_I2C_Master_Transmit+0x2c>
 8003546:	e0e7      	b.n	8003718 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Master_Transmit+0x3a>
 8003552:	2302      	movs	r3, #2
 8003554:	e0e1      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800355e:	f7ff fce7 	bl	8002f30 <HAL_GetTick>
 8003562:	0003      	movs	r3, r0
 8003564:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	0219      	lsls	r1, r3, #8
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2319      	movs	r3, #25
 8003572:	2201      	movs	r2, #1
 8003574:	f000 fa04 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0cc      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2241      	movs	r2, #65	; 0x41
 8003584:	2121      	movs	r1, #33	; 0x21
 8003586:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2242      	movs	r2, #66	; 0x42
 800358c:	2110      	movs	r1, #16
 800358e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2208      	movs	r2, #8
 80035a0:	18ba      	adds	r2, r7, r2
 80035a2:	8812      	ldrh	r2, [r2, #0]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2bff      	cmp	r3, #255	; 0xff
 80035b4:	d911      	bls.n	80035da <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	045c      	lsls	r4, r3, #17
 80035c6:	230a      	movs	r3, #10
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	8819      	ldrh	r1, [r3, #0]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	4b55      	ldr	r3, [pc, #340]	; (8003724 <HAL_I2C_Master_Transmit+0x208>)
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	0023      	movs	r3, r4
 80035d4:	f000 fb74 	bl	8003cc0 <I2C_TransferConfig>
 80035d8:	e075      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	049c      	lsls	r4, r3, #18
 80035ee:	230a      	movs	r3, #10
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	8819      	ldrh	r1, [r3, #0]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <HAL_I2C_Master_Transmit+0x208>)
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	0023      	movs	r3, r4
 80035fc:	f000 fb60 	bl	8003cc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003600:	e061      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f9f8 	bl	80039fe <I2C_WaitOnTXISFlagUntilTimeout>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e081      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03a      	beq.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d136      	bne.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	0013      	movs	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	f000 f98b 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e053      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2bff      	cmp	r3, #255	; 0xff
 800367a:	d911      	bls.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	b2da      	uxtb	r2, r3
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	045c      	lsls	r4, r3, #17
 800368c:	230a      	movs	r3, #10
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	8819      	ldrh	r1, [r3, #0]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	0023      	movs	r3, r4
 800369a:	f000 fb11 	bl	8003cc0 <I2C_TransferConfig>
 800369e:	e012      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	049c      	lsls	r4, r3, #18
 80036b4:	230a      	movs	r3, #10
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	8819      	ldrh	r1, [r3, #0]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	0023      	movs	r3, r4
 80036c2:	f000 fafd 	bl	8003cc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d198      	bne.n	8003602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f9d0 	bl	8003a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e01a      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2220      	movs	r2, #32
 80036ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	490c      	ldr	r1, [pc, #48]	; (8003728 <HAL_I2C_Master_Transmit+0x20c>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2241      	movs	r2, #65	; 0x41
 8003700:	2120      	movs	r1, #32
 8003702:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2242      	movs	r2, #66	; 0x42
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b007      	add	sp, #28
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	80002000 	.word	0x80002000
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	0008      	movs	r0, r1
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	0019      	movs	r1, r3
 800373a:	230a      	movs	r3, #10
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	1c02      	adds	r2, r0, #0
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	1c0a      	adds	r2, r1, #0
 8003748:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2241      	movs	r2, #65	; 0x41
 800374e:	5c9b      	ldrb	r3, [r3, r2]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d000      	beq.n	8003758 <HAL_I2C_Master_Receive+0x2c>
 8003756:	e0e8      	b.n	800392a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	5c9b      	ldrb	r3, [r3, r2]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Master_Receive+0x3a>
 8003762:	2302      	movs	r3, #2
 8003764:	e0e2      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2240      	movs	r2, #64	; 0x40
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800376e:	f7ff fbdf 	bl	8002f30 <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	0219      	lsls	r1, r3, #8
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2319      	movs	r3, #25
 8003782:	2201      	movs	r2, #1
 8003784:	f000 f8fc 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cd      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2241      	movs	r2, #65	; 0x41
 8003794:	2122      	movs	r1, #34	; 0x22
 8003796:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2242      	movs	r2, #66	; 0x42
 800379c:	2110      	movs	r1, #16
 800379e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2208      	movs	r2, #8
 80037b0:	18ba      	adds	r2, r7, r2
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2bff      	cmp	r3, #255	; 0xff
 80037c4:	d911      	bls.n	80037ea <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22ff      	movs	r2, #255	; 0xff
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	045c      	lsls	r4, r3, #17
 80037d6:	230a      	movs	r3, #10
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	8819      	ldrh	r1, [r3, #0]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <HAL_I2C_Master_Receive+0x208>)
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	0023      	movs	r3, r4
 80037e4:	f000 fa6c 	bl	8003cc0 <I2C_TransferConfig>
 80037e8:	e076      	b.n	80038d8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	049c      	lsls	r4, r3, #18
 80037fe:	230a      	movs	r3, #10
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	8819      	ldrh	r1, [r3, #0]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <HAL_I2C_Master_Receive+0x208>)
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	0023      	movs	r3, r4
 800380c:	f000 fa58 	bl	8003cc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003810:	e062      	b.n	80038d8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f96b 	bl	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e082      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d03a      	beq.n	80038d8 <HAL_I2C_Master_Receive+0x1ac>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d136      	bne.n	80038d8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	0013      	movs	r3, r2
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	f000 f882 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e053      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2bff      	cmp	r3, #255	; 0xff
 800388c:	d911      	bls.n	80038b2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	22ff      	movs	r2, #255	; 0xff
 8003892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	b2da      	uxtb	r2, r3
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	045c      	lsls	r4, r3, #17
 800389e:	230a      	movs	r3, #10
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	8819      	ldrh	r1, [r3, #0]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	0023      	movs	r3, r4
 80038ac:	f000 fa08 	bl	8003cc0 <I2C_TransferConfig>
 80038b0:	e012      	b.n	80038d8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	049c      	lsls	r4, r3, #18
 80038c6:	230a      	movs	r3, #10
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	8819      	ldrh	r1, [r3, #0]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	0023      	movs	r3, r4
 80038d4:	f000 f9f4 	bl	8003cc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d197      	bne.n	8003812 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 f8c7 	bl	8003a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01a      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2220      	movs	r2, #32
 80038fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	490b      	ldr	r1, [pc, #44]	; (8003938 <HAL_I2C_Master_Receive+0x20c>)
 800390a:	400a      	ands	r2, r1
 800390c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2241      	movs	r2, #65	; 0x41
 8003912:	2120      	movs	r1, #32
 8003914:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2242      	movs	r2, #66	; 0x42
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2240      	movs	r2, #64	; 0x40
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b007      	add	sp, #28
 8003932:	bd90      	pop	{r4, r7, pc}
 8003934:	80002400 	.word	0x80002400
 8003938:	fe00e800 	.word	0xfe00e800

0800393c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	2b01      	cmp	r3, #1
 8003966:	d007      	beq.n	8003978 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
  }
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	e021      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	d01e      	beq.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7ff faca 	bl	8002f30 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d113      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	2220      	movs	r2, #32
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2241      	movs	r2, #65	; 0x41
 80039be:	2120      	movs	r1, #32
 80039c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2242      	movs	r2, #66	; 0x42
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	425a      	negs	r2, r3
 80039e6:	4153      	adcs	r3, r2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	001a      	movs	r2, r3
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d0ce      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a0a:	e02b      	b.n	8003a64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 f8da 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003a18:	1e03      	subs	r3, r0, #0
 8003a1a:	d001      	beq.n	8003a20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e029      	b.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d01e      	beq.n	8003a64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7ff fa83 	bl	8002f30 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d113      	bne.n	8003a64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	2220      	movs	r2, #32
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2241      	movs	r2, #65	; 0x41
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2242      	movs	r2, #66	; 0x42
 8003a54:	2100      	movs	r1, #0
 8003a56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e007      	b.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d1cc      	bne.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a88:	e028      	b.n	8003adc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f89b 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e026      	b.n	8003aec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7ff fa47 	bl	8002f30 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d113      	bne.n	8003adc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	2220      	movs	r2, #32
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2241      	movs	r2, #65	; 0x41
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2242      	movs	r2, #66	; 0x42
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e007      	b.n	8003aec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d1cf      	bne.n	8003a8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b00:	e055      	b.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 f85f 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e053      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d129      	bne.n	8003b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d105      	bne.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e03f      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2220      	movs	r2, #32
 8003b44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	491d      	ldr	r1, [pc, #116]	; (8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2241      	movs	r2, #65	; 0x41
 8003b60:	2120      	movs	r1, #32
 8003b62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2242      	movs	r2, #66	; 0x42
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e022      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b78:	f7ff f9da 	bl	8002f30 <HAL_GetTick>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	2220      	movs	r2, #32
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2241      	movs	r2, #65	; 0x41
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d1a2      	bne.n	8003b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2210      	movs	r2, #16
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d164      	bne.n	8003cb0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	049b      	lsls	r3, r3, #18
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	049b      	lsls	r3, r3, #18
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d02b      	beq.n	8003c52 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	01c9      	lsls	r1, r1, #7
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0c:	e021      	b.n	8003c52 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	d01e      	beq.n	8003c52 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c14:	f7ff f98c 	bl	8002f30 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <I2C_IsAcknowledgeFailed+0x5e>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	2220      	movs	r2, #32
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2241      	movs	r2, #65	; 0x41
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2242      	movs	r2, #66	; 0x42
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e02f      	b.n	8003cb2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d1d6      	bne.n	8003c0e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff fe62 	bl	800393c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	490e      	ldr	r1, [pc, #56]	; (8003cbc <I2C_IsAcknowledgeFailed+0xf0>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2241      	movs	r2, #65	; 0x41
 8003c98:	2120      	movs	r1, #32
 8003c9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2242      	movs	r2, #66	; 0x42
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b004      	add	sp, #16
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	0008      	movs	r0, r1
 8003cca:	0011      	movs	r1, r2
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	240a      	movs	r4, #10
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	1c02      	adds	r2, r0, #0
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	2009      	movs	r0, #9
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	1c0a      	adds	r2, r1, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	0d51      	lsrs	r1, r2, #21
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	00d2      	lsls	r2, r2, #3
 8003cec:	400a      	ands	r2, r1
 8003cee:	490e      	ldr	r1, [pc, #56]	; (8003d28 <I2C_TransferConfig+0x68>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	43d2      	mvns	r2, r2
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	0d9a      	lsrs	r2, r3, #22
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	0418      	lsls	r0, r3, #16
 8003d06:	23ff      	movs	r3, #255	; 0xff
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	4003      	ands	r3, r0
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b005      	add	sp, #20
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	03ff63ff 	.word	0x03ff63ff

08003d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2241      	movs	r2, #65	; 0x41
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d138      	bne.n	8003db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e032      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2241      	movs	r2, #65	; 0x41
 8003d5c:	2124      	movs	r1, #36	; 0x24
 8003d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2241      	movs	r2, #65	; 0x41
 8003da4:	2120      	movs	r1, #32
 8003da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	ffffefff 	.word	0xffffefff

08003dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2241      	movs	r2, #65	; 0x41
 8003dd2:	5c9b      	ldrb	r3, [r3, r2]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d139      	bne.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2240      	movs	r2, #64	; 0x40
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e033      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2241      	movs	r2, #65	; 0x41
 8003df4:	2124      	movs	r1, #36	; 0x24
 8003df6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2241      	movs	r2, #65	; 0x41
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	fffff0ff 	.word	0xfffff0ff

08003e5c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	0049      	lsls	r1, r1, #1
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f000 fbbf 	bl	800460a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8c:	4bc9      	ldr	r3, [pc, #804]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	220c      	movs	r2, #12
 8003e92:	4013      	ands	r3, r2
 8003e94:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e96:	4bc7      	ldr	r3, [pc, #796]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d100      	bne.n	8003eae <HAL_RCC_OscConfig+0x36>
 8003eac:	e07e      	b.n	8003fac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d007      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x68>
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	025b      	lsls	r3, r3, #9
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4bbb      	ldr	r3, [pc, #748]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x5a>
 8003ed0:	e06b      	b.n	8003faa <HAL_RCC_OscConfig+0x132>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d167      	bne.n	8003faa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f000 fb95 	bl	800460a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	025b      	lsls	r3, r3, #9
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x84>
 8003eec:	4bb1      	ldr	r3, [pc, #708]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4bb0      	ldr	r3, [pc, #704]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	0249      	lsls	r1, r1, #9
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e027      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	23a0      	movs	r3, #160	; 0xa0
 8003f02:	02db      	lsls	r3, r3, #11
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10e      	bne.n	8003f26 <HAL_RCC_OscConfig+0xae>
 8003f08:	4baa      	ldr	r3, [pc, #680]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4ba9      	ldr	r3, [pc, #676]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	02c9      	lsls	r1, r1, #11
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	4ba7      	ldr	r3, [pc, #668]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4ba6      	ldr	r3, [pc, #664]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	0249      	lsls	r1, r1, #9
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e012      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f26:	4ba3      	ldr	r3, [pc, #652]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4ba2      	ldr	r3, [pc, #648]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f2c:	49a2      	ldr	r1, [pc, #648]	; (80041b8 <HAL_RCC_OscConfig+0x340>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4ba0      	ldr	r3, [pc, #640]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	025b      	lsls	r3, r3, #9
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4b9c      	ldr	r3, [pc, #624]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b9b      	ldr	r3, [pc, #620]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f46:	499d      	ldr	r1, [pc, #628]	; (80041bc <HAL_RCC_OscConfig+0x344>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe ffec 	bl	8002f30 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f5c:	e009      	b.n	8003f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5e:	f7fe ffe7 	bl	8002f30 <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b64      	cmp	r3, #100	; 0x64
 8003f6a:	d902      	bls.n	8003f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	f000 fb4c 	bl	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f72:	4b90      	ldr	r3, [pc, #576]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d0ef      	beq.n	8003f5e <HAL_RCC_OscConfig+0xe6>
 8003f7e:	e015      	b.n	8003fac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe ffd6 	bl	8002f30 <HAL_GetTick>
 8003f84:	0003      	movs	r3, r0
 8003f86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8a:	f7fe ffd1 	bl	8002f30 <HAL_GetTick>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	; 0x64
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e336      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9c:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x112>
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003faa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d100      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x140>
 8003fb6:	e099      	b.n	80040ec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	2120      	movs	r1, #32
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d13e      	bne.n	8004064 <HAL_RCC_OscConfig+0x1ec>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d13b      	bne.n	8004064 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003fec:	4b71      	ldr	r3, [pc, #452]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_RCC_OscConfig+0x188>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e304      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x348>)
 8004006:	4013      	ands	r3, r2
 8004008:	0019      	movs	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004016:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2209      	movs	r2, #9
 800401c:	4393      	bics	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004028:	f000 fc42 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 800402c:	0001      	movs	r1, r0
 800402e:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	220f      	movs	r2, #15
 8004036:	4013      	ands	r3, r2
 8004038:	4a62      	ldr	r2, [pc, #392]	; (80041c4 <HAL_RCC_OscConfig+0x34c>)
 800403a:	5cd3      	ldrb	r3, [r2, r3]
 800403c:	000a      	movs	r2, r1
 800403e:	40da      	lsrs	r2, r3
 8004040:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_OscConfig+0x350>)
 8004042:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004044:	4b61      	ldr	r3, [pc, #388]	; (80041cc <HAL_RCC_OscConfig+0x354>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2513      	movs	r5, #19
 800404a:	197c      	adds	r4, r7, r5
 800404c:	0018      	movs	r0, r3
 800404e:	f7fe ff29 	bl	8002ea4 <HAL_InitTick>
 8004052:	0003      	movs	r3, r0
 8004054:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004056:	197b      	adds	r3, r7, r5
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d046      	beq.n	80040ec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800405e:	197b      	adds	r3, r7, r5
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	e2d2      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d027      	beq.n	80040ba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800406a:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2209      	movs	r2, #9
 8004070:	4393      	bics	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe ff58 	bl	8002f30 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe ff53 	bl	8002f30 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e2b8      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2204      	movs	r2, #4
 800409e:	4013      	ands	r3, r2
 80040a0:	d0f1      	beq.n	8004086 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4a46      	ldr	r2, [pc, #280]	; (80041c0 <HAL_RCC_OscConfig+0x348>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	e018      	b.n	80040ec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 80040c0:	2101      	movs	r1, #1
 80040c2:	438a      	bics	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fe ff33 	bl	8002f30 <HAL_GetTick>
 80040ca:	0003      	movs	r3, r0
 80040cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fe ff2e 	bl	8002f30 <HAL_GetTick>
 80040d4:	0002      	movs	r2, r0
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e293      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d1f1      	bne.n	80040d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	4013      	ands	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_RCC_OscConfig+0x280>
 80040f6:	e0a2      	b.n	800423e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d140      	bne.n	8004180 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x29e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e279      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x358>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	0a19      	lsrs	r1, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	061a      	lsls	r2, r3, #24
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	0b5b      	lsrs	r3, r3, #13
 8004144:	3301      	adds	r3, #1
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	0212      	lsls	r2, r2, #8
 800414a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	210f      	movs	r1, #15
 8004154:	400b      	ands	r3, r1
 8004156:	491b      	ldr	r1, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x34c>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_OscConfig+0x350>)
 800415e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x354>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2513      	movs	r5, #19
 8004166:	197c      	adds	r4, r7, r5
 8004168:	0018      	movs	r0, r3
 800416a:	f7fe fe9b 	bl	8002ea4 <HAL_InitTick>
 800416e:	0003      	movs	r3, r0
 8004170:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004172:	197b      	adds	r3, r7, r5
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d061      	beq.n	800423e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800417a:	197b      	adds	r3, r7, r5
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	e244      	b.n	800460a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d040      	beq.n	800420a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x33c>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	0049      	lsls	r1, r1, #1
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fe fecb 	bl	8002f30 <HAL_GetTick>
 800419a:	0003      	movs	r3, r0
 800419c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800419e:	e019      	b.n	80041d4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041a0:	f7fe fec6 	bl	8002f30 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d912      	bls.n	80041d4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e22b      	b.n	800460a <HAL_RCC_OscConfig+0x792>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	40021000 	.word	0x40021000
 80041b8:	fffeffff 	.word	0xfffeffff
 80041bc:	fffbffff 	.word	0xfffbffff
 80041c0:	ffffe0ff 	.word	0xffffe0ff
 80041c4:	080088c4 	.word	0x080088c4
 80041c8:	20000000 	.word	0x20000000
 80041cc:	20000004 	.word	0x20000004
 80041d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041d4:	4bca      	ldr	r3, [pc, #808]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4013      	ands	r3, r2
 80041de:	d0df      	beq.n	80041a0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e0:	4bc7      	ldr	r3, [pc, #796]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4ac7      	ldr	r2, [pc, #796]	; (8004504 <HAL_RCC_OscConfig+0x68c>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ee:	4bc4      	ldr	r3, [pc, #784]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f4:	4bc2      	ldr	r3, [pc, #776]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	0a19      	lsrs	r1, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	061a      	lsls	r2, r3, #24
 8004202:	4bbf      	ldr	r3, [pc, #764]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	e019      	b.n	800423e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800420a:	4bbd      	ldr	r3, [pc, #756]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4bbc      	ldr	r3, [pc, #752]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004210:	49bd      	ldr	r1, [pc, #756]	; (8004508 <HAL_RCC_OscConfig+0x690>)
 8004212:	400a      	ands	r2, r1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe fe8b 	bl	8002f30 <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004220:	f7fe fe86 	bl	8002f30 <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e1eb      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004232:	4bb3      	ldr	r3, [pc, #716]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4013      	ands	r3, r2
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2208      	movs	r2, #8
 8004244:	4013      	ands	r3, r2
 8004246:	d036      	beq.n	80042b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d019      	beq.n	8004284 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004250:	4bab      	ldr	r3, [pc, #684]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004254:	4baa      	ldr	r3, [pc, #680]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7fe fe68 	bl	8002f30 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004266:	f7fe fe63 	bl	8002f30 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1c8      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004278:	4ba1      	ldr	r3, [pc, #644]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	2202      	movs	r2, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d0f1      	beq.n	8004266 <HAL_RCC_OscConfig+0x3ee>
 8004282:	e018      	b.n	80042b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004284:	4b9e      	ldr	r3, [pc, #632]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004288:	4b9d      	ldr	r3, [pc, #628]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fe fe4e 	bl	8002f30 <HAL_GetTick>
 8004294:	0003      	movs	r3, r0
 8004296:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe fe49 	bl	8002f30 <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1ae      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ac:	4b94      	ldr	r3, [pc, #592]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	2202      	movs	r2, #2
 80042b2:	4013      	ands	r3, r2
 80042b4:	d1f1      	bne.n	800429a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2204      	movs	r2, #4
 80042bc:	4013      	ands	r3, r2
 80042be:	d100      	bne.n	80042c2 <HAL_RCC_OscConfig+0x44a>
 80042c0:	e0ae      	b.n	8004420 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2023      	movs	r0, #35	; 0x23
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	4b8d      	ldr	r3, [pc, #564]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	055b      	lsls	r3, r3, #21
 80042d2:	4013      	ands	r3, r2
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	4b8a      	ldr	r3, [pc, #552]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	4b89      	ldr	r3, [pc, #548]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0549      	lsls	r1, r1, #21
 80042e0:	430a      	orrs	r2, r1
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80042e4:	183b      	adds	r3, r7, r0
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCC_OscConfig+0x694>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f6:	4b85      	ldr	r3, [pc, #532]	; (800450c <HAL_RCC_OscConfig+0x694>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b84      	ldr	r3, [pc, #528]	; (800450c <HAL_RCC_OscConfig+0x694>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0049      	lsls	r1, r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004304:	f7fe fe14 	bl	8002f30 <HAL_GetTick>
 8004308:	0003      	movs	r3, r0
 800430a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fe fe0f 	bl	8002f30 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b64      	cmp	r3, #100	; 0x64
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e174      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b7a      	ldr	r3, [pc, #488]	; (800450c <HAL_RCC_OscConfig+0x694>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4013      	ands	r3, r2
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <HAL_RCC_OscConfig+0x4d0>
 8004338:	4b71      	ldr	r3, [pc, #452]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800433a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800433c:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	0049      	lsls	r1, r1, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	651a      	str	r2, [r3, #80]	; 0x50
 8004346:	e031      	b.n	80043ac <HAL_RCC_OscConfig+0x534>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <HAL_RCC_OscConfig+0x4f2>
 8004350:	4b6b      	ldr	r3, [pc, #428]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004354:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004356:	496c      	ldr	r1, [pc, #432]	; (8004508 <HAL_RCC_OscConfig+0x690>)
 8004358:	400a      	ands	r2, r1
 800435a:	651a      	str	r2, [r3, #80]	; 0x50
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800435e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004360:	4b67      	ldr	r3, [pc, #412]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004362:	496b      	ldr	r1, [pc, #428]	; (8004510 <HAL_RCC_OscConfig+0x698>)
 8004364:	400a      	ands	r2, r1
 8004366:	651a      	str	r2, [r3, #80]	; 0x50
 8004368:	e020      	b.n	80043ac <HAL_RCC_OscConfig+0x534>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	23a0      	movs	r3, #160	; 0xa0
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	429a      	cmp	r2, r3
 8004374:	d10e      	bne.n	8004394 <HAL_RCC_OscConfig+0x51c>
 8004376:	4b62      	ldr	r3, [pc, #392]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800437a:	4b61      	ldr	r3, [pc, #388]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	00c9      	lsls	r1, r1, #3
 8004380:	430a      	orrs	r2, r1
 8004382:	651a      	str	r2, [r3, #80]	; 0x50
 8004384:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004388:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	0049      	lsls	r1, r1, #1
 800438e:	430a      	orrs	r2, r1
 8004390:	651a      	str	r2, [r3, #80]	; 0x50
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0x534>
 8004394:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800439a:	495b      	ldr	r1, [pc, #364]	; (8004508 <HAL_RCC_OscConfig+0x690>)
 800439c:	400a      	ands	r2, r1
 800439e:	651a      	str	r2, [r3, #80]	; 0x50
 80043a0:	4b57      	ldr	r3, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80043a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a4:	4b56      	ldr	r3, [pc, #344]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80043a6:	495a      	ldr	r1, [pc, #360]	; (8004510 <HAL_RCC_OscConfig+0x698>)
 80043a8:	400a      	ands	r2, r1
 80043aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b4:	f7fe fdbc 	bl	8002f30 <HAL_GetTick>
 80043b8:	0003      	movs	r3, r0
 80043ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043bc:	e009      	b.n	80043d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fe fdb7 	bl	8002f30 <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_RCC_OscConfig+0x69c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e11b      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043d2:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80043d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d0ef      	beq.n	80043be <HAL_RCC_OscConfig+0x546>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e0:	f7fe fda6 	bl	8002f30 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043e8:	e009      	b.n	80043fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fe fda1 	bl	8002f30 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	4a47      	ldr	r2, [pc, #284]	; (8004514 <HAL_RCC_OscConfig+0x69c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e105      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4013      	ands	r3, r2
 8004408:	d1ef      	bne.n	80043ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800440a:	2323      	movs	r3, #35	; 0x23
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 800441a:	493f      	ldr	r1, [pc, #252]	; (8004518 <HAL_RCC_OscConfig+0x6a0>)
 800441c:	400a      	ands	r2, r1
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	4013      	ands	r3, r2
 8004428:	d049      	beq.n	80044be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d026      	beq.n	8004480 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004432:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004438:	2101      	movs	r1, #1
 800443a:	430a      	orrs	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x6a4>)
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCC_OscConfig+0x6a4>)
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0189      	lsls	r1, r1, #6
 8004454:	430a      	orrs	r2, r1
 8004456:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fd6a 	bl	8002f30 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004462:	f7fe fd65 	bl	8002f30 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0ca      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2202      	movs	r2, #2
 800447a:	4013      	ands	r3, r2
 800447c:	d0f1      	beq.n	8004462 <HAL_RCC_OscConfig+0x5ea>
 800447e:	e01e      	b.n	80044be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 8004486:	2101      	movs	r1, #1
 8004488:	438a      	bics	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_RCC_OscConfig+0x6a4>)
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_OscConfig+0x6a4>)
 8004492:	4923      	ldr	r1, [pc, #140]	; (8004520 <HAL_RCC_OscConfig+0x6a8>)
 8004494:	400a      	ands	r2, r1
 8004496:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fd4a 	bl	8002f30 <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a2:	f7fe fd45 	bl	8002f30 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0aa      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2202      	movs	r2, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	d1f1      	bne.n	80044a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d100      	bne.n	80044c8 <HAL_RCC_OscConfig+0x650>
 80044c6:	e09f      	b.n	8004608 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d100      	bne.n	80044d0 <HAL_RCC_OscConfig+0x658>
 80044ce:	e078      	b.n	80045c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d159      	bne.n	800458c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_RCC_OscConfig+0x688>)
 80044de:	4911      	ldr	r1, [pc, #68]	; (8004524 <HAL_RCC_OscConfig+0x6ac>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fd24 	bl	8002f30 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044ec:	e01c      	b.n	8004528 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fe fd1f 	bl	8002f30 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d915      	bls.n	8004528 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e084      	b.n	800460a <HAL_RCC_OscConfig+0x792>
 8004500:	40021000 	.word	0x40021000
 8004504:	ffff1fff 	.word	0xffff1fff
 8004508:	fffffeff 	.word	0xfffffeff
 800450c:	40007000 	.word	0x40007000
 8004510:	fffffbff 	.word	0xfffffbff
 8004514:	00001388 	.word	0x00001388
 8004518:	efffffff 	.word	0xefffffff
 800451c:	40010000 	.word	0x40010000
 8004520:	ffffdfff 	.word	0xffffdfff
 8004524:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	049b      	lsls	r3, r3, #18
 8004530:	4013      	ands	r3, r2
 8004532:	d1dc      	bne.n	80044ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a37      	ldr	r2, [pc, #220]	; (8004618 <HAL_RCC_OscConfig+0x7a0>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	431a      	orrs	r2, r3
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	0449      	lsls	r1, r1, #17
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fe fce5 	bl	8002f30 <HAL_GetTick>
 8004566:	0003      	movs	r3, r0
 8004568:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe fce0 	bl	8002f30 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e045      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800457e:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	049b      	lsls	r3, r3, #18
 8004586:	4013      	ands	r3, r2
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x6f4>
 800458a:	e03d      	b.n	8004608 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 8004592:	4922      	ldr	r1, [pc, #136]	; (800461c <HAL_RCC_OscConfig+0x7a4>)
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe fcca 	bl	8002f30 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fe fcc5 	bl	8002f30 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e02a      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	049b      	lsls	r3, r3, #18
 80045bc:	4013      	ands	r3, r2
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x72a>
 80045c0:	e022      	b.n	8004608 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e01d      	b.n	800460a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCC_OscConfig+0x79c>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	025b      	lsls	r3, r3, #9
 80045da:	401a      	ands	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d10f      	bne.n	8004604 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	23f0      	movs	r3, #240	; 0xf0
 80045e8:	039b      	lsls	r3, r3, #14
 80045ea:	401a      	ands	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	23c0      	movs	r3, #192	; 0xc0
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	401a      	ands	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b00a      	add	sp, #40	; 0x28
 8004610:	bdb0      	pop	{r4, r5, r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	40021000 	.word	0x40021000
 8004618:	ff02ffff 	.word	0xff02ffff
 800461c:	feffffff 	.word	0xfeffffff

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e128      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b96      	ldr	r3, [pc, #600]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d91e      	bls.n	8004680 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b93      	ldr	r3, [pc, #588]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	4393      	bics	r3, r2
 800464a:	0019      	movs	r1, r3
 800464c:	4b90      	ldr	r3, [pc, #576]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004654:	f7fe fc6c 	bl	8002f30 <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	e009      	b.n	8004672 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7fe fc67 	bl	8002f30 <HAL_GetTick>
 8004662:	0002      	movs	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4a8a      	ldr	r2, [pc, #552]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e109      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b87      	ldr	r3, [pc, #540]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2202      	movs	r2, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800468a:	4b83      	ldr	r3, [pc, #524]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	22f0      	movs	r2, #240	; 0xf0
 8004690:	4393      	bics	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800469a:	430a      	orrs	r2, r1
 800469c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d100      	bne.n	80046aa <HAL_RCC_ClockConfig+0x8a>
 80046a8:	e089      	b.n	80047be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b2:	4b79      	ldr	r3, [pc, #484]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	4013      	ands	r3, r2
 80046bc:	d120      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0e1      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ca:	4b73      	ldr	r3, [pc, #460]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	049b      	lsls	r3, r3, #18
 80046d2:	4013      	ands	r3, r2
 80046d4:	d114      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0d5      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e2:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d109      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0ca      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046f0:	4b69      	ldr	r3, [pc, #420]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0c2      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2203      	movs	r2, #3
 8004706:	4393      	bics	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b62      	ldr	r3, [pc, #392]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004714:	f7fe fc0c 	bl	8002f30 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d111      	bne.n	8004748 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004724:	e009      	b.n	800473a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	f7fe fc03 	bl	8002f30 <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0a5      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800473a:	4b57      	ldr	r3, [pc, #348]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	220c      	movs	r2, #12
 8004740:	4013      	ands	r3, r2
 8004742:	2b08      	cmp	r3, #8
 8004744:	d1ef      	bne.n	8004726 <HAL_RCC_ClockConfig+0x106>
 8004746:	e03a      	b.n	80047be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d111      	bne.n	8004774 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004750:	e009      	b.n	8004766 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fe fbed 	bl	8002f30 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	4a4d      	ldr	r2, [pc, #308]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e08f      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004766:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	220c      	movs	r2, #12
 800476c:	4013      	ands	r3, r2
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d1ef      	bne.n	8004752 <HAL_RCC_ClockConfig+0x132>
 8004772:	e024      	b.n	80047be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d11b      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800477c:	e009      	b.n	8004792 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477e:	f7fe fbd7 	bl	8002f30 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	4a42      	ldr	r2, [pc, #264]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e079      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	220c      	movs	r2, #12
 8004798:	4013      	ands	r3, r2
 800479a:	2b04      	cmp	r3, #4
 800479c:	d1ef      	bne.n	800477e <HAL_RCC_ClockConfig+0x15e>
 800479e:	e00e      	b.n	80047be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7fe fbc6 	bl	8002f30 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e068      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047b4:	4b38      	ldr	r3, [pc, #224]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	220c      	movs	r2, #12
 80047ba:	4013      	ands	r3, r2
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047be:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d21e      	bcs.n	800480a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047cc:	4b30      	ldr	r3, [pc, #192]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4393      	bics	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047de:	f7fe fba7 	bl	8002f30 <HAL_GetTick>
 80047e2:	0003      	movs	r3, r0
 80047e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	e009      	b.n	80047fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fe fba2 	bl	8002f30 <HAL_GetTick>
 80047ec:	0002      	movs	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	4a28      	ldr	r2, [pc, #160]	; (8004894 <HAL_RCC_ClockConfig+0x274>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e044      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_ClockConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	4013      	ands	r3, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d1ee      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2204      	movs	r2, #4
 8004810:	4013      	ands	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a20      	ldr	r2, [pc, #128]	; (800489c <HAL_RCC_ClockConfig+0x27c>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2208      	movs	r2, #8
 800482e:	4013      	ands	r3, r2
 8004830:	d00a      	beq.n	8004848 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <HAL_RCC_ClockConfig+0x280>)
 8004838:	4013      	ands	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	00da      	lsls	r2, r3, #3
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004844:	430a      	orrs	r2, r1
 8004846:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004848:	f000 f832 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 800484c:	0001      	movs	r1, r0
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	220f      	movs	r2, #15
 8004856:	4013      	ands	r3, r2
 8004858:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <HAL_RCC_ClockConfig+0x284>)
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	000a      	movs	r2, r1
 800485e:	40da      	lsrs	r2, r3
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCC_ClockConfig+0x288>)
 8004862:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_RCC_ClockConfig+0x28c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	250b      	movs	r5, #11
 800486a:	197c      	adds	r4, r7, r5
 800486c:	0018      	movs	r0, r3
 800486e:	f7fe fb19 	bl	8002ea4 <HAL_InitTick>
 8004872:	0003      	movs	r3, r0
 8004874:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004876:	197b      	adds	r3, r7, r5
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800487e:	197b      	adds	r3, r7, r5
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	e000      	b.n	8004886 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bdb0      	pop	{r4, r5, r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	40022000 	.word	0x40022000
 8004894:	00001388 	.word	0x00001388
 8004898:	40021000 	.word	0x40021000
 800489c:	fffff8ff 	.word	0xfffff8ff
 80048a0:	ffffc7ff 	.word	0xffffc7ff
 80048a4:	080088c4 	.word	0x080088c4
 80048a8:	20000000 	.word	0x20000000
 80048ac:	20000004 	.word	0x20000004

080048b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80048b6:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048be:	230c      	movs	r3, #12
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d014      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x40>
 80048c6:	d900      	bls.n	80048ca <HAL_RCC_GetSysClockFreq+0x1a>
 80048c8:	e07b      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x112>
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x24>
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0x3a>
 80048d2:	e076      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80048d4:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2210      	movs	r2, #16
 80048da:	4013      	ands	r3, r2
 80048dc:	d002      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80048e2:	e07c      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80048e4:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048e8:	e079      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048ea:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048ee:	e076      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	0c9a      	lsrs	r2, r3, #18
 80048f4:	230f      	movs	r3, #15
 80048f6:	401a      	ands	r2, r3
 80048f8:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80048fa:	5c9b      	ldrb	r3, [r3, r2]
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	0d9a      	lsrs	r2, r3, #22
 8004902:	2303      	movs	r3, #3
 8004904:	4013      	ands	r3, r2
 8004906:	3301      	adds	r3, #1
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	025b      	lsls	r3, r3, #9
 8004912:	4013      	ands	r3, r2
 8004914:	d01a      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	4a35      	ldr	r2, [pc, #212]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8004920:	2300      	movs	r3, #0
 8004922:	69b8      	ldr	r0, [r7, #24]
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	f7fb fddf 	bl	80004e8 <__aeabi_lmul>
 800492a:	0002      	movs	r2, r0
 800492c:	000b      	movs	r3, r1
 800492e:	0010      	movs	r0, r2
 8004930:	0019      	movs	r1, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f7fb fdb3 	bl	80004a8 <__aeabi_uldivmod>
 8004942:	0002      	movs	r2, r0
 8004944:	000b      	movs	r3, r1
 8004946:	0013      	movs	r3, r2
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
 800494a:	e037      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800494c:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2210      	movs	r2, #16
 8004952:	4013      	ands	r3, r2
 8004954:	d01a      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8004960:	2300      	movs	r3, #0
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	f7fb fdbf 	bl	80004e8 <__aeabi_lmul>
 800496a:	0002      	movs	r2, r0
 800496c:	000b      	movs	r3, r1
 800496e:	0010      	movs	r0, r2
 8004970:	0019      	movs	r1, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f7fb fd93 	bl	80004a8 <__aeabi_uldivmod>
 8004982:	0002      	movs	r2, r0
 8004984:	000b      	movs	r3, r1
 8004986:	0013      	movs	r3, r2
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	e017      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	0018      	movs	r0, r3
 8004990:	2300      	movs	r3, #0
 8004992:	0019      	movs	r1, r3
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8004996:	2300      	movs	r3, #0
 8004998:	f7fb fda6 	bl	80004e8 <__aeabi_lmul>
 800499c:	0002      	movs	r2, r0
 800499e:	000b      	movs	r3, r1
 80049a0:	0010      	movs	r0, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	001c      	movs	r4, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	001d      	movs	r5, r3
 80049ac:	0022      	movs	r2, r4
 80049ae:	002b      	movs	r3, r5
 80049b0:	f7fb fd7a 	bl	80004a8 <__aeabi_uldivmod>
 80049b4:	0002      	movs	r2, r0
 80049b6:	000b      	movs	r3, r1
 80049b8:	0013      	movs	r3, r2
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049c0:	e00d      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0b5b      	lsrs	r3, r3, #13
 80049c8:	2207      	movs	r2, #7
 80049ca:	4013      	ands	r3, r2
 80049cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	3301      	adds	r3, #1
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	0212      	lsls	r2, r2, #8
 80049d6:	409a      	lsls	r2, r3
 80049d8:	0013      	movs	r3, r2
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b00e      	add	sp, #56	; 0x38
 80049e6:	bdb0      	pop	{r4, r5, r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	003d0900 	.word	0x003d0900
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	007a1200 	.word	0x007a1200
 80049f8:	080088dc 	.word	0x080088dc

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000000 	.word	0x20000000

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a14:	f7ff fff2 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a18:	0001      	movs	r1, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	2207      	movs	r2, #7
 8004a22:	4013      	ands	r3, r2
 8004a24:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	40d9      	lsrs	r1, r3
 8004a2a:	000b      	movs	r3, r1
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	40021000 	.word	0x40021000
 8004a38:	080088d4 	.word	0x080088d4

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffdc 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a44:	0001      	movs	r1, r0
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	4013      	ands	r3, r2
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a52:	5cd3      	ldrb	r3, [r2, r3]
 8004a54:	40d9      	lsrs	r1, r3
 8004a56:	000b      	movs	r3, r1
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	40021000 	.word	0x40021000
 8004a64:	080088d4 	.word	0x080088d4

08004a68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004a70:	2017      	movs	r0, #23
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d100      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004a82:	e0c2      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a84:	4b98      	ldr	r3, [pc, #608]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	055b      	lsls	r3, r3, #21
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d109      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b95      	ldr	r3, [pc, #596]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a94:	4b94      	ldr	r3, [pc, #592]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	0549      	lsls	r1, r1, #21
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	4b91      	ldr	r3, [pc, #580]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	d11a      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab0:	4b8e      	ldr	r3, [pc, #568]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0049      	lsls	r1, r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fa37 	bl	8002f30 <HAL_GetTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	e008      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac8:	f7fe fa32 	bl	8002f30 <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e102      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004ae6:	4b80      	ldr	r3, [pc, #512]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	23c0      	movs	r3, #192	; 0xc0
 8004aec:	039b      	lsls	r3, r3, #14
 8004aee:	4013      	ands	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	23c0      	movs	r3, #192	; 0xc0
 8004af8:	039b      	lsls	r3, r3, #14
 8004afa:	4013      	ands	r3, r2
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d013      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	23c0      	movs	r3, #192	; 0xc0
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	23c0      	movs	r3, #192	; 0xc0
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d10a      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b14:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0da      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004b2a:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2e:	23c0      	movs	r3, #192	; 0xc0
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d03b      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	23c0      	movs	r3, #192	; 0xc0
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4013      	ands	r3, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d033      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2220      	movs	r2, #32
 8004b52:	4013      	ands	r3, r2
 8004b54:	d02e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b56:	4b64      	ldr	r3, [pc, #400]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b60:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b64:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	0309      	lsls	r1, r1, #12
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b6e:	4b5e      	ldr	r3, [pc, #376]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b74:	495f      	ldr	r1, [pc, #380]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004b7a:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	d014      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fe f9d1 	bl	8002f30 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b92:	e009      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fe f9cc 	bl	8002f30 <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e09b      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba8:	4b4f      	ldr	r3, [pc, #316]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d0ef      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	23c0      	movs	r3, #192	; 0xc0
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	23c0      	movs	r3, #192	; 0xc0
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004bc6:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4c      	ldr	r2, [pc, #304]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	039b      	lsls	r3, r3, #14
 8004bd8:	401a      	ands	r2, r3
 8004bda:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	23c0      	movs	r3, #192	; 0xc0
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	401a      	ands	r2, r3
 8004bee:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bf4:	2317      	movs	r3, #23
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c04:	493e      	ldr	r1, [pc, #248]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4013      	ands	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	220c      	movs	r2, #12
 8004c38:	4393      	bics	r3, r2
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c42:	430a      	orrs	r2, r1
 8004c44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2240      	movs	r2, #64	; 0x40
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2280      	movs	r2, #128	; 0x80
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b006      	add	sp, #24
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	fffcffff 	.word	0xfffcffff
 8004cf4:	fff7ffff 	.word	0xfff7ffff
 8004cf8:	00001388 	.word	0x00001388
 8004cfc:	ffcfffff 	.word	0xffcfffff
 8004d00:	efffffff 	.word	0xefffffff
 8004d04:	fffff3ff 	.word	0xfffff3ff
 8004d08:	ffffcfff 	.word	0xffffcfff
 8004d0c:	fbffffff 	.word	0xfbffffff
 8004d10:	fff3ffff 	.word	0xfff3ffff

08004d14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e08e      	b.n	8004e44 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2221      	movs	r2, #33	; 0x21
 8004d2a:	5c9b      	ldrb	r3, [r3, r2]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fd fe8b 	bl	8002a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2221      	movs	r2, #33	; 0x21
 8004d46:	2102      	movs	r1, #2
 8004d48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	22ca      	movs	r2, #202	; 0xca
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2253      	movs	r2, #83	; 0x53
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 f89e 	bl	8004e9e <RTC_EnterInitMode>
 8004d62:	1e03      	subs	r3, r0, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2221      	movs	r2, #33	; 0x21
 8004d72:	2104      	movs	r1, #4
 8004d74:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e064      	b.n	8004e44 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4931      	ldr	r1, [pc, #196]	; (8004e4c <HAL_RTC_Init+0x138>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	041a      	lsls	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	438a      	bics	r2, r1
 8004dd4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2103      	movs	r1, #3
 8004de2:	438a      	bics	r2, r1
 8004de4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2220      	movs	r2, #32
 8004e06:	4013      	ands	r3, r2
 8004e08:	d113      	bne.n	8004e32 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 f81f 	bl	8004e50 <HAL_RTC_WaitForSynchro>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d00d      	beq.n	8004e32 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2221      	movs	r2, #33	; 0x21
 8004e22:	2104      	movs	r1, #4
 8004e24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e008      	b.n	8004e44 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2221      	movs	r2, #33	; 0x21
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
  }
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	ff8fffbf 	.word	0xff8fffbf

08004e50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	21a0      	movs	r1, #160	; 0xa0
 8004e64:	438a      	bics	r2, r1
 8004e66:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e68:	f7fe f862 	bl	8002f30 <HAL_GetTick>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e70:	e00a      	b.n	8004e88 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e72:	f7fe f85d 	bl	8002f30 <HAL_GetTick>
 8004e76:	0002      	movs	r2, r0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	23fa      	movs	r3, #250	; 0xfa
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d901      	bls.n	8004e88 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e006      	b.n	8004e96 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	4013      	ands	r3, r2
 8004e92:	d0ee      	beq.n	8004e72 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b004      	add	sp, #16
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d11a      	bne.n	8004ee8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4252      	negs	r2, r2
 8004eba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ebc:	f7fe f838 	bl	8002f30 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ec4:	e00a      	b.n	8004edc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ec6:	f7fe f833 	bl	8002f30 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	23fa      	movs	r3, #250	; 0xfa
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d901      	bls.n	8004edc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d0ee      	beq.n	8004ec6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e044      	b.n	8004f90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2274      	movs	r2, #116	; 0x74
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fd ff03 	bl	8002d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2224      	movs	r2, #36	; 0x24
 8004f22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2101      	movs	r1, #1
 8004f30:	438a      	bics	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 f830 	bl	8004f9c <UART_SetConfig>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e024      	b.n	8004f90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 fac3 	bl	80054dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	490d      	ldr	r1, [pc, #52]	; (8004f98 <HAL_UART_Init+0xa4>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	212a      	movs	r1, #42	; 0x2a
 8004f72:	438a      	bics	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2101      	movs	r1, #1
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 fb5b 	bl	8005644 <UART_CheckIdleState>
 8004f8e:	0003      	movs	r3, r0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	ffffb7ff 	.word	0xffffb7ff

08004f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b08e      	sub	sp, #56	; 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa4:	231a      	movs	r3, #26
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	189b      	adds	r3, r3, r2
 8004faa:	19db      	adds	r3, r3, r7
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4ac3      	ldr	r2, [pc, #780]	; (80052dc <UART_SetConfig+0x340>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4abe      	ldr	r2, [pc, #760]	; (80052e0 <UART_SetConfig+0x344>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4ab8      	ldr	r2, [pc, #736]	; (80052e4 <UART_SetConfig+0x348>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500c:	4313      	orrs	r3, r2
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4ab4      	ldr	r2, [pc, #720]	; (80052e8 <UART_SetConfig+0x34c>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4ab0      	ldr	r2, [pc, #704]	; (80052ec <UART_SetConfig+0x350>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d131      	bne.n	8005094 <UART_SetConfig+0xf8>
 8005030:	4baf      	ldr	r3, [pc, #700]	; (80052f0 <UART_SetConfig+0x354>)
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005034:	2203      	movs	r2, #3
 8005036:	4013      	ands	r3, r2
 8005038:	2b03      	cmp	r3, #3
 800503a:	d01d      	beq.n	8005078 <UART_SetConfig+0xdc>
 800503c:	d823      	bhi.n	8005086 <UART_SetConfig+0xea>
 800503e:	2b02      	cmp	r3, #2
 8005040:	d00c      	beq.n	800505c <UART_SetConfig+0xc0>
 8005042:	d820      	bhi.n	8005086 <UART_SetConfig+0xea>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <UART_SetConfig+0xb2>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d00e      	beq.n	800506a <UART_SetConfig+0xce>
 800504c:	e01b      	b.n	8005086 <UART_SetConfig+0xea>
 800504e:	231b      	movs	r3, #27
 8005050:	2218      	movs	r2, #24
 8005052:	189b      	adds	r3, r3, r2
 8005054:	19db      	adds	r3, r3, r7
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e0b4      	b.n	80051c6 <UART_SetConfig+0x22a>
 800505c:	231b      	movs	r3, #27
 800505e:	2218      	movs	r2, #24
 8005060:	189b      	adds	r3, r3, r2
 8005062:	19db      	adds	r3, r3, r7
 8005064:	2202      	movs	r2, #2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e0ad      	b.n	80051c6 <UART_SetConfig+0x22a>
 800506a:	231b      	movs	r3, #27
 800506c:	2218      	movs	r2, #24
 800506e:	189b      	adds	r3, r3, r2
 8005070:	19db      	adds	r3, r3, r7
 8005072:	2204      	movs	r2, #4
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e0a6      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005078:	231b      	movs	r3, #27
 800507a:	2218      	movs	r2, #24
 800507c:	189b      	adds	r3, r3, r2
 800507e:	19db      	adds	r3, r3, r7
 8005080:	2208      	movs	r2, #8
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e09f      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005086:	231b      	movs	r3, #27
 8005088:	2218      	movs	r2, #24
 800508a:	189b      	adds	r3, r3, r2
 800508c:	19db      	adds	r3, r3, r7
 800508e:	2210      	movs	r2, #16
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e098      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a96      	ldr	r2, [pc, #600]	; (80052f4 <UART_SetConfig+0x358>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d131      	bne.n	8005102 <UART_SetConfig+0x166>
 800509e:	4b94      	ldr	r3, [pc, #592]	; (80052f0 <UART_SetConfig+0x354>)
 80050a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a2:	220c      	movs	r2, #12
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d01d      	beq.n	80050e6 <UART_SetConfig+0x14a>
 80050aa:	d823      	bhi.n	80050f4 <UART_SetConfig+0x158>
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d00c      	beq.n	80050ca <UART_SetConfig+0x12e>
 80050b0:	d820      	bhi.n	80050f4 <UART_SetConfig+0x158>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <UART_SetConfig+0x120>
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00e      	beq.n	80050d8 <UART_SetConfig+0x13c>
 80050ba:	e01b      	b.n	80050f4 <UART_SetConfig+0x158>
 80050bc:	231b      	movs	r3, #27
 80050be:	2218      	movs	r2, #24
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	19db      	adds	r3, r3, r7
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e07d      	b.n	80051c6 <UART_SetConfig+0x22a>
 80050ca:	231b      	movs	r3, #27
 80050cc:	2218      	movs	r2, #24
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	19db      	adds	r3, r3, r7
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e076      	b.n	80051c6 <UART_SetConfig+0x22a>
 80050d8:	231b      	movs	r3, #27
 80050da:	2218      	movs	r2, #24
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	19db      	adds	r3, r3, r7
 80050e0:	2204      	movs	r2, #4
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e06f      	b.n	80051c6 <UART_SetConfig+0x22a>
 80050e6:	231b      	movs	r3, #27
 80050e8:	2218      	movs	r2, #24
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	19db      	adds	r3, r3, r7
 80050ee:	2208      	movs	r2, #8
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e068      	b.n	80051c6 <UART_SetConfig+0x22a>
 80050f4:	231b      	movs	r3, #27
 80050f6:	2218      	movs	r2, #24
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	19db      	adds	r3, r3, r7
 80050fc:	2210      	movs	r2, #16
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e061      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7c      	ldr	r2, [pc, #496]	; (80052f8 <UART_SetConfig+0x35c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d106      	bne.n	800511a <UART_SetConfig+0x17e>
 800510c:	231b      	movs	r3, #27
 800510e:	2218      	movs	r2, #24
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e055      	b.n	80051c6 <UART_SetConfig+0x22a>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a77      	ldr	r2, [pc, #476]	; (80052fc <UART_SetConfig+0x360>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d106      	bne.n	8005132 <UART_SetConfig+0x196>
 8005124:	231b      	movs	r3, #27
 8005126:	2218      	movs	r2, #24
 8005128:	189b      	adds	r3, r3, r2
 800512a:	19db      	adds	r3, r3, r7
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e049      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6b      	ldr	r2, [pc, #428]	; (80052e4 <UART_SetConfig+0x348>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d13e      	bne.n	80051ba <UART_SetConfig+0x21e>
 800513c:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <UART_SetConfig+0x354>)
 800513e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005140:	23c0      	movs	r3, #192	; 0xc0
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4013      	ands	r3, r2
 8005146:	22c0      	movs	r2, #192	; 0xc0
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	4293      	cmp	r3, r2
 800514c:	d027      	beq.n	800519e <UART_SetConfig+0x202>
 800514e:	22c0      	movs	r2, #192	; 0xc0
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	4293      	cmp	r3, r2
 8005154:	d82a      	bhi.n	80051ac <UART_SetConfig+0x210>
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	4293      	cmp	r3, r2
 800515c:	d011      	beq.n	8005182 <UART_SetConfig+0x1e6>
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	0112      	lsls	r2, r2, #4
 8005162:	4293      	cmp	r3, r2
 8005164:	d822      	bhi.n	80051ac <UART_SetConfig+0x210>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <UART_SetConfig+0x1d8>
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	00d2      	lsls	r2, r2, #3
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <UART_SetConfig+0x1f4>
 8005172:	e01b      	b.n	80051ac <UART_SetConfig+0x210>
 8005174:	231b      	movs	r3, #27
 8005176:	2218      	movs	r2, #24
 8005178:	189b      	adds	r3, r3, r2
 800517a:	19db      	adds	r3, r3, r7
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e021      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005182:	231b      	movs	r3, #27
 8005184:	2218      	movs	r2, #24
 8005186:	189b      	adds	r3, r3, r2
 8005188:	19db      	adds	r3, r3, r7
 800518a:	2202      	movs	r2, #2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e01a      	b.n	80051c6 <UART_SetConfig+0x22a>
 8005190:	231b      	movs	r3, #27
 8005192:	2218      	movs	r2, #24
 8005194:	189b      	adds	r3, r3, r2
 8005196:	19db      	adds	r3, r3, r7
 8005198:	2204      	movs	r2, #4
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e013      	b.n	80051c6 <UART_SetConfig+0x22a>
 800519e:	231b      	movs	r3, #27
 80051a0:	2218      	movs	r2, #24
 80051a2:	189b      	adds	r3, r3, r2
 80051a4:	19db      	adds	r3, r3, r7
 80051a6:	2208      	movs	r2, #8
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e00c      	b.n	80051c6 <UART_SetConfig+0x22a>
 80051ac:	231b      	movs	r3, #27
 80051ae:	2218      	movs	r2, #24
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	19db      	adds	r3, r3, r7
 80051b4:	2210      	movs	r2, #16
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e005      	b.n	80051c6 <UART_SetConfig+0x22a>
 80051ba:	231b      	movs	r3, #27
 80051bc:	2218      	movs	r2, #24
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	19db      	adds	r3, r3, r7
 80051c2:	2210      	movs	r2, #16
 80051c4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a46      	ldr	r2, [pc, #280]	; (80052e4 <UART_SetConfig+0x348>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d000      	beq.n	80051d2 <UART_SetConfig+0x236>
 80051d0:	e09a      	b.n	8005308 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d2:	231b      	movs	r3, #27
 80051d4:	2218      	movs	r2, #24
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d01d      	beq.n	800521c <UART_SetConfig+0x280>
 80051e0:	dc20      	bgt.n	8005224 <UART_SetConfig+0x288>
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d015      	beq.n	8005212 <UART_SetConfig+0x276>
 80051e6:	dc1d      	bgt.n	8005224 <UART_SetConfig+0x288>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <UART_SetConfig+0x256>
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d005      	beq.n	80051fc <UART_SetConfig+0x260>
 80051f0:	e018      	b.n	8005224 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f2:	f7ff fc0d 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80051f6:	0003      	movs	r3, r0
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051fa:	e01c      	b.n	8005236 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051fc:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <UART_SetConfig+0x354>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2210      	movs	r2, #16
 8005202:	4013      	ands	r3, r2
 8005204:	d002      	beq.n	800520c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005206:	4b3e      	ldr	r3, [pc, #248]	; (8005300 <UART_SetConfig+0x364>)
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800520a:	e014      	b.n	8005236 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800520c:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <UART_SetConfig+0x368>)
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005210:	e011      	b.n	8005236 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7ff fb4d 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 8005216:	0003      	movs	r3, r0
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800521a:	e00c      	b.n	8005236 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005222:	e008      	b.n	8005236 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005228:	231a      	movs	r3, #26
 800522a:	2218      	movs	r2, #24
 800522c:	189b      	adds	r3, r3, r2
 800522e:	19db      	adds	r3, r3, r7
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
        break;
 8005234:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d100      	bne.n	800523e <UART_SetConfig+0x2a2>
 800523c:	e134      	b.n	80054a8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	0013      	movs	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	189b      	adds	r3, r3, r2
 8005248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524a:	429a      	cmp	r2, r3
 800524c:	d305      	bcc.n	800525a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005256:	429a      	cmp	r2, r3
 8005258:	d906      	bls.n	8005268 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800525a:	231a      	movs	r3, #26
 800525c:	2218      	movs	r2, #24
 800525e:	189b      	adds	r3, r3, r2
 8005260:	19db      	adds	r3, r3, r7
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e11f      	b.n	80054a8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	6939      	ldr	r1, [r7, #16]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	000b      	movs	r3, r1
 8005276:	0e1b      	lsrs	r3, r3, #24
 8005278:	0010      	movs	r0, r2
 800527a:	0205      	lsls	r5, r0, #8
 800527c:	431d      	orrs	r5, r3
 800527e:	000b      	movs	r3, r1
 8005280:	021c      	lsls	r4, r3, #8
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	1900      	adds	r0, r0, r4
 8005294:	4169      	adcs	r1, r5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f7fb f900 	bl	80004a8 <__aeabi_uldivmod>
 80052a8:	0002      	movs	r2, r0
 80052aa:	000b      	movs	r3, r1
 80052ac:	0013      	movs	r3, r2
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	23c0      	movs	r3, #192	; 0xc0
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d309      	bcc.n	80052ce <UART_SetConfig+0x332>
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	035b      	lsls	r3, r3, #13
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d204      	bcs.n	80052ce <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ca:	60da      	str	r2, [r3, #12]
 80052cc:	e0ec      	b.n	80054a8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80052ce:	231a      	movs	r3, #26
 80052d0:	2218      	movs	r2, #24
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	19db      	adds	r3, r3, r7
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e0e5      	b.n	80054a8 <UART_SetConfig+0x50c>
 80052dc:	efff69f3 	.word	0xefff69f3
 80052e0:	ffffcfff 	.word	0xffffcfff
 80052e4:	40004800 	.word	0x40004800
 80052e8:	fffff4ff 	.word	0xfffff4ff
 80052ec:	40013800 	.word	0x40013800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40004c00 	.word	0x40004c00
 80052fc:	40005000 	.word	0x40005000
 8005300:	003d0900 	.word	0x003d0900
 8005304:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	429a      	cmp	r2, r3
 8005312:	d000      	beq.n	8005316 <UART_SetConfig+0x37a>
 8005314:	e071      	b.n	80053fa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005316:	231b      	movs	r3, #27
 8005318:	2218      	movs	r2, #24
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d822      	bhi.n	800536a <UART_SetConfig+0x3ce>
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	4b68      	ldr	r3, [pc, #416]	; (80054c8 <UART_SetConfig+0x52c>)
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7ff fb6f 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8005332:	0003      	movs	r3, r0
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005336:	e021      	b.n	800537c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7ff fb80 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 800533c:	0003      	movs	r3, r0
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005340:	e01c      	b.n	800537c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005342:	4b62      	ldr	r3, [pc, #392]	; (80054cc <UART_SetConfig+0x530>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	4013      	ands	r3, r2
 800534a:	d002      	beq.n	8005352 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <UART_SetConfig+0x534>)
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005350:	e014      	b.n	800537c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005352:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <UART_SetConfig+0x538>)
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005356:	e011      	b.n	800537c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005358:	f7ff faaa 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 800535c:	0003      	movs	r3, r0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005360:	e00c      	b.n	800537c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005368:	e008      	b.n	800537c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800536e:	231a      	movs	r3, #26
 8005370:	2218      	movs	r2, #24
 8005372:	189b      	adds	r3, r3, r2
 8005374:	19db      	adds	r3, r3, r7
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
        break;
 800537a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d100      	bne.n	8005384 <UART_SetConfig+0x3e8>
 8005382:	e091      	b.n	80054a8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	005a      	lsls	r2, r3, #1
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	18d2      	adds	r2, r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0019      	movs	r1, r3
 8005396:	0010      	movs	r0, r2
 8005398:	f7fa fed2 	bl	8000140 <__udivsi3>
 800539c:	0003      	movs	r3, r0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	2b0f      	cmp	r3, #15
 80053a6:	d921      	bls.n	80053ec <UART_SetConfig+0x450>
 80053a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	025b      	lsls	r3, r3, #9
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d21c      	bcs.n	80053ec <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	200e      	movs	r0, #14
 80053b8:	2418      	movs	r4, #24
 80053ba:	1903      	adds	r3, r0, r4
 80053bc:	19db      	adds	r3, r3, r7
 80053be:	210f      	movs	r1, #15
 80053c0:	438a      	bics	r2, r1
 80053c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2207      	movs	r2, #7
 80053cc:	4013      	ands	r3, r2
 80053ce:	b299      	uxth	r1, r3
 80053d0:	1903      	adds	r3, r0, r4
 80053d2:	19db      	adds	r3, r3, r7
 80053d4:	1902      	adds	r2, r0, r4
 80053d6:	19d2      	adds	r2, r2, r7
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1902      	adds	r2, r0, r4
 80053e4:	19d2      	adds	r2, r2, r7
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e05d      	b.n	80054a8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	231a      	movs	r3, #26
 80053ee:	2218      	movs	r2, #24
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	19db      	adds	r3, r3, r7
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e056      	b.n	80054a8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053fa:	231b      	movs	r3, #27
 80053fc:	2218      	movs	r2, #24
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d822      	bhi.n	800544e <UART_SetConfig+0x4b2>
 8005408:	009a      	lsls	r2, r3, #2
 800540a:	4b33      	ldr	r3, [pc, #204]	; (80054d8 <UART_SetConfig+0x53c>)
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7ff fafd 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8005416:	0003      	movs	r3, r0
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800541a:	e021      	b.n	8005460 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7ff fb0e 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8005420:	0003      	movs	r3, r0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005424:	e01c      	b.n	8005460 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <UART_SetConfig+0x530>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2210      	movs	r2, #16
 800542c:	4013      	ands	r3, r2
 800542e:	d002      	beq.n	8005436 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <UART_SetConfig+0x534>)
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005434:	e014      	b.n	8005460 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <UART_SetConfig+0x538>)
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800543a:	e011      	b.n	8005460 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800543c:	f7ff fa38 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 8005440:	0003      	movs	r3, r0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005444:	e00c      	b.n	8005460 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800544c:	e008      	b.n	8005460 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005452:	231a      	movs	r3, #26
 8005454:	2218      	movs	r2, #24
 8005456:	189b      	adds	r3, r3, r2
 8005458:	19db      	adds	r3, r3, r7
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
        break;
 800545e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085a      	lsrs	r2, r3, #1
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	18d2      	adds	r2, r2, r3
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	0019      	movs	r1, r3
 8005476:	0010      	movs	r0, r2
 8005478:	f7fa fe62 	bl	8000140 <__udivsi3>
 800547c:	0003      	movs	r3, r0
 800547e:	b29b      	uxth	r3, r3
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	2b0f      	cmp	r3, #15
 8005486:	d909      	bls.n	800549c <UART_SetConfig+0x500>
 8005488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	025b      	lsls	r3, r3, #9
 800548e:	429a      	cmp	r2, r3
 8005490:	d204      	bcs.n	800549c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	e005      	b.n	80054a8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800549c:	231a      	movs	r3, #26
 800549e:	2218      	movs	r2, #24
 80054a0:	189b      	adds	r3, r3, r2
 80054a2:	19db      	adds	r3, r3, r7
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2200      	movs	r2, #0
 80054ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2200      	movs	r2, #0
 80054b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054b4:	231a      	movs	r3, #26
 80054b6:	2218      	movs	r2, #24
 80054b8:	189b      	adds	r3, r3, r2
 80054ba:	19db      	adds	r3, r3, r7
 80054bc:	781b      	ldrb	r3, [r3, #0]
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b00e      	add	sp, #56	; 0x38
 80054c4:	bdb0      	pop	{r4, r5, r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	080088e8 	.word	0x080088e8
 80054cc:	40021000 	.word	0x40021000
 80054d0:	003d0900 	.word	0x003d0900
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	0800890c 	.word	0x0800890c

080054dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	d00b      	beq.n	8005506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a4a      	ldr	r2, [pc, #296]	; (8005620 <UART_AdvFeatureConfig+0x144>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2202      	movs	r2, #2
 800550c:	4013      	ands	r3, r2
 800550e:	d00b      	beq.n	8005528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4a43      	ldr	r2, [pc, #268]	; (8005624 <UART_AdvFeatureConfig+0x148>)
 8005518:	4013      	ands	r3, r2
 800551a:	0019      	movs	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2204      	movs	r2, #4
 800552e:	4013      	ands	r3, r2
 8005530:	d00b      	beq.n	800554a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <UART_AdvFeatureConfig+0x14c>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2208      	movs	r2, #8
 8005550:	4013      	ands	r3, r2
 8005552:	d00b      	beq.n	800556c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <UART_AdvFeatureConfig+0x150>)
 800555c:	4013      	ands	r3, r2
 800555e:	0019      	movs	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2210      	movs	r2, #16
 8005572:	4013      	ands	r3, r2
 8005574:	d00b      	beq.n	800558e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <UART_AdvFeatureConfig+0x154>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2220      	movs	r2, #32
 8005594:	4013      	ands	r3, r2
 8005596:	d00b      	beq.n	80055b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4a25      	ldr	r2, [pc, #148]	; (8005634 <UART_AdvFeatureConfig+0x158>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2240      	movs	r2, #64	; 0x40
 80055b6:	4013      	ands	r3, r2
 80055b8:	d01d      	beq.n	80055f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <UART_AdvFeatureConfig+0x15c>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	035b      	lsls	r3, r3, #13
 80055da:	429a      	cmp	r2, r3
 80055dc:	d10b      	bne.n	80055f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a15      	ldr	r2, [pc, #84]	; (800563c <UART_AdvFeatureConfig+0x160>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	0019      	movs	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	4013      	ands	r3, r2
 80055fe:	d00b      	beq.n	8005618 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4a0e      	ldr	r2, [pc, #56]	; (8005640 <UART_AdvFeatureConfig+0x164>)
 8005608:	4013      	ands	r3, r2
 800560a:	0019      	movs	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }
}
 8005618:	46c0      	nop			; (mov r8, r8)
 800561a:	46bd      	mov	sp, r7
 800561c:	b002      	add	sp, #8
 800561e:	bd80      	pop	{r7, pc}
 8005620:	fffdffff 	.word	0xfffdffff
 8005624:	fffeffff 	.word	0xfffeffff
 8005628:	fffbffff 	.word	0xfffbffff
 800562c:	ffff7fff 	.word	0xffff7fff
 8005630:	ffffefff 	.word	0xffffefff
 8005634:	ffffdfff 	.word	0xffffdfff
 8005638:	ffefffff 	.word	0xffefffff
 800563c:	ff9fffff 	.word	0xff9fffff
 8005640:	fff7ffff 	.word	0xfff7ffff

08005644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af02      	add	r7, sp, #8
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	2100      	movs	r1, #0
 8005652:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005654:	f7fd fc6c 	bl	8002f30 <HAL_GetTick>
 8005658:	0003      	movs	r3, r0
 800565a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2208      	movs	r2, #8
 8005664:	4013      	ands	r3, r2
 8005666:	2b08      	cmp	r3, #8
 8005668:	d10c      	bne.n	8005684 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	0391      	lsls	r1, r2, #14
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <UART_CheckIdleState+0x8c>)
 8005674:	9200      	str	r2, [sp, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	f000 f82c 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d001      	beq.n	8005684 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e021      	b.n	80056c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2204      	movs	r2, #4
 800568c:	4013      	ands	r3, r2
 800568e:	2b04      	cmp	r3, #4
 8005690:	d10c      	bne.n	80056ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	03d1      	lsls	r1, r2, #15
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <UART_CheckIdleState+0x8c>)
 800569c:	9200      	str	r2, [sp, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	f000 f818 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80056a4:	1e03      	subs	r3, r0, #0
 80056a6:	d001      	beq.n	80056ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e00d      	b.n	80056c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2274      	movs	r2, #116	; 0x74
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b004      	add	sp, #16
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	01ffffff 	.word	0x01ffffff

080056d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b094      	sub	sp, #80	; 0x50
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	1dfb      	adds	r3, r7, #7
 80056e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	e0a3      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056e8:	3301      	adds	r3, #1
 80056ea:	d100      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80056ec:	e09f      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd fc1f 	bl	8002f30 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x30>
 80056fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13d      	bne.n	8005780 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005704:	f3ef 8310 	mrs	r3, PRIMASK
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570c:	647b      	str	r3, [r7, #68]	; 0x44
 800570e:	2301      	movs	r3, #1
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	494c      	ldr	r1, [pc, #304]	; (8005858 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005726:	400a      	ands	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	643b      	str	r3, [r7, #64]	; 0x40
 8005740:	2301      	movs	r3, #1
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2101      	movs	r1, #1
 8005758:	438a      	bics	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2274      	movs	r2, #116	; 0x74
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e067      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2204      	movs	r2, #4
 8005788:	4013      	ands	r3, r2
 800578a:	d050      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	401a      	ands	r2, r3
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	429a      	cmp	r2, r3
 800579e:	d146      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	613b      	str	r3, [r7, #16]
  return(result);
 80057b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4923      	ldr	r1, [pc, #140]	; (8005858 <UART_WaitOnFlagUntilTimeout+0x184>)
 80057cc:	400a      	ands	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057dc:	f3ef 8310 	mrs	r3, PRIMASK
 80057e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80057e2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e6:	2301      	movs	r3, #1
 80057e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2101      	movs	r1, #1
 80057fe:	438a      	bics	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
 8005802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	2120      	movs	r1, #32
 8005820:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2274      	movs	r2, #116	; 0x74
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e010      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	425a      	negs	r2, r3
 800583e:	4153      	adcs	r3, r2
 8005840:	b2db      	uxtb	r3, r3
 8005842:	001a      	movs	r2, r3
 8005844:	1dfb      	adds	r3, r7, #7
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d100      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0x17a>
 800584c:	e74b      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b014      	add	sp, #80	; 0x50
 8005856:	bd80      	pop	{r7, pc}
 8005858:	fffffe5f 	.word	0xfffffe5f

0800585c <i2c_init>:
#include "i2c_bsp.h"
#include "i2c.h"

#define i2c_master hi2c1

void i2c_init(void){
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0

}
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <i2c_read>:
void i2c_read(uint16_t addr,uint8_t *data,uint16_t length){
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b085      	sub	sp, #20
 800586c:	af02      	add	r7, sp, #8
 800586e:	6039      	str	r1, [r7, #0]
 8005870:	0011      	movs	r1, r2
 8005872:	1dbb      	adds	r3, r7, #6
 8005874:	1c02      	adds	r2, r0, #0
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	1c0a      	adds	r2, r1, #0
 800587c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&i2c_master,addr, data, length,0xffff);
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	881c      	ldrh	r4, [r3, #0]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	1dbb      	adds	r3, r7, #6
 8005886:	8819      	ldrh	r1, [r3, #0]
 8005888:	4804      	ldr	r0, [pc, #16]	; (800589c <i2c_read+0x34>)
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <i2c_read+0x38>)
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	0023      	movs	r3, r4
 8005890:	f7fd ff4c 	bl	800372c <HAL_I2C_Master_Receive>
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b003      	add	sp, #12
 800589a:	bd90      	pop	{r4, r7, pc}
 800589c:	200001f8 	.word	0x200001f8
 80058a0:	0000ffff 	.word	0x0000ffff

080058a4 <i2c_write>:
void i2c_write(uint16_t addr, uint8_t *pData,uint16_t Size){
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	6039      	str	r1, [r7, #0]
 80058ac:	0011      	movs	r1, r2
 80058ae:	1dbb      	adds	r3, r7, #6
 80058b0:	1c02      	adds	r2, r0, #0
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	1c0a      	adds	r2, r1, #0
 80058b8:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&i2c_master,addr, pData, Size, 0xffff);
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	881c      	ldrh	r4, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	8819      	ldrh	r1, [r3, #0]
 80058c4:	4804      	ldr	r0, [pc, #16]	; (80058d8 <i2c_write+0x34>)
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <i2c_write+0x38>)
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	0023      	movs	r3, r4
 80058cc:	f7fd fe26 	bl	800351c <HAL_I2C_Master_Transmit>
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b003      	add	sp, #12
 80058d6:	bd90      	pop	{r4, r7, pc}
 80058d8:	200001f8 	.word	0x200001f8
 80058dc:	0000ffff 	.word	0x0000ffff

080058e0 <SHT_begin>:
static bool read_temp_humi_imlp(SHT3x *p_sht);
static bool write_command(SHT3x *p_sht, uint16_t cmd);
static void SHT_read_bytes(SHT3x *p_sht, uint8_t *buff, uint16_t length);
static uint8_t crc8(const uint8_t *data, int len);

bool SHT_begin(SHT3x *p_sht) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	p_sht->addr = SHT31_DEFAULT_ADDR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2244      	movs	r2, #68	; 0x44
 80058ec:	701a      	strb	r2, [r3, #0]
	p_sht->humidity = 0;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	605a      	str	r2, [r3, #4]
	p_sht->temperature = 0;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
	p_sht->readTempHum = read_temp_humi_imlp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a04      	ldr	r2, [pc, #16]	; (8005910 <SHT_begin+0x30>)
 80058fe:	60da      	str	r2, [r3, #12]
	p_sht->writeCommand = write_command;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <SHT_begin+0x34>)
 8005904:	611a      	str	r2, [r3, #16]
	return true;
 8005906:	2301      	movs	r3, #1
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}
 8005910:	0800597d 	.word	0x0800597d
 8005914:	08005a59 	.word	0x08005a59

08005918 <SHT_read_temp>:
float SHT_read_temp(SHT3x *p_sht) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	return p_sht->temperature;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
}
 8005924:	1c18      	adds	r0, r3, #0
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}

0800592c <SHT_read_humi>:
float SHT_read_humi(SHT3x *p_sht) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	return p_sht->humidity;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
}
 8005938:	1c18      	adds	r0, r3, #0
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}

08005940 <SHT_reset>:
	uint16_t stat = data[0];
	stat <<= 8;
	stat |= data[1];
	return stat;
}
void SHT_reset(SHT3x *p_sht) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	p_sht->writeCommand(p_sht, SHT31_SOFTRESET);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	4903      	ldr	r1, [pc, #12]	; (800595c <SHT_reset+0x1c>)
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	0010      	movs	r0, r2
 8005952:	4798      	blx	r3
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}
 800595c:	000030a2 	.word	0x000030a2

08005960 <SHT_mesure>:
	}
}
bool SHT_isHeaterEnabled(SHT3x *p_sht) {
	return true;
}
void SHT_mesure(SHT3x *p_sht){
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	p_sht->readTempHum(p_sht);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	0010      	movs	r0, r2
 8005970:	4798      	blx	r3
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46bd      	mov	sp, r7
 8005976:	b002      	add	sp, #8
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <read_temp_humi_imlp>:
static bool read_temp_humi_imlp(SHT3x *p_sht) {
 800597c:	b5b0      	push	{r4, r5, r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	uint8_t readbuffer[6];
	p_sht->writeCommand(p_sht, SHT31_MEAS_HIGHREP);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2290      	movs	r2, #144	; 0x90
 800598a:	0191      	lsls	r1, r2, #6
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	0010      	movs	r0, r2
 8005990:	4798      	blx	r3
	SHT_read_bytes(p_sht, readbuffer, sizeof(readbuffer));
 8005992:	2508      	movs	r5, #8
 8005994:	1979      	adds	r1, r7, r5
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2206      	movs	r2, #6
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f879 	bl	8005a92 <SHT_read_bytes>
	if (readbuffer[2] != crc8(readbuffer, 2)
 80059a0:	197b      	adds	r3, r7, r5
 80059a2:	789c      	ldrb	r4, [r3, #2]
 80059a4:	197b      	adds	r3, r7, r5
 80059a6:	2102      	movs	r1, #2
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 f886 	bl	8005aba <crc8>
 80059ae:	0003      	movs	r3, r0
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d10a      	bne.n	80059ca <read_temp_humi_imlp+0x4e>
			|| readbuffer[5] != crc8(readbuffer + 3, 2))
 80059b4:	197b      	adds	r3, r7, r5
 80059b6:	795c      	ldrb	r4, [r3, #5]
 80059b8:	197b      	adds	r3, r7, r5
 80059ba:	3303      	adds	r3, #3
 80059bc:	2102      	movs	r1, #2
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 f87b 	bl	8005aba <crc8>
 80059c4:	0003      	movs	r3, r0
 80059c6:	429c      	cmp	r4, r3
 80059c8:	d001      	beq.n	80059ce <read_temp_humi_imlp+0x52>
		return false;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e039      	b.n	8005a42 <read_temp_humi_imlp+0xc6>
	int32_t stemp = (int32_t) (((uint32_t) readbuffer[0] << 8) | readbuffer[1]);
 80059ce:	2408      	movs	r4, #8
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	193a      	adds	r2, r7, r4
 80059d8:	7852      	ldrb	r2, [r2, #1]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
	// simplified (65536 instead of 65535) integer version of:
	// temp = (stemp * 175.0f) / 65535.0f - 45.0f;
	stemp = ((4375 * stemp) >> 14) - 4500;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <read_temp_humi_imlp+0xd0>)
 80059e2:	4353      	muls	r3, r2
 80059e4:	139b      	asrs	r3, r3, #14
 80059e6:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <read_temp_humi_imlp+0xd4>)
 80059e8:	4694      	mov	ip, r2
 80059ea:	4463      	add	r3, ip
 80059ec:	617b      	str	r3, [r7, #20]
	p_sht->temperature = (float) stemp / 100.0f;
 80059ee:	6978      	ldr	r0, [r7, #20]
 80059f0:	f7fa ff8c 	bl	800090c <__aeabi_i2f>
 80059f4:	1c03      	adds	r3, r0, #0
 80059f6:	4917      	ldr	r1, [pc, #92]	; (8005a54 <read_temp_humi_imlp+0xd8>)
 80059f8:	1c18      	adds	r0, r3, #0
 80059fa:	f7fa fe6f 	bl	80006dc <__aeabi_fdiv>
 80059fe:	1c03      	adds	r3, r0, #0
 8005a00:	1c1a      	adds	r2, r3, #0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]

	uint32_t shum = ((uint32_t) readbuffer[3] << 8) | readbuffer[4];
 8005a06:	193b      	adds	r3, r7, r4
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	193a      	adds	r2, r7, r4
 8005a0e:	7912      	ldrb	r2, [r2, #4]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
	// simplified (65536 instead of 65535) integer version of:
	// humidity = (shum * 100.0f) / 65535.0f;
	shum = (625 * shum) >> 12;
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	0013      	movs	r3, r2
 8005a18:	015b      	lsls	r3, r3, #5
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	189b      	adds	r3, r3, r2
 8005a20:	009a      	lsls	r2, r3, #2
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	0b1b      	lsrs	r3, r3, #12
 8005a26:	613b      	str	r3, [r7, #16]
	p_sht->humidity = (float) shum / 100.0f;
 8005a28:	6938      	ldr	r0, [r7, #16]
 8005a2a:	f7fa ffbd 	bl	80009a8 <__aeabi_ui2f>
 8005a2e:	1c03      	adds	r3, r0, #0
 8005a30:	4908      	ldr	r1, [pc, #32]	; (8005a54 <read_temp_humi_imlp+0xd8>)
 8005a32:	1c18      	adds	r0, r3, #0
 8005a34:	f7fa fe52 	bl	80006dc <__aeabi_fdiv>
 8005a38:	1c03      	adds	r3, r0, #0
 8005a3a:	1c1a      	adds	r2, r3, #0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]

	return true;
 8005a40:	2301      	movs	r3, #1
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b006      	add	sp, #24
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	00001117 	.word	0x00001117
 8005a50:	ffffee6c 	.word	0xffffee6c
 8005a54:	42c80000 	.word	0x42c80000

08005a58 <write_command>:
static bool write_command(SHT3x *p_sht, uint16_t cmd) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	000a      	movs	r2, r1
 8005a62:	1cbb      	adds	r3, r7, #2
 8005a64:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	data[0] = (uint8_t)(cmd & 0xff00)>>8;
 8005a66:	210c      	movs	r1, #12
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(cmd & 0x00ff);
 8005a6e:	1cbb      	adds	r3, r7, #2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	705a      	strb	r2, [r3, #1]
	i2c_write(p_sht->addr,(uint8_t*)data, sizeof(data));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	1879      	adds	r1, r7, r1
 8005a80:	2202      	movs	r2, #2
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7ff ff0e 	bl	80058a4 <i2c_write>
	return true;
 8005a88:	2301      	movs	r3, #1
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <SHT_read_bytes>:
static void SHT_read_bytes(SHT3x *p_sht, uint8_t *buff, uint16_t length) {
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	801a      	strh	r2, [r3, #0]
	i2c_read(p_sht->addr, buff, length);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b298      	uxth	r0, r3
 8005aa6:	1dbb      	adds	r3, r7, #6
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	0019      	movs	r1, r3
 8005aae:	f7ff fedb 	bl	8005868 <i2c_read>
}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <crc8>:
static uint8_t crc8(const uint8_t *data, int len) {
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b086      	sub	sp, #24
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
   * Initialization data 0xFF
   * Polynomial 0x31 (x8 + x5 +x4 +1)
   * Final XOR 0x00
   */

  const uint8_t POLYNOMIAL = 0x31;
 8005ac4:	230b      	movs	r3, #11
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2231      	movs	r2, #49	; 0x31
 8005aca:	701a      	strb	r2, [r3, #0]
  uint8_t crc = 0xFF;
 8005acc:	2317      	movs	r3, #23
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	701a      	strb	r2, [r3, #0]

  for (int j = len; j; --j) {
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e02f      	b.n	8005b3a <crc8+0x80>
    crc ^= *data++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	2217      	movs	r2, #23
 8005ae4:	18bb      	adds	r3, r7, r2
 8005ae6:	18ba      	adds	r2, r7, r2
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	404a      	eors	r2, r1
 8005aec:	701a      	strb	r2, [r3, #0]

    for (int i = 8; i; --i) {
 8005aee:	2308      	movs	r3, #8
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e01c      	b.n	8005b2e <crc8+0x74>
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 8005af4:	2217      	movs	r2, #23
 8005af6:	18bb      	adds	r3, r7, r2
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0b      	bge.n	8005b18 <crc8+0x5e>
 8005b00:	18bb      	adds	r3, r7, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	b25a      	sxtb	r2, r3
 8005b08:	230b      	movs	r3, #11
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	4053      	eors	r3, r2
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e004      	b.n	8005b22 <crc8+0x68>
 8005b18:	2317      	movs	r3, #23
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	18db      	adds	r3, r3, r3
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2217      	movs	r2, #23
 8005b24:	18ba      	adds	r2, r7, r2
 8005b26:	7013      	strb	r3, [r2, #0]
    for (int i = 8; i; --i) {
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1df      	bne.n	8005af4 <crc8+0x3a>
  for (int j = len; j; --j) {
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1cc      	bne.n	8005ada <crc8+0x20>
    }
  }
  return crc;
 8005b40:	2317      	movs	r3, #23
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b006      	add	sp, #24
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	2600      	movs	r6, #0
 8005b60:	4d0c      	ldr	r5, [pc, #48]	; (8005b94 <__libc_init_array+0x38>)
 8005b62:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	f002 fe07 	bl	8008780 <_init>
 8005b72:	4d0a      	ldr	r5, [pc, #40]	; (8005b9c <__libc_init_array+0x40>)
 8005b74:	4c0a      	ldr	r4, [pc, #40]	; (8005ba0 <__libc_init_array+0x44>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	00b3      	lsls	r3, r6, #2
 8005b82:	58eb      	ldr	r3, [r5, r3]
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	00b3      	lsls	r3, r6, #2
 8005b8c:	58eb      	ldr	r3, [r5, r3]
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08008d14 	.word	0x08008d14
 8005b98:	08008d14 	.word	0x08008d14
 8005b9c:	08008d14 	.word	0x08008d14
 8005ba0:	08008d18 	.word	0x08008d18

08005ba4 <memset>:
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	1882      	adds	r2, r0, r2
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d100      	bne.n	8005bae <memset+0xa>
 8005bac:	4770      	bx	lr
 8005bae:	7019      	strb	r1, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	e7f9      	b.n	8005ba8 <memset+0x4>

08005bb4 <__cvt>:
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	001e      	movs	r6, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	0014      	movs	r4, r2
 8005bbc:	b08b      	sub	sp, #44	; 0x2c
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	da04      	bge.n	8005bcc <__cvt+0x18>
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	0609      	lsls	r1, r1, #24
 8005bc6:	1873      	adds	r3, r6, r1
 8005bc8:	001e      	movs	r6, r3
 8005bca:	232d      	movs	r3, #45	; 0x2d
 8005bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bce:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bd0:	7013      	strb	r3, [r2, #0]
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	439f      	bics	r7, r3
 8005bd8:	2f46      	cmp	r7, #70	; 0x46
 8005bda:	d007      	beq.n	8005bec <__cvt+0x38>
 8005bdc:	003b      	movs	r3, r7
 8005bde:	3b45      	subs	r3, #69	; 0x45
 8005be0:	4259      	negs	r1, r3
 8005be2:	414b      	adcs	r3, r1
 8005be4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005be6:	3a01      	subs	r2, #1
 8005be8:	18cb      	adds	r3, r1, r3
 8005bea:	9310      	str	r3, [sp, #64]	; 0x40
 8005bec:	ab09      	add	r3, sp, #36	; 0x24
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	ab08      	add	r3, sp, #32
 8005bf2:	9303      	str	r3, [sp, #12]
 8005bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bf6:	9200      	str	r2, [sp, #0]
 8005bf8:	9302      	str	r3, [sp, #8]
 8005bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bfc:	0022      	movs	r2, r4
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	0033      	movs	r3, r6
 8005c02:	f000 fceb 	bl	80065dc <_dtoa_r>
 8005c06:	0005      	movs	r5, r0
 8005c08:	2f47      	cmp	r7, #71	; 0x47
 8005c0a:	d102      	bne.n	8005c12 <__cvt+0x5e>
 8005c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c0e:	07db      	lsls	r3, r3, #31
 8005c10:	d528      	bpl.n	8005c64 <__cvt+0xb0>
 8005c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c14:	18eb      	adds	r3, r5, r3
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	2f46      	cmp	r7, #70	; 0x46
 8005c1a:	d114      	bne.n	8005c46 <__cvt+0x92>
 8005c1c:	782b      	ldrb	r3, [r5, #0]
 8005c1e:	2b30      	cmp	r3, #48	; 0x30
 8005c20:	d10c      	bne.n	8005c3c <__cvt+0x88>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	0020      	movs	r0, r4
 8005c28:	0031      	movs	r1, r6
 8005c2a:	f7fa fc0f 	bl	800044c <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d104      	bne.n	8005c3c <__cvt+0x88>
 8005c32:	2301      	movs	r3, #1
 8005c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c3e:	9a07      	ldr	r2, [sp, #28]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	18d3      	adds	r3, r2, r3
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	0031      	movs	r1, r6
 8005c4e:	f7fa fbfd 	bl	800044c <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d001      	beq.n	8005c5a <__cvt+0xa6>
 8005c56:	9b07      	ldr	r3, [sp, #28]
 8005c58:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5a:	2230      	movs	r2, #48	; 0x30
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	9907      	ldr	r1, [sp, #28]
 8005c60:	428b      	cmp	r3, r1
 8005c62:	d306      	bcc.n	8005c72 <__cvt+0xbe>
 8005c64:	0028      	movs	r0, r5
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c6a:	1b5b      	subs	r3, r3, r5
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	b00b      	add	sp, #44	; 0x2c
 8005c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	9109      	str	r1, [sp, #36]	; 0x24
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e7f0      	b.n	8005c5c <__cvt+0xa8>

08005c7a <__exponent>:
 8005c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7c:	1c83      	adds	r3, r0, #2
 8005c7e:	b087      	sub	sp, #28
 8005c80:	9303      	str	r3, [sp, #12]
 8005c82:	0005      	movs	r5, r0
 8005c84:	000c      	movs	r4, r1
 8005c86:	232b      	movs	r3, #43	; 0x2b
 8005c88:	7002      	strb	r2, [r0, #0]
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	da01      	bge.n	8005c92 <__exponent+0x18>
 8005c8e:	424c      	negs	r4, r1
 8005c90:	3302      	adds	r3, #2
 8005c92:	706b      	strb	r3, [r5, #1]
 8005c94:	2c09      	cmp	r4, #9
 8005c96:	dd31      	ble.n	8005cfc <__exponent+0x82>
 8005c98:	270a      	movs	r7, #10
 8005c9a:	ab04      	add	r3, sp, #16
 8005c9c:	1dde      	adds	r6, r3, #7
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	0039      	movs	r1, r7
 8005ca2:	9601      	str	r6, [sp, #4]
 8005ca4:	f7fa fbbc 	bl	8000420 <__aeabi_idivmod>
 8005ca8:	3e01      	subs	r6, #1
 8005caa:	3130      	adds	r1, #48	; 0x30
 8005cac:	0020      	movs	r0, r4
 8005cae:	7031      	strb	r1, [r6, #0]
 8005cb0:	0039      	movs	r1, r7
 8005cb2:	9402      	str	r4, [sp, #8]
 8005cb4:	f7fa face 	bl	8000254 <__divsi3>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	0004      	movs	r4, r0
 8005cbc:	2b63      	cmp	r3, #99	; 0x63
 8005cbe:	dcee      	bgt.n	8005c9e <__exponent+0x24>
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	3430      	adds	r4, #48	; 0x30
 8005cc4:	1e9a      	subs	r2, r3, #2
 8005cc6:	0013      	movs	r3, r2
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	7014      	strb	r4, [r2, #0]
 8005ccc:	a804      	add	r0, sp, #16
 8005cce:	3007      	adds	r0, #7
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	d80e      	bhi.n	8005cf2 <__exponent+0x78>
 8005cd4:	ab04      	add	r3, sp, #16
 8005cd6:	3307      	adds	r3, #7
 8005cd8:	2000      	movs	r0, #0
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d804      	bhi.n	8005ce8 <__exponent+0x6e>
 8005cde:	ab04      	add	r3, sp, #16
 8005ce0:	3009      	adds	r0, #9
 8005ce2:	18c0      	adds	r0, r0, r3
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	1ac0      	subs	r0, r0, r3
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	1818      	adds	r0, r3, r0
 8005cec:	1b40      	subs	r0, r0, r5
 8005cee:	b007      	add	sp, #28
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	7818      	ldrb	r0, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	7008      	strb	r0, [r1, #0]
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	e7e7      	b.n	8005ccc <__exponent+0x52>
 8005cfc:	2330      	movs	r3, #48	; 0x30
 8005cfe:	18e4      	adds	r4, r4, r3
 8005d00:	70ab      	strb	r3, [r5, #2]
 8005d02:	1d28      	adds	r0, r5, #4
 8005d04:	70ec      	strb	r4, [r5, #3]
 8005d06:	e7f1      	b.n	8005cec <__exponent+0x72>

08005d08 <_printf_float>:
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b095      	sub	sp, #84	; 0x54
 8005d0c:	000c      	movs	r4, r1
 8005d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d10:	001e      	movs	r6, r3
 8005d12:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005d14:	0007      	movs	r7, r0
 8005d16:	f001 fb7d 	bl	8007414 <_localeconv_r>
 8005d1a:	6803      	ldr	r3, [r0, #0]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d20:	f7fa f9f2 	bl	8000108 <strlen>
 8005d24:	2300      	movs	r3, #0
 8005d26:	9312      	str	r3, [sp, #72]	; 0x48
 8005d28:	7e23      	ldrb	r3, [r4, #24]
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	900e      	str	r0, [sp, #56]	; 0x38
 8005d32:	930d      	str	r3, [sp, #52]	; 0x34
 8005d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	05c9      	lsls	r1, r1, #23
 8005d3a:	d547      	bpl.n	8005dcc <_printf_float+0xc4>
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	4393      	bics	r3, r2
 8005d40:	001a      	movs	r2, r3
 8005d42:	3208      	adds	r2, #8
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	64a2      	str	r2, [r4, #72]	; 0x48
 8005d4c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005d4e:	2201      	movs	r2, #1
 8005d50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005d52:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d56:	006b      	lsls	r3, r5, #1
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d5e:	4ba7      	ldr	r3, [pc, #668]	; (8005ffc <_printf_float+0x2f4>)
 8005d60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d62:	4252      	negs	r2, r2
 8005d64:	f7fc fb9e 	bl	80024a4 <__aeabi_dcmpun>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d131      	bne.n	8005dd0 <_printf_float+0xc8>
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4ba3      	ldr	r3, [pc, #652]	; (8005ffc <_printf_float+0x2f4>)
 8005d70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d74:	4252      	negs	r2, r2
 8005d76:	f7fa fb79 	bl	800046c <__aeabi_dcmple>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d128      	bne.n	8005dd0 <_printf_float+0xc8>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	0029      	movs	r1, r5
 8005d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d86:	f7fa fb67 	bl	8000458 <__aeabi_dcmplt>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d003      	beq.n	8005d96 <_printf_float+0x8e>
 8005d8e:	0023      	movs	r3, r4
 8005d90:	222d      	movs	r2, #45	; 0x2d
 8005d92:	3343      	adds	r3, #67	; 0x43
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	4d99      	ldr	r5, [pc, #612]	; (8006000 <_printf_float+0x2f8>)
 8005d9a:	2b47      	cmp	r3, #71	; 0x47
 8005d9c:	d900      	bls.n	8005da0 <_printf_float+0x98>
 8005d9e:	4d99      	ldr	r5, [pc, #612]	; (8006004 <_printf_float+0x2fc>)
 8005da0:	2303      	movs	r3, #3
 8005da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	3301      	adds	r3, #1
 8005da8:	439a      	bics	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	0021      	movs	r1, r4
 8005db4:	0038      	movs	r0, r7
 8005db6:	9600      	str	r6, [sp, #0]
 8005db8:	aa13      	add	r2, sp, #76	; 0x4c
 8005dba:	f000 f9e7 	bl	800618c <_printf_common>
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	d000      	beq.n	8005dc4 <_printf_float+0xbc>
 8005dc2:	e0a2      	b.n	8005f0a <_printf_float+0x202>
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	4240      	negs	r0, r0
 8005dc8:	b015      	add	sp, #84	; 0x54
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dcc:	3307      	adds	r3, #7
 8005dce:	e7b6      	b.n	8005d3e <_printf_float+0x36>
 8005dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dd2:	002b      	movs	r3, r5
 8005dd4:	0010      	movs	r0, r2
 8005dd6:	0029      	movs	r1, r5
 8005dd8:	f7fc fb64 	bl	80024a4 <__aeabi_dcmpun>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d00b      	beq.n	8005df8 <_printf_float+0xf0>
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	da03      	bge.n	8005dec <_printf_float+0xe4>
 8005de4:	0023      	movs	r3, r4
 8005de6:	222d      	movs	r2, #45	; 0x2d
 8005de8:	3343      	adds	r3, #67	; 0x43
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dee:	4d86      	ldr	r5, [pc, #536]	; (8006008 <_printf_float+0x300>)
 8005df0:	2b47      	cmp	r3, #71	; 0x47
 8005df2:	d9d5      	bls.n	8005da0 <_printf_float+0x98>
 8005df4:	4d85      	ldr	r5, [pc, #532]	; (800600c <_printf_float+0x304>)
 8005df6:	e7d3      	b.n	8005da0 <_printf_float+0x98>
 8005df8:	2220      	movs	r2, #32
 8005dfa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	4391      	bics	r1, r2
 8005e00:	910f      	str	r1, [sp, #60]	; 0x3c
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	d149      	bne.n	8005e9a <_printf_float+0x192>
 8005e06:	3307      	adds	r3, #7
 8005e08:	6063      	str	r3, [r4, #4]
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	2200      	movs	r2, #0
 8005e14:	9206      	str	r2, [sp, #24]
 8005e16:	aa12      	add	r2, sp, #72	; 0x48
 8005e18:	9205      	str	r2, [sp, #20]
 8005e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e1c:	a908      	add	r1, sp, #32
 8005e1e:	9204      	str	r2, [sp, #16]
 8005e20:	aa11      	add	r2, sp, #68	; 0x44
 8005e22:	9203      	str	r2, [sp, #12]
 8005e24:	2223      	movs	r2, #35	; 0x23
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	1852      	adds	r2, r2, r1
 8005e2e:	9202      	str	r2, [sp, #8]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	0038      	movs	r0, r7
 8005e34:	002b      	movs	r3, r5
 8005e36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e38:	f7ff febc 	bl	8005bb4 <__cvt>
 8005e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e3e:	0005      	movs	r5, r0
 8005e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e42:	2b47      	cmp	r3, #71	; 0x47
 8005e44:	d108      	bne.n	8005e58 <_printf_float+0x150>
 8005e46:	1ccb      	adds	r3, r1, #3
 8005e48:	db02      	blt.n	8005e50 <_printf_float+0x148>
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	dd48      	ble.n	8005ee2 <_printf_float+0x1da>
 8005e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e52:	3b02      	subs	r3, #2
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	930a      	str	r3, [sp, #40]	; 0x28
 8005e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5a:	2b65      	cmp	r3, #101	; 0x65
 8005e5c:	d824      	bhi.n	8005ea8 <_printf_float+0x1a0>
 8005e5e:	0020      	movs	r0, r4
 8005e60:	001a      	movs	r2, r3
 8005e62:	3901      	subs	r1, #1
 8005e64:	3050      	adds	r0, #80	; 0x50
 8005e66:	9111      	str	r1, [sp, #68]	; 0x44
 8005e68:	f7ff ff07 	bl	8005c7a <__exponent>
 8005e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6e:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e70:	1813      	adds	r3, r2, r0
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	2a01      	cmp	r2, #1
 8005e76:	dc02      	bgt.n	8005e7e <_printf_float+0x176>
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	07d2      	lsls	r2, r2, #31
 8005e7c:	d501      	bpl.n	8005e82 <_printf_float+0x17a>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	2323      	movs	r3, #35	; 0x23
 8005e84:	aa08      	add	r2, sp, #32
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d100      	bne.n	8005e90 <_printf_float+0x188>
 8005e8e:	e78f      	b.n	8005db0 <_printf_float+0xa8>
 8005e90:	0023      	movs	r3, r4
 8005e92:	222d      	movs	r2, #45	; 0x2d
 8005e94:	3343      	adds	r3, #67	; 0x43
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e78a      	b.n	8005db0 <_printf_float+0xa8>
 8005e9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e9c:	2a47      	cmp	r2, #71	; 0x47
 8005e9e:	d1b4      	bne.n	8005e0a <_printf_float+0x102>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1b2      	bne.n	8005e0a <_printf_float+0x102>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	e7af      	b.n	8005e08 <_printf_float+0x100>
 8005ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eaa:	2b66      	cmp	r3, #102	; 0x66
 8005eac:	d11b      	bne.n	8005ee6 <_printf_float+0x1de>
 8005eae:	6863      	ldr	r3, [r4, #4]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	dd0d      	ble.n	8005ed0 <_printf_float+0x1c8>
 8005eb4:	6121      	str	r1, [r4, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <_printf_float+0x1b8>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	07d2      	lsls	r2, r2, #31
 8005ebe:	d502      	bpl.n	8005ec6 <_printf_float+0x1be>
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	1859      	adds	r1, r3, r1
 8005ec4:	6121      	str	r1, [r4, #16]
 8005ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005eca:	2300      	movs	r3, #0
 8005ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ece:	e7d8      	b.n	8005e82 <_printf_float+0x17a>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <_printf_float+0x1d4>
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	4211      	tst	r1, r2
 8005eda:	d000      	beq.n	8005ede <_printf_float+0x1d6>
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	6122      	str	r2, [r4, #16]
 8005ee0:	e7f1      	b.n	8005ec6 <_printf_float+0x1be>
 8005ee2:	2367      	movs	r3, #103	; 0x67
 8005ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ee8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eea:	4293      	cmp	r3, r2
 8005eec:	db06      	blt.n	8005efc <_printf_float+0x1f4>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	07d2      	lsls	r2, r2, #31
 8005ef4:	d5e7      	bpl.n	8005ec6 <_printf_float+0x1be>
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	e7e4      	b.n	8005ec6 <_printf_float+0x1be>
 8005efc:	2101      	movs	r1, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc01      	bgt.n	8005f06 <_printf_float+0x1fe>
 8005f02:	1849      	adds	r1, r1, r1
 8005f04:	1ac9      	subs	r1, r1, r3
 8005f06:	1852      	adds	r2, r2, r1
 8005f08:	e7e9      	b.n	8005ede <_printf_float+0x1d6>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	0553      	lsls	r3, r2, #21
 8005f0e:	d407      	bmi.n	8005f20 <_printf_float+0x218>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	002a      	movs	r2, r5
 8005f14:	0038      	movs	r0, r7
 8005f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f18:	47b0      	blx	r6
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d128      	bne.n	8005f70 <_printf_float+0x268>
 8005f1e:	e751      	b.n	8005dc4 <_printf_float+0xbc>
 8005f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f22:	2b65      	cmp	r3, #101	; 0x65
 8005f24:	d800      	bhi.n	8005f28 <_printf_float+0x220>
 8005f26:	e0e1      	b.n	80060ec <_printf_float+0x3e4>
 8005f28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005f2a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f7fa fa8c 	bl	800044c <__aeabi_dcmpeq>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d031      	beq.n	8005f9c <_printf_float+0x294>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	0038      	movs	r0, r7
 8005f3c:	4a34      	ldr	r2, [pc, #208]	; (8006010 <_printf_float+0x308>)
 8005f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f40:	47b0      	blx	r6
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d100      	bne.n	8005f48 <_printf_float+0x240>
 8005f46:	e73d      	b.n	8005dc4 <_printf_float+0xbc>
 8005f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	db02      	blt.n	8005f56 <_printf_float+0x24e>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	07db      	lsls	r3, r3, #31
 8005f54:	d50c      	bpl.n	8005f70 <_printf_float+0x268>
 8005f56:	0038      	movs	r0, r7
 8005f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f5e:	47b0      	blx	r6
 8005f60:	2500      	movs	r5, #0
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d100      	bne.n	8005f68 <_printf_float+0x260>
 8005f66:	e72d      	b.n	8005dc4 <_printf_float+0xbc>
 8005f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dc0a      	bgt.n	8005f86 <_printf_float+0x27e>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d500      	bpl.n	8005f78 <_printf_float+0x270>
 8005f76:	e106      	b.n	8006186 <_printf_float+0x47e>
 8005f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f7a:	68e0      	ldr	r0, [r4, #12]
 8005f7c:	4298      	cmp	r0, r3
 8005f7e:	db00      	blt.n	8005f82 <_printf_float+0x27a>
 8005f80:	e722      	b.n	8005dc8 <_printf_float+0xc0>
 8005f82:	0018      	movs	r0, r3
 8005f84:	e720      	b.n	8005dc8 <_printf_float+0xc0>
 8005f86:	0022      	movs	r2, r4
 8005f88:	2301      	movs	r3, #1
 8005f8a:	0038      	movs	r0, r7
 8005f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f8e:	321a      	adds	r2, #26
 8005f90:	47b0      	blx	r6
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d100      	bne.n	8005f98 <_printf_float+0x290>
 8005f96:	e715      	b.n	8005dc4 <_printf_float+0xbc>
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7e5      	b.n	8005f68 <_printf_float+0x260>
 8005f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dc38      	bgt.n	8006014 <_printf_float+0x30c>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	0038      	movs	r0, r7
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <_printf_float+0x308>)
 8005fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005faa:	47b0      	blx	r6
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d100      	bne.n	8005fb2 <_printf_float+0x2aa>
 8005fb0:	e708      	b.n	8005dc4 <_printf_float+0xbc>
 8005fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d102      	bne.n	8005fc0 <_printf_float+0x2b8>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	07db      	lsls	r3, r3, #31
 8005fbe:	d5d7      	bpl.n	8005f70 <_printf_float+0x268>
 8005fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc2:	0038      	movs	r0, r7
 8005fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc8:	47b0      	blx	r6
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d100      	bne.n	8005fd0 <_printf_float+0x2c8>
 8005fce:	e6f9      	b.n	8005dc4 <_printf_float+0xbc>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd8:	425b      	negs	r3, r3
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	dc01      	bgt.n	8005fe2 <_printf_float+0x2da>
 8005fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe0:	e797      	b.n	8005f12 <_printf_float+0x20a>
 8005fe2:	0022      	movs	r2, r4
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	0038      	movs	r0, r7
 8005fe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fea:	321a      	adds	r2, #26
 8005fec:	47b0      	blx	r6
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d100      	bne.n	8005ff4 <_printf_float+0x2ec>
 8005ff2:	e6e7      	b.n	8005dc4 <_printf_float+0xbc>
 8005ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	e7eb      	b.n	8005fd2 <_printf_float+0x2ca>
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	7fefffff 	.word	0x7fefffff
 8006000:	08008934 	.word	0x08008934
 8006004:	08008938 	.word	0x08008938
 8006008:	0800893c 	.word	0x0800893c
 800600c:	08008940 	.word	0x08008940
 8006010:	08008944 	.word	0x08008944
 8006014:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006018:	920a      	str	r2, [sp, #40]	; 0x28
 800601a:	429a      	cmp	r2, r3
 800601c:	dd00      	ble.n	8006020 <_printf_float+0x318>
 800601e:	930a      	str	r3, [sp, #40]	; 0x28
 8006020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	dc3c      	bgt.n	80060a0 <_printf_float+0x398>
 8006026:	2300      	movs	r3, #0
 8006028:	930d      	str	r3, [sp, #52]	; 0x34
 800602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602c:	43db      	mvns	r3, r3
 800602e:	17db      	asrs	r3, r3, #31
 8006030:	930f      	str	r3, [sp, #60]	; 0x3c
 8006032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006036:	930b      	str	r3, [sp, #44]	; 0x2c
 8006038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603a:	4013      	ands	r3, r2
 800603c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006042:	4293      	cmp	r3, r2
 8006044:	dc34      	bgt.n	80060b0 <_printf_float+0x3a8>
 8006046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800604a:	4293      	cmp	r3, r2
 800604c:	db3d      	blt.n	80060ca <_printf_float+0x3c2>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	07db      	lsls	r3, r3, #31
 8006052:	d43a      	bmi.n	80060ca <_printf_float+0x3c2>
 8006054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006058:	9911      	ldr	r1, [sp, #68]	; 0x44
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	1a52      	subs	r2, r2, r1
 800605e:	920a      	str	r2, [sp, #40]	; 0x28
 8006060:	429a      	cmp	r2, r3
 8006062:	dd00      	ble.n	8006066 <_printf_float+0x35e>
 8006064:	930a      	str	r3, [sp, #40]	; 0x28
 8006066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006068:	2b00      	cmp	r3, #0
 800606a:	dc36      	bgt.n	80060da <_printf_float+0x3d2>
 800606c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606e:	2500      	movs	r5, #0
 8006070:	43db      	mvns	r3, r3
 8006072:	17db      	asrs	r3, r3, #31
 8006074:	930b      	str	r3, [sp, #44]	; 0x2c
 8006076:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800607a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006080:	400a      	ands	r2, r1
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	42ab      	cmp	r3, r5
 8006086:	dc00      	bgt.n	800608a <_printf_float+0x382>
 8006088:	e772      	b.n	8005f70 <_printf_float+0x268>
 800608a:	0022      	movs	r2, r4
 800608c:	2301      	movs	r3, #1
 800608e:	0038      	movs	r0, r7
 8006090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006092:	321a      	adds	r2, #26
 8006094:	47b0      	blx	r6
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d100      	bne.n	800609c <_printf_float+0x394>
 800609a:	e693      	b.n	8005dc4 <_printf_float+0xbc>
 800609c:	3501      	adds	r5, #1
 800609e:	e7ea      	b.n	8006076 <_printf_float+0x36e>
 80060a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a2:	002a      	movs	r2, r5
 80060a4:	0038      	movs	r0, r7
 80060a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a8:	47b0      	blx	r6
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d1bb      	bne.n	8006026 <_printf_float+0x31e>
 80060ae:	e689      	b.n	8005dc4 <_printf_float+0xbc>
 80060b0:	0022      	movs	r2, r4
 80060b2:	2301      	movs	r3, #1
 80060b4:	0038      	movs	r0, r7
 80060b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b8:	321a      	adds	r2, #26
 80060ba:	47b0      	blx	r6
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d100      	bne.n	80060c2 <_printf_float+0x3ba>
 80060c0:	e680      	b.n	8005dc4 <_printf_float+0xbc>
 80060c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c4:	3301      	adds	r3, #1
 80060c6:	930d      	str	r3, [sp, #52]	; 0x34
 80060c8:	e7b3      	b.n	8006032 <_printf_float+0x32a>
 80060ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060cc:	0038      	movs	r0, r7
 80060ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060d2:	47b0      	blx	r6
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d1bd      	bne.n	8006054 <_printf_float+0x34c>
 80060d8:	e674      	b.n	8005dc4 <_printf_float+0xbc>
 80060da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060dc:	0038      	movs	r0, r7
 80060de:	18ea      	adds	r2, r5, r3
 80060e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e4:	47b0      	blx	r6
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d1c0      	bne.n	800606c <_printf_float+0x364>
 80060ea:	e66b      	b.n	8005dc4 <_printf_float+0xbc>
 80060ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	dc02      	bgt.n	80060f8 <_printf_float+0x3f0>
 80060f2:	2301      	movs	r3, #1
 80060f4:	421a      	tst	r2, r3
 80060f6:	d034      	beq.n	8006162 <_printf_float+0x45a>
 80060f8:	2301      	movs	r3, #1
 80060fa:	002a      	movs	r2, r5
 80060fc:	0038      	movs	r0, r7
 80060fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006100:	47b0      	blx	r6
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d100      	bne.n	8006108 <_printf_float+0x400>
 8006106:	e65d      	b.n	8005dc4 <_printf_float+0xbc>
 8006108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800610a:	0038      	movs	r0, r7
 800610c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800610e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006110:	47b0      	blx	r6
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d100      	bne.n	8006118 <_printf_float+0x410>
 8006116:	e655      	b.n	8005dc4 <_printf_float+0xbc>
 8006118:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800611a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	f7fa f994 	bl	800044c <__aeabi_dcmpeq>
 8006124:	2800      	cmp	r0, #0
 8006126:	d11a      	bne.n	800615e <_printf_float+0x456>
 8006128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800612a:	1c6a      	adds	r2, r5, #1
 800612c:	3b01      	subs	r3, #1
 800612e:	0038      	movs	r0, r7
 8006130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006132:	47b0      	blx	r6
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d10e      	bne.n	8006156 <_printf_float+0x44e>
 8006138:	e644      	b.n	8005dc4 <_printf_float+0xbc>
 800613a:	0022      	movs	r2, r4
 800613c:	2301      	movs	r3, #1
 800613e:	0038      	movs	r0, r7
 8006140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006142:	321a      	adds	r2, #26
 8006144:	47b0      	blx	r6
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d100      	bne.n	800614c <_printf_float+0x444>
 800614a:	e63b      	b.n	8005dc4 <_printf_float+0xbc>
 800614c:	3501      	adds	r5, #1
 800614e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006150:	3b01      	subs	r3, #1
 8006152:	42ab      	cmp	r3, r5
 8006154:	dcf1      	bgt.n	800613a <_printf_float+0x432>
 8006156:	0022      	movs	r2, r4
 8006158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615a:	3250      	adds	r2, #80	; 0x50
 800615c:	e6da      	b.n	8005f14 <_printf_float+0x20c>
 800615e:	2500      	movs	r5, #0
 8006160:	e7f5      	b.n	800614e <_printf_float+0x446>
 8006162:	002a      	movs	r2, r5
 8006164:	e7e3      	b.n	800612e <_printf_float+0x426>
 8006166:	0022      	movs	r2, r4
 8006168:	2301      	movs	r3, #1
 800616a:	0038      	movs	r0, r7
 800616c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800616e:	3219      	adds	r2, #25
 8006170:	47b0      	blx	r6
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d100      	bne.n	8006178 <_printf_float+0x470>
 8006176:	e625      	b.n	8005dc4 <_printf_float+0xbc>
 8006178:	3501      	adds	r5, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ab      	cmp	r3, r5
 8006182:	dcf0      	bgt.n	8006166 <_printf_float+0x45e>
 8006184:	e6f8      	b.n	8005f78 <_printf_float+0x270>
 8006186:	2500      	movs	r5, #0
 8006188:	e7f7      	b.n	800617a <_printf_float+0x472>
 800618a:	46c0      	nop			; (mov r8, r8)

0800618c <_printf_common>:
 800618c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800618e:	0015      	movs	r5, r2
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	688a      	ldr	r2, [r1, #8]
 8006194:	690b      	ldr	r3, [r1, #16]
 8006196:	000c      	movs	r4, r1
 8006198:	9000      	str	r0, [sp, #0]
 800619a:	4293      	cmp	r3, r2
 800619c:	da00      	bge.n	80061a0 <_printf_common+0x14>
 800619e:	0013      	movs	r3, r2
 80061a0:	0022      	movs	r2, r4
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	3243      	adds	r2, #67	; 0x43
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d001      	beq.n	80061b0 <_printf_common+0x24>
 80061ac:	3301      	adds	r3, #1
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	069b      	lsls	r3, r3, #26
 80061b4:	d502      	bpl.n	80061bc <_printf_common+0x30>
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	3302      	adds	r3, #2
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	2306      	movs	r3, #6
 80061c0:	0017      	movs	r7, r2
 80061c2:	401f      	ands	r7, r3
 80061c4:	421a      	tst	r2, r3
 80061c6:	d027      	beq.n	8006218 <_printf_common+0x8c>
 80061c8:	0023      	movs	r3, r4
 80061ca:	3343      	adds	r3, #67	; 0x43
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	1e5a      	subs	r2, r3, #1
 80061d0:	4193      	sbcs	r3, r2
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	0692      	lsls	r2, r2, #26
 80061d6:	d430      	bmi.n	800623a <_printf_common+0xae>
 80061d8:	0022      	movs	r2, r4
 80061da:	9901      	ldr	r1, [sp, #4]
 80061dc:	9800      	ldr	r0, [sp, #0]
 80061de:	9e08      	ldr	r6, [sp, #32]
 80061e0:	3243      	adds	r2, #67	; 0x43
 80061e2:	47b0      	blx	r6
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d025      	beq.n	8006234 <_printf_common+0xa8>
 80061e8:	2306      	movs	r3, #6
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	682a      	ldr	r2, [r5, #0]
 80061ee:	68e1      	ldr	r1, [r4, #12]
 80061f0:	2500      	movs	r5, #0
 80061f2:	4003      	ands	r3, r0
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d103      	bne.n	8006200 <_printf_common+0x74>
 80061f8:	1a8d      	subs	r5, r1, r2
 80061fa:	43eb      	mvns	r3, r5
 80061fc:	17db      	asrs	r3, r3, #31
 80061fe:	401d      	ands	r5, r3
 8006200:	68a3      	ldr	r3, [r4, #8]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	4293      	cmp	r3, r2
 8006206:	dd01      	ble.n	800620c <_printf_common+0x80>
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	18ed      	adds	r5, r5, r3
 800620c:	2700      	movs	r7, #0
 800620e:	42bd      	cmp	r5, r7
 8006210:	d120      	bne.n	8006254 <_printf_common+0xc8>
 8006212:	2000      	movs	r0, #0
 8006214:	e010      	b.n	8006238 <_printf_common+0xac>
 8006216:	3701      	adds	r7, #1
 8006218:	68e3      	ldr	r3, [r4, #12]
 800621a:	682a      	ldr	r2, [r5, #0]
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	42bb      	cmp	r3, r7
 8006220:	ddd2      	ble.n	80061c8 <_printf_common+0x3c>
 8006222:	0022      	movs	r2, r4
 8006224:	2301      	movs	r3, #1
 8006226:	9901      	ldr	r1, [sp, #4]
 8006228:	9800      	ldr	r0, [sp, #0]
 800622a:	9e08      	ldr	r6, [sp, #32]
 800622c:	3219      	adds	r2, #25
 800622e:	47b0      	blx	r6
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d1f0      	bne.n	8006216 <_printf_common+0x8a>
 8006234:	2001      	movs	r0, #1
 8006236:	4240      	negs	r0, r0
 8006238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800623a:	2030      	movs	r0, #48	; 0x30
 800623c:	18e1      	adds	r1, r4, r3
 800623e:	3143      	adds	r1, #67	; 0x43
 8006240:	7008      	strb	r0, [r1, #0]
 8006242:	0021      	movs	r1, r4
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	3145      	adds	r1, #69	; 0x45
 8006248:	7809      	ldrb	r1, [r1, #0]
 800624a:	18a2      	adds	r2, r4, r2
 800624c:	3243      	adds	r2, #67	; 0x43
 800624e:	3302      	adds	r3, #2
 8006250:	7011      	strb	r1, [r2, #0]
 8006252:	e7c1      	b.n	80061d8 <_printf_common+0x4c>
 8006254:	0022      	movs	r2, r4
 8006256:	2301      	movs	r3, #1
 8006258:	9901      	ldr	r1, [sp, #4]
 800625a:	9800      	ldr	r0, [sp, #0]
 800625c:	9e08      	ldr	r6, [sp, #32]
 800625e:	321a      	adds	r2, #26
 8006260:	47b0      	blx	r6
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d0e6      	beq.n	8006234 <_printf_common+0xa8>
 8006266:	3701      	adds	r7, #1
 8006268:	e7d1      	b.n	800620e <_printf_common+0x82>
	...

0800626c <_printf_i>:
 800626c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626e:	b08b      	sub	sp, #44	; 0x2c
 8006270:	9206      	str	r2, [sp, #24]
 8006272:	000a      	movs	r2, r1
 8006274:	3243      	adds	r2, #67	; 0x43
 8006276:	9307      	str	r3, [sp, #28]
 8006278:	9005      	str	r0, [sp, #20]
 800627a:	9204      	str	r2, [sp, #16]
 800627c:	7e0a      	ldrb	r2, [r1, #24]
 800627e:	000c      	movs	r4, r1
 8006280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006282:	2a78      	cmp	r2, #120	; 0x78
 8006284:	d807      	bhi.n	8006296 <_printf_i+0x2a>
 8006286:	2a62      	cmp	r2, #98	; 0x62
 8006288:	d809      	bhi.n	800629e <_printf_i+0x32>
 800628a:	2a00      	cmp	r2, #0
 800628c:	d100      	bne.n	8006290 <_printf_i+0x24>
 800628e:	e0c1      	b.n	8006414 <_printf_i+0x1a8>
 8006290:	2a58      	cmp	r2, #88	; 0x58
 8006292:	d100      	bne.n	8006296 <_printf_i+0x2a>
 8006294:	e08c      	b.n	80063b0 <_printf_i+0x144>
 8006296:	0026      	movs	r6, r4
 8006298:	3642      	adds	r6, #66	; 0x42
 800629a:	7032      	strb	r2, [r6, #0]
 800629c:	e022      	b.n	80062e4 <_printf_i+0x78>
 800629e:	0010      	movs	r0, r2
 80062a0:	3863      	subs	r0, #99	; 0x63
 80062a2:	2815      	cmp	r0, #21
 80062a4:	d8f7      	bhi.n	8006296 <_printf_i+0x2a>
 80062a6:	f7f9 ff41 	bl	800012c <__gnu_thumb1_case_shi>
 80062aa:	0016      	.short	0x0016
 80062ac:	fff6001f 	.word	0xfff6001f
 80062b0:	fff6fff6 	.word	0xfff6fff6
 80062b4:	001ffff6 	.word	0x001ffff6
 80062b8:	fff6fff6 	.word	0xfff6fff6
 80062bc:	fff6fff6 	.word	0xfff6fff6
 80062c0:	003600a8 	.word	0x003600a8
 80062c4:	fff6009a 	.word	0xfff6009a
 80062c8:	00b9fff6 	.word	0x00b9fff6
 80062cc:	0036fff6 	.word	0x0036fff6
 80062d0:	fff6fff6 	.word	0xfff6fff6
 80062d4:	009e      	.short	0x009e
 80062d6:	0026      	movs	r6, r4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	3642      	adds	r6, #66	; 0x42
 80062dc:	1d11      	adds	r1, r2, #4
 80062de:	6019      	str	r1, [r3, #0]
 80062e0:	6813      	ldr	r3, [r2, #0]
 80062e2:	7033      	strb	r3, [r6, #0]
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0a7      	b.n	8006438 <_printf_i+0x1cc>
 80062e8:	6808      	ldr	r0, [r1, #0]
 80062ea:	6819      	ldr	r1, [r3, #0]
 80062ec:	1d0a      	adds	r2, r1, #4
 80062ee:	0605      	lsls	r5, r0, #24
 80062f0:	d50b      	bpl.n	800630a <_printf_i+0x9e>
 80062f2:	680d      	ldr	r5, [r1, #0]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	da03      	bge.n	8006302 <_printf_i+0x96>
 80062fa:	232d      	movs	r3, #45	; 0x2d
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	426d      	negs	r5, r5
 8006300:	7013      	strb	r3, [r2, #0]
 8006302:	4b61      	ldr	r3, [pc, #388]	; (8006488 <_printf_i+0x21c>)
 8006304:	270a      	movs	r7, #10
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	e01b      	b.n	8006342 <_printf_i+0xd6>
 800630a:	680d      	ldr	r5, [r1, #0]
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	0641      	lsls	r1, r0, #25
 8006310:	d5f1      	bpl.n	80062f6 <_printf_i+0x8a>
 8006312:	b22d      	sxth	r5, r5
 8006314:	e7ef      	b.n	80062f6 <_printf_i+0x8a>
 8006316:	680d      	ldr	r5, [r1, #0]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	1d08      	adds	r0, r1, #4
 800631c:	6018      	str	r0, [r3, #0]
 800631e:	062e      	lsls	r6, r5, #24
 8006320:	d501      	bpl.n	8006326 <_printf_i+0xba>
 8006322:	680d      	ldr	r5, [r1, #0]
 8006324:	e003      	b.n	800632e <_printf_i+0xc2>
 8006326:	066d      	lsls	r5, r5, #25
 8006328:	d5fb      	bpl.n	8006322 <_printf_i+0xb6>
 800632a:	680d      	ldr	r5, [r1, #0]
 800632c:	b2ad      	uxth	r5, r5
 800632e:	4b56      	ldr	r3, [pc, #344]	; (8006488 <_printf_i+0x21c>)
 8006330:	2708      	movs	r7, #8
 8006332:	9303      	str	r3, [sp, #12]
 8006334:	2a6f      	cmp	r2, #111	; 0x6f
 8006336:	d000      	beq.n	800633a <_printf_i+0xce>
 8006338:	3702      	adds	r7, #2
 800633a:	0023      	movs	r3, r4
 800633c:	2200      	movs	r2, #0
 800633e:	3343      	adds	r3, #67	; 0x43
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	db03      	blt.n	8006352 <_printf_i+0xe6>
 800634a:	2204      	movs	r2, #4
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	4391      	bics	r1, r2
 8006350:	6021      	str	r1, [r4, #0]
 8006352:	2d00      	cmp	r5, #0
 8006354:	d102      	bne.n	800635c <_printf_i+0xf0>
 8006356:	9e04      	ldr	r6, [sp, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <_printf_i+0x10a>
 800635c:	9e04      	ldr	r6, [sp, #16]
 800635e:	0028      	movs	r0, r5
 8006360:	0039      	movs	r1, r7
 8006362:	f7f9 ff73 	bl	800024c <__aeabi_uidivmod>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3e01      	subs	r6, #1
 800636a:	5c5b      	ldrb	r3, [r3, r1]
 800636c:	7033      	strb	r3, [r6, #0]
 800636e:	002b      	movs	r3, r5
 8006370:	0005      	movs	r5, r0
 8006372:	429f      	cmp	r7, r3
 8006374:	d9f3      	bls.n	800635e <_printf_i+0xf2>
 8006376:	2f08      	cmp	r7, #8
 8006378:	d109      	bne.n	800638e <_printf_i+0x122>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	07db      	lsls	r3, r3, #31
 800637e:	d506      	bpl.n	800638e <_printf_i+0x122>
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	6922      	ldr	r2, [r4, #16]
 8006384:	4293      	cmp	r3, r2
 8006386:	dc02      	bgt.n	800638e <_printf_i+0x122>
 8006388:	2330      	movs	r3, #48	; 0x30
 800638a:	3e01      	subs	r6, #1
 800638c:	7033      	strb	r3, [r6, #0]
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	0021      	movs	r1, r4
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	9805      	ldr	r0, [sp, #20]
 800639c:	9b06      	ldr	r3, [sp, #24]
 800639e:	aa09      	add	r2, sp, #36	; 0x24
 80063a0:	f7ff fef4 	bl	800618c <_printf_common>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d14c      	bne.n	8006442 <_printf_i+0x1d6>
 80063a8:	2001      	movs	r0, #1
 80063aa:	4240      	negs	r0, r0
 80063ac:	b00b      	add	sp, #44	; 0x2c
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b0:	3145      	adds	r1, #69	; 0x45
 80063b2:	700a      	strb	r2, [r1, #0]
 80063b4:	4a34      	ldr	r2, [pc, #208]	; (8006488 <_printf_i+0x21c>)
 80063b6:	9203      	str	r2, [sp, #12]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	ca20      	ldmia	r2!, {r5}
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	0608      	lsls	r0, r1, #24
 80063c2:	d516      	bpl.n	80063f2 <_printf_i+0x186>
 80063c4:	07cb      	lsls	r3, r1, #31
 80063c6:	d502      	bpl.n	80063ce <_printf_i+0x162>
 80063c8:	2320      	movs	r3, #32
 80063ca:	4319      	orrs	r1, r3
 80063cc:	6021      	str	r1, [r4, #0]
 80063ce:	2710      	movs	r7, #16
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	d1b2      	bne.n	800633a <_printf_i+0xce>
 80063d4:	2320      	movs	r3, #32
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	439a      	bics	r2, r3
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	e7ad      	b.n	800633a <_printf_i+0xce>
 80063de:	2220      	movs	r2, #32
 80063e0:	6809      	ldr	r1, [r1, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	0022      	movs	r2, r4
 80063e8:	2178      	movs	r1, #120	; 0x78
 80063ea:	3245      	adds	r2, #69	; 0x45
 80063ec:	7011      	strb	r1, [r2, #0]
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <_printf_i+0x220>)
 80063f0:	e7e1      	b.n	80063b6 <_printf_i+0x14a>
 80063f2:	0648      	lsls	r0, r1, #25
 80063f4:	d5e6      	bpl.n	80063c4 <_printf_i+0x158>
 80063f6:	b2ad      	uxth	r5, r5
 80063f8:	e7e4      	b.n	80063c4 <_printf_i+0x158>
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	680d      	ldr	r5, [r1, #0]
 80063fe:	1d10      	adds	r0, r2, #4
 8006400:	6949      	ldr	r1, [r1, #20]
 8006402:	6018      	str	r0, [r3, #0]
 8006404:	6813      	ldr	r3, [r2, #0]
 8006406:	062e      	lsls	r6, r5, #24
 8006408:	d501      	bpl.n	800640e <_printf_i+0x1a2>
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	e002      	b.n	8006414 <_printf_i+0x1a8>
 800640e:	066d      	lsls	r5, r5, #25
 8006410:	d5fb      	bpl.n	800640a <_printf_i+0x19e>
 8006412:	8019      	strh	r1, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	9e04      	ldr	r6, [sp, #16]
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	e7bb      	b.n	8006394 <_printf_i+0x128>
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	1d11      	adds	r1, r2, #4
 8006420:	6019      	str	r1, [r3, #0]
 8006422:	6816      	ldr	r6, [r2, #0]
 8006424:	2100      	movs	r1, #0
 8006426:	0030      	movs	r0, r6
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	f001 f805 	bl	8007438 <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d001      	beq.n	8006436 <_printf_i+0x1ca>
 8006432:	1b80      	subs	r0, r0, r6
 8006434:	6060      	str	r0, [r4, #4]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	2300      	movs	r3, #0
 800643c:	9a04      	ldr	r2, [sp, #16]
 800643e:	7013      	strb	r3, [r2, #0]
 8006440:	e7a8      	b.n	8006394 <_printf_i+0x128>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	0032      	movs	r2, r6
 8006446:	9906      	ldr	r1, [sp, #24]
 8006448:	9805      	ldr	r0, [sp, #20]
 800644a:	9d07      	ldr	r5, [sp, #28]
 800644c:	47a8      	blx	r5
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d0aa      	beq.n	80063a8 <_printf_i+0x13c>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	079b      	lsls	r3, r3, #30
 8006456:	d415      	bmi.n	8006484 <_printf_i+0x218>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	4298      	cmp	r0, r3
 800645e:	daa5      	bge.n	80063ac <_printf_i+0x140>
 8006460:	0018      	movs	r0, r3
 8006462:	e7a3      	b.n	80063ac <_printf_i+0x140>
 8006464:	0022      	movs	r2, r4
 8006466:	2301      	movs	r3, #1
 8006468:	9906      	ldr	r1, [sp, #24]
 800646a:	9805      	ldr	r0, [sp, #20]
 800646c:	9e07      	ldr	r6, [sp, #28]
 800646e:	3219      	adds	r2, #25
 8006470:	47b0      	blx	r6
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d098      	beq.n	80063a8 <_printf_i+0x13c>
 8006476:	3501      	adds	r5, #1
 8006478:	68e3      	ldr	r3, [r4, #12]
 800647a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	42ab      	cmp	r3, r5
 8006480:	dcf0      	bgt.n	8006464 <_printf_i+0x1f8>
 8006482:	e7e9      	b.n	8006458 <_printf_i+0x1ec>
 8006484:	2500      	movs	r5, #0
 8006486:	e7f7      	b.n	8006478 <_printf_i+0x20c>
 8006488:	08008946 	.word	0x08008946
 800648c:	08008957 	.word	0x08008957

08006490 <iprintf>:
 8006490:	b40f      	push	{r0, r1, r2, r3}
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <iprintf+0x30>)
 8006494:	b513      	push	{r0, r1, r4, lr}
 8006496:	681c      	ldr	r4, [r3, #0]
 8006498:	2c00      	cmp	r4, #0
 800649a:	d005      	beq.n	80064a8 <iprintf+0x18>
 800649c:	69a3      	ldr	r3, [r4, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <iprintf+0x18>
 80064a2:	0020      	movs	r0, r4
 80064a4:	f000 ff16 	bl	80072d4 <__sinit>
 80064a8:	ab05      	add	r3, sp, #20
 80064aa:	0020      	movs	r0, r4
 80064ac:	9a04      	ldr	r2, [sp, #16]
 80064ae:	68a1      	ldr	r1, [r4, #8]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	f001 fca7 	bl	8007e04 <_vfiprintf_r>
 80064b6:	bc16      	pop	{r1, r2, r4}
 80064b8:	bc08      	pop	{r3}
 80064ba:	b004      	add	sp, #16
 80064bc:	4718      	bx	r3
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	2000000c 	.word	0x2000000c

080064c4 <quorem>:
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c6:	0006      	movs	r6, r0
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	6932      	ldr	r2, [r6, #16]
 80064cc:	b087      	sub	sp, #28
 80064ce:	2000      	movs	r0, #0
 80064d0:	9103      	str	r1, [sp, #12]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	db65      	blt.n	80065a2 <quorem+0xde>
 80064d6:	3b01      	subs	r3, #1
 80064d8:	009c      	lsls	r4, r3, #2
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	000b      	movs	r3, r1
 80064de:	3314      	adds	r3, #20
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	191b      	adds	r3, r3, r4
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	0033      	movs	r3, r6
 80064e8:	3314      	adds	r3, #20
 80064ea:	9302      	str	r3, [sp, #8]
 80064ec:	191c      	adds	r4, r3, r4
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	6827      	ldr	r7, [r4, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	0038      	movs	r0, r7
 80064f6:	1c5d      	adds	r5, r3, #1
 80064f8:	0029      	movs	r1, r5
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f7f9 fe20 	bl	8000140 <__udivsi3>
 8006500:	9001      	str	r0, [sp, #4]
 8006502:	42af      	cmp	r7, r5
 8006504:	d324      	bcc.n	8006550 <quorem+0x8c>
 8006506:	2500      	movs	r5, #0
 8006508:	46ac      	mov	ip, r5
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	9f05      	ldr	r7, [sp, #20]
 800650e:	cf08      	ldmia	r7!, {r3}
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	b299      	uxth	r1, r3
 8006514:	4351      	muls	r1, r2
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	4353      	muls	r3, r2
 800651a:	1949      	adds	r1, r1, r5
 800651c:	0c0a      	lsrs	r2, r1, #16
 800651e:	189b      	adds	r3, r3, r2
 8006520:	6802      	ldr	r2, [r0, #0]
 8006522:	b289      	uxth	r1, r1
 8006524:	b292      	uxth	r2, r2
 8006526:	4462      	add	r2, ip
 8006528:	1a52      	subs	r2, r2, r1
 800652a:	6801      	ldr	r1, [r0, #0]
 800652c:	0c1d      	lsrs	r5, r3, #16
 800652e:	0c09      	lsrs	r1, r1, #16
 8006530:	b29b      	uxth	r3, r3
 8006532:	1acb      	subs	r3, r1, r3
 8006534:	1411      	asrs	r1, r2, #16
 8006536:	185b      	adds	r3, r3, r1
 8006538:	1419      	asrs	r1, r3, #16
 800653a:	b292      	uxth	r2, r2
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	431a      	orrs	r2, r3
 8006540:	9b04      	ldr	r3, [sp, #16]
 8006542:	468c      	mov	ip, r1
 8006544:	c004      	stmia	r0!, {r2}
 8006546:	42bb      	cmp	r3, r7
 8006548:	d2e1      	bcs.n	800650e <quorem+0x4a>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d030      	beq.n	80065b2 <quorem+0xee>
 8006550:	0030      	movs	r0, r6
 8006552:	9903      	ldr	r1, [sp, #12]
 8006554:	f001 fa08 	bl	8007968 <__mcmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	db21      	blt.n	80065a0 <quorem+0xdc>
 800655c:	0030      	movs	r0, r6
 800655e:	2400      	movs	r4, #0
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	9903      	ldr	r1, [sp, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	3014      	adds	r0, #20
 800656a:	3114      	adds	r1, #20
 800656c:	6803      	ldr	r3, [r0, #0]
 800656e:	c920      	ldmia	r1!, {r5}
 8006570:	b29a      	uxth	r2, r3
 8006572:	1914      	adds	r4, r2, r4
 8006574:	b2aa      	uxth	r2, r5
 8006576:	1aa2      	subs	r2, r4, r2
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	0c2d      	lsrs	r5, r5, #16
 800657c:	1414      	asrs	r4, r2, #16
 800657e:	1b5b      	subs	r3, r3, r5
 8006580:	191b      	adds	r3, r3, r4
 8006582:	141c      	asrs	r4, r3, #16
 8006584:	b292      	uxth	r2, r2
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	4313      	orrs	r3, r2
 800658a:	c008      	stmia	r0!, {r3}
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	428b      	cmp	r3, r1
 8006590:	d2ec      	bcs.n	800656c <quorem+0xa8>
 8006592:	9b00      	ldr	r3, [sp, #0]
 8006594:	9a02      	ldr	r2, [sp, #8]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	2a00      	cmp	r2, #0
 800659e:	d015      	beq.n	80065cc <quorem+0x108>
 80065a0:	9801      	ldr	r0, [sp, #4]
 80065a2:	b007      	add	sp, #28
 80065a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <quorem+0xf6>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	9b02      	ldr	r3, [sp, #8]
 80065b4:	3c04      	subs	r4, #4
 80065b6:	42a3      	cmp	r3, r4
 80065b8:	d3f5      	bcc.n	80065a6 <quorem+0xe2>
 80065ba:	9b00      	ldr	r3, [sp, #0]
 80065bc:	6133      	str	r3, [r6, #16]
 80065be:	e7c7      	b.n	8006550 <quorem+0x8c>
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d106      	bne.n	80065d4 <quorem+0x110>
 80065c6:	9a00      	ldr	r2, [sp, #0]
 80065c8:	3a01      	subs	r2, #1
 80065ca:	9200      	str	r2, [sp, #0]
 80065cc:	9a02      	ldr	r2, [sp, #8]
 80065ce:	3b04      	subs	r3, #4
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3f5      	bcc.n	80065c0 <quorem+0xfc>
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	6133      	str	r3, [r6, #16]
 80065d8:	e7e2      	b.n	80065a0 <quorem+0xdc>
	...

080065dc <_dtoa_r>:
 80065dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065de:	b09d      	sub	sp, #116	; 0x74
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	9303      	str	r3, [sp, #12]
 80065e4:	9b02      	ldr	r3, [sp, #8]
 80065e6:	9c03      	ldr	r4, [sp, #12]
 80065e8:	9308      	str	r3, [sp, #32]
 80065ea:	9409      	str	r4, [sp, #36]	; 0x24
 80065ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065ee:	0007      	movs	r7, r0
 80065f0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	d10e      	bne.n	8006614 <_dtoa_r+0x38>
 80065f6:	2010      	movs	r0, #16
 80065f8:	f000 ff14 	bl	8007424 <malloc>
 80065fc:	1e02      	subs	r2, r0, #0
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006600:	d104      	bne.n	800660c <_dtoa_r+0x30>
 8006602:	21ea      	movs	r1, #234	; 0xea
 8006604:	4bc7      	ldr	r3, [pc, #796]	; (8006924 <_dtoa_r+0x348>)
 8006606:	48c8      	ldr	r0, [pc, #800]	; (8006928 <_dtoa_r+0x34c>)
 8006608:	f001 fe76 	bl	80082f8 <__assert_func>
 800660c:	6044      	str	r4, [r0, #4]
 800660e:	6084      	str	r4, [r0, #8]
 8006610:	6004      	str	r4, [r0, #0]
 8006612:	60c4      	str	r4, [r0, #12]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	2900      	cmp	r1, #0
 800661a:	d00a      	beq.n	8006632 <_dtoa_r+0x56>
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	2301      	movs	r3, #1
 8006620:	4093      	lsls	r3, r2
 8006622:	604a      	str	r2, [r1, #4]
 8006624:	608b      	str	r3, [r1, #8]
 8006626:	0038      	movs	r0, r7
 8006628:	f000 ff5e 	bl	80074e8 <_Bfree>
 800662c:	2200      	movs	r2, #0
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da20      	bge.n	800667a <_dtoa_r+0x9e>
 8006638:	2301      	movs	r3, #1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	9309      	str	r3, [sp, #36]	; 0x24
 8006644:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006646:	4bb9      	ldr	r3, [pc, #740]	; (800692c <_dtoa_r+0x350>)
 8006648:	4ab8      	ldr	r2, [pc, #736]	; (800692c <_dtoa_r+0x350>)
 800664a:	402b      	ands	r3, r5
 800664c:	4293      	cmp	r3, r2
 800664e:	d117      	bne.n	8006680 <_dtoa_r+0xa4>
 8006650:	4bb7      	ldr	r3, [pc, #732]	; (8006930 <_dtoa_r+0x354>)
 8006652:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006654:	0328      	lsls	r0, r5, #12
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	9b02      	ldr	r3, [sp, #8]
 800665a:	0b00      	lsrs	r0, r0, #12
 800665c:	4318      	orrs	r0, r3
 800665e:	d101      	bne.n	8006664 <_dtoa_r+0x88>
 8006660:	f000 fdbf 	bl	80071e2 <_dtoa_r+0xc06>
 8006664:	48b3      	ldr	r0, [pc, #716]	; (8006934 <_dtoa_r+0x358>)
 8006666:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006668:	9006      	str	r0, [sp, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <_dtoa_r+0x98>
 800666e:	4bb2      	ldr	r3, [pc, #712]	; (8006938 <_dtoa_r+0x35c>)
 8006670:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	9806      	ldr	r0, [sp, #24]
 8006676:	b01d      	add	sp, #116	; 0x74
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667a:	2300      	movs	r3, #0
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	e7e1      	b.n	8006644 <_dtoa_r+0x68>
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006684:	9312      	str	r3, [sp, #72]	; 0x48
 8006686:	9413      	str	r4, [sp, #76]	; 0x4c
 8006688:	9812      	ldr	r0, [sp, #72]	; 0x48
 800668a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800668c:	2200      	movs	r2, #0
 800668e:	2300      	movs	r3, #0
 8006690:	f7f9 fedc 	bl	800044c <__aeabi_dcmpeq>
 8006694:	1e04      	subs	r4, r0, #0
 8006696:	d009      	beq.n	80066ac <_dtoa_r+0xd0>
 8006698:	2301      	movs	r3, #1
 800669a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4ba7      	ldr	r3, [pc, #668]	; (800693c <_dtoa_r+0x360>)
 80066a0:	9306      	str	r3, [sp, #24]
 80066a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0e5      	beq.n	8006674 <_dtoa_r+0x98>
 80066a8:	4ba5      	ldr	r3, [pc, #660]	; (8006940 <_dtoa_r+0x364>)
 80066aa:	e7e1      	b.n	8006670 <_dtoa_r+0x94>
 80066ac:	ab1a      	add	r3, sp, #104	; 0x68
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	0038      	movs	r0, r7
 80066b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ba:	f001 fa09 	bl	8007ad0 <__d2b>
 80066be:	006e      	lsls	r6, r5, #1
 80066c0:	9005      	str	r0, [sp, #20]
 80066c2:	0d76      	lsrs	r6, r6, #21
 80066c4:	d100      	bne.n	80066c8 <_dtoa_r+0xec>
 80066c6:	e07c      	b.n	80067c2 <_dtoa_r+0x1e6>
 80066c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ce:	4a9d      	ldr	r2, [pc, #628]	; (8006944 <_dtoa_r+0x368>)
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	0b1b      	lsrs	r3, r3, #12
 80066d4:	431a      	orrs	r2, r3
 80066d6:	0011      	movs	r1, r2
 80066d8:	4b9b      	ldr	r3, [pc, #620]	; (8006948 <_dtoa_r+0x36c>)
 80066da:	9418      	str	r4, [sp, #96]	; 0x60
 80066dc:	18f6      	adds	r6, r6, r3
 80066de:	2200      	movs	r2, #0
 80066e0:	4b9a      	ldr	r3, [pc, #616]	; (800694c <_dtoa_r+0x370>)
 80066e2:	f7fb fb4d 	bl	8001d80 <__aeabi_dsub>
 80066e6:	4a9a      	ldr	r2, [pc, #616]	; (8006950 <_dtoa_r+0x374>)
 80066e8:	4b9a      	ldr	r3, [pc, #616]	; (8006954 <_dtoa_r+0x378>)
 80066ea:	f7fb f8dd 	bl	80018a8 <__aeabi_dmul>
 80066ee:	4a9a      	ldr	r2, [pc, #616]	; (8006958 <_dtoa_r+0x37c>)
 80066f0:	4b9a      	ldr	r3, [pc, #616]	; (800695c <_dtoa_r+0x380>)
 80066f2:	f7fa f99b 	bl	8000a2c <__aeabi_dadd>
 80066f6:	0004      	movs	r4, r0
 80066f8:	0030      	movs	r0, r6
 80066fa:	000d      	movs	r5, r1
 80066fc:	f7fb ff26 	bl	800254c <__aeabi_i2d>
 8006700:	4a97      	ldr	r2, [pc, #604]	; (8006960 <_dtoa_r+0x384>)
 8006702:	4b98      	ldr	r3, [pc, #608]	; (8006964 <_dtoa_r+0x388>)
 8006704:	f7fb f8d0 	bl	80018a8 <__aeabi_dmul>
 8006708:	0002      	movs	r2, r0
 800670a:	000b      	movs	r3, r1
 800670c:	0020      	movs	r0, r4
 800670e:	0029      	movs	r1, r5
 8006710:	f7fa f98c 	bl	8000a2c <__aeabi_dadd>
 8006714:	0004      	movs	r4, r0
 8006716:	000d      	movs	r5, r1
 8006718:	f7fb fee2 	bl	80024e0 <__aeabi_d2iz>
 800671c:	2200      	movs	r2, #0
 800671e:	9002      	str	r0, [sp, #8]
 8006720:	2300      	movs	r3, #0
 8006722:	0020      	movs	r0, r4
 8006724:	0029      	movs	r1, r5
 8006726:	f7f9 fe97 	bl	8000458 <__aeabi_dcmplt>
 800672a:	2800      	cmp	r0, #0
 800672c:	d00b      	beq.n	8006746 <_dtoa_r+0x16a>
 800672e:	9802      	ldr	r0, [sp, #8]
 8006730:	f7fb ff0c 	bl	800254c <__aeabi_i2d>
 8006734:	002b      	movs	r3, r5
 8006736:	0022      	movs	r2, r4
 8006738:	f7f9 fe88 	bl	800044c <__aeabi_dcmpeq>
 800673c:	4243      	negs	r3, r0
 800673e:	4158      	adcs	r0, r3
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	1a1b      	subs	r3, r3, r0
 8006744:	9302      	str	r3, [sp, #8]
 8006746:	2301      	movs	r3, #1
 8006748:	9316      	str	r3, [sp, #88]	; 0x58
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	2b16      	cmp	r3, #22
 800674e:	d80f      	bhi.n	8006770 <_dtoa_r+0x194>
 8006750:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006752:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006754:	00da      	lsls	r2, r3, #3
 8006756:	4b84      	ldr	r3, [pc, #528]	; (8006968 <_dtoa_r+0x38c>)
 8006758:	189b      	adds	r3, r3, r2
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f7f9 fe7b 	bl	8000458 <__aeabi_dcmplt>
 8006762:	2800      	cmp	r0, #0
 8006764:	d049      	beq.n	80067fa <_dtoa_r+0x21e>
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	3b01      	subs	r3, #1
 800676a:	9302      	str	r3, [sp, #8]
 800676c:	2300      	movs	r3, #0
 800676e:	9316      	str	r3, [sp, #88]	; 0x58
 8006770:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006772:	1b9e      	subs	r6, r3, r6
 8006774:	2300      	movs	r3, #0
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	0033      	movs	r3, r6
 800677a:	3b01      	subs	r3, #1
 800677c:	930d      	str	r3, [sp, #52]	; 0x34
 800677e:	d504      	bpl.n	800678a <_dtoa_r+0x1ae>
 8006780:	2301      	movs	r3, #1
 8006782:	1b9b      	subs	r3, r3, r6
 8006784:	930a      	str	r3, [sp, #40]	; 0x28
 8006786:	2300      	movs	r3, #0
 8006788:	930d      	str	r3, [sp, #52]	; 0x34
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	db36      	blt.n	80067fe <_dtoa_r+0x222>
 8006790:	9a02      	ldr	r2, [sp, #8]
 8006792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006794:	4694      	mov	ip, r2
 8006796:	4463      	add	r3, ip
 8006798:	930d      	str	r3, [sp, #52]	; 0x34
 800679a:	2300      	movs	r3, #0
 800679c:	9215      	str	r2, [sp, #84]	; 0x54
 800679e:	930e      	str	r3, [sp, #56]	; 0x38
 80067a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a2:	2401      	movs	r4, #1
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	d864      	bhi.n	8006872 <_dtoa_r+0x296>
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	dd02      	ble.n	80067b2 <_dtoa_r+0x1d6>
 80067ac:	2400      	movs	r4, #0
 80067ae:	3b04      	subs	r3, #4
 80067b0:	9322      	str	r3, [sp, #136]	; 0x88
 80067b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b4:	1e98      	subs	r0, r3, #2
 80067b6:	2803      	cmp	r0, #3
 80067b8:	d864      	bhi.n	8006884 <_dtoa_r+0x2a8>
 80067ba:	f7f9 fcad 	bl	8000118 <__gnu_thumb1_case_uqi>
 80067be:	3829      	.short	0x3829
 80067c0:	5836      	.short	0x5836
 80067c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80067c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067c6:	189e      	adds	r6, r3, r2
 80067c8:	4b68      	ldr	r3, [pc, #416]	; (800696c <_dtoa_r+0x390>)
 80067ca:	18f2      	adds	r2, r6, r3
 80067cc:	2a20      	cmp	r2, #32
 80067ce:	dd0f      	ble.n	80067f0 <_dtoa_r+0x214>
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	409d      	lsls	r5, r3
 80067d6:	4b66      	ldr	r3, [pc, #408]	; (8006970 <_dtoa_r+0x394>)
 80067d8:	9802      	ldr	r0, [sp, #8]
 80067da:	18f3      	adds	r3, r6, r3
 80067dc:	40d8      	lsrs	r0, r3
 80067de:	4328      	orrs	r0, r5
 80067e0:	f7fb fee4 	bl	80025ac <__aeabi_ui2d>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4c63      	ldr	r4, [pc, #396]	; (8006974 <_dtoa_r+0x398>)
 80067e8:	3e01      	subs	r6, #1
 80067ea:	1909      	adds	r1, r1, r4
 80067ec:	9318      	str	r3, [sp, #96]	; 0x60
 80067ee:	e776      	b.n	80066de <_dtoa_r+0x102>
 80067f0:	2320      	movs	r3, #32
 80067f2:	9802      	ldr	r0, [sp, #8]
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	4098      	lsls	r0, r3
 80067f8:	e7f2      	b.n	80067e0 <_dtoa_r+0x204>
 80067fa:	9016      	str	r0, [sp, #88]	; 0x58
 80067fc:	e7b8      	b.n	8006770 <_dtoa_r+0x194>
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	9a02      	ldr	r2, [sp, #8]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	930a      	str	r3, [sp, #40]	; 0x28
 8006806:	4253      	negs	r3, r2
 8006808:	930e      	str	r3, [sp, #56]	; 0x38
 800680a:	2300      	movs	r3, #0
 800680c:	9315      	str	r3, [sp, #84]	; 0x54
 800680e:	e7c7      	b.n	80067a0 <_dtoa_r+0x1c4>
 8006810:	2300      	movs	r3, #0
 8006812:	930f      	str	r3, [sp, #60]	; 0x3c
 8006814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006816:	930c      	str	r3, [sp, #48]	; 0x30
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dc13      	bgt.n	8006846 <_dtoa_r+0x26a>
 800681e:	2301      	movs	r3, #1
 8006820:	001a      	movs	r2, r3
 8006822:	930c      	str	r3, [sp, #48]	; 0x30
 8006824:	9307      	str	r3, [sp, #28]
 8006826:	9223      	str	r2, [sp, #140]	; 0x8c
 8006828:	e00d      	b.n	8006846 <_dtoa_r+0x26a>
 800682a:	2301      	movs	r3, #1
 800682c:	e7f1      	b.n	8006812 <_dtoa_r+0x236>
 800682e:	2300      	movs	r3, #0
 8006830:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006832:	930f      	str	r3, [sp, #60]	; 0x3c
 8006834:	4694      	mov	ip, r2
 8006836:	9b02      	ldr	r3, [sp, #8]
 8006838:	4463      	add	r3, ip
 800683a:	930c      	str	r3, [sp, #48]	; 0x30
 800683c:	3301      	adds	r3, #1
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc00      	bgt.n	8006846 <_dtoa_r+0x26a>
 8006844:	2301      	movs	r3, #1
 8006846:	2200      	movs	r2, #0
 8006848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684a:	6042      	str	r2, [r0, #4]
 800684c:	3204      	adds	r2, #4
 800684e:	0015      	movs	r5, r2
 8006850:	3514      	adds	r5, #20
 8006852:	6841      	ldr	r1, [r0, #4]
 8006854:	429d      	cmp	r5, r3
 8006856:	d919      	bls.n	800688c <_dtoa_r+0x2b0>
 8006858:	0038      	movs	r0, r7
 800685a:	f000 fe01 	bl	8007460 <_Balloc>
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	2800      	cmp	r0, #0
 8006862:	d117      	bne.n	8006894 <_dtoa_r+0x2b8>
 8006864:	21d5      	movs	r1, #213	; 0xd5
 8006866:	0002      	movs	r2, r0
 8006868:	4b43      	ldr	r3, [pc, #268]	; (8006978 <_dtoa_r+0x39c>)
 800686a:	0049      	lsls	r1, r1, #1
 800686c:	e6cb      	b.n	8006606 <_dtoa_r+0x2a>
 800686e:	2301      	movs	r3, #1
 8006870:	e7de      	b.n	8006830 <_dtoa_r+0x254>
 8006872:	2300      	movs	r3, #0
 8006874:	940f      	str	r4, [sp, #60]	; 0x3c
 8006876:	9322      	str	r3, [sp, #136]	; 0x88
 8006878:	3b01      	subs	r3, #1
 800687a:	930c      	str	r3, [sp, #48]	; 0x30
 800687c:	9307      	str	r3, [sp, #28]
 800687e:	2200      	movs	r2, #0
 8006880:	3313      	adds	r3, #19
 8006882:	e7d0      	b.n	8006826 <_dtoa_r+0x24a>
 8006884:	2301      	movs	r3, #1
 8006886:	930f      	str	r3, [sp, #60]	; 0x3c
 8006888:	3b02      	subs	r3, #2
 800688a:	e7f6      	b.n	800687a <_dtoa_r+0x29e>
 800688c:	3101      	adds	r1, #1
 800688e:	6041      	str	r1, [r0, #4]
 8006890:	0052      	lsls	r2, r2, #1
 8006892:	e7dc      	b.n	800684e <_dtoa_r+0x272>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	9a06      	ldr	r2, [sp, #24]
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	9b07      	ldr	r3, [sp, #28]
 800689c:	2b0e      	cmp	r3, #14
 800689e:	d900      	bls.n	80068a2 <_dtoa_r+0x2c6>
 80068a0:	e0eb      	b.n	8006a7a <_dtoa_r+0x49e>
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d100      	bne.n	80068a8 <_dtoa_r+0x2cc>
 80068a6:	e0e8      	b.n	8006a7a <_dtoa_r+0x49e>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd68      	ble.n	8006980 <_dtoa_r+0x3a4>
 80068ae:	001a      	movs	r2, r3
 80068b0:	210f      	movs	r1, #15
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <_dtoa_r+0x38c>)
 80068b4:	400a      	ands	r2, r1
 80068b6:	00d2      	lsls	r2, r2, #3
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	681d      	ldr	r5, [r3, #0]
 80068bc:	685e      	ldr	r6, [r3, #4]
 80068be:	9b02      	ldr	r3, [sp, #8]
 80068c0:	111c      	asrs	r4, r3, #4
 80068c2:	2302      	movs	r3, #2
 80068c4:	9310      	str	r3, [sp, #64]	; 0x40
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	05db      	lsls	r3, r3, #23
 80068ca:	d50b      	bpl.n	80068e4 <_dtoa_r+0x308>
 80068cc:	4b2b      	ldr	r3, [pc, #172]	; (800697c <_dtoa_r+0x3a0>)
 80068ce:	400c      	ands	r4, r1
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80068d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80068d8:	f7fa fbe4 	bl	80010a4 <__aeabi_ddiv>
 80068dc:	2303      	movs	r3, #3
 80068de:	9008      	str	r0, [sp, #32]
 80068e0:	9109      	str	r1, [sp, #36]	; 0x24
 80068e2:	9310      	str	r3, [sp, #64]	; 0x40
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <_dtoa_r+0x3a0>)
 80068e6:	9314      	str	r3, [sp, #80]	; 0x50
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	d108      	bne.n	80068fe <_dtoa_r+0x322>
 80068ec:	9808      	ldr	r0, [sp, #32]
 80068ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f0:	002a      	movs	r2, r5
 80068f2:	0033      	movs	r3, r6
 80068f4:	f7fa fbd6 	bl	80010a4 <__aeabi_ddiv>
 80068f8:	9008      	str	r0, [sp, #32]
 80068fa:	9109      	str	r1, [sp, #36]	; 0x24
 80068fc:	e05c      	b.n	80069b8 <_dtoa_r+0x3dc>
 80068fe:	2301      	movs	r3, #1
 8006900:	421c      	tst	r4, r3
 8006902:	d00b      	beq.n	800691c <_dtoa_r+0x340>
 8006904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006906:	0028      	movs	r0, r5
 8006908:	3301      	adds	r3, #1
 800690a:	9310      	str	r3, [sp, #64]	; 0x40
 800690c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800690e:	0031      	movs	r1, r6
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f7fa ffc8 	bl	80018a8 <__aeabi_dmul>
 8006918:	0005      	movs	r5, r0
 800691a:	000e      	movs	r6, r1
 800691c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800691e:	1064      	asrs	r4, r4, #1
 8006920:	3308      	adds	r3, #8
 8006922:	e7e0      	b.n	80068e6 <_dtoa_r+0x30a>
 8006924:	08008975 	.word	0x08008975
 8006928:	0800898c 	.word	0x0800898c
 800692c:	7ff00000 	.word	0x7ff00000
 8006930:	0000270f 	.word	0x0000270f
 8006934:	08008971 	.word	0x08008971
 8006938:	08008974 	.word	0x08008974
 800693c:	08008944 	.word	0x08008944
 8006940:	08008945 	.word	0x08008945
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	fffffc01 	.word	0xfffffc01
 800694c:	3ff80000 	.word	0x3ff80000
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	08008ae0 	.word	0x08008ae0
 800696c:	00000432 	.word	0x00000432
 8006970:	00000412 	.word	0x00000412
 8006974:	fe100000 	.word	0xfe100000
 8006978:	080089e7 	.word	0x080089e7
 800697c:	08008ab8 	.word	0x08008ab8
 8006980:	2302      	movs	r3, #2
 8006982:	9310      	str	r3, [sp, #64]	; 0x40
 8006984:	9b02      	ldr	r3, [sp, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <_dtoa_r+0x3dc>
 800698a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800698c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800698e:	425c      	negs	r4, r3
 8006990:	230f      	movs	r3, #15
 8006992:	4ab6      	ldr	r2, [pc, #728]	; (8006c6c <_dtoa_r+0x690>)
 8006994:	4023      	ands	r3, r4
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	18d3      	adds	r3, r2, r3
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f7fa ff83 	bl	80018a8 <__aeabi_dmul>
 80069a2:	2601      	movs	r6, #1
 80069a4:	2300      	movs	r3, #0
 80069a6:	9008      	str	r0, [sp, #32]
 80069a8:	9109      	str	r1, [sp, #36]	; 0x24
 80069aa:	4db1      	ldr	r5, [pc, #708]	; (8006c70 <_dtoa_r+0x694>)
 80069ac:	1124      	asrs	r4, r4, #4
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d000      	beq.n	80069b4 <_dtoa_r+0x3d8>
 80069b2:	e094      	b.n	8006ade <_dtoa_r+0x502>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d19f      	bne.n	80068f8 <_dtoa_r+0x31c>
 80069b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d100      	bne.n	80069c0 <_dtoa_r+0x3e4>
 80069be:	e09b      	b.n	8006af8 <_dtoa_r+0x51c>
 80069c0:	9c08      	ldr	r4, [sp, #32]
 80069c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80069c4:	2200      	movs	r2, #0
 80069c6:	0020      	movs	r0, r4
 80069c8:	0029      	movs	r1, r5
 80069ca:	4baa      	ldr	r3, [pc, #680]	; (8006c74 <_dtoa_r+0x698>)
 80069cc:	f7f9 fd44 	bl	8000458 <__aeabi_dcmplt>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d100      	bne.n	80069d6 <_dtoa_r+0x3fa>
 80069d4:	e090      	b.n	8006af8 <_dtoa_r+0x51c>
 80069d6:	9b07      	ldr	r3, [sp, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d100      	bne.n	80069de <_dtoa_r+0x402>
 80069dc:	e08c      	b.n	8006af8 <_dtoa_r+0x51c>
 80069de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd46      	ble.n	8006a72 <_dtoa_r+0x496>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	0020      	movs	r0, r4
 80069ea:	0029      	movs	r1, r5
 80069ec:	1e5e      	subs	r6, r3, #1
 80069ee:	4ba2      	ldr	r3, [pc, #648]	; (8006c78 <_dtoa_r+0x69c>)
 80069f0:	f7fa ff5a 	bl	80018a8 <__aeabi_dmul>
 80069f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f6:	9008      	str	r0, [sp, #32]
 80069f8:	9109      	str	r1, [sp, #36]	; 0x24
 80069fa:	3301      	adds	r3, #1
 80069fc:	9310      	str	r3, [sp, #64]	; 0x40
 80069fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006a02:	9c08      	ldr	r4, [sp, #32]
 8006a04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a06:	9314      	str	r3, [sp, #80]	; 0x50
 8006a08:	f7fb fda0 	bl	800254c <__aeabi_i2d>
 8006a0c:	0022      	movs	r2, r4
 8006a0e:	002b      	movs	r3, r5
 8006a10:	f7fa ff4a 	bl	80018a8 <__aeabi_dmul>
 8006a14:	2200      	movs	r2, #0
 8006a16:	4b99      	ldr	r3, [pc, #612]	; (8006c7c <_dtoa_r+0x6a0>)
 8006a18:	f7fa f808 	bl	8000a2c <__aeabi_dadd>
 8006a1c:	9010      	str	r0, [sp, #64]	; 0x40
 8006a1e:	9111      	str	r1, [sp, #68]	; 0x44
 8006a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a24:	9208      	str	r2, [sp, #32]
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	4a95      	ldr	r2, [pc, #596]	; (8006c80 <_dtoa_r+0x6a4>)
 8006a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a2c:	4694      	mov	ip, r2
 8006a2e:	4463      	add	r3, ip
 8006a30:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d161      	bne.n	8006afe <_dtoa_r+0x522>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	0020      	movs	r0, r4
 8006a3e:	0029      	movs	r1, r5
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <_dtoa_r+0x6a8>)
 8006a42:	f7fb f99d 	bl	8001d80 <__aeabi_dsub>
 8006a46:	9a08      	ldr	r2, [sp, #32]
 8006a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a4a:	0004      	movs	r4, r0
 8006a4c:	000d      	movs	r5, r1
 8006a4e:	f7f9 fd17 	bl	8000480 <__aeabi_dcmpgt>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d000      	beq.n	8006a58 <_dtoa_r+0x47c>
 8006a56:	e2af      	b.n	8006fb8 <_dtoa_r+0x9dc>
 8006a58:	488b      	ldr	r0, [pc, #556]	; (8006c88 <_dtoa_r+0x6ac>)
 8006a5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a5c:	4684      	mov	ip, r0
 8006a5e:	4461      	add	r1, ip
 8006a60:	000b      	movs	r3, r1
 8006a62:	0020      	movs	r0, r4
 8006a64:	0029      	movs	r1, r5
 8006a66:	9a08      	ldr	r2, [sp, #32]
 8006a68:	f7f9 fcf6 	bl	8000458 <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d000      	beq.n	8006a72 <_dtoa_r+0x496>
 8006a70:	e29f      	b.n	8006fb2 <_dtoa_r+0x9d6>
 8006a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006a76:	9308      	str	r3, [sp, #32]
 8006a78:	9409      	str	r4, [sp, #36]	; 0x24
 8006a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da00      	bge.n	8006a82 <_dtoa_r+0x4a6>
 8006a80:	e172      	b.n	8006d68 <_dtoa_r+0x78c>
 8006a82:	9a02      	ldr	r2, [sp, #8]
 8006a84:	2a0e      	cmp	r2, #14
 8006a86:	dd00      	ble.n	8006a8a <_dtoa_r+0x4ae>
 8006a88:	e16e      	b.n	8006d68 <_dtoa_r+0x78c>
 8006a8a:	4b78      	ldr	r3, [pc, #480]	; (8006c6c <_dtoa_r+0x690>)
 8006a8c:	00d2      	lsls	r2, r2, #3
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	685c      	ldr	r4, [r3, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	930a      	str	r3, [sp, #40]	; 0x28
 8006a96:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db00      	blt.n	8006aa0 <_dtoa_r+0x4c4>
 8006a9e:	e0f7      	b.n	8006c90 <_dtoa_r+0x6b4>
 8006aa0:	9b07      	ldr	r3, [sp, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd00      	ble.n	8006aa8 <_dtoa_r+0x4cc>
 8006aa6:	e0f3      	b.n	8006c90 <_dtoa_r+0x6b4>
 8006aa8:	d000      	beq.n	8006aac <_dtoa_r+0x4d0>
 8006aaa:	e282      	b.n	8006fb2 <_dtoa_r+0x9d6>
 8006aac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4b74      	ldr	r3, [pc, #464]	; (8006c84 <_dtoa_r+0x6a8>)
 8006ab4:	f7fa fef8 	bl	80018a8 <__aeabi_dmul>
 8006ab8:	9a08      	ldr	r2, [sp, #32]
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	f7f9 fcea 	bl	8000494 <__aeabi_dcmpge>
 8006ac0:	9e07      	ldr	r6, [sp, #28]
 8006ac2:	0035      	movs	r5, r6
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d000      	beq.n	8006aca <_dtoa_r+0x4ee>
 8006ac8:	e259      	b.n	8006f7e <_dtoa_r+0x9a2>
 8006aca:	9b06      	ldr	r3, [sp, #24]
 8006acc:	9a06      	ldr	r2, [sp, #24]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	2331      	movs	r3, #49	; 0x31
 8006ad4:	7013      	strb	r3, [r2, #0]
 8006ad6:	9b02      	ldr	r3, [sp, #8]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	e254      	b.n	8006f88 <_dtoa_r+0x9ac>
 8006ade:	4234      	tst	r4, r6
 8006ae0:	d007      	beq.n	8006af2 <_dtoa_r+0x516>
 8006ae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ae8:	682a      	ldr	r2, [r5, #0]
 8006aea:	686b      	ldr	r3, [r5, #4]
 8006aec:	f7fa fedc 	bl	80018a8 <__aeabi_dmul>
 8006af0:	0033      	movs	r3, r6
 8006af2:	1064      	asrs	r4, r4, #1
 8006af4:	3508      	adds	r5, #8
 8006af6:	e75a      	b.n	80069ae <_dtoa_r+0x3d2>
 8006af8:	9e02      	ldr	r6, [sp, #8]
 8006afa:	9b07      	ldr	r3, [sp, #28]
 8006afc:	e780      	b.n	8006a00 <_dtoa_r+0x424>
 8006afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <_dtoa_r+0x690>)
 8006b06:	00d2      	lsls	r2, r2, #3
 8006b08:	189b      	adds	r3, r3, r2
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d051      	beq.n	8006bb6 <_dtoa_r+0x5da>
 8006b12:	2000      	movs	r0, #0
 8006b14:	495d      	ldr	r1, [pc, #372]	; (8006c8c <_dtoa_r+0x6b0>)
 8006b16:	f7fa fac5 	bl	80010a4 <__aeabi_ddiv>
 8006b1a:	9a08      	ldr	r2, [sp, #32]
 8006b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1e:	f7fb f92f 	bl	8001d80 <__aeabi_dsub>
 8006b22:	9a06      	ldr	r2, [sp, #24]
 8006b24:	9b06      	ldr	r3, [sp, #24]
 8006b26:	4694      	mov	ip, r2
 8006b28:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b2c:	9010      	str	r0, [sp, #64]	; 0x40
 8006b2e:	9111      	str	r1, [sp, #68]	; 0x44
 8006b30:	4463      	add	r3, ip
 8006b32:	9319      	str	r3, [sp, #100]	; 0x64
 8006b34:	0029      	movs	r1, r5
 8006b36:	0020      	movs	r0, r4
 8006b38:	f7fb fcd2 	bl	80024e0 <__aeabi_d2iz>
 8006b3c:	9014      	str	r0, [sp, #80]	; 0x50
 8006b3e:	f7fb fd05 	bl	800254c <__aeabi_i2d>
 8006b42:	0002      	movs	r2, r0
 8006b44:	000b      	movs	r3, r1
 8006b46:	0020      	movs	r0, r4
 8006b48:	0029      	movs	r1, r5
 8006b4a:	f7fb f919 	bl	8001d80 <__aeabi_dsub>
 8006b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b52:	3301      	adds	r3, #1
 8006b54:	9308      	str	r3, [sp, #32]
 8006b56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b58:	0004      	movs	r4, r0
 8006b5a:	3330      	adds	r3, #48	; 0x30
 8006b5c:	7013      	strb	r3, [r2, #0]
 8006b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b62:	000d      	movs	r5, r1
 8006b64:	f7f9 fc78 	bl	8000458 <__aeabi_dcmplt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d175      	bne.n	8006c58 <_dtoa_r+0x67c>
 8006b6c:	0022      	movs	r2, r4
 8006b6e:	002b      	movs	r3, r5
 8006b70:	2000      	movs	r0, #0
 8006b72:	4940      	ldr	r1, [pc, #256]	; (8006c74 <_dtoa_r+0x698>)
 8006b74:	f7fb f904 	bl	8001d80 <__aeabi_dsub>
 8006b78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b7c:	f7f9 fc6c 	bl	8000458 <__aeabi_dcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d000      	beq.n	8006b86 <_dtoa_r+0x5aa>
 8006b84:	e0d2      	b.n	8006d2c <_dtoa_r+0x750>
 8006b86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b88:	9a08      	ldr	r2, [sp, #32]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d100      	bne.n	8006b90 <_dtoa_r+0x5b4>
 8006b8e:	e770      	b.n	8006a72 <_dtoa_r+0x496>
 8006b90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b94:	2200      	movs	r2, #0
 8006b96:	4b38      	ldr	r3, [pc, #224]	; (8006c78 <_dtoa_r+0x69c>)
 8006b98:	f7fa fe86 	bl	80018a8 <__aeabi_dmul>
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <_dtoa_r+0x69c>)
 8006b9e:	9010      	str	r0, [sp, #64]	; 0x40
 8006ba0:	9111      	str	r1, [sp, #68]	; 0x44
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	0020      	movs	r0, r4
 8006ba6:	0029      	movs	r1, r5
 8006ba8:	f7fa fe7e 	bl	80018a8 <__aeabi_dmul>
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	0004      	movs	r4, r0
 8006bb0:	000d      	movs	r5, r1
 8006bb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8006bb4:	e7be      	b.n	8006b34 <_dtoa_r+0x558>
 8006bb6:	9808      	ldr	r0, [sp, #32]
 8006bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bba:	f7fa fe75 	bl	80018a8 <__aeabi_dmul>
 8006bbe:	9a06      	ldr	r2, [sp, #24]
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	4694      	mov	ip, r2
 8006bc4:	9308      	str	r3, [sp, #32]
 8006bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bc8:	9010      	str	r0, [sp, #64]	; 0x40
 8006bca:	9111      	str	r1, [sp, #68]	; 0x44
 8006bcc:	4463      	add	r3, ip
 8006bce:	9319      	str	r3, [sp, #100]	; 0x64
 8006bd0:	0029      	movs	r1, r5
 8006bd2:	0020      	movs	r0, r4
 8006bd4:	f7fb fc84 	bl	80024e0 <__aeabi_d2iz>
 8006bd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006bda:	f7fb fcb7 	bl	800254c <__aeabi_i2d>
 8006bde:	0002      	movs	r2, r0
 8006be0:	000b      	movs	r3, r1
 8006be2:	0020      	movs	r0, r4
 8006be4:	0029      	movs	r1, r5
 8006be6:	f7fb f8cb 	bl	8001d80 <__aeabi_dsub>
 8006bea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bec:	9a08      	ldr	r2, [sp, #32]
 8006bee:	3330      	adds	r3, #48	; 0x30
 8006bf0:	7013      	strb	r3, [r2, #0]
 8006bf2:	0013      	movs	r3, r2
 8006bf4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	0004      	movs	r4, r0
 8006bfa:	000d      	movs	r5, r1
 8006bfc:	9308      	str	r3, [sp, #32]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d12c      	bne.n	8006c5c <_dtoa_r+0x680>
 8006c02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006c04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c06:	9a06      	ldr	r2, [sp, #24]
 8006c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c0a:	4694      	mov	ip, r2
 8006c0c:	4463      	add	r3, ip
 8006c0e:	2200      	movs	r2, #0
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <_dtoa_r+0x6b0>)
 8006c14:	f7f9 ff0a 	bl	8000a2c <__aeabi_dadd>
 8006c18:	0002      	movs	r2, r0
 8006c1a:	000b      	movs	r3, r1
 8006c1c:	0020      	movs	r0, r4
 8006c1e:	0029      	movs	r1, r5
 8006c20:	f7f9 fc2e 	bl	8000480 <__aeabi_dcmpgt>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d000      	beq.n	8006c2a <_dtoa_r+0x64e>
 8006c28:	e080      	b.n	8006d2c <_dtoa_r+0x750>
 8006c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c2e:	2000      	movs	r0, #0
 8006c30:	4916      	ldr	r1, [pc, #88]	; (8006c8c <_dtoa_r+0x6b0>)
 8006c32:	f7fb f8a5 	bl	8001d80 <__aeabi_dsub>
 8006c36:	0002      	movs	r2, r0
 8006c38:	000b      	movs	r3, r1
 8006c3a:	0020      	movs	r0, r4
 8006c3c:	0029      	movs	r1, r5
 8006c3e:	f7f9 fc0b 	bl	8000458 <__aeabi_dcmplt>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d100      	bne.n	8006c48 <_dtoa_r+0x66c>
 8006c46:	e714      	b.n	8006a72 <_dtoa_r+0x496>
 8006c48:	9b08      	ldr	r3, [sp, #32]
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	3a01      	subs	r2, #1
 8006c4e:	9208      	str	r2, [sp, #32]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	2a30      	cmp	r2, #48	; 0x30
 8006c54:	d0f8      	beq.n	8006c48 <_dtoa_r+0x66c>
 8006c56:	9308      	str	r3, [sp, #32]
 8006c58:	9602      	str	r6, [sp, #8]
 8006c5a:	e055      	b.n	8006d08 <_dtoa_r+0x72c>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <_dtoa_r+0x69c>)
 8006c60:	f7fa fe22 	bl	80018a8 <__aeabi_dmul>
 8006c64:	0004      	movs	r4, r0
 8006c66:	000d      	movs	r5, r1
 8006c68:	e7b2      	b.n	8006bd0 <_dtoa_r+0x5f4>
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	08008ae0 	.word	0x08008ae0
 8006c70:	08008ab8 	.word	0x08008ab8
 8006c74:	3ff00000 	.word	0x3ff00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	401c0000 	.word	0x401c0000
 8006c80:	fcc00000 	.word	0xfcc00000
 8006c84:	40140000 	.word	0x40140000
 8006c88:	7cc00000 	.word	0x7cc00000
 8006c8c:	3fe00000 	.word	0x3fe00000
 8006c90:	9b07      	ldr	r3, [sp, #28]
 8006c92:	9e06      	ldr	r6, [sp, #24]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	199b      	adds	r3, r3, r6
 8006c98:	930c      	str	r3, [sp, #48]	; 0x30
 8006c9a:	9c08      	ldr	r4, [sp, #32]
 8006c9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	0029      	movs	r1, r5
 8006ca6:	f7fa f9fd 	bl	80010a4 <__aeabi_ddiv>
 8006caa:	f7fb fc19 	bl	80024e0 <__aeabi_d2iz>
 8006cae:	9007      	str	r0, [sp, #28]
 8006cb0:	f7fb fc4c 	bl	800254c <__aeabi_i2d>
 8006cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb8:	f7fa fdf6 	bl	80018a8 <__aeabi_dmul>
 8006cbc:	0002      	movs	r2, r0
 8006cbe:	000b      	movs	r3, r1
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	0029      	movs	r1, r5
 8006cc4:	f7fb f85c 	bl	8001d80 <__aeabi_dsub>
 8006cc8:	0033      	movs	r3, r6
 8006cca:	9a07      	ldr	r2, [sp, #28]
 8006ccc:	3601      	adds	r6, #1
 8006cce:	3230      	adds	r2, #48	; 0x30
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cd4:	9608      	str	r6, [sp, #32]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d139      	bne.n	8006d4e <_dtoa_r+0x772>
 8006cda:	0002      	movs	r2, r0
 8006cdc:	000b      	movs	r3, r1
 8006cde:	f7f9 fea5 	bl	8000a2c <__aeabi_dadd>
 8006ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce6:	0004      	movs	r4, r0
 8006ce8:	000d      	movs	r5, r1
 8006cea:	f7f9 fbc9 	bl	8000480 <__aeabi_dcmpgt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d11b      	bne.n	8006d2a <_dtoa_r+0x74e>
 8006cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf6:	0020      	movs	r0, r4
 8006cf8:	0029      	movs	r1, r5
 8006cfa:	f7f9 fba7 	bl	800044c <__aeabi_dcmpeq>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d002      	beq.n	8006d08 <_dtoa_r+0x72c>
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	07db      	lsls	r3, r3, #31
 8006d06:	d410      	bmi.n	8006d2a <_dtoa_r+0x74e>
 8006d08:	0038      	movs	r0, r7
 8006d0a:	9905      	ldr	r1, [sp, #20]
 8006d0c:	f000 fbec 	bl	80074e8 <_Bfree>
 8006d10:	2300      	movs	r3, #0
 8006d12:	9a08      	ldr	r2, [sp, #32]
 8006d14:	9802      	ldr	r0, [sp, #8]
 8006d16:	7013      	strb	r3, [r2, #0]
 8006d18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	6018      	str	r0, [r3, #0]
 8006d1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d100      	bne.n	8006d26 <_dtoa_r+0x74a>
 8006d24:	e4a6      	b.n	8006674 <_dtoa_r+0x98>
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e4a4      	b.n	8006674 <_dtoa_r+0x98>
 8006d2a:	9e02      	ldr	r6, [sp, #8]
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	9308      	str	r3, [sp, #32]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	2a39      	cmp	r2, #57	; 0x39
 8006d36:	d106      	bne.n	8006d46 <_dtoa_r+0x76a>
 8006d38:	9a06      	ldr	r2, [sp, #24]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d1f7      	bne.n	8006d2e <_dtoa_r+0x752>
 8006d3e:	2230      	movs	r2, #48	; 0x30
 8006d40:	9906      	ldr	r1, [sp, #24]
 8006d42:	3601      	adds	r6, #1
 8006d44:	700a      	strb	r2, [r1, #0]
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	3201      	adds	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e784      	b.n	8006c58 <_dtoa_r+0x67c>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4baa      	ldr	r3, [pc, #680]	; (8006ffc <_dtoa_r+0xa20>)
 8006d52:	f7fa fda9 	bl	80018a8 <__aeabi_dmul>
 8006d56:	2200      	movs	r2, #0
 8006d58:	2300      	movs	r3, #0
 8006d5a:	0004      	movs	r4, r0
 8006d5c:	000d      	movs	r5, r1
 8006d5e:	f7f9 fb75 	bl	800044c <__aeabi_dcmpeq>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d09b      	beq.n	8006c9e <_dtoa_r+0x6c2>
 8006d66:	e7cf      	b.n	8006d08 <_dtoa_r+0x72c>
 8006d68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006d6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	d012      	beq.n	8006d98 <_dtoa_r+0x7bc>
 8006d72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d74:	2a01      	cmp	r2, #1
 8006d76:	dc66      	bgt.n	8006e46 <_dtoa_r+0x86a>
 8006d78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	d05d      	beq.n	8006e3a <_dtoa_r+0x85e>
 8006d7e:	4aa0      	ldr	r2, [pc, #640]	; (8007000 <_dtoa_r+0xa24>)
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d84:	2101      	movs	r1, #1
 8006d86:	18d2      	adds	r2, r2, r3
 8006d88:	920a      	str	r2, [sp, #40]	; 0x28
 8006d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d8c:	0038      	movs	r0, r7
 8006d8e:	18d3      	adds	r3, r2, r3
 8006d90:	930d      	str	r3, [sp, #52]	; 0x34
 8006d92:	f000 fc59 	bl	8007648 <__i2b>
 8006d96:	0005      	movs	r5, r0
 8006d98:	2c00      	cmp	r4, #0
 8006d9a:	dd0e      	ble.n	8006dba <_dtoa_r+0x7de>
 8006d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd0b      	ble.n	8006dba <_dtoa_r+0x7de>
 8006da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006da4:	0023      	movs	r3, r4
 8006da6:	4294      	cmp	r4, r2
 8006da8:	dd00      	ble.n	8006dac <_dtoa_r+0x7d0>
 8006daa:	0013      	movs	r3, r2
 8006dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dae:	1ae4      	subs	r4, r4, r3
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	920a      	str	r2, [sp, #40]	; 0x28
 8006db4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	930d      	str	r3, [sp, #52]	; 0x34
 8006dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01f      	beq.n	8006e00 <_dtoa_r+0x824>
 8006dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d054      	beq.n	8006e70 <_dtoa_r+0x894>
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	dd11      	ble.n	8006dee <_dtoa_r+0x812>
 8006dca:	0029      	movs	r1, r5
 8006dcc:	0032      	movs	r2, r6
 8006dce:	0038      	movs	r0, r7
 8006dd0:	f000 fd00 	bl	80077d4 <__pow5mult>
 8006dd4:	9a05      	ldr	r2, [sp, #20]
 8006dd6:	0001      	movs	r1, r0
 8006dd8:	0005      	movs	r5, r0
 8006dda:	0038      	movs	r0, r7
 8006ddc:	f000 fc4a 	bl	8007674 <__multiply>
 8006de0:	9905      	ldr	r1, [sp, #20]
 8006de2:	9014      	str	r0, [sp, #80]	; 0x50
 8006de4:	0038      	movs	r0, r7
 8006de6:	f000 fb7f 	bl	80074e8 <_Bfree>
 8006dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df0:	1b9a      	subs	r2, r3, r6
 8006df2:	42b3      	cmp	r3, r6
 8006df4:	d004      	beq.n	8006e00 <_dtoa_r+0x824>
 8006df6:	0038      	movs	r0, r7
 8006df8:	9905      	ldr	r1, [sp, #20]
 8006dfa:	f000 fceb 	bl	80077d4 <__pow5mult>
 8006dfe:	9005      	str	r0, [sp, #20]
 8006e00:	2101      	movs	r1, #1
 8006e02:	0038      	movs	r0, r7
 8006e04:	f000 fc20 	bl	8007648 <__i2b>
 8006e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e0a:	0006      	movs	r6, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dd31      	ble.n	8006e74 <_dtoa_r+0x898>
 8006e10:	001a      	movs	r2, r3
 8006e12:	0001      	movs	r1, r0
 8006e14:	0038      	movs	r0, r7
 8006e16:	f000 fcdd 	bl	80077d4 <__pow5mult>
 8006e1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e1c:	0006      	movs	r6, r0
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	dd2d      	ble.n	8006e7e <_dtoa_r+0x8a2>
 8006e22:	2300      	movs	r3, #0
 8006e24:	930e      	str	r3, [sp, #56]	; 0x38
 8006e26:	6933      	ldr	r3, [r6, #16]
 8006e28:	3303      	adds	r3, #3
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	18f3      	adds	r3, r6, r3
 8006e2e:	6858      	ldr	r0, [r3, #4]
 8006e30:	f000 fbc2 	bl	80075b8 <__hi0bits>
 8006e34:	2320      	movs	r3, #32
 8006e36:	1a18      	subs	r0, r3, r0
 8006e38:	e039      	b.n	8006eae <_dtoa_r+0x8d2>
 8006e3a:	2336      	movs	r3, #54	; 0x36
 8006e3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e3e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006e40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	e79d      	b.n	8006d82 <_dtoa_r+0x7a6>
 8006e46:	9b07      	ldr	r3, [sp, #28]
 8006e48:	1e5e      	subs	r6, r3, #1
 8006e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e4c:	42b3      	cmp	r3, r6
 8006e4e:	db07      	blt.n	8006e60 <_dtoa_r+0x884>
 8006e50:	1b9e      	subs	r6, r3, r6
 8006e52:	9b07      	ldr	r3, [sp, #28]
 8006e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da93      	bge.n	8006d82 <_dtoa_r+0x7a6>
 8006e5a:	1ae4      	subs	r4, r4, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e790      	b.n	8006d82 <_dtoa_r+0x7a6>
 8006e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e64:	1af3      	subs	r3, r6, r3
 8006e66:	18d3      	adds	r3, r2, r3
 8006e68:	960e      	str	r6, [sp, #56]	; 0x38
 8006e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	e7f0      	b.n	8006e52 <_dtoa_r+0x876>
 8006e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e72:	e7c0      	b.n	8006df6 <_dtoa_r+0x81a>
 8006e74:	2300      	movs	r3, #0
 8006e76:	930e      	str	r3, [sp, #56]	; 0x38
 8006e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	dc13      	bgt.n	8006ea6 <_dtoa_r+0x8ca>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	930e      	str	r3, [sp, #56]	; 0x38
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10e      	bne.n	8006ea6 <_dtoa_r+0x8ca>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	031b      	lsls	r3, r3, #12
 8006e8c:	d10b      	bne.n	8006ea6 <_dtoa_r+0x8ca>
 8006e8e:	4b5d      	ldr	r3, [pc, #372]	; (8007004 <_dtoa_r+0xa28>)
 8006e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e92:	4213      	tst	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <_dtoa_r+0x8ca>
 8006e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e98:	3301      	adds	r3, #1
 8006e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1bb      	bne.n	8006e26 <_dtoa_r+0x84a>
 8006eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb0:	221f      	movs	r2, #31
 8006eb2:	1818      	adds	r0, r3, r0
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	4210      	tst	r0, r2
 8006eba:	d046      	beq.n	8006f4a <_dtoa_r+0x96e>
 8006ebc:	3201      	adds	r2, #1
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	2a04      	cmp	r2, #4
 8006ec2:	dd3f      	ble.n	8006f44 <_dtoa_r+0x968>
 8006ec4:	221c      	movs	r2, #28
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eca:	18e4      	adds	r4, r4, r3
 8006ecc:	18d2      	adds	r2, r2, r3
 8006ece:	920a      	str	r2, [sp, #40]	; 0x28
 8006ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ed2:	18d3      	adds	r3, r2, r3
 8006ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd05      	ble.n	8006ee8 <_dtoa_r+0x90c>
 8006edc:	001a      	movs	r2, r3
 8006ede:	0038      	movs	r0, r7
 8006ee0:	9905      	ldr	r1, [sp, #20]
 8006ee2:	f000 fcd3 	bl	800788c <__lshift>
 8006ee6:	9005      	str	r0, [sp, #20]
 8006ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd05      	ble.n	8006efa <_dtoa_r+0x91e>
 8006eee:	0031      	movs	r1, r6
 8006ef0:	001a      	movs	r2, r3
 8006ef2:	0038      	movs	r0, r7
 8006ef4:	f000 fcca 	bl	800788c <__lshift>
 8006ef8:	0006      	movs	r6, r0
 8006efa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d026      	beq.n	8006f4e <_dtoa_r+0x972>
 8006f00:	0031      	movs	r1, r6
 8006f02:	9805      	ldr	r0, [sp, #20]
 8006f04:	f000 fd30 	bl	8007968 <__mcmp>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	da20      	bge.n	8006f4e <_dtoa_r+0x972>
 8006f0c:	9b02      	ldr	r3, [sp, #8]
 8006f0e:	220a      	movs	r2, #10
 8006f10:	3b01      	subs	r3, #1
 8006f12:	9302      	str	r3, [sp, #8]
 8006f14:	0038      	movs	r0, r7
 8006f16:	2300      	movs	r3, #0
 8006f18:	9905      	ldr	r1, [sp, #20]
 8006f1a:	f000 fb09 	bl	8007530 <__multadd>
 8006f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f20:	9005      	str	r0, [sp, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d100      	bne.n	8006f28 <_dtoa_r+0x94c>
 8006f26:	e166      	b.n	80071f6 <_dtoa_r+0xc1a>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	0029      	movs	r1, r5
 8006f2c:	220a      	movs	r2, #10
 8006f2e:	0038      	movs	r0, r7
 8006f30:	f000 fafe 	bl	8007530 <__multadd>
 8006f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f36:	0005      	movs	r5, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	dc47      	bgt.n	8006fcc <_dtoa_r+0x9f0>
 8006f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	dc0d      	bgt.n	8006f5e <_dtoa_r+0x982>
 8006f42:	e043      	b.n	8006fcc <_dtoa_r+0x9f0>
 8006f44:	2a04      	cmp	r2, #4
 8006f46:	d0c6      	beq.n	8006ed6 <_dtoa_r+0x8fa>
 8006f48:	0013      	movs	r3, r2
 8006f4a:	331c      	adds	r3, #28
 8006f4c:	e7bc      	b.n	8006ec8 <_dtoa_r+0x8ec>
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dc35      	bgt.n	8006fc0 <_dtoa_r+0x9e4>
 8006f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	dd32      	ble.n	8006fc0 <_dtoa_r+0x9e4>
 8006f5a:	9b07      	ldr	r3, [sp, #28]
 8006f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10c      	bne.n	8006f7e <_dtoa_r+0x9a2>
 8006f64:	0031      	movs	r1, r6
 8006f66:	2205      	movs	r2, #5
 8006f68:	0038      	movs	r0, r7
 8006f6a:	f000 fae1 	bl	8007530 <__multadd>
 8006f6e:	0006      	movs	r6, r0
 8006f70:	0001      	movs	r1, r0
 8006f72:	9805      	ldr	r0, [sp, #20]
 8006f74:	f000 fcf8 	bl	8007968 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	dd00      	ble.n	8006f7e <_dtoa_r+0x9a2>
 8006f7c:	e5a5      	b.n	8006aca <_dtoa_r+0x4ee>
 8006f7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f80:	43db      	mvns	r3, r3
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	9308      	str	r3, [sp, #32]
 8006f88:	2400      	movs	r4, #0
 8006f8a:	0031      	movs	r1, r6
 8006f8c:	0038      	movs	r0, r7
 8006f8e:	f000 faab 	bl	80074e8 <_Bfree>
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	d100      	bne.n	8006f98 <_dtoa_r+0x9bc>
 8006f96:	e6b7      	b.n	8006d08 <_dtoa_r+0x72c>
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d005      	beq.n	8006fa8 <_dtoa_r+0x9cc>
 8006f9c:	42ac      	cmp	r4, r5
 8006f9e:	d003      	beq.n	8006fa8 <_dtoa_r+0x9cc>
 8006fa0:	0021      	movs	r1, r4
 8006fa2:	0038      	movs	r0, r7
 8006fa4:	f000 faa0 	bl	80074e8 <_Bfree>
 8006fa8:	0029      	movs	r1, r5
 8006faa:	0038      	movs	r0, r7
 8006fac:	f000 fa9c 	bl	80074e8 <_Bfree>
 8006fb0:	e6aa      	b.n	8006d08 <_dtoa_r+0x72c>
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	0035      	movs	r5, r6
 8006fb6:	e7e2      	b.n	8006f7e <_dtoa_r+0x9a2>
 8006fb8:	9602      	str	r6, [sp, #8]
 8006fba:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006fbc:	0035      	movs	r5, r6
 8006fbe:	e584      	b.n	8006aca <_dtoa_r+0x4ee>
 8006fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d100      	bne.n	8006fc8 <_dtoa_r+0x9ec>
 8006fc6:	e0ce      	b.n	8007166 <_dtoa_r+0xb8a>
 8006fc8:	9b07      	ldr	r3, [sp, #28]
 8006fca:	930c      	str	r3, [sp, #48]	; 0x30
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	dd05      	ble.n	8006fdc <_dtoa_r+0xa00>
 8006fd0:	0029      	movs	r1, r5
 8006fd2:	0022      	movs	r2, r4
 8006fd4:	0038      	movs	r0, r7
 8006fd6:	f000 fc59 	bl	800788c <__lshift>
 8006fda:	0005      	movs	r5, r0
 8006fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fde:	0028      	movs	r0, r5
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d022      	beq.n	800702a <_dtoa_r+0xa4e>
 8006fe4:	0038      	movs	r0, r7
 8006fe6:	6869      	ldr	r1, [r5, #4]
 8006fe8:	f000 fa3a 	bl	8007460 <_Balloc>
 8006fec:	1e04      	subs	r4, r0, #0
 8006fee:	d10f      	bne.n	8007010 <_dtoa_r+0xa34>
 8006ff0:	0002      	movs	r2, r0
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <_dtoa_r+0xa2c>)
 8006ff4:	4905      	ldr	r1, [pc, #20]	; (800700c <_dtoa_r+0xa30>)
 8006ff6:	f7ff fb06 	bl	8006606 <_dtoa_r+0x2a>
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	40240000 	.word	0x40240000
 8007000:	00000433 	.word	0x00000433
 8007004:	7ff00000 	.word	0x7ff00000
 8007008:	080089e7 	.word	0x080089e7
 800700c:	000002ea 	.word	0x000002ea
 8007010:	0029      	movs	r1, r5
 8007012:	692b      	ldr	r3, [r5, #16]
 8007014:	310c      	adds	r1, #12
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	0092      	lsls	r2, r2, #2
 800701a:	300c      	adds	r0, #12
 800701c:	f000 fa17 	bl	800744e <memcpy>
 8007020:	2201      	movs	r2, #1
 8007022:	0021      	movs	r1, r4
 8007024:	0038      	movs	r0, r7
 8007026:	f000 fc31 	bl	800788c <__lshift>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800702e:	930a      	str	r3, [sp, #40]	; 0x28
 8007030:	3b01      	subs	r3, #1
 8007032:	189b      	adds	r3, r3, r2
 8007034:	2201      	movs	r2, #1
 8007036:	002c      	movs	r4, r5
 8007038:	0005      	movs	r5, r0
 800703a:	9314      	str	r3, [sp, #80]	; 0x50
 800703c:	9b08      	ldr	r3, [sp, #32]
 800703e:	4013      	ands	r3, r2
 8007040:	930f      	str	r3, [sp, #60]	; 0x3c
 8007042:	0031      	movs	r1, r6
 8007044:	9805      	ldr	r0, [sp, #20]
 8007046:	f7ff fa3d 	bl	80064c4 <quorem>
 800704a:	0003      	movs	r3, r0
 800704c:	0021      	movs	r1, r4
 800704e:	3330      	adds	r3, #48	; 0x30
 8007050:	900d      	str	r0, [sp, #52]	; 0x34
 8007052:	9805      	ldr	r0, [sp, #20]
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	f000 fc87 	bl	8007968 <__mcmp>
 800705a:	002a      	movs	r2, r5
 800705c:	900e      	str	r0, [sp, #56]	; 0x38
 800705e:	0031      	movs	r1, r6
 8007060:	0038      	movs	r0, r7
 8007062:	f000 fc9d 	bl	80079a0 <__mdiff>
 8007066:	68c3      	ldr	r3, [r0, #12]
 8007068:	9008      	str	r0, [sp, #32]
 800706a:	9310      	str	r3, [sp, #64]	; 0x40
 800706c:	2301      	movs	r3, #1
 800706e:	930c      	str	r3, [sp, #48]	; 0x30
 8007070:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d104      	bne.n	8007080 <_dtoa_r+0xaa4>
 8007076:	0001      	movs	r1, r0
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	f000 fc75 	bl	8007968 <__mcmp>
 800707e:	900c      	str	r0, [sp, #48]	; 0x30
 8007080:	0038      	movs	r0, r7
 8007082:	9908      	ldr	r1, [sp, #32]
 8007084:	f000 fa30 	bl	80074e8 <_Bfree>
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800708c:	3301      	adds	r3, #1
 800708e:	9308      	str	r3, [sp, #32]
 8007090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007092:	4313      	orrs	r3, r2
 8007094:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007096:	4313      	orrs	r3, r2
 8007098:	d10c      	bne.n	80070b4 <_dtoa_r+0xad8>
 800709a:	9b07      	ldr	r3, [sp, #28]
 800709c:	2b39      	cmp	r3, #57	; 0x39
 800709e:	d026      	beq.n	80070ee <_dtoa_r+0xb12>
 80070a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd02      	ble.n	80070ac <_dtoa_r+0xad0>
 80070a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a8:	3331      	adds	r3, #49	; 0x31
 80070aa:	9307      	str	r3, [sp, #28]
 80070ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ae:	9a07      	ldr	r2, [sp, #28]
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e76a      	b.n	8006f8a <_dtoa_r+0x9ae>
 80070b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	db04      	blt.n	80070c4 <_dtoa_r+0xae8>
 80070ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070bc:	4313      	orrs	r3, r2
 80070be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070c0:	4313      	orrs	r3, r2
 80070c2:	d11f      	bne.n	8007104 <_dtoa_r+0xb28>
 80070c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	ddf0      	ble.n	80070ac <_dtoa_r+0xad0>
 80070ca:	9905      	ldr	r1, [sp, #20]
 80070cc:	2201      	movs	r2, #1
 80070ce:	0038      	movs	r0, r7
 80070d0:	f000 fbdc 	bl	800788c <__lshift>
 80070d4:	0031      	movs	r1, r6
 80070d6:	9005      	str	r0, [sp, #20]
 80070d8:	f000 fc46 	bl	8007968 <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	dc03      	bgt.n	80070e8 <_dtoa_r+0xb0c>
 80070e0:	d1e4      	bne.n	80070ac <_dtoa_r+0xad0>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	07db      	lsls	r3, r3, #31
 80070e6:	d5e1      	bpl.n	80070ac <_dtoa_r+0xad0>
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	2b39      	cmp	r3, #57	; 0x39
 80070ec:	d1db      	bne.n	80070a6 <_dtoa_r+0xaca>
 80070ee:	2339      	movs	r3, #57	; 0x39
 80070f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	9b08      	ldr	r3, [sp, #32]
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	2a39      	cmp	r2, #57	; 0x39
 80070fe:	d068      	beq.n	80071d2 <_dtoa_r+0xbf6>
 8007100:	3201      	adds	r2, #1
 8007102:	e7d5      	b.n	80070b0 <_dtoa_r+0xad4>
 8007104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007106:	2b00      	cmp	r3, #0
 8007108:	dd07      	ble.n	800711a <_dtoa_r+0xb3e>
 800710a:	9b07      	ldr	r3, [sp, #28]
 800710c:	2b39      	cmp	r3, #57	; 0x39
 800710e:	d0ee      	beq.n	80070ee <_dtoa_r+0xb12>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007114:	3301      	adds	r3, #1
 8007116:	7013      	strb	r3, [r2, #0]
 8007118:	e737      	b.n	8006f8a <_dtoa_r+0x9ae>
 800711a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711c:	9a07      	ldr	r2, [sp, #28]
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007124:	4293      	cmp	r3, r2
 8007126:	d03e      	beq.n	80071a6 <_dtoa_r+0xbca>
 8007128:	2300      	movs	r3, #0
 800712a:	220a      	movs	r2, #10
 800712c:	9905      	ldr	r1, [sp, #20]
 800712e:	0038      	movs	r0, r7
 8007130:	f000 f9fe 	bl	8007530 <__multadd>
 8007134:	2300      	movs	r3, #0
 8007136:	9005      	str	r0, [sp, #20]
 8007138:	220a      	movs	r2, #10
 800713a:	0021      	movs	r1, r4
 800713c:	0038      	movs	r0, r7
 800713e:	42ac      	cmp	r4, r5
 8007140:	d106      	bne.n	8007150 <_dtoa_r+0xb74>
 8007142:	f000 f9f5 	bl	8007530 <__multadd>
 8007146:	0004      	movs	r4, r0
 8007148:	0005      	movs	r5, r0
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	930a      	str	r3, [sp, #40]	; 0x28
 800714e:	e778      	b.n	8007042 <_dtoa_r+0xa66>
 8007150:	f000 f9ee 	bl	8007530 <__multadd>
 8007154:	0029      	movs	r1, r5
 8007156:	0004      	movs	r4, r0
 8007158:	2300      	movs	r3, #0
 800715a:	220a      	movs	r2, #10
 800715c:	0038      	movs	r0, r7
 800715e:	f000 f9e7 	bl	8007530 <__multadd>
 8007162:	0005      	movs	r5, r0
 8007164:	e7f1      	b.n	800714a <_dtoa_r+0xb6e>
 8007166:	9b07      	ldr	r3, [sp, #28]
 8007168:	930c      	str	r3, [sp, #48]	; 0x30
 800716a:	2400      	movs	r4, #0
 800716c:	0031      	movs	r1, r6
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	f7ff f9a8 	bl	80064c4 <quorem>
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	3030      	adds	r0, #48	; 0x30
 8007178:	5518      	strb	r0, [r3, r4]
 800717a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800717c:	3401      	adds	r4, #1
 800717e:	9007      	str	r0, [sp, #28]
 8007180:	42a3      	cmp	r3, r4
 8007182:	dd07      	ble.n	8007194 <_dtoa_r+0xbb8>
 8007184:	2300      	movs	r3, #0
 8007186:	220a      	movs	r2, #10
 8007188:	0038      	movs	r0, r7
 800718a:	9905      	ldr	r1, [sp, #20]
 800718c:	f000 f9d0 	bl	8007530 <__multadd>
 8007190:	9005      	str	r0, [sp, #20]
 8007192:	e7eb      	b.n	800716c <_dtoa_r+0xb90>
 8007194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007196:	2001      	movs	r0, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd00      	ble.n	800719e <_dtoa_r+0xbc2>
 800719c:	0018      	movs	r0, r3
 800719e:	2400      	movs	r4, #0
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	181b      	adds	r3, r3, r0
 80071a4:	9308      	str	r3, [sp, #32]
 80071a6:	9905      	ldr	r1, [sp, #20]
 80071a8:	2201      	movs	r2, #1
 80071aa:	0038      	movs	r0, r7
 80071ac:	f000 fb6e 	bl	800788c <__lshift>
 80071b0:	0031      	movs	r1, r6
 80071b2:	9005      	str	r0, [sp, #20]
 80071b4:	f000 fbd8 	bl	8007968 <__mcmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dc9b      	bgt.n	80070f4 <_dtoa_r+0xb18>
 80071bc:	d102      	bne.n	80071c4 <_dtoa_r+0xbe8>
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	07db      	lsls	r3, r3, #31
 80071c2:	d497      	bmi.n	80070f4 <_dtoa_r+0xb18>
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	2a30      	cmp	r2, #48	; 0x30
 80071ce:	d0fa      	beq.n	80071c6 <_dtoa_r+0xbea>
 80071d0:	e6db      	b.n	8006f8a <_dtoa_r+0x9ae>
 80071d2:	9a06      	ldr	r2, [sp, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d18e      	bne.n	80070f6 <_dtoa_r+0xb1a>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	3301      	adds	r3, #1
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	e799      	b.n	8007116 <_dtoa_r+0xb3a>
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <_dtoa_r+0xc2c>)
 80071e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071e6:	9306      	str	r3, [sp, #24]
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <_dtoa_r+0xc30>)
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d001      	beq.n	80071f2 <_dtoa_r+0xc16>
 80071ee:	f7ff fa3f 	bl	8006670 <_dtoa_r+0x94>
 80071f2:	f7ff fa3f 	bl	8006674 <_dtoa_r+0x98>
 80071f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dcb6      	bgt.n	800716a <_dtoa_r+0xb8e>
 80071fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fe:	2b02      	cmp	r3, #2
 8007200:	dd00      	ble.n	8007204 <_dtoa_r+0xc28>
 8007202:	e6ac      	b.n	8006f5e <_dtoa_r+0x982>
 8007204:	e7b1      	b.n	800716a <_dtoa_r+0xb8e>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	08008968 	.word	0x08008968
 800720c:	08008970 	.word	0x08008970

08007210 <std>:
 8007210:	2300      	movs	r3, #0
 8007212:	b510      	push	{r4, lr}
 8007214:	0004      	movs	r4, r0
 8007216:	6003      	str	r3, [r0, #0]
 8007218:	6043      	str	r3, [r0, #4]
 800721a:	6083      	str	r3, [r0, #8]
 800721c:	8181      	strh	r1, [r0, #12]
 800721e:	6643      	str	r3, [r0, #100]	; 0x64
 8007220:	0019      	movs	r1, r3
 8007222:	81c2      	strh	r2, [r0, #14]
 8007224:	6103      	str	r3, [r0, #16]
 8007226:	6143      	str	r3, [r0, #20]
 8007228:	6183      	str	r3, [r0, #24]
 800722a:	2208      	movs	r2, #8
 800722c:	305c      	adds	r0, #92	; 0x5c
 800722e:	f7fe fcb9 	bl	8005ba4 <memset>
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <std+0x38>)
 8007234:	6224      	str	r4, [r4, #32]
 8007236:	6263      	str	r3, [r4, #36]	; 0x24
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <std+0x3c>)
 800723a:	62a3      	str	r3, [r4, #40]	; 0x28
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <std+0x40>)
 800723e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <std+0x44>)
 8007242:	6323      	str	r3, [r4, #48]	; 0x30
 8007244:	bd10      	pop	{r4, pc}
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	0800809d 	.word	0x0800809d
 800724c:	080080c5 	.word	0x080080c5
 8007250:	080080fd 	.word	0x080080fd
 8007254:	08008129 	.word	0x08008129

08007258 <_cleanup_r>:
 8007258:	b510      	push	{r4, lr}
 800725a:	4902      	ldr	r1, [pc, #8]	; (8007264 <_cleanup_r+0xc>)
 800725c:	f000 f8ba 	bl	80073d4 <_fwalk_reent>
 8007260:	bd10      	pop	{r4, pc}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	08008471 	.word	0x08008471

08007268 <__sfmoreglue>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2568      	movs	r5, #104	; 0x68
 800726c:	1e4a      	subs	r2, r1, #1
 800726e:	4355      	muls	r5, r2
 8007270:	000e      	movs	r6, r1
 8007272:	0029      	movs	r1, r5
 8007274:	3174      	adds	r1, #116	; 0x74
 8007276:	f000 fd27 	bl	8007cc8 <_malloc_r>
 800727a:	1e04      	subs	r4, r0, #0
 800727c:	d008      	beq.n	8007290 <__sfmoreglue+0x28>
 800727e:	2100      	movs	r1, #0
 8007280:	002a      	movs	r2, r5
 8007282:	6001      	str	r1, [r0, #0]
 8007284:	6046      	str	r6, [r0, #4]
 8007286:	300c      	adds	r0, #12
 8007288:	60a0      	str	r0, [r4, #8]
 800728a:	3268      	adds	r2, #104	; 0x68
 800728c:	f7fe fc8a 	bl	8005ba4 <memset>
 8007290:	0020      	movs	r0, r4
 8007292:	bd70      	pop	{r4, r5, r6, pc}

08007294 <__sfp_lock_acquire>:
 8007294:	b510      	push	{r4, lr}
 8007296:	4802      	ldr	r0, [pc, #8]	; (80072a0 <__sfp_lock_acquire+0xc>)
 8007298:	f000 f8c1 	bl	800741e <__retarget_lock_acquire_recursive>
 800729c:	bd10      	pop	{r4, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	2000038d 	.word	0x2000038d

080072a4 <__sfp_lock_release>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	4802      	ldr	r0, [pc, #8]	; (80072b0 <__sfp_lock_release+0xc>)
 80072a8:	f000 f8ba 	bl	8007420 <__retarget_lock_release_recursive>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	2000038d 	.word	0x2000038d

080072b4 <__sinit_lock_acquire>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4802      	ldr	r0, [pc, #8]	; (80072c0 <__sinit_lock_acquire+0xc>)
 80072b8:	f000 f8b1 	bl	800741e <__retarget_lock_acquire_recursive>
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	2000038e 	.word	0x2000038e

080072c4 <__sinit_lock_release>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4802      	ldr	r0, [pc, #8]	; (80072d0 <__sinit_lock_release+0xc>)
 80072c8:	f000 f8aa 	bl	8007420 <__retarget_lock_release_recursive>
 80072cc:	bd10      	pop	{r4, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	2000038e 	.word	0x2000038e

080072d4 <__sinit>:
 80072d4:	b513      	push	{r0, r1, r4, lr}
 80072d6:	0004      	movs	r4, r0
 80072d8:	f7ff ffec 	bl	80072b4 <__sinit_lock_acquire>
 80072dc:	69a3      	ldr	r3, [r4, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <__sinit+0x14>
 80072e2:	f7ff ffef 	bl	80072c4 <__sinit_lock_release>
 80072e6:	bd13      	pop	{r0, r1, r4, pc}
 80072e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80072ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80072ec:	6523      	str	r3, [r4, #80]	; 0x50
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <__sinit+0x68>)
 80072f0:	4a13      	ldr	r2, [pc, #76]	; (8007340 <__sinit+0x6c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d101      	bne.n	8007300 <__sinit+0x2c>
 80072fc:	2301      	movs	r3, #1
 80072fe:	61a3      	str	r3, [r4, #24]
 8007300:	0020      	movs	r0, r4
 8007302:	f000 f81f 	bl	8007344 <__sfp>
 8007306:	6060      	str	r0, [r4, #4]
 8007308:	0020      	movs	r0, r4
 800730a:	f000 f81b 	bl	8007344 <__sfp>
 800730e:	60a0      	str	r0, [r4, #8]
 8007310:	0020      	movs	r0, r4
 8007312:	f000 f817 	bl	8007344 <__sfp>
 8007316:	2200      	movs	r2, #0
 8007318:	2104      	movs	r1, #4
 800731a:	60e0      	str	r0, [r4, #12]
 800731c:	6860      	ldr	r0, [r4, #4]
 800731e:	f7ff ff77 	bl	8007210 <std>
 8007322:	2201      	movs	r2, #1
 8007324:	2109      	movs	r1, #9
 8007326:	68a0      	ldr	r0, [r4, #8]
 8007328:	f7ff ff72 	bl	8007210 <std>
 800732c:	2202      	movs	r2, #2
 800732e:	2112      	movs	r1, #18
 8007330:	68e0      	ldr	r0, [r4, #12]
 8007332:	f7ff ff6d 	bl	8007210 <std>
 8007336:	2301      	movs	r3, #1
 8007338:	61a3      	str	r3, [r4, #24]
 800733a:	e7d2      	b.n	80072e2 <__sinit+0xe>
 800733c:	08008930 	.word	0x08008930
 8007340:	08007259 	.word	0x08007259

08007344 <__sfp>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	0007      	movs	r7, r0
 8007348:	f7ff ffa4 	bl	8007294 <__sfp_lock_acquire>
 800734c:	4b1f      	ldr	r3, [pc, #124]	; (80073cc <__sfp+0x88>)
 800734e:	681e      	ldr	r6, [r3, #0]
 8007350:	69b3      	ldr	r3, [r6, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <__sfp+0x18>
 8007356:	0030      	movs	r0, r6
 8007358:	f7ff ffbc 	bl	80072d4 <__sinit>
 800735c:	3648      	adds	r6, #72	; 0x48
 800735e:	68b4      	ldr	r4, [r6, #8]
 8007360:	6873      	ldr	r3, [r6, #4]
 8007362:	3b01      	subs	r3, #1
 8007364:	d504      	bpl.n	8007370 <__sfp+0x2c>
 8007366:	6833      	ldr	r3, [r6, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d022      	beq.n	80073b2 <__sfp+0x6e>
 800736c:	6836      	ldr	r6, [r6, #0]
 800736e:	e7f6      	b.n	800735e <__sfp+0x1a>
 8007370:	220c      	movs	r2, #12
 8007372:	5ea5      	ldrsh	r5, [r4, r2]
 8007374:	2d00      	cmp	r5, #0
 8007376:	d11a      	bne.n	80073ae <__sfp+0x6a>
 8007378:	0020      	movs	r0, r4
 800737a:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <__sfp+0x8c>)
 800737c:	3058      	adds	r0, #88	; 0x58
 800737e:	60e3      	str	r3, [r4, #12]
 8007380:	6665      	str	r5, [r4, #100]	; 0x64
 8007382:	f000 f84b 	bl	800741c <__retarget_lock_init_recursive>
 8007386:	f7ff ff8d 	bl	80072a4 <__sfp_lock_release>
 800738a:	0020      	movs	r0, r4
 800738c:	2208      	movs	r2, #8
 800738e:	0029      	movs	r1, r5
 8007390:	6025      	str	r5, [r4, #0]
 8007392:	60a5      	str	r5, [r4, #8]
 8007394:	6065      	str	r5, [r4, #4]
 8007396:	6125      	str	r5, [r4, #16]
 8007398:	6165      	str	r5, [r4, #20]
 800739a:	61a5      	str	r5, [r4, #24]
 800739c:	305c      	adds	r0, #92	; 0x5c
 800739e:	f7fe fc01 	bl	8005ba4 <memset>
 80073a2:	6365      	str	r5, [r4, #52]	; 0x34
 80073a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80073a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80073a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80073aa:	0020      	movs	r0, r4
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ae:	3468      	adds	r4, #104	; 0x68
 80073b0:	e7d7      	b.n	8007362 <__sfp+0x1e>
 80073b2:	2104      	movs	r1, #4
 80073b4:	0038      	movs	r0, r7
 80073b6:	f7ff ff57 	bl	8007268 <__sfmoreglue>
 80073ba:	1e04      	subs	r4, r0, #0
 80073bc:	6030      	str	r0, [r6, #0]
 80073be:	d1d5      	bne.n	800736c <__sfp+0x28>
 80073c0:	f7ff ff70 	bl	80072a4 <__sfp_lock_release>
 80073c4:	230c      	movs	r3, #12
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	e7ef      	b.n	80073aa <__sfp+0x66>
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	08008930 	.word	0x08008930
 80073d0:	ffff0001 	.word	0xffff0001

080073d4 <_fwalk_reent>:
 80073d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d6:	0004      	movs	r4, r0
 80073d8:	0006      	movs	r6, r0
 80073da:	2700      	movs	r7, #0
 80073dc:	9101      	str	r1, [sp, #4]
 80073de:	3448      	adds	r4, #72	; 0x48
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	68a5      	ldr	r5, [r4, #8]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	d504      	bpl.n	80073f8 <_fwalk_reent+0x24>
 80073ee:	6824      	ldr	r4, [r4, #0]
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d1f5      	bne.n	80073e0 <_fwalk_reent+0xc>
 80073f4:	0038      	movs	r0, r7
 80073f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073f8:	89ab      	ldrh	r3, [r5, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d908      	bls.n	8007410 <_fwalk_reent+0x3c>
 80073fe:	220e      	movs	r2, #14
 8007400:	5eab      	ldrsh	r3, [r5, r2]
 8007402:	3301      	adds	r3, #1
 8007404:	d004      	beq.n	8007410 <_fwalk_reent+0x3c>
 8007406:	0029      	movs	r1, r5
 8007408:	0030      	movs	r0, r6
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	4798      	blx	r3
 800740e:	4307      	orrs	r7, r0
 8007410:	3568      	adds	r5, #104	; 0x68
 8007412:	e7e8      	b.n	80073e6 <_fwalk_reent+0x12>

08007414 <_localeconv_r>:
 8007414:	4800      	ldr	r0, [pc, #0]	; (8007418 <_localeconv_r+0x4>)
 8007416:	4770      	bx	lr
 8007418:	20000160 	.word	0x20000160

0800741c <__retarget_lock_init_recursive>:
 800741c:	4770      	bx	lr

0800741e <__retarget_lock_acquire_recursive>:
 800741e:	4770      	bx	lr

08007420 <__retarget_lock_release_recursive>:
 8007420:	4770      	bx	lr
	...

08007424 <malloc>:
 8007424:	b510      	push	{r4, lr}
 8007426:	4b03      	ldr	r3, [pc, #12]	; (8007434 <malloc+0x10>)
 8007428:	0001      	movs	r1, r0
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	f000 fc4c 	bl	8007cc8 <_malloc_r>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	2000000c 	.word	0x2000000c

08007438 <memchr>:
 8007438:	b2c9      	uxtb	r1, r1
 800743a:	1882      	adds	r2, r0, r2
 800743c:	4290      	cmp	r0, r2
 800743e:	d101      	bne.n	8007444 <memchr+0xc>
 8007440:	2000      	movs	r0, #0
 8007442:	4770      	bx	lr
 8007444:	7803      	ldrb	r3, [r0, #0]
 8007446:	428b      	cmp	r3, r1
 8007448:	d0fb      	beq.n	8007442 <memchr+0xa>
 800744a:	3001      	adds	r0, #1
 800744c:	e7f6      	b.n	800743c <memchr+0x4>

0800744e <memcpy>:
 800744e:	2300      	movs	r3, #0
 8007450:	b510      	push	{r4, lr}
 8007452:	429a      	cmp	r2, r3
 8007454:	d100      	bne.n	8007458 <memcpy+0xa>
 8007456:	bd10      	pop	{r4, pc}
 8007458:	5ccc      	ldrb	r4, [r1, r3]
 800745a:	54c4      	strb	r4, [r0, r3]
 800745c:	3301      	adds	r3, #1
 800745e:	e7f8      	b.n	8007452 <memcpy+0x4>

08007460 <_Balloc>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007464:	0006      	movs	r6, r0
 8007466:	000c      	movs	r4, r1
 8007468:	2d00      	cmp	r5, #0
 800746a:	d10e      	bne.n	800748a <_Balloc+0x2a>
 800746c:	2010      	movs	r0, #16
 800746e:	f7ff ffd9 	bl	8007424 <malloc>
 8007472:	1e02      	subs	r2, r0, #0
 8007474:	6270      	str	r0, [r6, #36]	; 0x24
 8007476:	d104      	bne.n	8007482 <_Balloc+0x22>
 8007478:	2166      	movs	r1, #102	; 0x66
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <_Balloc+0x80>)
 800747c:	4819      	ldr	r0, [pc, #100]	; (80074e4 <_Balloc+0x84>)
 800747e:	f000 ff3b 	bl	80082f8 <__assert_func>
 8007482:	6045      	str	r5, [r0, #4]
 8007484:	6085      	str	r5, [r0, #8]
 8007486:	6005      	str	r5, [r0, #0]
 8007488:	60c5      	str	r5, [r0, #12]
 800748a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800748c:	68eb      	ldr	r3, [r5, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d013      	beq.n	80074ba <_Balloc+0x5a>
 8007492:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007494:	00a2      	lsls	r2, r4, #2
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	189b      	adds	r3, r3, r2
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	2800      	cmp	r0, #0
 800749e:	d118      	bne.n	80074d2 <_Balloc+0x72>
 80074a0:	2101      	movs	r1, #1
 80074a2:	000d      	movs	r5, r1
 80074a4:	40a5      	lsls	r5, r4
 80074a6:	1d6a      	adds	r2, r5, #5
 80074a8:	0030      	movs	r0, r6
 80074aa:	0092      	lsls	r2, r2, #2
 80074ac:	f000 fb74 	bl	8007b98 <_calloc_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d00c      	beq.n	80074ce <_Balloc+0x6e>
 80074b4:	6044      	str	r4, [r0, #4]
 80074b6:	6085      	str	r5, [r0, #8]
 80074b8:	e00d      	b.n	80074d6 <_Balloc+0x76>
 80074ba:	2221      	movs	r2, #33	; 0x21
 80074bc:	2104      	movs	r1, #4
 80074be:	0030      	movs	r0, r6
 80074c0:	f000 fb6a 	bl	8007b98 <_calloc_r>
 80074c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074c6:	60e8      	str	r0, [r5, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e1      	bne.n	8007492 <_Balloc+0x32>
 80074ce:	2000      	movs	r0, #0
 80074d0:	bd70      	pop	{r4, r5, r6, pc}
 80074d2:	6802      	ldr	r2, [r0, #0]
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6103      	str	r3, [r0, #16]
 80074da:	60c3      	str	r3, [r0, #12]
 80074dc:	e7f8      	b.n	80074d0 <_Balloc+0x70>
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	08008975 	.word	0x08008975
 80074e4:	08008a58 	.word	0x08008a58

080074e8 <_Bfree>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074ec:	0005      	movs	r5, r0
 80074ee:	000c      	movs	r4, r1
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	d10e      	bne.n	8007512 <_Bfree+0x2a>
 80074f4:	2010      	movs	r0, #16
 80074f6:	f7ff ff95 	bl	8007424 <malloc>
 80074fa:	1e02      	subs	r2, r0, #0
 80074fc:	6268      	str	r0, [r5, #36]	; 0x24
 80074fe:	d104      	bne.n	800750a <_Bfree+0x22>
 8007500:	218a      	movs	r1, #138	; 0x8a
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <_Bfree+0x40>)
 8007504:	4809      	ldr	r0, [pc, #36]	; (800752c <_Bfree+0x44>)
 8007506:	f000 fef7 	bl	80082f8 <__assert_func>
 800750a:	6046      	str	r6, [r0, #4]
 800750c:	6086      	str	r6, [r0, #8]
 800750e:	6006      	str	r6, [r0, #0]
 8007510:	60c6      	str	r6, [r0, #12]
 8007512:	2c00      	cmp	r4, #0
 8007514:	d007      	beq.n	8007526 <_Bfree+0x3e>
 8007516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007518:	6862      	ldr	r2, [r4, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	189b      	adds	r3, r3, r2
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	601c      	str	r4, [r3, #0]
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	08008975 	.word	0x08008975
 800752c:	08008a58 	.word	0x08008a58

08007530 <__multadd>:
 8007530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007532:	000e      	movs	r6, r1
 8007534:	9001      	str	r0, [sp, #4]
 8007536:	000c      	movs	r4, r1
 8007538:	001d      	movs	r5, r3
 800753a:	2000      	movs	r0, #0
 800753c:	690f      	ldr	r7, [r1, #16]
 800753e:	3614      	adds	r6, #20
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	3001      	adds	r0, #1
 8007544:	b299      	uxth	r1, r3
 8007546:	4351      	muls	r1, r2
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	4353      	muls	r3, r2
 800754c:	1949      	adds	r1, r1, r5
 800754e:	0c0d      	lsrs	r5, r1, #16
 8007550:	195b      	adds	r3, r3, r5
 8007552:	0c1d      	lsrs	r5, r3, #16
 8007554:	b289      	uxth	r1, r1
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	185b      	adds	r3, r3, r1
 800755a:	c608      	stmia	r6!, {r3}
 800755c:	4287      	cmp	r7, r0
 800755e:	dcef      	bgt.n	8007540 <__multadd+0x10>
 8007560:	2d00      	cmp	r5, #0
 8007562:	d022      	beq.n	80075aa <__multadd+0x7a>
 8007564:	68a3      	ldr	r3, [r4, #8]
 8007566:	42bb      	cmp	r3, r7
 8007568:	dc19      	bgt.n	800759e <__multadd+0x6e>
 800756a:	6863      	ldr	r3, [r4, #4]
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	f7ff ff76 	bl	8007460 <_Balloc>
 8007574:	1e06      	subs	r6, r0, #0
 8007576:	d105      	bne.n	8007584 <__multadd+0x54>
 8007578:	0002      	movs	r2, r0
 800757a:	21b5      	movs	r1, #181	; 0xb5
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <__multadd+0x80>)
 800757e:	480d      	ldr	r0, [pc, #52]	; (80075b4 <__multadd+0x84>)
 8007580:	f000 feba 	bl	80082f8 <__assert_func>
 8007584:	0021      	movs	r1, r4
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	310c      	adds	r1, #12
 800758a:	1c9a      	adds	r2, r3, #2
 800758c:	0092      	lsls	r2, r2, #2
 800758e:	300c      	adds	r0, #12
 8007590:	f7ff ff5d 	bl	800744e <memcpy>
 8007594:	0021      	movs	r1, r4
 8007596:	9801      	ldr	r0, [sp, #4]
 8007598:	f7ff ffa6 	bl	80074e8 <_Bfree>
 800759c:	0034      	movs	r4, r6
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	18e3      	adds	r3, r4, r3
 80075a4:	605d      	str	r5, [r3, #4]
 80075a6:	1c7b      	adds	r3, r7, #1
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	0020      	movs	r0, r4
 80075ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	080089e7 	.word	0x080089e7
 80075b4:	08008a58 	.word	0x08008a58

080075b8 <__hi0bits>:
 80075b8:	0003      	movs	r3, r0
 80075ba:	0c02      	lsrs	r2, r0, #16
 80075bc:	2000      	movs	r0, #0
 80075be:	4282      	cmp	r2, r0
 80075c0:	d101      	bne.n	80075c6 <__hi0bits+0xe>
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	3010      	adds	r0, #16
 80075c6:	0e1a      	lsrs	r2, r3, #24
 80075c8:	d101      	bne.n	80075ce <__hi0bits+0x16>
 80075ca:	3008      	adds	r0, #8
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	0f1a      	lsrs	r2, r3, #28
 80075d0:	d101      	bne.n	80075d6 <__hi0bits+0x1e>
 80075d2:	3004      	adds	r0, #4
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	0f9a      	lsrs	r2, r3, #30
 80075d8:	d101      	bne.n	80075de <__hi0bits+0x26>
 80075da:	3002      	adds	r0, #2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	db03      	blt.n	80075ea <__hi0bits+0x32>
 80075e2:	3001      	adds	r0, #1
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	d400      	bmi.n	80075ea <__hi0bits+0x32>
 80075e8:	2020      	movs	r0, #32
 80075ea:	4770      	bx	lr

080075ec <__lo0bits>:
 80075ec:	6803      	ldr	r3, [r0, #0]
 80075ee:	0002      	movs	r2, r0
 80075f0:	2107      	movs	r1, #7
 80075f2:	0018      	movs	r0, r3
 80075f4:	4008      	ands	r0, r1
 80075f6:	420b      	tst	r3, r1
 80075f8:	d00d      	beq.n	8007616 <__lo0bits+0x2a>
 80075fa:	3906      	subs	r1, #6
 80075fc:	2000      	movs	r0, #0
 80075fe:	420b      	tst	r3, r1
 8007600:	d105      	bne.n	800760e <__lo0bits+0x22>
 8007602:	3002      	adds	r0, #2
 8007604:	4203      	tst	r3, r0
 8007606:	d003      	beq.n	8007610 <__lo0bits+0x24>
 8007608:	40cb      	lsrs	r3, r1
 800760a:	0008      	movs	r0, r1
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	4770      	bx	lr
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	e7fb      	b.n	800760e <__lo0bits+0x22>
 8007616:	b299      	uxth	r1, r3
 8007618:	2900      	cmp	r1, #0
 800761a:	d101      	bne.n	8007620 <__lo0bits+0x34>
 800761c:	2010      	movs	r0, #16
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	b2d9      	uxtb	r1, r3
 8007622:	2900      	cmp	r1, #0
 8007624:	d101      	bne.n	800762a <__lo0bits+0x3e>
 8007626:	3008      	adds	r0, #8
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	0719      	lsls	r1, r3, #28
 800762c:	d101      	bne.n	8007632 <__lo0bits+0x46>
 800762e:	3004      	adds	r0, #4
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	0799      	lsls	r1, r3, #30
 8007634:	d101      	bne.n	800763a <__lo0bits+0x4e>
 8007636:	3002      	adds	r0, #2
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d4e9      	bmi.n	8007612 <__lo0bits+0x26>
 800763e:	3001      	adds	r0, #1
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	d1e6      	bne.n	8007612 <__lo0bits+0x26>
 8007644:	2020      	movs	r0, #32
 8007646:	e7e2      	b.n	800760e <__lo0bits+0x22>

08007648 <__i2b>:
 8007648:	b510      	push	{r4, lr}
 800764a:	000c      	movs	r4, r1
 800764c:	2101      	movs	r1, #1
 800764e:	f7ff ff07 	bl	8007460 <_Balloc>
 8007652:	2800      	cmp	r0, #0
 8007654:	d106      	bne.n	8007664 <__i2b+0x1c>
 8007656:	21a0      	movs	r1, #160	; 0xa0
 8007658:	0002      	movs	r2, r0
 800765a:	4b04      	ldr	r3, [pc, #16]	; (800766c <__i2b+0x24>)
 800765c:	4804      	ldr	r0, [pc, #16]	; (8007670 <__i2b+0x28>)
 800765e:	0049      	lsls	r1, r1, #1
 8007660:	f000 fe4a 	bl	80082f8 <__assert_func>
 8007664:	2301      	movs	r3, #1
 8007666:	6144      	str	r4, [r0, #20]
 8007668:	6103      	str	r3, [r0, #16]
 800766a:	bd10      	pop	{r4, pc}
 800766c:	080089e7 	.word	0x080089e7
 8007670:	08008a58 	.word	0x08008a58

08007674 <__multiply>:
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	690b      	ldr	r3, [r1, #16]
 8007678:	0014      	movs	r4, r2
 800767a:	6912      	ldr	r2, [r2, #16]
 800767c:	000d      	movs	r5, r1
 800767e:	b089      	sub	sp, #36	; 0x24
 8007680:	4293      	cmp	r3, r2
 8007682:	da01      	bge.n	8007688 <__multiply+0x14>
 8007684:	0025      	movs	r5, r4
 8007686:	000c      	movs	r4, r1
 8007688:	692f      	ldr	r7, [r5, #16]
 800768a:	6926      	ldr	r6, [r4, #16]
 800768c:	6869      	ldr	r1, [r5, #4]
 800768e:	19bb      	adds	r3, r7, r6
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	68ab      	ldr	r3, [r5, #8]
 8007694:	19ba      	adds	r2, r7, r6
 8007696:	4293      	cmp	r3, r2
 8007698:	da00      	bge.n	800769c <__multiply+0x28>
 800769a:	3101      	adds	r1, #1
 800769c:	f7ff fee0 	bl	8007460 <_Balloc>
 80076a0:	9001      	str	r0, [sp, #4]
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d106      	bne.n	80076b4 <__multiply+0x40>
 80076a6:	215e      	movs	r1, #94	; 0x5e
 80076a8:	0002      	movs	r2, r0
 80076aa:	4b48      	ldr	r3, [pc, #288]	; (80077cc <__multiply+0x158>)
 80076ac:	4848      	ldr	r0, [pc, #288]	; (80077d0 <__multiply+0x15c>)
 80076ae:	31ff      	adds	r1, #255	; 0xff
 80076b0:	f000 fe22 	bl	80082f8 <__assert_func>
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	3314      	adds	r3, #20
 80076ba:	469c      	mov	ip, r3
 80076bc:	19bb      	adds	r3, r7, r6
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4463      	add	r3, ip
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	4663      	mov	r3, ip
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	428b      	cmp	r3, r1
 80076ca:	d32c      	bcc.n	8007726 <__multiply+0xb2>
 80076cc:	002b      	movs	r3, r5
 80076ce:	0022      	movs	r2, r4
 80076d0:	3314      	adds	r3, #20
 80076d2:	00bf      	lsls	r7, r7, #2
 80076d4:	3214      	adds	r2, #20
 80076d6:	9306      	str	r3, [sp, #24]
 80076d8:	00b6      	lsls	r6, r6, #2
 80076da:	19db      	adds	r3, r3, r7
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	1993      	adds	r3, r2, r6
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	2304      	movs	r3, #4
 80076e4:	9305      	str	r3, [sp, #20]
 80076e6:	002b      	movs	r3, r5
 80076e8:	9904      	ldr	r1, [sp, #16]
 80076ea:	3315      	adds	r3, #21
 80076ec:	9200      	str	r2, [sp, #0]
 80076ee:	4299      	cmp	r1, r3
 80076f0:	d305      	bcc.n	80076fe <__multiply+0x8a>
 80076f2:	1b4b      	subs	r3, r1, r5
 80076f4:	3b15      	subs	r3, #21
 80076f6:	089b      	lsrs	r3, r3, #2
 80076f8:	3301      	adds	r3, #1
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	9a00      	ldr	r2, [sp, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d311      	bcc.n	800772a <__multiply+0xb6>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	dd06      	ble.n	800771a <__multiply+0xa6>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	3b04      	subs	r3, #4
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d053      	beq.n	80077c2 <__multiply+0x14e>
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	9a02      	ldr	r2, [sp, #8]
 800771e:	0018      	movs	r0, r3
 8007720:	611a      	str	r2, [r3, #16]
 8007722:	b009      	add	sp, #36	; 0x24
 8007724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007726:	c304      	stmia	r3!, {r2}
 8007728:	e7cd      	b.n	80076c6 <__multiply+0x52>
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b298      	uxth	r0, r3
 8007730:	2800      	cmp	r0, #0
 8007732:	d01b      	beq.n	800776c <__multiply+0xf8>
 8007734:	4667      	mov	r7, ip
 8007736:	2400      	movs	r4, #0
 8007738:	9e06      	ldr	r6, [sp, #24]
 800773a:	ce02      	ldmia	r6!, {r1}
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	b28b      	uxth	r3, r1
 8007740:	4343      	muls	r3, r0
 8007742:	b292      	uxth	r2, r2
 8007744:	189b      	adds	r3, r3, r2
 8007746:	191b      	adds	r3, r3, r4
 8007748:	0c0c      	lsrs	r4, r1, #16
 800774a:	4344      	muls	r4, r0
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	0c11      	lsrs	r1, r2, #16
 8007750:	1861      	adds	r1, r4, r1
 8007752:	0c1c      	lsrs	r4, r3, #16
 8007754:	1909      	adds	r1, r1, r4
 8007756:	0c0c      	lsrs	r4, r1, #16
 8007758:	b29b      	uxth	r3, r3
 800775a:	0409      	lsls	r1, r1, #16
 800775c:	430b      	orrs	r3, r1
 800775e:	c708      	stmia	r7!, {r3}
 8007760:	9b04      	ldr	r3, [sp, #16]
 8007762:	42b3      	cmp	r3, r6
 8007764:	d8e9      	bhi.n	800773a <__multiply+0xc6>
 8007766:	4663      	mov	r3, ip
 8007768:	9a05      	ldr	r2, [sp, #20]
 800776a:	509c      	str	r4, [r3, r2]
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	0c1e      	lsrs	r6, r3, #16
 8007772:	d020      	beq.n	80077b6 <__multiply+0x142>
 8007774:	4663      	mov	r3, ip
 8007776:	002c      	movs	r4, r5
 8007778:	4660      	mov	r0, ip
 800777a:	2700      	movs	r7, #0
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3414      	adds	r4, #20
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	b291      	uxth	r1, r2
 8007786:	4371      	muls	r1, r6
 8007788:	6802      	ldr	r2, [r0, #0]
 800778a:	0c12      	lsrs	r2, r2, #16
 800778c:	1889      	adds	r1, r1, r2
 800778e:	19cf      	adds	r7, r1, r7
 8007790:	0439      	lsls	r1, r7, #16
 8007792:	430b      	orrs	r3, r1
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	cc02      	ldmia	r4!, {r1}
 8007798:	6843      	ldr	r3, [r0, #4]
 800779a:	0c09      	lsrs	r1, r1, #16
 800779c:	4371      	muls	r1, r6
 800779e:	b29b      	uxth	r3, r3
 80077a0:	0c3f      	lsrs	r7, r7, #16
 80077a2:	18cb      	adds	r3, r1, r3
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	19db      	adds	r3, r3, r7
 80077a8:	0c1f      	lsrs	r7, r3, #16
 80077aa:	3004      	adds	r0, #4
 80077ac:	42a2      	cmp	r2, r4
 80077ae:	d8e7      	bhi.n	8007780 <__multiply+0x10c>
 80077b0:	4662      	mov	r2, ip
 80077b2:	9905      	ldr	r1, [sp, #20]
 80077b4:	5053      	str	r3, [r2, r1]
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	3304      	adds	r3, #4
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	2304      	movs	r3, #4
 80077be:	449c      	add	ip, r3
 80077c0:	e79d      	b.n	80076fe <__multiply+0x8a>
 80077c2:	9b02      	ldr	r3, [sp, #8]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	9302      	str	r3, [sp, #8]
 80077c8:	e79d      	b.n	8007706 <__multiply+0x92>
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	080089e7 	.word	0x080089e7
 80077d0:	08008a58 	.word	0x08008a58

080077d4 <__pow5mult>:
 80077d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d6:	2303      	movs	r3, #3
 80077d8:	0015      	movs	r5, r2
 80077da:	0007      	movs	r7, r0
 80077dc:	000e      	movs	r6, r1
 80077de:	401a      	ands	r2, r3
 80077e0:	421d      	tst	r5, r3
 80077e2:	d008      	beq.n	80077f6 <__pow5mult+0x22>
 80077e4:	4925      	ldr	r1, [pc, #148]	; (800787c <__pow5mult+0xa8>)
 80077e6:	3a01      	subs	r2, #1
 80077e8:	0092      	lsls	r2, r2, #2
 80077ea:	5852      	ldr	r2, [r2, r1]
 80077ec:	2300      	movs	r3, #0
 80077ee:	0031      	movs	r1, r6
 80077f0:	f7ff fe9e 	bl	8007530 <__multadd>
 80077f4:	0006      	movs	r6, r0
 80077f6:	10ad      	asrs	r5, r5, #2
 80077f8:	d03d      	beq.n	8007876 <__pow5mult+0xa2>
 80077fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d10f      	bne.n	8007820 <__pow5mult+0x4c>
 8007800:	2010      	movs	r0, #16
 8007802:	f7ff fe0f 	bl	8007424 <malloc>
 8007806:	1e02      	subs	r2, r0, #0
 8007808:	6278      	str	r0, [r7, #36]	; 0x24
 800780a:	d105      	bne.n	8007818 <__pow5mult+0x44>
 800780c:	21d7      	movs	r1, #215	; 0xd7
 800780e:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <__pow5mult+0xac>)
 8007810:	481c      	ldr	r0, [pc, #112]	; (8007884 <__pow5mult+0xb0>)
 8007812:	0049      	lsls	r1, r1, #1
 8007814:	f000 fd70 	bl	80082f8 <__assert_func>
 8007818:	6044      	str	r4, [r0, #4]
 800781a:	6084      	str	r4, [r0, #8]
 800781c:	6004      	str	r4, [r0, #0]
 800781e:	60c4      	str	r4, [r0, #12]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	689c      	ldr	r4, [r3, #8]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	2c00      	cmp	r4, #0
 8007828:	d108      	bne.n	800783c <__pow5mult+0x68>
 800782a:	0038      	movs	r0, r7
 800782c:	4916      	ldr	r1, [pc, #88]	; (8007888 <__pow5mult+0xb4>)
 800782e:	f7ff ff0b 	bl	8007648 <__i2b>
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	0004      	movs	r4, r0
 8007836:	6098      	str	r0, [r3, #8]
 8007838:	2300      	movs	r3, #0
 800783a:	6003      	str	r3, [r0, #0]
 800783c:	2301      	movs	r3, #1
 800783e:	421d      	tst	r5, r3
 8007840:	d00a      	beq.n	8007858 <__pow5mult+0x84>
 8007842:	0031      	movs	r1, r6
 8007844:	0022      	movs	r2, r4
 8007846:	0038      	movs	r0, r7
 8007848:	f7ff ff14 	bl	8007674 <__multiply>
 800784c:	0031      	movs	r1, r6
 800784e:	9001      	str	r0, [sp, #4]
 8007850:	0038      	movs	r0, r7
 8007852:	f7ff fe49 	bl	80074e8 <_Bfree>
 8007856:	9e01      	ldr	r6, [sp, #4]
 8007858:	106d      	asrs	r5, r5, #1
 800785a:	d00c      	beq.n	8007876 <__pow5mult+0xa2>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	2800      	cmp	r0, #0
 8007860:	d107      	bne.n	8007872 <__pow5mult+0x9e>
 8007862:	0022      	movs	r2, r4
 8007864:	0021      	movs	r1, r4
 8007866:	0038      	movs	r0, r7
 8007868:	f7ff ff04 	bl	8007674 <__multiply>
 800786c:	2300      	movs	r3, #0
 800786e:	6020      	str	r0, [r4, #0]
 8007870:	6003      	str	r3, [r0, #0]
 8007872:	0004      	movs	r4, r0
 8007874:	e7e2      	b.n	800783c <__pow5mult+0x68>
 8007876:	0030      	movs	r0, r6
 8007878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	08008ba8 	.word	0x08008ba8
 8007880:	08008975 	.word	0x08008975
 8007884:	08008a58 	.word	0x08008a58
 8007888:	00000271 	.word	0x00000271

0800788c <__lshift>:
 800788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788e:	000c      	movs	r4, r1
 8007890:	0017      	movs	r7, r2
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	1155      	asrs	r5, r2, #5
 8007896:	b087      	sub	sp, #28
 8007898:	18eb      	adds	r3, r5, r3
 800789a:	9302      	str	r3, [sp, #8]
 800789c:	3301      	adds	r3, #1
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	6849      	ldr	r1, [r1, #4]
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	9004      	str	r0, [sp, #16]
 80078a6:	9a01      	ldr	r2, [sp, #4]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	db10      	blt.n	80078ce <__lshift+0x42>
 80078ac:	9804      	ldr	r0, [sp, #16]
 80078ae:	f7ff fdd7 	bl	8007460 <_Balloc>
 80078b2:	2300      	movs	r3, #0
 80078b4:	0002      	movs	r2, r0
 80078b6:	0006      	movs	r6, r0
 80078b8:	0019      	movs	r1, r3
 80078ba:	3214      	adds	r2, #20
 80078bc:	4298      	cmp	r0, r3
 80078be:	d10c      	bne.n	80078da <__lshift+0x4e>
 80078c0:	21da      	movs	r1, #218	; 0xda
 80078c2:	0002      	movs	r2, r0
 80078c4:	4b26      	ldr	r3, [pc, #152]	; (8007960 <__lshift+0xd4>)
 80078c6:	4827      	ldr	r0, [pc, #156]	; (8007964 <__lshift+0xd8>)
 80078c8:	31ff      	adds	r1, #255	; 0xff
 80078ca:	f000 fd15 	bl	80082f8 <__assert_func>
 80078ce:	3101      	adds	r1, #1
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	e7e8      	b.n	80078a6 <__lshift+0x1a>
 80078d4:	0098      	lsls	r0, r3, #2
 80078d6:	5011      	str	r1, [r2, r0]
 80078d8:	3301      	adds	r3, #1
 80078da:	42ab      	cmp	r3, r5
 80078dc:	dbfa      	blt.n	80078d4 <__lshift+0x48>
 80078de:	43eb      	mvns	r3, r5
 80078e0:	17db      	asrs	r3, r3, #31
 80078e2:	401d      	ands	r5, r3
 80078e4:	211f      	movs	r1, #31
 80078e6:	0023      	movs	r3, r4
 80078e8:	0038      	movs	r0, r7
 80078ea:	00ad      	lsls	r5, r5, #2
 80078ec:	1955      	adds	r5, r2, r5
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	3314      	adds	r3, #20
 80078f2:	0092      	lsls	r2, r2, #2
 80078f4:	4008      	ands	r0, r1
 80078f6:	4684      	mov	ip, r0
 80078f8:	189a      	adds	r2, r3, r2
 80078fa:	420f      	tst	r7, r1
 80078fc:	d02a      	beq.n	8007954 <__lshift+0xc8>
 80078fe:	3101      	adds	r1, #1
 8007900:	1a09      	subs	r1, r1, r0
 8007902:	9105      	str	r1, [sp, #20]
 8007904:	2100      	movs	r1, #0
 8007906:	9503      	str	r5, [sp, #12]
 8007908:	4667      	mov	r7, ip
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	40b8      	lsls	r0, r7
 800790e:	4301      	orrs	r1, r0
 8007910:	9803      	ldr	r0, [sp, #12]
 8007912:	c002      	stmia	r0!, {r1}
 8007914:	cb02      	ldmia	r3!, {r1}
 8007916:	9003      	str	r0, [sp, #12]
 8007918:	9805      	ldr	r0, [sp, #20]
 800791a:	40c1      	lsrs	r1, r0
 800791c:	429a      	cmp	r2, r3
 800791e:	d8f3      	bhi.n	8007908 <__lshift+0x7c>
 8007920:	0020      	movs	r0, r4
 8007922:	3015      	adds	r0, #21
 8007924:	2304      	movs	r3, #4
 8007926:	4282      	cmp	r2, r0
 8007928:	d304      	bcc.n	8007934 <__lshift+0xa8>
 800792a:	1b13      	subs	r3, r2, r4
 800792c:	3b15      	subs	r3, #21
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	3301      	adds	r3, #1
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	50e9      	str	r1, [r5, r3]
 8007936:	2900      	cmp	r1, #0
 8007938:	d002      	beq.n	8007940 <__lshift+0xb4>
 800793a:	9b02      	ldr	r3, [sp, #8]
 800793c:	3302      	adds	r3, #2
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	9804      	ldr	r0, [sp, #16]
 8007944:	3b01      	subs	r3, #1
 8007946:	0021      	movs	r1, r4
 8007948:	6133      	str	r3, [r6, #16]
 800794a:	f7ff fdcd 	bl	80074e8 <_Bfree>
 800794e:	0030      	movs	r0, r6
 8007950:	b007      	add	sp, #28
 8007952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007954:	cb02      	ldmia	r3!, {r1}
 8007956:	c502      	stmia	r5!, {r1}
 8007958:	429a      	cmp	r2, r3
 800795a:	d8fb      	bhi.n	8007954 <__lshift+0xc8>
 800795c:	e7f0      	b.n	8007940 <__lshift+0xb4>
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	080089e7 	.word	0x080089e7
 8007964:	08008a58 	.word	0x08008a58

08007968 <__mcmp>:
 8007968:	6902      	ldr	r2, [r0, #16]
 800796a:	690b      	ldr	r3, [r1, #16]
 800796c:	b530      	push	{r4, r5, lr}
 800796e:	0004      	movs	r4, r0
 8007970:	1ad0      	subs	r0, r2, r3
 8007972:	429a      	cmp	r2, r3
 8007974:	d10d      	bne.n	8007992 <__mcmp+0x2a>
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	3414      	adds	r4, #20
 800797a:	3114      	adds	r1, #20
 800797c:	18e2      	adds	r2, r4, r3
 800797e:	18c9      	adds	r1, r1, r3
 8007980:	3a04      	subs	r2, #4
 8007982:	3904      	subs	r1, #4
 8007984:	6815      	ldr	r5, [r2, #0]
 8007986:	680b      	ldr	r3, [r1, #0]
 8007988:	429d      	cmp	r5, r3
 800798a:	d003      	beq.n	8007994 <__mcmp+0x2c>
 800798c:	2001      	movs	r0, #1
 800798e:	429d      	cmp	r5, r3
 8007990:	d303      	bcc.n	800799a <__mcmp+0x32>
 8007992:	bd30      	pop	{r4, r5, pc}
 8007994:	4294      	cmp	r4, r2
 8007996:	d3f3      	bcc.n	8007980 <__mcmp+0x18>
 8007998:	e7fb      	b.n	8007992 <__mcmp+0x2a>
 800799a:	4240      	negs	r0, r0
 800799c:	e7f9      	b.n	8007992 <__mcmp+0x2a>
	...

080079a0 <__mdiff>:
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a2:	000e      	movs	r6, r1
 80079a4:	0007      	movs	r7, r0
 80079a6:	0011      	movs	r1, r2
 80079a8:	0030      	movs	r0, r6
 80079aa:	b087      	sub	sp, #28
 80079ac:	0014      	movs	r4, r2
 80079ae:	f7ff ffdb 	bl	8007968 <__mcmp>
 80079b2:	1e05      	subs	r5, r0, #0
 80079b4:	d110      	bne.n	80079d8 <__mdiff+0x38>
 80079b6:	0001      	movs	r1, r0
 80079b8:	0038      	movs	r0, r7
 80079ba:	f7ff fd51 	bl	8007460 <_Balloc>
 80079be:	1e02      	subs	r2, r0, #0
 80079c0:	d104      	bne.n	80079cc <__mdiff+0x2c>
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <__mdiff+0x124>)
 80079c4:	4940      	ldr	r1, [pc, #256]	; (8007ac8 <__mdiff+0x128>)
 80079c6:	4841      	ldr	r0, [pc, #260]	; (8007acc <__mdiff+0x12c>)
 80079c8:	f000 fc96 	bl	80082f8 <__assert_func>
 80079cc:	2301      	movs	r3, #1
 80079ce:	6145      	str	r5, [r0, #20]
 80079d0:	6103      	str	r3, [r0, #16]
 80079d2:	0010      	movs	r0, r2
 80079d4:	b007      	add	sp, #28
 80079d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d8:	2301      	movs	r3, #1
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	2800      	cmp	r0, #0
 80079de:	db04      	blt.n	80079ea <__mdiff+0x4a>
 80079e0:	0023      	movs	r3, r4
 80079e2:	0034      	movs	r4, r6
 80079e4:	001e      	movs	r6, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	0038      	movs	r0, r7
 80079ec:	6861      	ldr	r1, [r4, #4]
 80079ee:	f7ff fd37 	bl	8007460 <_Balloc>
 80079f2:	1e02      	subs	r2, r0, #0
 80079f4:	d103      	bne.n	80079fe <__mdiff+0x5e>
 80079f6:	2190      	movs	r1, #144	; 0x90
 80079f8:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <__mdiff+0x124>)
 80079fa:	0089      	lsls	r1, r1, #2
 80079fc:	e7e3      	b.n	80079c6 <__mdiff+0x26>
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	2700      	movs	r7, #0
 8007a02:	60c3      	str	r3, [r0, #12]
 8007a04:	6920      	ldr	r0, [r4, #16]
 8007a06:	3414      	adds	r4, #20
 8007a08:	9401      	str	r4, [sp, #4]
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	0084      	lsls	r4, r0, #2
 8007a0e:	191b      	adds	r3, r3, r4
 8007a10:	0034      	movs	r4, r6
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	6933      	ldr	r3, [r6, #16]
 8007a16:	3414      	adds	r4, #20
 8007a18:	0099      	lsls	r1, r3, #2
 8007a1a:	1863      	adds	r3, r4, r1
 8007a1c:	9303      	str	r3, [sp, #12]
 8007a1e:	0013      	movs	r3, r2
 8007a20:	3314      	adds	r3, #20
 8007a22:	469c      	mov	ip, r3
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	cc02      	ldmia	r4!, {r1}
 8007a2e:	cb20      	ldmia	r3!, {r5}
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	b2ab      	uxth	r3, r5
 8007a34:	19df      	adds	r7, r3, r7
 8007a36:	b28b      	uxth	r3, r1
 8007a38:	1afb      	subs	r3, r7, r3
 8007a3a:	0c09      	lsrs	r1, r1, #16
 8007a3c:	0c2d      	lsrs	r5, r5, #16
 8007a3e:	1a6d      	subs	r5, r5, r1
 8007a40:	1419      	asrs	r1, r3, #16
 8007a42:	186d      	adds	r5, r5, r1
 8007a44:	4661      	mov	r1, ip
 8007a46:	142f      	asrs	r7, r5, #16
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	042d      	lsls	r5, r5, #16
 8007a4c:	432b      	orrs	r3, r5
 8007a4e:	c108      	stmia	r1!, {r3}
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	468c      	mov	ip, r1
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	d8e8      	bhi.n	8007a2a <__mdiff+0x8a>
 8007a58:	0031      	movs	r1, r6
 8007a5a:	9c03      	ldr	r4, [sp, #12]
 8007a5c:	3115      	adds	r1, #21
 8007a5e:	2304      	movs	r3, #4
 8007a60:	428c      	cmp	r4, r1
 8007a62:	d304      	bcc.n	8007a6e <__mdiff+0xce>
 8007a64:	1ba3      	subs	r3, r4, r6
 8007a66:	3b15      	subs	r3, #21
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	9901      	ldr	r1, [sp, #4]
 8007a70:	18cc      	adds	r4, r1, r3
 8007a72:	9905      	ldr	r1, [sp, #20]
 8007a74:	0026      	movs	r6, r4
 8007a76:	18cb      	adds	r3, r1, r3
 8007a78:	469c      	mov	ip, r3
 8007a7a:	9902      	ldr	r1, [sp, #8]
 8007a7c:	428e      	cmp	r6, r1
 8007a7e:	d310      	bcc.n	8007aa2 <__mdiff+0x102>
 8007a80:	9e02      	ldr	r6, [sp, #8]
 8007a82:	1ee1      	subs	r1, r4, #3
 8007a84:	2500      	movs	r5, #0
 8007a86:	428e      	cmp	r6, r1
 8007a88:	d304      	bcc.n	8007a94 <__mdiff+0xf4>
 8007a8a:	0031      	movs	r1, r6
 8007a8c:	3103      	adds	r1, #3
 8007a8e:	1b0c      	subs	r4, r1, r4
 8007a90:	08a4      	lsrs	r4, r4, #2
 8007a92:	00a5      	lsls	r5, r4, #2
 8007a94:	195b      	adds	r3, r3, r5
 8007a96:	3b04      	subs	r3, #4
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	d00f      	beq.n	8007abe <__mdiff+0x11e>
 8007a9e:	6110      	str	r0, [r2, #16]
 8007aa0:	e797      	b.n	80079d2 <__mdiff+0x32>
 8007aa2:	ce02      	ldmia	r6!, {r1}
 8007aa4:	b28d      	uxth	r5, r1
 8007aa6:	19ed      	adds	r5, r5, r7
 8007aa8:	0c0f      	lsrs	r7, r1, #16
 8007aaa:	1429      	asrs	r1, r5, #16
 8007aac:	1879      	adds	r1, r7, r1
 8007aae:	140f      	asrs	r7, r1, #16
 8007ab0:	b2ad      	uxth	r5, r5
 8007ab2:	0409      	lsls	r1, r1, #16
 8007ab4:	430d      	orrs	r5, r1
 8007ab6:	4661      	mov	r1, ip
 8007ab8:	c120      	stmia	r1!, {r5}
 8007aba:	468c      	mov	ip, r1
 8007abc:	e7dd      	b.n	8007a7a <__mdiff+0xda>
 8007abe:	3801      	subs	r0, #1
 8007ac0:	e7e9      	b.n	8007a96 <__mdiff+0xf6>
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	080089e7 	.word	0x080089e7
 8007ac8:	00000232 	.word	0x00000232
 8007acc:	08008a58 	.word	0x08008a58

08007ad0 <__d2b>:
 8007ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	0014      	movs	r4, r2
 8007ad6:	001e      	movs	r6, r3
 8007ad8:	9f08      	ldr	r7, [sp, #32]
 8007ada:	f7ff fcc1 	bl	8007460 <_Balloc>
 8007ade:	1e05      	subs	r5, r0, #0
 8007ae0:	d105      	bne.n	8007aee <__d2b+0x1e>
 8007ae2:	0002      	movs	r2, r0
 8007ae4:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <__d2b+0xb0>)
 8007ae6:	4927      	ldr	r1, [pc, #156]	; (8007b84 <__d2b+0xb4>)
 8007ae8:	4827      	ldr	r0, [pc, #156]	; (8007b88 <__d2b+0xb8>)
 8007aea:	f000 fc05 	bl	80082f8 <__assert_func>
 8007aee:	0333      	lsls	r3, r6, #12
 8007af0:	0076      	lsls	r6, r6, #1
 8007af2:	0b1b      	lsrs	r3, r3, #12
 8007af4:	0d76      	lsrs	r6, r6, #21
 8007af6:	d124      	bne.n	8007b42 <__d2b+0x72>
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d027      	beq.n	8007b4e <__d2b+0x7e>
 8007afe:	4668      	mov	r0, sp
 8007b00:	9400      	str	r4, [sp, #0]
 8007b02:	f7ff fd73 	bl	80075ec <__lo0bits>
 8007b06:	9c00      	ldr	r4, [sp, #0]
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d01e      	beq.n	8007b4a <__d2b+0x7a>
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	2120      	movs	r1, #32
 8007b10:	001a      	movs	r2, r3
 8007b12:	1a09      	subs	r1, r1, r0
 8007b14:	408a      	lsls	r2, r1
 8007b16:	40c3      	lsrs	r3, r0
 8007b18:	4322      	orrs	r2, r4
 8007b1a:	616a      	str	r2, [r5, #20]
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	9c01      	ldr	r4, [sp, #4]
 8007b20:	61ac      	str	r4, [r5, #24]
 8007b22:	1e63      	subs	r3, r4, #1
 8007b24:	419c      	sbcs	r4, r3
 8007b26:	3401      	adds	r4, #1
 8007b28:	612c      	str	r4, [r5, #16]
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	d018      	beq.n	8007b60 <__d2b+0x90>
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <__d2b+0xbc>)
 8007b30:	18f6      	adds	r6, r6, r3
 8007b32:	2335      	movs	r3, #53	; 0x35
 8007b34:	1836      	adds	r6, r6, r0
 8007b36:	1a18      	subs	r0, r3, r0
 8007b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3a:	603e      	str	r6, [r7, #0]
 8007b3c:	6018      	str	r0, [r3, #0]
 8007b3e:	0028      	movs	r0, r5
 8007b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b42:	2280      	movs	r2, #128	; 0x80
 8007b44:	0352      	lsls	r2, r2, #13
 8007b46:	4313      	orrs	r3, r2
 8007b48:	e7d6      	b.n	8007af8 <__d2b+0x28>
 8007b4a:	616c      	str	r4, [r5, #20]
 8007b4c:	e7e7      	b.n	8007b1e <__d2b+0x4e>
 8007b4e:	a801      	add	r0, sp, #4
 8007b50:	f7ff fd4c 	bl	80075ec <__lo0bits>
 8007b54:	2401      	movs	r4, #1
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	612c      	str	r4, [r5, #16]
 8007b5a:	616b      	str	r3, [r5, #20]
 8007b5c:	3020      	adds	r0, #32
 8007b5e:	e7e4      	b.n	8007b2a <__d2b+0x5a>
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <__d2b+0xc0>)
 8007b62:	18c0      	adds	r0, r0, r3
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <__d2b+0xc4>)
 8007b66:	6038      	str	r0, [r7, #0]
 8007b68:	18e3      	adds	r3, r4, r3
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	18eb      	adds	r3, r5, r3
 8007b6e:	6958      	ldr	r0, [r3, #20]
 8007b70:	f7ff fd22 	bl	80075b8 <__hi0bits>
 8007b74:	0164      	lsls	r4, r4, #5
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	1a24      	subs	r4, r4, r0
 8007b7a:	601c      	str	r4, [r3, #0]
 8007b7c:	e7df      	b.n	8007b3e <__d2b+0x6e>
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	080089e7 	.word	0x080089e7
 8007b84:	0000030a 	.word	0x0000030a
 8007b88:	08008a58 	.word	0x08008a58
 8007b8c:	fffffbcd 	.word	0xfffffbcd
 8007b90:	fffffbce 	.word	0xfffffbce
 8007b94:	3fffffff 	.word	0x3fffffff

08007b98 <_calloc_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	0c13      	lsrs	r3, r2, #16
 8007b9c:	0c0d      	lsrs	r5, r1, #16
 8007b9e:	d11e      	bne.n	8007bde <_calloc_r+0x46>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10c      	bne.n	8007bbe <_calloc_r+0x26>
 8007ba4:	b289      	uxth	r1, r1
 8007ba6:	b294      	uxth	r4, r2
 8007ba8:	434c      	muls	r4, r1
 8007baa:	0021      	movs	r1, r4
 8007bac:	f000 f88c 	bl	8007cc8 <_malloc_r>
 8007bb0:	1e05      	subs	r5, r0, #0
 8007bb2:	d01b      	beq.n	8007bec <_calloc_r+0x54>
 8007bb4:	0022      	movs	r2, r4
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	f7fd fff4 	bl	8005ba4 <memset>
 8007bbc:	e016      	b.n	8007bec <_calloc_r+0x54>
 8007bbe:	1c1d      	adds	r5, r3, #0
 8007bc0:	1c0b      	adds	r3, r1, #0
 8007bc2:	b292      	uxth	r2, r2
 8007bc4:	b289      	uxth	r1, r1
 8007bc6:	b29c      	uxth	r4, r3
 8007bc8:	4351      	muls	r1, r2
 8007bca:	b2ab      	uxth	r3, r5
 8007bcc:	4363      	muls	r3, r4
 8007bce:	0c0c      	lsrs	r4, r1, #16
 8007bd0:	191c      	adds	r4, r3, r4
 8007bd2:	0c22      	lsrs	r2, r4, #16
 8007bd4:	d107      	bne.n	8007be6 <_calloc_r+0x4e>
 8007bd6:	0424      	lsls	r4, r4, #16
 8007bd8:	b289      	uxth	r1, r1
 8007bda:	430c      	orrs	r4, r1
 8007bdc:	e7e5      	b.n	8007baa <_calloc_r+0x12>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <_calloc_r+0x4e>
 8007be2:	1c13      	adds	r3, r2, #0
 8007be4:	e7ed      	b.n	8007bc2 <_calloc_r+0x2a>
 8007be6:	230c      	movs	r3, #12
 8007be8:	2500      	movs	r5, #0
 8007bea:	6003      	str	r3, [r0, #0]
 8007bec:	0028      	movs	r0, r5
 8007bee:	bd70      	pop	{r4, r5, r6, pc}

08007bf0 <_free_r>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	0005      	movs	r5, r0
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	d010      	beq.n	8007c1a <_free_r+0x2a>
 8007bf8:	1f0c      	subs	r4, r1, #4
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da00      	bge.n	8007c02 <_free_r+0x12>
 8007c00:	18e4      	adds	r4, r4, r3
 8007c02:	0028      	movs	r0, r5
 8007c04:	f000 fd16 	bl	8008634 <__malloc_lock>
 8007c08:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <_free_r+0x90>)
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <_free_r+0x2c>
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	6014      	str	r4, [r2, #0]
 8007c14:	0028      	movs	r0, r5
 8007c16:	f000 fd15 	bl	8008644 <__malloc_unlock>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d908      	bls.n	8007c32 <_free_r+0x42>
 8007c20:	6821      	ldr	r1, [r4, #0]
 8007c22:	1860      	adds	r0, r4, r1
 8007c24:	4283      	cmp	r3, r0
 8007c26:	d1f3      	bne.n	8007c10 <_free_r+0x20>
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	1841      	adds	r1, r0, r1
 8007c2e:	6021      	str	r1, [r4, #0]
 8007c30:	e7ee      	b.n	8007c10 <_free_r+0x20>
 8007c32:	001a      	movs	r2, r3
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <_free_r+0x4e>
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	d9f9      	bls.n	8007c32 <_free_r+0x42>
 8007c3e:	6811      	ldr	r1, [r2, #0]
 8007c40:	1850      	adds	r0, r2, r1
 8007c42:	42a0      	cmp	r0, r4
 8007c44:	d10b      	bne.n	8007c5e <_free_r+0x6e>
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	1809      	adds	r1, r1, r0
 8007c4a:	1850      	adds	r0, r2, r1
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	4283      	cmp	r3, r0
 8007c50:	d1e0      	bne.n	8007c14 <_free_r+0x24>
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	1841      	adds	r1, r0, r1
 8007c58:	6011      	str	r1, [r2, #0]
 8007c5a:	6053      	str	r3, [r2, #4]
 8007c5c:	e7da      	b.n	8007c14 <_free_r+0x24>
 8007c5e:	42a0      	cmp	r0, r4
 8007c60:	d902      	bls.n	8007c68 <_free_r+0x78>
 8007c62:	230c      	movs	r3, #12
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	e7d5      	b.n	8007c14 <_free_r+0x24>
 8007c68:	6821      	ldr	r1, [r4, #0]
 8007c6a:	1860      	adds	r0, r4, r1
 8007c6c:	4283      	cmp	r3, r0
 8007c6e:	d103      	bne.n	8007c78 <_free_r+0x88>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	1841      	adds	r1, r0, r1
 8007c76:	6021      	str	r1, [r4, #0]
 8007c78:	6063      	str	r3, [r4, #4]
 8007c7a:	6054      	str	r4, [r2, #4]
 8007c7c:	e7ca      	b.n	8007c14 <_free_r+0x24>
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	20000390 	.word	0x20000390

08007c84 <sbrk_aligned>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	4e0f      	ldr	r6, [pc, #60]	; (8007cc4 <sbrk_aligned+0x40>)
 8007c88:	000d      	movs	r5, r1
 8007c8a:	6831      	ldr	r1, [r6, #0]
 8007c8c:	0004      	movs	r4, r0
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d102      	bne.n	8007c98 <sbrk_aligned+0x14>
 8007c92:	f000 f9f1 	bl	8008078 <_sbrk_r>
 8007c96:	6030      	str	r0, [r6, #0]
 8007c98:	0029      	movs	r1, r5
 8007c9a:	0020      	movs	r0, r4
 8007c9c:	f000 f9ec 	bl	8008078 <_sbrk_r>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d00a      	beq.n	8007cba <sbrk_aligned+0x36>
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	1cc5      	adds	r5, r0, #3
 8007ca8:	439d      	bics	r5, r3
 8007caa:	42a8      	cmp	r0, r5
 8007cac:	d007      	beq.n	8007cbe <sbrk_aligned+0x3a>
 8007cae:	1a29      	subs	r1, r5, r0
 8007cb0:	0020      	movs	r0, r4
 8007cb2:	f000 f9e1 	bl	8008078 <_sbrk_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d101      	bne.n	8007cbe <sbrk_aligned+0x3a>
 8007cba:	2501      	movs	r5, #1
 8007cbc:	426d      	negs	r5, r5
 8007cbe:	0028      	movs	r0, r5
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	20000394 	.word	0x20000394

08007cc8 <_malloc_r>:
 8007cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cca:	2203      	movs	r2, #3
 8007ccc:	1ccb      	adds	r3, r1, #3
 8007cce:	4393      	bics	r3, r2
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	0006      	movs	r6, r0
 8007cd4:	001f      	movs	r7, r3
 8007cd6:	2b0c      	cmp	r3, #12
 8007cd8:	d232      	bcs.n	8007d40 <_malloc_r+0x78>
 8007cda:	270c      	movs	r7, #12
 8007cdc:	42b9      	cmp	r1, r7
 8007cde:	d831      	bhi.n	8007d44 <_malloc_r+0x7c>
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	f000 fca7 	bl	8008634 <__malloc_lock>
 8007ce6:	4d32      	ldr	r5, [pc, #200]	; (8007db0 <_malloc_r+0xe8>)
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	001c      	movs	r4, r3
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d12e      	bne.n	8007d4e <_malloc_r+0x86>
 8007cf0:	0039      	movs	r1, r7
 8007cf2:	0030      	movs	r0, r6
 8007cf4:	f7ff ffc6 	bl	8007c84 <sbrk_aligned>
 8007cf8:	0004      	movs	r4, r0
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d11e      	bne.n	8007d3c <_malloc_r+0x74>
 8007cfe:	682c      	ldr	r4, [r5, #0]
 8007d00:	0025      	movs	r5, r4
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	d14a      	bne.n	8007d9c <_malloc_r+0xd4>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	0029      	movs	r1, r5
 8007d0a:	18e3      	adds	r3, r4, r3
 8007d0c:	0030      	movs	r0, r6
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	f000 f9b2 	bl	8008078 <_sbrk_r>
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	4283      	cmp	r3, r0
 8007d18:	d143      	bne.n	8007da2 <_malloc_r+0xda>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	3703      	adds	r7, #3
 8007d1e:	1aff      	subs	r7, r7, r3
 8007d20:	2303      	movs	r3, #3
 8007d22:	439f      	bics	r7, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	2f0c      	cmp	r7, #12
 8007d28:	d200      	bcs.n	8007d2c <_malloc_r+0x64>
 8007d2a:	270c      	movs	r7, #12
 8007d2c:	0039      	movs	r1, r7
 8007d2e:	0030      	movs	r0, r6
 8007d30:	f7ff ffa8 	bl	8007c84 <sbrk_aligned>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d034      	beq.n	8007da2 <_malloc_r+0xda>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	19df      	adds	r7, r3, r7
 8007d3c:	6027      	str	r7, [r4, #0]
 8007d3e:	e013      	b.n	8007d68 <_malloc_r+0xa0>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dacb      	bge.n	8007cdc <_malloc_r+0x14>
 8007d44:	230c      	movs	r3, #12
 8007d46:	2500      	movs	r5, #0
 8007d48:	6033      	str	r3, [r6, #0]
 8007d4a:	0028      	movs	r0, r5
 8007d4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	1bd1      	subs	r1, r2, r7
 8007d52:	d420      	bmi.n	8007d96 <_malloc_r+0xce>
 8007d54:	290b      	cmp	r1, #11
 8007d56:	d917      	bls.n	8007d88 <_malloc_r+0xc0>
 8007d58:	19e2      	adds	r2, r4, r7
 8007d5a:	6027      	str	r7, [r4, #0]
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d111      	bne.n	8007d84 <_malloc_r+0xbc>
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	6053      	str	r3, [r2, #4]
 8007d68:	0030      	movs	r0, r6
 8007d6a:	0025      	movs	r5, r4
 8007d6c:	f000 fc6a 	bl	8008644 <__malloc_unlock>
 8007d70:	2207      	movs	r2, #7
 8007d72:	350b      	adds	r5, #11
 8007d74:	1d23      	adds	r3, r4, #4
 8007d76:	4395      	bics	r5, r2
 8007d78:	1aea      	subs	r2, r5, r3
 8007d7a:	429d      	cmp	r5, r3
 8007d7c:	d0e5      	beq.n	8007d4a <_malloc_r+0x82>
 8007d7e:	1b5b      	subs	r3, r3, r5
 8007d80:	50a3      	str	r3, [r4, r2]
 8007d82:	e7e2      	b.n	8007d4a <_malloc_r+0x82>
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	e7ec      	b.n	8007d62 <_malloc_r+0x9a>
 8007d88:	6862      	ldr	r2, [r4, #4]
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	d101      	bne.n	8007d92 <_malloc_r+0xca>
 8007d8e:	602a      	str	r2, [r5, #0]
 8007d90:	e7ea      	b.n	8007d68 <_malloc_r+0xa0>
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	e7e8      	b.n	8007d68 <_malloc_r+0xa0>
 8007d96:	0023      	movs	r3, r4
 8007d98:	6864      	ldr	r4, [r4, #4]
 8007d9a:	e7a7      	b.n	8007cec <_malloc_r+0x24>
 8007d9c:	002c      	movs	r4, r5
 8007d9e:	686d      	ldr	r5, [r5, #4]
 8007da0:	e7af      	b.n	8007d02 <_malloc_r+0x3a>
 8007da2:	230c      	movs	r3, #12
 8007da4:	0030      	movs	r0, r6
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	f000 fc4c 	bl	8008644 <__malloc_unlock>
 8007dac:	e7cd      	b.n	8007d4a <_malloc_r+0x82>
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	20000390 	.word	0x20000390

08007db4 <__sfputc_r>:
 8007db4:	6893      	ldr	r3, [r2, #8]
 8007db6:	b510      	push	{r4, lr}
 8007db8:	3b01      	subs	r3, #1
 8007dba:	6093      	str	r3, [r2, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da04      	bge.n	8007dca <__sfputc_r+0x16>
 8007dc0:	6994      	ldr	r4, [r2, #24]
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	db07      	blt.n	8007dd6 <__sfputc_r+0x22>
 8007dc6:	290a      	cmp	r1, #10
 8007dc8:	d005      	beq.n	8007dd6 <__sfputc_r+0x22>
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	1c58      	adds	r0, r3, #1
 8007dce:	6010      	str	r0, [r2, #0]
 8007dd0:	7019      	strb	r1, [r3, #0]
 8007dd2:	0008      	movs	r0, r1
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	f000 f9ad 	bl	8008134 <__swbuf_r>
 8007dda:	0001      	movs	r1, r0
 8007ddc:	e7f9      	b.n	8007dd2 <__sfputc_r+0x1e>

08007dde <__sfputs_r>:
 8007dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de0:	0006      	movs	r6, r0
 8007de2:	000f      	movs	r7, r1
 8007de4:	0014      	movs	r4, r2
 8007de6:	18d5      	adds	r5, r2, r3
 8007de8:	42ac      	cmp	r4, r5
 8007dea:	d101      	bne.n	8007df0 <__sfputs_r+0x12>
 8007dec:	2000      	movs	r0, #0
 8007dee:	e007      	b.n	8007e00 <__sfputs_r+0x22>
 8007df0:	7821      	ldrb	r1, [r4, #0]
 8007df2:	003a      	movs	r2, r7
 8007df4:	0030      	movs	r0, r6
 8007df6:	f7ff ffdd 	bl	8007db4 <__sfputc_r>
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d1f3      	bne.n	8007de8 <__sfputs_r+0xa>
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e04 <_vfiprintf_r>:
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	b0a1      	sub	sp, #132	; 0x84
 8007e08:	0006      	movs	r6, r0
 8007e0a:	000c      	movs	r4, r1
 8007e0c:	001f      	movs	r7, r3
 8007e0e:	9203      	str	r2, [sp, #12]
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d004      	beq.n	8007e1e <_vfiprintf_r+0x1a>
 8007e14:	6983      	ldr	r3, [r0, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <_vfiprintf_r+0x1a>
 8007e1a:	f7ff fa5b 	bl	80072d4 <__sinit>
 8007e1e:	4b8e      	ldr	r3, [pc, #568]	; (8008058 <_vfiprintf_r+0x254>)
 8007e20:	429c      	cmp	r4, r3
 8007e22:	d11c      	bne.n	8007e5e <_vfiprintf_r+0x5a>
 8007e24:	6874      	ldr	r4, [r6, #4]
 8007e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e28:	07db      	lsls	r3, r3, #31
 8007e2a:	d405      	bmi.n	8007e38 <_vfiprintf_r+0x34>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	059b      	lsls	r3, r3, #22
 8007e30:	d402      	bmi.n	8007e38 <_vfiprintf_r+0x34>
 8007e32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e34:	f7ff faf3 	bl	800741e <__retarget_lock_acquire_recursive>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	071b      	lsls	r3, r3, #28
 8007e3c:	d502      	bpl.n	8007e44 <_vfiprintf_r+0x40>
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11d      	bne.n	8007e80 <_vfiprintf_r+0x7c>
 8007e44:	0021      	movs	r1, r4
 8007e46:	0030      	movs	r0, r6
 8007e48:	f000 f9de 	bl	8008208 <__swsetup_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d017      	beq.n	8007e80 <_vfiprintf_r+0x7c>
 8007e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d50d      	bpl.n	8007e72 <_vfiprintf_r+0x6e>
 8007e56:	2001      	movs	r0, #1
 8007e58:	4240      	negs	r0, r0
 8007e5a:	b021      	add	sp, #132	; 0x84
 8007e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5e:	4b7f      	ldr	r3, [pc, #508]	; (800805c <_vfiprintf_r+0x258>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d101      	bne.n	8007e68 <_vfiprintf_r+0x64>
 8007e64:	68b4      	ldr	r4, [r6, #8]
 8007e66:	e7de      	b.n	8007e26 <_vfiprintf_r+0x22>
 8007e68:	4b7d      	ldr	r3, [pc, #500]	; (8008060 <_vfiprintf_r+0x25c>)
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	d1db      	bne.n	8007e26 <_vfiprintf_r+0x22>
 8007e6e:	68f4      	ldr	r4, [r6, #12]
 8007e70:	e7d9      	b.n	8007e26 <_vfiprintf_r+0x22>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	059b      	lsls	r3, r3, #22
 8007e76:	d4ee      	bmi.n	8007e56 <_vfiprintf_r+0x52>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f7ff fad1 	bl	8007420 <__retarget_lock_release_recursive>
 8007e7e:	e7ea      	b.n	8007e56 <_vfiprintf_r+0x52>
 8007e80:	2300      	movs	r3, #0
 8007e82:	ad08      	add	r5, sp, #32
 8007e84:	616b      	str	r3, [r5, #20]
 8007e86:	3320      	adds	r3, #32
 8007e88:	766b      	strb	r3, [r5, #25]
 8007e8a:	3310      	adds	r3, #16
 8007e8c:	76ab      	strb	r3, [r5, #26]
 8007e8e:	9707      	str	r7, [sp, #28]
 8007e90:	9f03      	ldr	r7, [sp, #12]
 8007e92:	783b      	ldrb	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <_vfiprintf_r+0x98>
 8007e98:	2b25      	cmp	r3, #37	; 0x25
 8007e9a:	d14e      	bne.n	8007f3a <_vfiprintf_r+0x136>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	1afb      	subs	r3, r7, r3
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	429f      	cmp	r7, r3
 8007ea6:	d00d      	beq.n	8007ec4 <_vfiprintf_r+0xc0>
 8007ea8:	9b05      	ldr	r3, [sp, #20]
 8007eaa:	0021      	movs	r1, r4
 8007eac:	0030      	movs	r0, r6
 8007eae:	9a03      	ldr	r2, [sp, #12]
 8007eb0:	f7ff ff95 	bl	8007dde <__sfputs_r>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d100      	bne.n	8007eba <_vfiprintf_r+0xb6>
 8007eb8:	e0b5      	b.n	8008026 <_vfiprintf_r+0x222>
 8007eba:	696a      	ldr	r2, [r5, #20]
 8007ebc:	9b05      	ldr	r3, [sp, #20]
 8007ebe:	4694      	mov	ip, r2
 8007ec0:	4463      	add	r3, ip
 8007ec2:	616b      	str	r3, [r5, #20]
 8007ec4:	783b      	ldrb	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d100      	bne.n	8007ecc <_vfiprintf_r+0xc8>
 8007eca:	e0ac      	b.n	8008026 <_vfiprintf_r+0x222>
 8007ecc:	2201      	movs	r2, #1
 8007ece:	1c7b      	adds	r3, r7, #1
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4252      	negs	r2, r2
 8007ed6:	606a      	str	r2, [r5, #4]
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	3254      	adds	r2, #84	; 0x54
 8007edc:	1852      	adds	r2, r2, r1
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	60eb      	str	r3, [r5, #12]
 8007ee2:	60ab      	str	r3, [r5, #8]
 8007ee4:	7013      	strb	r3, [r2, #0]
 8007ee6:	65ab      	str	r3, [r5, #88]	; 0x58
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	2205      	movs	r2, #5
 8007eec:	7819      	ldrb	r1, [r3, #0]
 8007eee:	485d      	ldr	r0, [pc, #372]	; (8008064 <_vfiprintf_r+0x260>)
 8007ef0:	f7ff faa2 	bl	8007438 <memchr>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	1c5f      	adds	r7, r3, #1
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d120      	bne.n	8007f3e <_vfiprintf_r+0x13a>
 8007efc:	682a      	ldr	r2, [r5, #0]
 8007efe:	06d3      	lsls	r3, r2, #27
 8007f00:	d504      	bpl.n	8007f0c <_vfiprintf_r+0x108>
 8007f02:	2353      	movs	r3, #83	; 0x53
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	185b      	adds	r3, r3, r1
 8007f08:	2120      	movs	r1, #32
 8007f0a:	7019      	strb	r1, [r3, #0]
 8007f0c:	0713      	lsls	r3, r2, #28
 8007f0e:	d504      	bpl.n	8007f1a <_vfiprintf_r+0x116>
 8007f10:	2353      	movs	r3, #83	; 0x53
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	185b      	adds	r3, r3, r1
 8007f16:	212b      	movs	r1, #43	; 0x2b
 8007f18:	7019      	strb	r1, [r3, #0]
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f20:	d016      	beq.n	8007f50 <_vfiprintf_r+0x14c>
 8007f22:	2100      	movs	r1, #0
 8007f24:	68eb      	ldr	r3, [r5, #12]
 8007f26:	9f03      	ldr	r7, [sp, #12]
 8007f28:	783a      	ldrb	r2, [r7, #0]
 8007f2a:	1c78      	adds	r0, r7, #1
 8007f2c:	3a30      	subs	r2, #48	; 0x30
 8007f2e:	4684      	mov	ip, r0
 8007f30:	2a09      	cmp	r2, #9
 8007f32:	d94f      	bls.n	8007fd4 <_vfiprintf_r+0x1d0>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d111      	bne.n	8007f5c <_vfiprintf_r+0x158>
 8007f38:	e017      	b.n	8007f6a <_vfiprintf_r+0x166>
 8007f3a:	3701      	adds	r7, #1
 8007f3c:	e7a9      	b.n	8007e92 <_vfiprintf_r+0x8e>
 8007f3e:	4b49      	ldr	r3, [pc, #292]	; (8008064 <_vfiprintf_r+0x260>)
 8007f40:	682a      	ldr	r2, [r5, #0]
 8007f42:	1ac0      	subs	r0, r0, r3
 8007f44:	2301      	movs	r3, #1
 8007f46:	4083      	lsls	r3, r0
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	9703      	str	r7, [sp, #12]
 8007f4e:	e7cb      	b.n	8007ee8 <_vfiprintf_r+0xe4>
 8007f50:	9b07      	ldr	r3, [sp, #28]
 8007f52:	1d19      	adds	r1, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9107      	str	r1, [sp, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db01      	blt.n	8007f60 <_vfiprintf_r+0x15c>
 8007f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f5e:	e004      	b.n	8007f6a <_vfiprintf_r+0x166>
 8007f60:	425b      	negs	r3, r3
 8007f62:	60eb      	str	r3, [r5, #12]
 8007f64:	2302      	movs	r3, #2
 8007f66:	4313      	orrs	r3, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	783b      	ldrb	r3, [r7, #0]
 8007f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f6e:	d10a      	bne.n	8007f86 <_vfiprintf_r+0x182>
 8007f70:	787b      	ldrb	r3, [r7, #1]
 8007f72:	2b2a      	cmp	r3, #42	; 0x2a
 8007f74:	d137      	bne.n	8007fe6 <_vfiprintf_r+0x1e2>
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	3702      	adds	r7, #2
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	9207      	str	r2, [sp, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db2d      	blt.n	8007fe0 <_vfiprintf_r+0x1dc>
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	2203      	movs	r2, #3
 8007f88:	7839      	ldrb	r1, [r7, #0]
 8007f8a:	4837      	ldr	r0, [pc, #220]	; (8008068 <_vfiprintf_r+0x264>)
 8007f8c:	f7ff fa54 	bl	8007438 <memchr>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d007      	beq.n	8007fa4 <_vfiprintf_r+0x1a0>
 8007f94:	4b34      	ldr	r3, [pc, #208]	; (8008068 <_vfiprintf_r+0x264>)
 8007f96:	682a      	ldr	r2, [r5, #0]
 8007f98:	1ac0      	subs	r0, r0, r3
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	4083      	lsls	r3, r0
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	3701      	adds	r7, #1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	7839      	ldrb	r1, [r7, #0]
 8007fa6:	1c7b      	adds	r3, r7, #1
 8007fa8:	2206      	movs	r2, #6
 8007faa:	4830      	ldr	r0, [pc, #192]	; (800806c <_vfiprintf_r+0x268>)
 8007fac:	9303      	str	r3, [sp, #12]
 8007fae:	7629      	strb	r1, [r5, #24]
 8007fb0:	f7ff fa42 	bl	8007438 <memchr>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d045      	beq.n	8008044 <_vfiprintf_r+0x240>
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <_vfiprintf_r+0x26c>)
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d127      	bne.n	800800e <_vfiprintf_r+0x20a>
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	9b07      	ldr	r3, [sp, #28]
 8007fc2:	3307      	adds	r3, #7
 8007fc4:	4393      	bics	r3, r2
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9307      	str	r3, [sp, #28]
 8007fca:	696b      	ldr	r3, [r5, #20]
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	616b      	str	r3, [r5, #20]
 8007fd2:	e75d      	b.n	8007e90 <_vfiprintf_r+0x8c>
 8007fd4:	210a      	movs	r1, #10
 8007fd6:	434b      	muls	r3, r1
 8007fd8:	4667      	mov	r7, ip
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	3909      	subs	r1, #9
 8007fde:	e7a3      	b.n	8007f28 <_vfiprintf_r+0x124>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	425b      	negs	r3, r3
 8007fe4:	e7ce      	b.n	8007f84 <_vfiprintf_r+0x180>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	001a      	movs	r2, r3
 8007fea:	3701      	adds	r7, #1
 8007fec:	606b      	str	r3, [r5, #4]
 8007fee:	7839      	ldrb	r1, [r7, #0]
 8007ff0:	1c78      	adds	r0, r7, #1
 8007ff2:	3930      	subs	r1, #48	; 0x30
 8007ff4:	4684      	mov	ip, r0
 8007ff6:	2909      	cmp	r1, #9
 8007ff8:	d903      	bls.n	8008002 <_vfiprintf_r+0x1fe>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0c3      	beq.n	8007f86 <_vfiprintf_r+0x182>
 8007ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8008000:	e7c1      	b.n	8007f86 <_vfiprintf_r+0x182>
 8008002:	230a      	movs	r3, #10
 8008004:	435a      	muls	r2, r3
 8008006:	4667      	mov	r7, ip
 8008008:	1852      	adds	r2, r2, r1
 800800a:	3b09      	subs	r3, #9
 800800c:	e7ef      	b.n	8007fee <_vfiprintf_r+0x1ea>
 800800e:	ab07      	add	r3, sp, #28
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	0022      	movs	r2, r4
 8008014:	0029      	movs	r1, r5
 8008016:	0030      	movs	r0, r6
 8008018:	4b16      	ldr	r3, [pc, #88]	; (8008074 <_vfiprintf_r+0x270>)
 800801a:	f7fd fe75 	bl	8005d08 <_printf_float>
 800801e:	9004      	str	r0, [sp, #16]
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	3301      	adds	r3, #1
 8008024:	d1d1      	bne.n	8007fca <_vfiprintf_r+0x1c6>
 8008026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008028:	07db      	lsls	r3, r3, #31
 800802a:	d405      	bmi.n	8008038 <_vfiprintf_r+0x234>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	059b      	lsls	r3, r3, #22
 8008030:	d402      	bmi.n	8008038 <_vfiprintf_r+0x234>
 8008032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008034:	f7ff f9f4 	bl	8007420 <__retarget_lock_release_recursive>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	065b      	lsls	r3, r3, #25
 800803c:	d500      	bpl.n	8008040 <_vfiprintf_r+0x23c>
 800803e:	e70a      	b.n	8007e56 <_vfiprintf_r+0x52>
 8008040:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008042:	e70a      	b.n	8007e5a <_vfiprintf_r+0x56>
 8008044:	ab07      	add	r3, sp, #28
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	0022      	movs	r2, r4
 800804a:	0029      	movs	r1, r5
 800804c:	0030      	movs	r0, r6
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <_vfiprintf_r+0x270>)
 8008050:	f7fe f90c 	bl	800626c <_printf_i>
 8008054:	e7e3      	b.n	800801e <_vfiprintf_r+0x21a>
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	08008a18 	.word	0x08008a18
 800805c:	08008a38 	.word	0x08008a38
 8008060:	080089f8 	.word	0x080089f8
 8008064:	08008bb4 	.word	0x08008bb4
 8008068:	08008bba 	.word	0x08008bba
 800806c:	08008bbe 	.word	0x08008bbe
 8008070:	08005d09 	.word	0x08005d09
 8008074:	08007ddf 	.word	0x08007ddf

08008078 <_sbrk_r>:
 8008078:	2300      	movs	r3, #0
 800807a:	b570      	push	{r4, r5, r6, lr}
 800807c:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_sbrk_r+0x20>)
 800807e:	0004      	movs	r4, r0
 8008080:	0008      	movs	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7fa fdb2 	bl	8002bec <_sbrk>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d103      	bne.n	8008094 <_sbrk_r+0x1c>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d000      	beq.n	8008094 <_sbrk_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd70      	pop	{r4, r5, r6, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	20000398 	.word	0x20000398

0800809c <__sread>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	000c      	movs	r4, r1
 80080a0:	250e      	movs	r5, #14
 80080a2:	5f49      	ldrsh	r1, [r1, r5]
 80080a4:	f000 fad6 	bl	8008654 <_read_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	db03      	blt.n	80080b4 <__sread+0x18>
 80080ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80080ae:	181b      	adds	r3, r3, r0
 80080b0:	6563      	str	r3, [r4, #84]	; 0x54
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	4a02      	ldr	r2, [pc, #8]	; (80080c0 <__sread+0x24>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	e7f9      	b.n	80080b2 <__sread+0x16>
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	ffffefff 	.word	0xffffefff

080080c4 <__swrite>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	001f      	movs	r7, r3
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	0005      	movs	r5, r0
 80080cc:	000c      	movs	r4, r1
 80080ce:	0016      	movs	r6, r2
 80080d0:	05db      	lsls	r3, r3, #23
 80080d2:	d505      	bpl.n	80080e0 <__swrite+0x1c>
 80080d4:	230e      	movs	r3, #14
 80080d6:	5ec9      	ldrsh	r1, [r1, r3]
 80080d8:	2200      	movs	r2, #0
 80080da:	2302      	movs	r3, #2
 80080dc:	f000 fa18 	bl	8008510 <_lseek_r>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <__swrite+0x34>)
 80080e4:	0028      	movs	r0, r5
 80080e6:	4013      	ands	r3, r2
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	0032      	movs	r2, r6
 80080ec:	230e      	movs	r3, #14
 80080ee:	5ee1      	ldrsh	r1, [r4, r3]
 80080f0:	003b      	movs	r3, r7
 80080f2:	f000 f875 	bl	80081e0 <_write_r>
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	ffffefff 	.word	0xffffefff

080080fc <__sseek>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	000c      	movs	r4, r1
 8008100:	250e      	movs	r5, #14
 8008102:	5f49      	ldrsh	r1, [r1, r5]
 8008104:	f000 fa04 	bl	8008510 <_lseek_r>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	1c42      	adds	r2, r0, #1
 800810c:	d103      	bne.n	8008116 <__sseek+0x1a>
 800810e:	4a05      	ldr	r2, [pc, #20]	; (8008124 <__sseek+0x28>)
 8008110:	4013      	ands	r3, r2
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	bd70      	pop	{r4, r5, r6, pc}
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	0152      	lsls	r2, r2, #5
 800811a:	4313      	orrs	r3, r2
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	6560      	str	r0, [r4, #84]	; 0x54
 8008120:	e7f8      	b.n	8008114 <__sseek+0x18>
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	ffffefff 	.word	0xffffefff

08008128 <__sclose>:
 8008128:	b510      	push	{r4, lr}
 800812a:	230e      	movs	r3, #14
 800812c:	5ec9      	ldrsh	r1, [r1, r3]
 800812e:	f000 f901 	bl	8008334 <_close_r>
 8008132:	bd10      	pop	{r4, pc}

08008134 <__swbuf_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	0005      	movs	r5, r0
 8008138:	000e      	movs	r6, r1
 800813a:	0014      	movs	r4, r2
 800813c:	2800      	cmp	r0, #0
 800813e:	d004      	beq.n	800814a <__swbuf_r+0x16>
 8008140:	6983      	ldr	r3, [r0, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <__swbuf_r+0x16>
 8008146:	f7ff f8c5 	bl	80072d4 <__sinit>
 800814a:	4b22      	ldr	r3, [pc, #136]	; (80081d4 <__swbuf_r+0xa0>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d12e      	bne.n	80081ae <__swbuf_r+0x7a>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	69a3      	ldr	r3, [r4, #24]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	071b      	lsls	r3, r3, #28
 800815a:	d532      	bpl.n	80081c2 <__swbuf_r+0x8e>
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d02f      	beq.n	80081c2 <__swbuf_r+0x8e>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	b2f7      	uxtb	r7, r6
 8008168:	1a98      	subs	r0, r3, r2
 800816a:	6963      	ldr	r3, [r4, #20]
 800816c:	b2f6      	uxtb	r6, r6
 800816e:	4283      	cmp	r3, r0
 8008170:	dc05      	bgt.n	800817e <__swbuf_r+0x4a>
 8008172:	0021      	movs	r1, r4
 8008174:	0028      	movs	r0, r5
 8008176:	f000 f97b 	bl	8008470 <_fflush_r>
 800817a:	2800      	cmp	r0, #0
 800817c:	d127      	bne.n	80081ce <__swbuf_r+0x9a>
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	3001      	adds	r0, #1
 8008182:	3b01      	subs	r3, #1
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	701f      	strb	r7, [r3, #0]
 800818e:	6963      	ldr	r3, [r4, #20]
 8008190:	4283      	cmp	r3, r0
 8008192:	d004      	beq.n	800819e <__swbuf_r+0x6a>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	07db      	lsls	r3, r3, #31
 8008198:	d507      	bpl.n	80081aa <__swbuf_r+0x76>
 800819a:	2e0a      	cmp	r6, #10
 800819c:	d105      	bne.n	80081aa <__swbuf_r+0x76>
 800819e:	0021      	movs	r1, r4
 80081a0:	0028      	movs	r0, r5
 80081a2:	f000 f965 	bl	8008470 <_fflush_r>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d111      	bne.n	80081ce <__swbuf_r+0x9a>
 80081aa:	0030      	movs	r0, r6
 80081ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <__swbuf_r+0xa4>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d101      	bne.n	80081b8 <__swbuf_r+0x84>
 80081b4:	68ac      	ldr	r4, [r5, #8]
 80081b6:	e7cc      	b.n	8008152 <__swbuf_r+0x1e>
 80081b8:	4b08      	ldr	r3, [pc, #32]	; (80081dc <__swbuf_r+0xa8>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d1c9      	bne.n	8008152 <__swbuf_r+0x1e>
 80081be:	68ec      	ldr	r4, [r5, #12]
 80081c0:	e7c7      	b.n	8008152 <__swbuf_r+0x1e>
 80081c2:	0021      	movs	r1, r4
 80081c4:	0028      	movs	r0, r5
 80081c6:	f000 f81f 	bl	8008208 <__swsetup_r>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0c9      	beq.n	8008162 <__swbuf_r+0x2e>
 80081ce:	2601      	movs	r6, #1
 80081d0:	4276      	negs	r6, r6
 80081d2:	e7ea      	b.n	80081aa <__swbuf_r+0x76>
 80081d4:	08008a18 	.word	0x08008a18
 80081d8:	08008a38 	.word	0x08008a38
 80081dc:	080089f8 	.word	0x080089f8

080081e0 <_write_r>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	0004      	movs	r4, r0
 80081e4:	0008      	movs	r0, r1
 80081e6:	0011      	movs	r1, r2
 80081e8:	001a      	movs	r2, r3
 80081ea:	2300      	movs	r3, #0
 80081ec:	4d05      	ldr	r5, [pc, #20]	; (8008204 <_write_r+0x24>)
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	f7fa fcb4 	bl	8002b5c <_write>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d103      	bne.n	8008200 <_write_r+0x20>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d000      	beq.n	8008200 <_write_r+0x20>
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	20000398 	.word	0x20000398

08008208 <__swsetup_r>:
 8008208:	4b37      	ldr	r3, [pc, #220]	; (80082e8 <__swsetup_r+0xe0>)
 800820a:	b570      	push	{r4, r5, r6, lr}
 800820c:	681d      	ldr	r5, [r3, #0]
 800820e:	0006      	movs	r6, r0
 8008210:	000c      	movs	r4, r1
 8008212:	2d00      	cmp	r5, #0
 8008214:	d005      	beq.n	8008222 <__swsetup_r+0x1a>
 8008216:	69ab      	ldr	r3, [r5, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <__swsetup_r+0x1a>
 800821c:	0028      	movs	r0, r5
 800821e:	f7ff f859 	bl	80072d4 <__sinit>
 8008222:	4b32      	ldr	r3, [pc, #200]	; (80082ec <__swsetup_r+0xe4>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d10f      	bne.n	8008248 <__swsetup_r+0x40>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	230c      	movs	r3, #12
 800822c:	5ee2      	ldrsh	r2, [r4, r3]
 800822e:	b293      	uxth	r3, r2
 8008230:	0711      	lsls	r1, r2, #28
 8008232:	d42d      	bmi.n	8008290 <__swsetup_r+0x88>
 8008234:	06d9      	lsls	r1, r3, #27
 8008236:	d411      	bmi.n	800825c <__swsetup_r+0x54>
 8008238:	2309      	movs	r3, #9
 800823a:	2001      	movs	r0, #1
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	3337      	adds	r3, #55	; 0x37
 8008240:	4313      	orrs	r3, r2
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	4240      	negs	r0, r0
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	4b29      	ldr	r3, [pc, #164]	; (80082f0 <__swsetup_r+0xe8>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swsetup_r+0x4a>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7eb      	b.n	800822a <__swsetup_r+0x22>
 8008252:	4b28      	ldr	r3, [pc, #160]	; (80082f4 <__swsetup_r+0xec>)
 8008254:	429c      	cmp	r4, r3
 8008256:	d1e8      	bne.n	800822a <__swsetup_r+0x22>
 8008258:	68ec      	ldr	r4, [r5, #12]
 800825a:	e7e6      	b.n	800822a <__swsetup_r+0x22>
 800825c:	075b      	lsls	r3, r3, #29
 800825e:	d513      	bpl.n	8008288 <__swsetup_r+0x80>
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	2900      	cmp	r1, #0
 8008264:	d008      	beq.n	8008278 <__swsetup_r+0x70>
 8008266:	0023      	movs	r3, r4
 8008268:	3344      	adds	r3, #68	; 0x44
 800826a:	4299      	cmp	r1, r3
 800826c:	d002      	beq.n	8008274 <__swsetup_r+0x6c>
 800826e:	0030      	movs	r0, r6
 8008270:	f7ff fcbe 	bl	8007bf0 <_free_r>
 8008274:	2300      	movs	r3, #0
 8008276:	6363      	str	r3, [r4, #52]	; 0x34
 8008278:	2224      	movs	r2, #36	; 0x24
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	4393      	bics	r3, r2
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	2300      	movs	r3, #0
 8008282:	6063      	str	r3, [r4, #4]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	2308      	movs	r3, #8
 800828a:	89a2      	ldrh	r2, [r4, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <__swsetup_r+0xa6>
 8008296:	21a0      	movs	r1, #160	; 0xa0
 8008298:	2280      	movs	r2, #128	; 0x80
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	0089      	lsls	r1, r1, #2
 800829e:	0092      	lsls	r2, r2, #2
 80082a0:	400b      	ands	r3, r1
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d003      	beq.n	80082ae <__swsetup_r+0xa6>
 80082a6:	0021      	movs	r1, r4
 80082a8:	0030      	movs	r0, r6
 80082aa:	f000 f96d 	bl	8008588 <__smakebuf_r>
 80082ae:	220c      	movs	r2, #12
 80082b0:	5ea3      	ldrsh	r3, [r4, r2]
 80082b2:	2001      	movs	r0, #1
 80082b4:	001a      	movs	r2, r3
 80082b6:	b299      	uxth	r1, r3
 80082b8:	4002      	ands	r2, r0
 80082ba:	4203      	tst	r3, r0
 80082bc:	d00f      	beq.n	80082de <__swsetup_r+0xd6>
 80082be:	2200      	movs	r2, #0
 80082c0:	60a2      	str	r2, [r4, #8]
 80082c2:	6962      	ldr	r2, [r4, #20]
 80082c4:	4252      	negs	r2, r2
 80082c6:	61a2      	str	r2, [r4, #24]
 80082c8:	2000      	movs	r0, #0
 80082ca:	6922      	ldr	r2, [r4, #16]
 80082cc:	4282      	cmp	r2, r0
 80082ce:	d1ba      	bne.n	8008246 <__swsetup_r+0x3e>
 80082d0:	060a      	lsls	r2, r1, #24
 80082d2:	d5b8      	bpl.n	8008246 <__swsetup_r+0x3e>
 80082d4:	2240      	movs	r2, #64	; 0x40
 80082d6:	4313      	orrs	r3, r2
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	3801      	subs	r0, #1
 80082dc:	e7b3      	b.n	8008246 <__swsetup_r+0x3e>
 80082de:	0788      	lsls	r0, r1, #30
 80082e0:	d400      	bmi.n	80082e4 <__swsetup_r+0xdc>
 80082e2:	6962      	ldr	r2, [r4, #20]
 80082e4:	60a2      	str	r2, [r4, #8]
 80082e6:	e7ef      	b.n	80082c8 <__swsetup_r+0xc0>
 80082e8:	2000000c 	.word	0x2000000c
 80082ec:	08008a18 	.word	0x08008a18
 80082f0:	08008a38 	.word	0x08008a38
 80082f4:	080089f8 	.word	0x080089f8

080082f8 <__assert_func>:
 80082f8:	b530      	push	{r4, r5, lr}
 80082fa:	0014      	movs	r4, r2
 80082fc:	001a      	movs	r2, r3
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <__assert_func+0x2c>)
 8008300:	0005      	movs	r5, r0
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	b085      	sub	sp, #20
 8008306:	68d8      	ldr	r0, [r3, #12]
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <__assert_func+0x30>)
 800830a:	2c00      	cmp	r4, #0
 800830c:	d101      	bne.n	8008312 <__assert_func+0x1a>
 800830e:	4b07      	ldr	r3, [pc, #28]	; (800832c <__assert_func+0x34>)
 8008310:	001c      	movs	r4, r3
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	9100      	str	r1, [sp, #0]
 8008316:	002b      	movs	r3, r5
 8008318:	4905      	ldr	r1, [pc, #20]	; (8008330 <__assert_func+0x38>)
 800831a:	9402      	str	r4, [sp, #8]
 800831c:	f000 f8e8 	bl	80084f0 <fiprintf>
 8008320:	f000 f9b9 	bl	8008696 <abort>
 8008324:	2000000c 	.word	0x2000000c
 8008328:	08008bc5 	.word	0x08008bc5
 800832c:	08008c00 	.word	0x08008c00
 8008330:	08008bd2 	.word	0x08008bd2

08008334 <_close_r>:
 8008334:	2300      	movs	r3, #0
 8008336:	b570      	push	{r4, r5, r6, lr}
 8008338:	4d06      	ldr	r5, [pc, #24]	; (8008354 <_close_r+0x20>)
 800833a:	0004      	movs	r4, r0
 800833c:	0008      	movs	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7fa fc28 	bl	8002b94 <_close>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d103      	bne.n	8008350 <_close_r+0x1c>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d000      	beq.n	8008350 <_close_r+0x1c>
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	20000398 	.word	0x20000398

08008358 <__sflush_r>:
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	898b      	ldrh	r3, [r1, #12]
 800835c:	0005      	movs	r5, r0
 800835e:	000c      	movs	r4, r1
 8008360:	071a      	lsls	r2, r3, #28
 8008362:	d45f      	bmi.n	8008424 <__sflush_r+0xcc>
 8008364:	684a      	ldr	r2, [r1, #4]
 8008366:	2a00      	cmp	r2, #0
 8008368:	dc04      	bgt.n	8008374 <__sflush_r+0x1c>
 800836a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800836c:	2a00      	cmp	r2, #0
 800836e:	dc01      	bgt.n	8008374 <__sflush_r+0x1c>
 8008370:	2000      	movs	r0, #0
 8008372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008374:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0fa      	beq.n	8008370 <__sflush_r+0x18>
 800837a:	2200      	movs	r2, #0
 800837c:	2180      	movs	r1, #128	; 0x80
 800837e:	682e      	ldr	r6, [r5, #0]
 8008380:	602a      	str	r2, [r5, #0]
 8008382:	001a      	movs	r2, r3
 8008384:	0149      	lsls	r1, r1, #5
 8008386:	400a      	ands	r2, r1
 8008388:	420b      	tst	r3, r1
 800838a:	d034      	beq.n	80083f6 <__sflush_r+0x9e>
 800838c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	075b      	lsls	r3, r3, #29
 8008392:	d506      	bpl.n	80083a2 <__sflush_r+0x4a>
 8008394:	6863      	ldr	r3, [r4, #4]
 8008396:	1ac0      	subs	r0, r0, r3
 8008398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <__sflush_r+0x4a>
 800839e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083a0:	1ac0      	subs	r0, r0, r3
 80083a2:	0002      	movs	r2, r0
 80083a4:	6a21      	ldr	r1, [r4, #32]
 80083a6:	2300      	movs	r3, #0
 80083a8:	0028      	movs	r0, r5
 80083aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083ac:	47b8      	blx	r7
 80083ae:	89a1      	ldrh	r1, [r4, #12]
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d106      	bne.n	80083c2 <__sflush_r+0x6a>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2b1d      	cmp	r3, #29
 80083b8:	d831      	bhi.n	800841e <__sflush_r+0xc6>
 80083ba:	4a2c      	ldr	r2, [pc, #176]	; (800846c <__sflush_r+0x114>)
 80083bc:	40da      	lsrs	r2, r3
 80083be:	07d3      	lsls	r3, r2, #31
 80083c0:	d52d      	bpl.n	800841e <__sflush_r+0xc6>
 80083c2:	2300      	movs	r3, #0
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	04cb      	lsls	r3, r1, #19
 80083cc:	d505      	bpl.n	80083da <__sflush_r+0x82>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d102      	bne.n	80083d8 <__sflush_r+0x80>
 80083d2:	682b      	ldr	r3, [r5, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d100      	bne.n	80083da <__sflush_r+0x82>
 80083d8:	6560      	str	r0, [r4, #84]	; 0x54
 80083da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083dc:	602e      	str	r6, [r5, #0]
 80083de:	2900      	cmp	r1, #0
 80083e0:	d0c6      	beq.n	8008370 <__sflush_r+0x18>
 80083e2:	0023      	movs	r3, r4
 80083e4:	3344      	adds	r3, #68	; 0x44
 80083e6:	4299      	cmp	r1, r3
 80083e8:	d002      	beq.n	80083f0 <__sflush_r+0x98>
 80083ea:	0028      	movs	r0, r5
 80083ec:	f7ff fc00 	bl	8007bf0 <_free_r>
 80083f0:	2000      	movs	r0, #0
 80083f2:	6360      	str	r0, [r4, #52]	; 0x34
 80083f4:	e7bd      	b.n	8008372 <__sflush_r+0x1a>
 80083f6:	2301      	movs	r3, #1
 80083f8:	0028      	movs	r0, r5
 80083fa:	6a21      	ldr	r1, [r4, #32]
 80083fc:	47b8      	blx	r7
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d1c5      	bne.n	800838e <__sflush_r+0x36>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0c2      	beq.n	800838e <__sflush_r+0x36>
 8008408:	2b1d      	cmp	r3, #29
 800840a:	d001      	beq.n	8008410 <__sflush_r+0xb8>
 800840c:	2b16      	cmp	r3, #22
 800840e:	d101      	bne.n	8008414 <__sflush_r+0xbc>
 8008410:	602e      	str	r6, [r5, #0]
 8008412:	e7ad      	b.n	8008370 <__sflush_r+0x18>
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	89a2      	ldrh	r2, [r4, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	e7a9      	b.n	8008372 <__sflush_r+0x1a>
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	430b      	orrs	r3, r1
 8008422:	e7fa      	b.n	800841a <__sflush_r+0xc2>
 8008424:	690f      	ldr	r7, [r1, #16]
 8008426:	2f00      	cmp	r7, #0
 8008428:	d0a2      	beq.n	8008370 <__sflush_r+0x18>
 800842a:	680a      	ldr	r2, [r1, #0]
 800842c:	600f      	str	r7, [r1, #0]
 800842e:	1bd2      	subs	r2, r2, r7
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	079b      	lsls	r3, r3, #30
 8008436:	d100      	bne.n	800843a <__sflush_r+0xe2>
 8008438:	694a      	ldr	r2, [r1, #20]
 800843a:	60a2      	str	r2, [r4, #8]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dc00      	bgt.n	8008444 <__sflush_r+0xec>
 8008442:	e795      	b.n	8008370 <__sflush_r+0x18>
 8008444:	003a      	movs	r2, r7
 8008446:	0028      	movs	r0, r5
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	6a21      	ldr	r1, [r4, #32]
 800844c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800844e:	47b0      	blx	r6
 8008450:	2800      	cmp	r0, #0
 8008452:	dc06      	bgt.n	8008462 <__sflush_r+0x10a>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	2001      	movs	r0, #1
 8008458:	89a2      	ldrh	r2, [r4, #12]
 800845a:	4240      	negs	r0, r0
 800845c:	4313      	orrs	r3, r2
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	e787      	b.n	8008372 <__sflush_r+0x1a>
 8008462:	9b01      	ldr	r3, [sp, #4]
 8008464:	183f      	adds	r7, r7, r0
 8008466:	1a1b      	subs	r3, r3, r0
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	e7e7      	b.n	800843c <__sflush_r+0xe4>
 800846c:	20400001 	.word	0x20400001

08008470 <_fflush_r>:
 8008470:	690b      	ldr	r3, [r1, #16]
 8008472:	b570      	push	{r4, r5, r6, lr}
 8008474:	0005      	movs	r5, r0
 8008476:	000c      	movs	r4, r1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <_fflush_r+0x12>
 800847c:	2500      	movs	r5, #0
 800847e:	0028      	movs	r0, r5
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	2800      	cmp	r0, #0
 8008484:	d004      	beq.n	8008490 <_fflush_r+0x20>
 8008486:	6983      	ldr	r3, [r0, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <_fflush_r+0x20>
 800848c:	f7fe ff22 	bl	80072d4 <__sinit>
 8008490:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <_fflush_r+0x74>)
 8008492:	429c      	cmp	r4, r3
 8008494:	d11b      	bne.n	80084ce <_fflush_r+0x5e>
 8008496:	686c      	ldr	r4, [r5, #4]
 8008498:	220c      	movs	r2, #12
 800849a:	5ea3      	ldrsh	r3, [r4, r2]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d0ed      	beq.n	800847c <_fflush_r+0xc>
 80084a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084a2:	07d2      	lsls	r2, r2, #31
 80084a4:	d404      	bmi.n	80084b0 <_fflush_r+0x40>
 80084a6:	059b      	lsls	r3, r3, #22
 80084a8:	d402      	bmi.n	80084b0 <_fflush_r+0x40>
 80084aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ac:	f7fe ffb7 	bl	800741e <__retarget_lock_acquire_recursive>
 80084b0:	0028      	movs	r0, r5
 80084b2:	0021      	movs	r1, r4
 80084b4:	f7ff ff50 	bl	8008358 <__sflush_r>
 80084b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ba:	0005      	movs	r5, r0
 80084bc:	07db      	lsls	r3, r3, #31
 80084be:	d4de      	bmi.n	800847e <_fflush_r+0xe>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	059b      	lsls	r3, r3, #22
 80084c4:	d4db      	bmi.n	800847e <_fflush_r+0xe>
 80084c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c8:	f7fe ffaa 	bl	8007420 <__retarget_lock_release_recursive>
 80084cc:	e7d7      	b.n	800847e <_fflush_r+0xe>
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <_fflush_r+0x78>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	d101      	bne.n	80084d8 <_fflush_r+0x68>
 80084d4:	68ac      	ldr	r4, [r5, #8]
 80084d6:	e7df      	b.n	8008498 <_fflush_r+0x28>
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <_fflush_r+0x7c>)
 80084da:	429c      	cmp	r4, r3
 80084dc:	d1dc      	bne.n	8008498 <_fflush_r+0x28>
 80084de:	68ec      	ldr	r4, [r5, #12]
 80084e0:	e7da      	b.n	8008498 <_fflush_r+0x28>
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	08008a18 	.word	0x08008a18
 80084e8:	08008a38 	.word	0x08008a38
 80084ec:	080089f8 	.word	0x080089f8

080084f0 <fiprintf>:
 80084f0:	b40e      	push	{r1, r2, r3}
 80084f2:	b503      	push	{r0, r1, lr}
 80084f4:	0001      	movs	r1, r0
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	4804      	ldr	r0, [pc, #16]	; (800850c <fiprintf+0x1c>)
 80084fa:	cb04      	ldmia	r3!, {r2}
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	f7ff fc80 	bl	8007e04 <_vfiprintf_r>
 8008504:	b002      	add	sp, #8
 8008506:	bc08      	pop	{r3}
 8008508:	b003      	add	sp, #12
 800850a:	4718      	bx	r3
 800850c:	2000000c 	.word	0x2000000c

08008510 <_lseek_r>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	0004      	movs	r4, r0
 8008514:	0008      	movs	r0, r1
 8008516:	0011      	movs	r1, r2
 8008518:	001a      	movs	r2, r3
 800851a:	2300      	movs	r3, #0
 800851c:	4d05      	ldr	r5, [pc, #20]	; (8008534 <_lseek_r+0x24>)
 800851e:	602b      	str	r3, [r5, #0]
 8008520:	f7fa fb59 	bl	8002bd6 <_lseek>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d103      	bne.n	8008530 <_lseek_r+0x20>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d000      	beq.n	8008530 <_lseek_r+0x20>
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	bd70      	pop	{r4, r5, r6, pc}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	20000398 	.word	0x20000398

08008538 <__swhatbuf_r>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	000e      	movs	r6, r1
 800853c:	001d      	movs	r5, r3
 800853e:	230e      	movs	r3, #14
 8008540:	5ec9      	ldrsh	r1, [r1, r3]
 8008542:	0014      	movs	r4, r2
 8008544:	b096      	sub	sp, #88	; 0x58
 8008546:	2900      	cmp	r1, #0
 8008548:	da08      	bge.n	800855c <__swhatbuf_r+0x24>
 800854a:	220c      	movs	r2, #12
 800854c:	5eb3      	ldrsh	r3, [r6, r2]
 800854e:	2200      	movs	r2, #0
 8008550:	602a      	str	r2, [r5, #0]
 8008552:	061b      	lsls	r3, r3, #24
 8008554:	d411      	bmi.n	800857a <__swhatbuf_r+0x42>
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	e00f      	b.n	800857c <__swhatbuf_r+0x44>
 800855c:	466a      	mov	r2, sp
 800855e:	f000 f8a1 	bl	80086a4 <_fstat_r>
 8008562:	2800      	cmp	r0, #0
 8008564:	dbf1      	blt.n	800854a <__swhatbuf_r+0x12>
 8008566:	23f0      	movs	r3, #240	; 0xf0
 8008568:	9901      	ldr	r1, [sp, #4]
 800856a:	021b      	lsls	r3, r3, #8
 800856c:	4019      	ands	r1, r3
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <__swhatbuf_r+0x4c>)
 8008570:	18c9      	adds	r1, r1, r3
 8008572:	424b      	negs	r3, r1
 8008574:	4159      	adcs	r1, r3
 8008576:	6029      	str	r1, [r5, #0]
 8008578:	e7ed      	b.n	8008556 <__swhatbuf_r+0x1e>
 800857a:	2340      	movs	r3, #64	; 0x40
 800857c:	2000      	movs	r0, #0
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	b016      	add	sp, #88	; 0x58
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	ffffe000 	.word	0xffffe000

08008588 <__smakebuf_r>:
 8008588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800858a:	2602      	movs	r6, #2
 800858c:	898b      	ldrh	r3, [r1, #12]
 800858e:	0005      	movs	r5, r0
 8008590:	000c      	movs	r4, r1
 8008592:	4233      	tst	r3, r6
 8008594:	d006      	beq.n	80085a4 <__smakebuf_r+0x1c>
 8008596:	0023      	movs	r3, r4
 8008598:	3347      	adds	r3, #71	; 0x47
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2301      	movs	r3, #1
 80085a0:	6163      	str	r3, [r4, #20]
 80085a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80085a4:	466a      	mov	r2, sp
 80085a6:	ab01      	add	r3, sp, #4
 80085a8:	f7ff ffc6 	bl	8008538 <__swhatbuf_r>
 80085ac:	9900      	ldr	r1, [sp, #0]
 80085ae:	0007      	movs	r7, r0
 80085b0:	0028      	movs	r0, r5
 80085b2:	f7ff fb89 	bl	8007cc8 <_malloc_r>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d108      	bne.n	80085cc <__smakebuf_r+0x44>
 80085ba:	220c      	movs	r2, #12
 80085bc:	5ea3      	ldrsh	r3, [r4, r2]
 80085be:	059a      	lsls	r2, r3, #22
 80085c0:	d4ef      	bmi.n	80085a2 <__smakebuf_r+0x1a>
 80085c2:	2203      	movs	r2, #3
 80085c4:	4393      	bics	r3, r2
 80085c6:	431e      	orrs	r6, r3
 80085c8:	81a6      	strh	r6, [r4, #12]
 80085ca:	e7e4      	b.n	8008596 <__smakebuf_r+0xe>
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <__smakebuf_r+0x84>)
 80085ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80085d0:	2380      	movs	r3, #128	; 0x80
 80085d2:	89a2      	ldrh	r2, [r4, #12]
 80085d4:	6020      	str	r0, [r4, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	6120      	str	r0, [r4, #16]
 80085de:	6163      	str	r3, [r4, #20]
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <__smakebuf_r+0x7a>
 80085e6:	0028      	movs	r0, r5
 80085e8:	230e      	movs	r3, #14
 80085ea:	5ee1      	ldrsh	r1, [r4, r3]
 80085ec:	f000 f86c 	bl	80086c8 <_isatty_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d006      	beq.n	8008602 <__smakebuf_r+0x7a>
 80085f4:	2203      	movs	r2, #3
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	4393      	bics	r3, r2
 80085fa:	001a      	movs	r2, r3
 80085fc:	2301      	movs	r3, #1
 80085fe:	4313      	orrs	r3, r2
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	89a0      	ldrh	r0, [r4, #12]
 8008604:	4307      	orrs	r7, r0
 8008606:	81a7      	strh	r7, [r4, #12]
 8008608:	e7cb      	b.n	80085a2 <__smakebuf_r+0x1a>
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	08007259 	.word	0x08007259

08008610 <__ascii_mbtowc>:
 8008610:	b082      	sub	sp, #8
 8008612:	2900      	cmp	r1, #0
 8008614:	d100      	bne.n	8008618 <__ascii_mbtowc+0x8>
 8008616:	a901      	add	r1, sp, #4
 8008618:	1e10      	subs	r0, r2, #0
 800861a:	d006      	beq.n	800862a <__ascii_mbtowc+0x1a>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <__ascii_mbtowc+0x1e>
 8008620:	7813      	ldrb	r3, [r2, #0]
 8008622:	600b      	str	r3, [r1, #0]
 8008624:	7810      	ldrb	r0, [r2, #0]
 8008626:	1e43      	subs	r3, r0, #1
 8008628:	4198      	sbcs	r0, r3
 800862a:	b002      	add	sp, #8
 800862c:	4770      	bx	lr
 800862e:	2002      	movs	r0, #2
 8008630:	4240      	negs	r0, r0
 8008632:	e7fa      	b.n	800862a <__ascii_mbtowc+0x1a>

08008634 <__malloc_lock>:
 8008634:	b510      	push	{r4, lr}
 8008636:	4802      	ldr	r0, [pc, #8]	; (8008640 <__malloc_lock+0xc>)
 8008638:	f7fe fef1 	bl	800741e <__retarget_lock_acquire_recursive>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	2000038c 	.word	0x2000038c

08008644 <__malloc_unlock>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4802      	ldr	r0, [pc, #8]	; (8008650 <__malloc_unlock+0xc>)
 8008648:	f7fe feea 	bl	8007420 <__retarget_lock_release_recursive>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	2000038c 	.word	0x2000038c

08008654 <_read_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	0004      	movs	r4, r0
 8008658:	0008      	movs	r0, r1
 800865a:	0011      	movs	r1, r2
 800865c:	001a      	movs	r2, r3
 800865e:	2300      	movs	r3, #0
 8008660:	4d05      	ldr	r5, [pc, #20]	; (8008678 <_read_r+0x24>)
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7fa fa5d 	bl	8002b22 <_read>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d103      	bne.n	8008674 <_read_r+0x20>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d000      	beq.n	8008674 <_read_r+0x20>
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	20000398 	.word	0x20000398

0800867c <__ascii_wctomb>:
 800867c:	0003      	movs	r3, r0
 800867e:	1e08      	subs	r0, r1, #0
 8008680:	d005      	beq.n	800868e <__ascii_wctomb+0x12>
 8008682:	2aff      	cmp	r2, #255	; 0xff
 8008684:	d904      	bls.n	8008690 <__ascii_wctomb+0x14>
 8008686:	228a      	movs	r2, #138	; 0x8a
 8008688:	2001      	movs	r0, #1
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	4240      	negs	r0, r0
 800868e:	4770      	bx	lr
 8008690:	2001      	movs	r0, #1
 8008692:	700a      	strb	r2, [r1, #0]
 8008694:	e7fb      	b.n	800868e <__ascii_wctomb+0x12>

08008696 <abort>:
 8008696:	2006      	movs	r0, #6
 8008698:	b510      	push	{r4, lr}
 800869a:	f000 f851 	bl	8008740 <raise>
 800869e:	2001      	movs	r0, #1
 80086a0:	f7fa fa33 	bl	8002b0a <_exit>

080086a4 <_fstat_r>:
 80086a4:	2300      	movs	r3, #0
 80086a6:	b570      	push	{r4, r5, r6, lr}
 80086a8:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_fstat_r+0x20>)
 80086aa:	0004      	movs	r4, r0
 80086ac:	0008      	movs	r0, r1
 80086ae:	0011      	movs	r1, r2
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	f7fa fa79 	bl	8002ba8 <_fstat>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d103      	bne.n	80086c2 <_fstat_r+0x1e>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d000      	beq.n	80086c2 <_fstat_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	20000398 	.word	0x20000398

080086c8 <_isatty_r>:
 80086c8:	2300      	movs	r3, #0
 80086ca:	b570      	push	{r4, r5, r6, lr}
 80086cc:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_isatty_r+0x20>)
 80086ce:	0004      	movs	r4, r0
 80086d0:	0008      	movs	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7fa fa76 	bl	8002bc4 <_isatty>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d103      	bne.n	80086e4 <_isatty_r+0x1c>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d000      	beq.n	80086e4 <_isatty_r+0x1c>
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	46c0      	nop			; (mov r8, r8)
 80086e8:	20000398 	.word	0x20000398

080086ec <_raise_r>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	0004      	movs	r4, r0
 80086f0:	000d      	movs	r5, r1
 80086f2:	291f      	cmp	r1, #31
 80086f4:	d904      	bls.n	8008700 <_raise_r+0x14>
 80086f6:	2316      	movs	r3, #22
 80086f8:	6003      	str	r3, [r0, #0]
 80086fa:	2001      	movs	r0, #1
 80086fc:	4240      	negs	r0, r0
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <_raise_r+0x24>
 8008706:	008a      	lsls	r2, r1, #2
 8008708:	189b      	adds	r3, r3, r2
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	2a00      	cmp	r2, #0
 800870e:	d108      	bne.n	8008722 <_raise_r+0x36>
 8008710:	0020      	movs	r0, r4
 8008712:	f000 f831 	bl	8008778 <_getpid_r>
 8008716:	002a      	movs	r2, r5
 8008718:	0001      	movs	r1, r0
 800871a:	0020      	movs	r0, r4
 800871c:	f000 f81a 	bl	8008754 <_kill_r>
 8008720:	e7ed      	b.n	80086fe <_raise_r+0x12>
 8008722:	2000      	movs	r0, #0
 8008724:	2a01      	cmp	r2, #1
 8008726:	d0ea      	beq.n	80086fe <_raise_r+0x12>
 8008728:	1c51      	adds	r1, r2, #1
 800872a:	d103      	bne.n	8008734 <_raise_r+0x48>
 800872c:	2316      	movs	r3, #22
 800872e:	3001      	adds	r0, #1
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	e7e4      	b.n	80086fe <_raise_r+0x12>
 8008734:	2400      	movs	r4, #0
 8008736:	0028      	movs	r0, r5
 8008738:	601c      	str	r4, [r3, #0]
 800873a:	4790      	blx	r2
 800873c:	0020      	movs	r0, r4
 800873e:	e7de      	b.n	80086fe <_raise_r+0x12>

08008740 <raise>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4b03      	ldr	r3, [pc, #12]	; (8008750 <raise+0x10>)
 8008744:	0001      	movs	r1, r0
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	f7ff ffd0 	bl	80086ec <_raise_r>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	2000000c 	.word	0x2000000c

08008754 <_kill_r>:
 8008754:	2300      	movs	r3, #0
 8008756:	b570      	push	{r4, r5, r6, lr}
 8008758:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_kill_r+0x20>)
 800875a:	0004      	movs	r4, r0
 800875c:	0008      	movs	r0, r1
 800875e:	0011      	movs	r1, r2
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	f7fa f9c2 	bl	8002aea <_kill>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	d103      	bne.n	8008772 <_kill_r+0x1e>
 800876a:	682b      	ldr	r3, [r5, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d000      	beq.n	8008772 <_kill_r+0x1e>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	20000398 	.word	0x20000398

08008778 <_getpid_r>:
 8008778:	b510      	push	{r4, lr}
 800877a:	f7fa f9b0 	bl	8002ade <_getpid>
 800877e:	bd10      	pop	{r4, pc}

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
